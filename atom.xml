<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ISJINHAO</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://isjinhao.github.io/"/>
  <updated>2019-12-17T15:07:26.996Z</updated>
  <id>https://isjinhao.github.io/</id>
  
  <author>
    <name>ISJINHAO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存管理</title>
    <link href="https://isjinhao.github.io/posts/39562.html/"/>
    <id>https://isjinhao.github.io/posts/39562.html/</id>
    <published>2019-12-17T11:17:53.000Z</published>
    <updated>2019-12-17T15:07:26.996Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="存储器的层次"><a href="#存储器的层次" class="headerlink" title="存储器的层次"></a>存储器的层次</h2><p>我们都知道存储器的容量和速度是限制计算机发展的一大原因，人们对存储器的要求需要既快又大，但是这样带来的结果就是存储器的造价非常昂贵，所以不可能在计算机中全部配置既快又大的存储器。所以现代的计算机系统中都配置了多层结构的存储器系统来平衡速度差异问题。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/57187fc9-7345-44d6-af47-47ab8b2f4256"></div>存储器一般被分成六层，不过在只有前四层属于内存，所以此篇只介绍前四层。 **主存储器** - 用于保存进程运行时的程序和数据。 - 对于微机系统和大中型机，容量为数十MB到数GB；对于嵌入式系统，容量为数十KB到数MB。 - CPU从主存读取指令和数据。 - CPU与外设交换信息要依托主存。 - 为缓解CPU执行指令速度和主存访问速度的矛盾，引入寄存器和高速缓冲。 **寄存器** - 访问速度做快，完全与CPU协调工作，价格十分昂贵，容量不可能很大。 - 长度一般以字为单位。 - 对于微机系统和大中型机，可能有几十个甚至上百个；对于嵌入式系统，仅有几个到几十个。 **高速缓冲** - 容量大于或远大于寄存器，比内存小两到三个数量级左右，从几十KB到几MB。 - 访问速度快于主存。 - 将主存中经常访问的信息存放在高速缓冲，减少访问主存次数。 **磁盘缓冲** - 将一部分频繁使用的磁盘数据和信息，暂时存放在磁盘缓冲中，减少访问磁盘次数。 - 不是实际存在的存储介质，利用主存的存储空间，暂存从磁盘读出或写入的信息。 总结一下：磁盘缓冲是为了解决内存和外存的速度差异而在内存中开辟的一块用于暂存磁盘数据的存储介质。主存储器是保存进程运行时的程序和数据的。寄存器是和CPU速度匹配的存储器，直接给CPU提供数据。虽然CPU是直接从寄存器去取指令和数据，但是寄存器的数据来源最终还是主存储器，所以为了减少访问CPU的次数，产生了高速缓冲来缓和寄存器和主存储器的矛盾。至于为什么能缓和呢？这是由于[程序局部性原理](https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86/15572003)。 **程序局部性原理** 指程序在执行时呈现出局部性规律，即在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。 局部性原理又表现为：时间局部性和空间局部性。 - 时间局部性：如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。 - 空间局部性：一旦程序访问了某个存储单元，则不久之后。其附近的存储单元也将被访问。 另外，根据程序的局部性理论，Denning提出了工作集理论。所谓工作集是指进程运行时被频繁访问的页面集合。显然我们知道只要使程序的工作集全部集中在内存中，就可以大大减少进程的缺页次数；否则会使进程在运行过程中频繁出现缺页中断，从而出现频繁的页面调入/调出现象，造成系统性能的下降，甚至出现“抖动”。 划分工作集可以按定长时间或定长页面两种方法进行划分。当颠簸现象发生时，说明系统的负荷过大，通常采用处理器均衡调度。另一种是控制缺页率，当缺页率达到上限时，则增加内存分配量；当缺页率达到下限时，就减少内存的分配量。<br>## 程序的装入和链接 用户程序要在系统中运行，必须将它装入内存，其中有三个过程。 - 编译：由编译程序（Complier）将用户源代码编译成若干个目标模块（Object Module）； - 链接：由链接程序（Linker）将编译后形成的目标模块以及它们所需要的库函数，链接在一起，形成一个装入模块（Load Module）； - 装入：由装入程序(Loader)将装入模块装入内存。<br>### 链接 链接程序的功能是将经过编译后得到的一组目标模块以及它们所需要的库函数，装配成一个完整的装入模块。 #### 静态链接方式 生成可执行文件时进行链接。主要有两步。 1. 修改相对地址。 2. 变换外部调用符号。 #### 装入时动态链接 目标模块是在装入内存时，边装入边链接的。装入时动态链接方式有以下优点： - 便于修改和更新。 - 便于实现对目标模块的共享。 #### 运行时动态链接 将对某些模块的链接推迟到执行时才执行，即在执行过程中，当发现一个被调用模块尚未装入内存时，立即由OS去找到该模块并将之装入内存， 把它链接到调用者模块上。 凡在执行过程中未被用到的目标模块，都不会被调入内存和被链接到装入模块上，这样不仅可加快程序的装入过程，而且可节省大量的内存空间。<br>### 装入 装入是将一个具有执行资格的模块加载进内存。 #### 绝对装入方式 在可执行文件中指定内存地址，装入时直接定位在上述（即文件中记录的地址）内存地址。逻辑地址和物理地址完全相同。 #### 可重定位装入方式 编译程序所生成的目标模块中采用逻辑地址，根据当前内存情况，将装入模块装入到适当位置。地址映射是在装入模块装入内存时一次性进行的，即是静态重定位。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/828b8bca-cc39-4f95-b638-ac687aed4c82"></div><h4 id="动态运行时装入方式"><a href="#动态运行时装入方式" class="headerlink" title="动态运行时装入方式"></a>动态运行时装入方式</h4><p>静态重定位时程序装入内存后不能移动，而且通常需要占用连续的内存空间。所以与其对应的动态重定位是将地址映射工作推迟到程序真正执行时才进行。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/0dd5a600-9e18-4e30-ac2b-4ed1ae698a76"></div><p><br></p><h3 id="现代计算机运行过程"><a href="#现代计算机运行过程" class="headerlink" title="现代计算机运行过程"></a>现代计算机运行过程</h3><ul><li>预处理<ul><li>把存储在不同文件中的源程序聚合在一起。</li><li>把被称为宏的缩写语句转换为原始语句。</li></ul></li><li>编译：将高级语言翻译成汇编语言或机器语言。</li><li>链接<ul><li>将多个可重定位的机器代码文件（包括库文件）连接到一起。</li><li>解决外部内存地址（一个文件中的代码会引用其他文件中的数据对象或过程，这些数据对象或过程的地址对于此文件来说就是外部地址）问题。</li></ul></li><li>装入<br>确定程序在内中的绝对地址（即修改程序起始地址），将修改后的指令和数据放到内存中适当的位置。</li></ul><p><br></p><h3 id="连续分配存储管理方式"><a href="#连续分配存储管理方式" class="headerlink" title="连续分配存储管理方式"></a>连续分配存储管理方式</h3><p>连续分配是指为一个用户程序分配空间的时候，将所有程序装入到一段连续的物理内存中。在早期（20世纪60-80<br>年代）的操作系统中，这种分配内存的方式曾经被广泛的使用。</p><h4 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h4><p>这是最简单的一种存储管理方式，但只能用于单用户、单任务的操作系统中。内存分为以下两个分区：系统区和用户区。操作系统使用系统区；应用程序装入到用户区，可使用用户区全部空间。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/6832a4fb-0a2c-4580-9d61-53421c11028f"></div><h4 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h4><p>固定分区式分配，是最早使用的一种可运行多道程序的存储管理方式。它将内存空间划分为若干个固定大小的区域，每个分区大小可相同，也可不同。OS占一区，其余每个分区中可以装入一道作业。<br>为了便于内存分配，系统需建立一张分区使用表。当有一用户程序要装入时，从表中找出一个能满足要求的、尚未分配的分区分配给该程序，然后修改分区使用表。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/3dedf899-aaec-438b-8000-1697086bf1d5"></div><h4 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h4><p><strong>数据结构</strong></p><ul><li>空闲分区表<ul><li>每个空闲分区占用一个表项。</li><li>分区表的表项中包含分区号、分区始址及分区大小等表目。</li><li>表长不易确定。</li><li>占用额外内存。</li></ul></li><li>空闲分区链表<ul><li>利用各空闲分区自身的单元组成双向链表。</li><li>操作速度较慢。</li></ul></li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/50d0b9cb-d452-4651-be2f-ec582dcbf9a3"></div><p><strong>分区分配</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/f97ae2b8-f686-472d-b570-dd787528f453"></div><p><strong>分区回收</strong></p><ul><li>如果回收区的前后有空闲区，可分为图示三种情况。回收时将空闲区和回收区合并。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/903e731f-002e-47b0-8bd7-6a8fa4ece434"></div>- 如果回收区的前后无空闲区，新建一个表项，填写信息插入。 #### 分区检索算法 **顺序检索算法** - 首次适应算法：按各空闲分区首址的升序的方法组织，分配时，按空闲分区表（或空闲分区链）的先后次序，从头查找，找到符合要求的第一个分区。 - 循环首次适应算法：分配空闲空间时，不是从链首（或表头）开始查找，而是从上次找到的空闲分区的下一个空闲分区开始查找。 - 最佳适应算法：按空闲区大小的升序方法组织，分配时，按空闲分区表（或空闲分区链）的先后次序，从 头查找，找到符合要求的第一个分区。就说明它是最适合的（即最佳的）。 - 最坏适应算法：按空闲区大小的降序方法组织，分配时总是取空闲分区表（或空闲分区链）中的第一项， 若大小不能满足申请者的要求，则表示系统中无满足要求的空闲区，分配失败；否则分配。 **索引检索算法** - 快速适应算法：将空闲分区根据其容量大小进行分类，对于每一类具有相同容量的所有空闲分区，单独设立一个空闲分区链表，同时在内存中设立一张管理索引表，该表的每一个表项对应一种空闲分区类型，并记录其表头指针。空闲分区的分类是根据进程常用的空间大小进行划分，对于其他大小的分区，可以放在一个特殊的空闲区链表中。 - 伙伴系统：分区大小均为2的K次幂。假设系统可利用空间容量为$2^m$个字，系统运行过程中，不断划分，将空闲分区根据大小分类。为长度为n的进程分配分区时，首先计算$i$值使得$2^{i-1}≦n≦2^i$。先找大小为$2^i$的分区分配，否则找大小为$2^{i+1}$的分区分配，把$2^{i+1}$分区分成两个$2^i$分区（互称伙伴），一个分配，另一个加入$2^i$的空闲分区链表。分配可能经过多次分割，回收可能进行多次合并。 - 哈希算法：根据空闲分区在可利用空闲区表中的分布规律，建立哈希函数，构造一张以空闲分区大小为关键字的哈希表，该表的每一个表项记录了一个对应的空闲分区链表表头指针。当进行空闲分区分配时，根据所需空闲分区大小，通过哈希函数计算，即得到在哈希表中的位置，从中得到相应的空闲分区链表，实现最近分配策略。 #### 紧凑 可变式分区也有零头问题。在系统不断地分配和回收中，必定会出现一些不连续的小的空闲区，称为外零头。虽然可能所有零头的总和超过某一个作业的要求，但是由于不连续而无法分配。解决零头的方法是拼接（或称紧凑），即向一个方向（例如向低地址端）移动已分配的作业，使那些零散的小空闲区在另一方向连成一片。分区的拼接技术，一方面是要求能够对作业进行重定位，另一方面系统在拼接时要耗费较多的时间。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/14408d45-b0be-4d64-96a0-7dbca67e8a9c"></div><p><br></p><h2 id="分页存储管理方式"><a href="#分页存储管理方式" class="headerlink" title="分页存储管理方式"></a>分页存储管理方式</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>页面</strong><br>将一个进程的逻辑地址空间分成若干个大小相等的片，称为页面或页。</p><p><strong>物理块</strong><br>把内存空间分成与页面相同大小的若干个存储块，称为（物理）块或页框（frame）。</p><p><strong>页面碎片</strong><br>由于进程的最后一页经常装不满一块而形成了不可利用的碎片，称之为“页内碎片”。</p><p><strong>页面大小</strong><br>每一页可进行编址的地址数目。页面大小应该满足2的n此幂。</p><ul><li>方便计算：如果要将（线性）地址转换为<code>page：offset</code>，则需要将地址除以页面大小，并将整数答案作为页面，将余数作为偏移量。 这是使用编程语言中的整数除法和模数运算符完成的。 计算机将地址表示为数字，存储为二进制位。 这是一个示例地址：<code>12</code>是二进制<code>1100</code>。 如果页面大小为<code>3</code>，那么我们需要计算<code>12/3</code>和<code>12%3</code>来查找页面和偏移量（分别为<code>4</code>、<code>0</code>）。 但是，如果页面大小为<code>4</code>（<code>2</code>的幂），则二进制中的<code>4</code>为<code>100</code>，此时使用特殊的“快捷方式”计算整数除法和模数：右移进行除法，按位与进行取模。所以： <code>12/4 == 12&gt;&gt;2</code>（右移两位） <code>12%4 == 12&amp;(4-1)</code>（<code>1100</code>和<code>11</code>按位与）。同时页面大小转为2进制可以使用左移，可以减小时间开销。</li><li>充分利用空间：如果页面大小不满足2的n次幂，假如是5，则页内偏移地址，采用2位则每页有一个地址不能使用，采用3位则<code>111</code>、<code>110</code>、<code>101</code>未被使用。怎么做都不能完全利用地址空间。</li></ul><p><strong>逻辑地址</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/59533072-5531-4107-b7c6-5f20e3bc7e61"></div><p><strong>页表</strong><br>系统为每个进程建一张页表，其在内存的起始地址和长度记录在该进程的PCB中。页表的每一行是一个页表项。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/afba25ae-a6a3-49e5-b02e-8232928d59bd"></div><p><strong>页表项长度</strong><br>每个页表项占用的编址个数。从逻辑地址那里我们可以看到页号占用了20位，对应的块号也要占用20位，当然块号本身可能不止$2^{20}$个。又由于为了控制对物理块的读写等操作，会在页表项中加上控制字段。如果内存按字节编址，即每个编址可以存储8个二进制位，那么页表项占用的二进制位总数大于内存的字长度。我们需要把一个页表项拆开存放在多个编址后的空间中。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a1fad94a-ee4e-4421-97e1-eb7004253ca0" style="width:80%"></div><p><br></p><h3 id="地址变换"><a href="#地址变换" class="headerlink" title="地址变换"></a>地址变换</h3><h4 id="普通地址变换"><a href="#普通地址变换" class="headerlink" title="普通地址变换"></a>普通地址变换</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/7dac4487-37f0-436c-a5b6-7d59d47be7b6"></div>$物理地址=块号+块内地址=F(逻辑地址的页号*页表项长度+页表始址)+业内地址$。 每次进行地址变换需要访问两次内存，内存速度较慢，所以影响计算机整体性能。 #### 具有快表的地址变换 根据程序局部性原理，把最近使用的页表项存放在快表中，下次再进行地址变换时先去快表中查找对应项，如果没找到再去内存中查找，然后把新找到的页表项存放在快表中，如果快表已满，采用某种算法淘汰一份。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/4d110b83-5a36-468b-a971-57a6b99da83a"></div><h4 id="有效访问时间"><a href="#有效访问时间" class="headerlink" title="有效访问时间"></a>有效访问时间</h4><p>设t是访问内存的时间，a是快表命中率，λ是查找快表所需的时间。</p><ul><li>普通地址变换时间：<code>t+t</code></li><li>具有快表的地址变换时间：$ a \ast \lambda + (1-a) \ast (t+\lambda)$。</li></ul><h4 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h4><p>对于两级页表，是将页表再进行分页，页面的大小与内存物理块的大小相同。逻辑地址结构可描述如下：</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/9be850db-8e21-4a1d-8dbe-4a8d76194017"></div><p><strong>两级页表地址变换</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/3ec51dd1-5b26-4d98-bfb5-18d567e4c164"></div>可推广至N级页表。 #### 反置页表 页表是按每个进程的页号排序，指示出物理块号的位置，反置页表是按物理块号排序，指示出每个页隶属的进程和页号。 此方法需要为每个进程创建一个外部页表，即将页表建立在外存中。进程进行地址变换时先从反置页表里查找，如果查找不到则去外村中查找，再将查找到的页表项调入内存。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/3984a943-8925-44e0-b30d-b9aace27fe66"></div><p><br></p><h2 id="分段存储管理方式"><a href="#分段存储管理方式" class="headerlink" title="分段存储管理方式"></a>分段存储管理方式</h2><p>之前的分区管理都是为了更好的利用内存。为了满足程序员在编程上的要求引入了分段管理方式。</p><p><strong>方便编程</strong><br>通常，用户把自己的作业按照逻辑关系划分为若干个段，每个段都是从0开始编址，并有自己的名字和长度。因此，希望要访问的逻辑地址是由段名（段号）和段内偏移量（段内地址）决定的。例如，下述的两条指令便是使用段名和段内地址：其中，前一条指令的含义是将分段A中D单元内的值读入寄存器1；后一条指令的含义是将寄存器1的内容存入B分段的C单元中。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOAD 1，[A] |〈D〉；</span><br><span class="line">STORE 1，[B] |〈C〉；</span><br></pre></td></tr></table></figure><p></p><p><strong>信息共享</strong><br>在实现对程序和数据的共享时，是以信息的逻辑单位为基础的。比如，共享某个例程和函数。分页系统中的“页”只是存放信息的物理单位（块），并无完整的意义，不便于实现共享；然而段却是信息的逻辑单位。由此可知，为了实现段的共享，希望存储管理能与用户程序分段的组织方式相适应。</p><p><strong>信息保护</strong><br>信息保护同样是对信息的逻辑单位进行保护，因此，分段管理方式能更有效和方便地实现信息保护功能。</p><p><strong>动态增长</strong><br>在实际应用中，往往有些段，特别是数据段，在使用过程中会不断地增长，而事先又无法确切地知道数据段会增长到多大。前述的其它几种存储管理方式，都难以应付这种动态增长的情况，而分段存储管理方式却能较好地解决这一问题。</p><p><strong>动态链接</strong><br>动态链接是指在作业运行之前，并不把几个目标程序段链接起来。要运行时，先将主程序所对应的目标程序装入内存并启动运行，当运行过程中又需要调用某段时，才将该段（目标程序）调入内存并进行链接。可见，动态链接也要求以段作为管理的单位。</p><p><br></p><h3 id="分段地址"><a href="#分段地址" class="headerlink" title="分段地址"></a>分段地址</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/4a8347b6-2f86-4db6-99a4-7c8100267182"></div><h4 id="段表"><a href="#段表" class="headerlink" title="段表"></a>段表</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/0d0640e3-74c5-4d3d-8541-171c13c8e495"></div><h4 id="地址映射"><a href="#地址映射" class="headerlink" title="地址映射"></a>地址映射</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e9f3f706-b819-440d-b3a4-f69756e1b5f7"></div><h4 id="地址变换-1"><a href="#地址变换-1" class="headerlink" title="地址变换"></a>地址变换</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/374a427d-4223-4e49-88e4-eb5563dd9fd4"></div><h4 id="分页和分段的主要区别"><a href="#分页和分段的主要区别" class="headerlink" title="分页和分段的主要区别"></a>分页和分段的主要区别</h4><ul><li>页是信息的物理单位，段则是信息的逻辑单位；</li><li>页的的大小固定且由系统决定，而段的长度不固定，由用户所编写的程序决定；</li><li>分页的地址空间是一维的，而分段的地址空间是二维的。</li><li>分页是系统管理的需要；分段是为了更好满足用户的需要。</li></ul><p><br></p><h2 id="段页式存储管理方式"><a href="#段页式存储管理方式" class="headerlink" title="段页式存储管理方式"></a>段页式存储管理方式</h2><p>分段结构具有逻辑上清晰的优点，但它的一个致命弱点是每个段必须占据主存储器的连续区域，于是，要装入一个分段时可能要移动已在主存储器中的信息，为了克服这个缺点，可兼用分段和分页的方法，构成段页式存储管理。每个作业仍按逻辑分段，但对每一段不是按单一的连续整体存放到存储器中，而是把每个段再分成若干个页面，每一段不必占据连续的主存空间，可把它按页存放在不连续的主存块中。</p><p><br></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>逻辑地址空间分段，段内分页，内存分块（页框），存储管理的分配单位是：物理块（页框）</li><li>地址结构：段号，页号，页内偏移地址。</li><li>每个作业一张段表，每段一张页表。地址变换：先查段表，再查该段的页表。</li></ul><p><br></p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/d4ab1762-e6c8-4a13-8eea-e841c471df50"></div><p><br></p><h3 id="地址变换机构"><a href="#地址变换机构" class="headerlink" title="地址变换机构"></a>地址变换机构</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/aaacf025-9204-4019-9bdc-18399f121b3a"></div><p><br></p><h2 id="传统存储器的问题"><a href="#传统存储器的问题" class="headerlink" title="传统存储器的问题"></a>传统存储器的问题</h2><p>传统的内存管理方式要求将一个作业全部装入内存才可以运行，由此造成了以下两种情况：</p><ul><li>大作业对内存的要求超出物理内存总容量，致使其无法运行。</li><li>内存由于容量的限制，只能装入少量的作业使其运行，而其它大量作业留在外存。</li></ul><p><br></p><h3 id="解决原理"><a href="#解决原理" class="headerlink" title="解决原理"></a>解决原理</h3><h4 id="程序局部性原理"><a href="#程序局部性原理" class="headerlink" title="程序局部性原理"></a>程序局部性原理</h4><ol><li>程序执行时， 除了少部分的转移和过程调用指令外，在大多数情况下仍是顺序执行的。</li><li>过程调用将会使程序的执行轨迹由一部分区域转至另一部分区域， 但经研究看出，过程调用的深度在大多数情况下都不超过5。</li><li>程序中存在许多循环结构， 这些虽然只由少数指令构成， 但是它们将多次执行。</li><li>程序中还包括许多对数据结构的处理， 如对数组进行操作， 它们往往都局限于很小的范围内。</li></ol><p><strong>表现两个方面</strong></p><ol><li>时间局限性。如果程序中的某条指令一旦执行， 则不久以后该指令可能再次执行；如果某数据被访问过， 则不久以后该数据可能再次被访问。产生时间局限性的典型原因，是由于在程序中存在着大量的循环。</li><li>空间局限性。一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，其典型情况便是程序的顺序执行。</li></ol><p><strong>基于局部性原理</strong><br>在程序装入时，不必将其全部读入到内存，而只需将当前需要执行的部分页或段读入到内存，就可让程序开始执行。在程序执行过程中，如果需执行的指令或访问的数据尚未在内存（称为缺页或缺段），则由处理器通知操作系统，将相应的页或段调入到内存，然后继续执行程序。</p><p><br></p><h3 id="虚拟存储器定义"><a href="#虚拟存储器定义" class="headerlink" title="虚拟存储器定义"></a>虚拟存储器定义</h3><p>所谓虚拟存储器， 是指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统。其逻辑容量由内存容量和外存容量之和所决定，其运行速度接近于内存速度，而每位的成本却又接近于外存。可见，虚拟存储技术是一种性能非常优越的存储器管理技术，故被广泛地应用于大、 中、 小型机器和微型机中。</p><p><br></p><h3 id="实现虚拟存储器的条件"><a href="#实现虚拟存储器的条件" class="headerlink" title="实现虚拟存储器的条件"></a>实现虚拟存储器的条件</h3><p>由于一个作业被分成多次地调入内存运行，所以在内存分配时必须采用离散分配方式。同时需要解决以下问题：</p><ul><li>页表（段表）的设计（软件支持）</li><li>程序不在内存时去外存调度需要中断（硬件支持）</li><li>逻辑地址转换为物理地址（软件硬件支持）</li><li>如何给每个进程分配物理块</li><li>一个页（段）进入内存时，淘汰哪个页（段）</li></ul><p><br></p><h2 id="请求分页存储管理方式"><a href="#请求分页存储管理方式" class="headerlink" title="请求分页存储管理方式"></a>请求分页存储管理方式</h2><h3 id="页表机制"><a href="#页表机制" class="headerlink" title="页表机制"></a>页表机制</h3><p>用于将用户逻辑地址空间变换为内存的物理地址空间。在页表中增加若干项，以便于标志程序或数据的状态。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/fa041bc8-d719-4aa7-9ba8-4baa6918ac91"></div>- 状态位（存在位）P：表示该页是否调入内存。 - 访问字段A：用于记录该页在某段时间内被访问的次数。 - 修改位M：表示该页在调入内存后是否被修改过。未修改过不必写回外存，修改要写回外存。 - 外存地址：该页在外存上的地址，通常是物理块号。<br>### 缺页中断机构 - 在地址映射过程中，在页表中发现所要访问的页不在内存，则产生缺页中断。操作系统接到此中断信号后，就调出缺页中断处理程序，根据页表中给出的外存地址，将该页调入内存，使进程继续运行下去。 - 如果内存中有空闲块，则分配一页，将新调入页装入内存，并修改页表中相应页表项目的状态位及相应的内存块号。 - 若此时内存中没有空闲块，则要淘汰某页，若该页在内存期间被修改过，则要将其写回外存。 - 缺页中断发生在指令执行期间，而通常情况下，CPU是在一条指令执行完后，才检查是否有中断请求到达；一条指令在执行期间，可能产生多次缺页中断。所以硬件机构应能保存多次中断时的状态，并保证最后能返回到中断前产生缺页中断的指令处，继续执行。<br>### 地址转换机构<div align="center"><img src="http://blogfileqiniu.isjinhao.site/b164ab99-02d0-494b-bb7f-f787c2613fc0"></div><p><br></p><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><h4 id="最小物理块数的确定"><a href="#最小物理块数的确定" class="headerlink" title="最小物理块数的确定"></a>最小物理块数的确定</h4><p>最小物理块数：保证进程正常运行所需的最小物理块数。与计算机的硬件机构有关，取决于指令的格式、功能和寻址方式。</p><h4 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h4><p>在请求分页中，可采取两种分配策略，即固定和可变分配策略。在进行置换时，也可采取两种策略，即全局置<br>换和局部置换（置换范围不同）。于是组合出三种适用的策略：</p><ul><li>固定分配局部置换：分配固定数目的内存空间，在整个运行期间都不改变。如果缺页，则先从该进程在内存的页面中选中一页，进行换出操作，然后再调入一页。</li><li>可变分配全局置换：每个进程预先分配一定数目的物理块，同时OS也保持一个空闲物理块队列。当缺页时，首先将对OS所占有的空闲块进行分配，从而增加了各进程的物理块数。当OS的空闲块全部用完，将引起换出操作。</li><li>可变分配局部置换：系统根据缺页率动态调整各进程占有的物理块数目，使其保持在一个较低的缺页率状态。</li></ul><h4 id="物理块分配算法"><a href="#物理块分配算法" class="headerlink" title="物理块分配算法"></a>物理块分配算法</h4><ul><li>平均分配算法：将系统中所有可供分配的物理块，平均分配给各个进程。</li><li>按比例分配算法：按照进程的大小比例分配物理块。</li><li>考虑优先权的分配算法：为了对于紧迫的作业，能够尽快完成。可以将内存的物理块分成两部分，一部分按照比例分配给各进程，另一部分根据进程优先级，适当增加其相应的份额，分配给各进程。</li></ul><p><br></p><h3 id="页面调入"><a href="#页面调入" class="headerlink" title="页面调入"></a>页面调入</h3><h4 id="何时调入页面"><a href="#何时调入页面" class="headerlink" title="何时调入页面"></a>何时调入页面</h4><ul><li>提前取页：预先装入主存一页或几页（提前页）。</li><li>请求取页：当用到某页而不在主存时即缺页时取页。</li></ul><h4 id="从何处调入页面"><a href="#从何处调入页面" class="headerlink" title="从何处调入页面"></a>从何处调入页面</h4><p>外存有两个部分：文件区和对换区。对换区I/O操作速度比文件区相对快一些，因此一般应当尽量使用对换区来调入页面。对于不同情况，采用不同的策略：</p><ul><li>系统有足够的对换空间：全部从对换区调入。</li><li>系统对换空间不足：未修改的从文件区调入，修改的从对换区调入。</li><li>UNIX的调入方式：未运行过的从文件区调入，运行过的放在对换区，允许页面共享。</li></ul><h4 id="页面调入过程"><a href="#页面调入过程" class="headerlink" title="页面调入过程"></a>页面调入过程</h4><ol><li>进程需要的页面不在内存，引起缺页中断</li><li>中断处理程序保留现场环境，转入缺页中断处理程序</li><li>中断处理程序查找页表，得到对应的外存物理块号。如果内存有空闲，则启动磁盘操作，将所缺的页面读入，并修改页表。否则，到4。</li><li>执行置换算法，选出要换出的页面，如果该页修改过，应将其写入磁盘，然后将所缺页调入内存，修改相应表项，将其存在位置为<code>1</code>，并放入快表。</li><li>利用修改后的页表，形成物理地址，访问内存数据。</li></ol><h4 id="缺页率"><a href="#缺页率" class="headerlink" title="缺页率"></a>缺页率</h4><ul><li>假设进程逻辑空间为n页，系统为其分配物理块数为<code>m</code>。</li><li>如果进程运行过程中，访问页面成功次数为S，访问页面失败次数为F，总页面访问次数<code>A=S+F</code>，则进程运行过程中 缺页率<code>f=F/A</code>。<br>影响缺页率的主要因素：</li><li>页面大小：页面越大，缺页率越小</li><li>进程所分配物理块数：物理块越多，缺页率越小</li><li>页面置换算法：合理的置换算法能更少将页面调入调出</li><li>程序固有特性：比如做循环操作时，缺页率较低，因为执行的命令都是一系列大致相同的指令。</li></ul><p><br></p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><h4 id="最佳置换算法"><a href="#最佳置换算法" class="headerlink" title="最佳置换算法"></a>最佳置换算法</h4><p>所选择的被淘汰页面，将是以后永不使用的， 或许是在最长（未来）时间内不再被访问的页面。采用最佳置换算法，通常可保证获得最低的缺页率。这是一种理想情况，是实际执行中无法预知的，因而不能实现。可用作性能评价的依据。<br>例：假定系统为某进程分配了三个物理块， 并考虑有以下的页面号引用串<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，1，7，0，1</span><br></pre></td></tr></table></figure><p></p><p>进程运行时， 先将7，0，1三个页面装入内存。 以后， 当进程要访问页面2时， 将会产生缺页中断。此时OS根据最佳置换算法， 将选择页面7予以淘汰。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/2979051c-7252-4c91-b6d5-2836841ad7be"></div><h4 id="先进先出页面置换算法"><a href="#先进先出页面置换算法" class="headerlink" title="先进先出页面置换算法"></a>先进先出页面置换算法</h4><p>选择装入最早的页面被置换。可以通过链表来表示各页的建立时间先后。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/6c79128c-993d-4689-8b24-c0ed1222742a"></div><h4 id="最近最久未使用置换算法"><a href="#最近最久未使用置换算法" class="headerlink" title="最近最久未使用置换算法"></a>最近最久未使用置换算法</h4><p>选择内存中最久未使用的页面被置换。这是局部性原理的合理近似，性能接近最佳算法。但由于需要记录页面使用时间的先后关系，硬件开销太大。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/f0576a05-7e3b-4c25-8f85-e23d186f6df5"></div><h5 id="硬件支持"><a href="#硬件支持" class="headerlink" title="硬件支持"></a>硬件支持</h5><p><strong>寄存器</strong><br>每个页面设立移位寄存器：被访问时左边最高位置1，定期右移并且最高位补0，于是寄存器数<br>值最小的是最久未使用页面。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/8781a6ff-ee5c-4bd5-8c39-72bafb68e249"></div><p><strong>栈</strong><br>一个特殊的栈，每当进程访问某页面时，便把被访问的页面移到栈顶，于是栈底的是最久未使用页面。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/deec2ffc-d896-4e78-bcaf-3f1d69815ac7"></div><h4 id="最少使用置换算法"><a href="#最少使用置换算法" class="headerlink" title="最少使用置换算法"></a>最少使用置换算法</h4><p>选择到当前时间为止被访问次数最少的页面被置换。</p><ul><li>实现方法1：每个页面设立移位寄存器：被访问时左边最高位置1，定期右移并且最高位补0，这样，在最近一段时间内时用最少的页面将是$\sum_{R_i}$最小的页。</li><li>实现方法2：每页设置访问计数器，每当页面被访问时，该页面的访问计数器加1；发生缺页中断时，淘汰计数值最小的页面，并将所有计数清零。</li></ul><h4 id="Clock置换算法"><a href="#Clock置换算法" class="headerlink" title="Clock置换算法"></a>Clock置换算法</h4><p>也称最近未使用算法（NRU, Not Recently Used），它是LRU（最近最久未使用算法）和FIFO的折衷。<br>内存中所有页面通过链接指针形成一个循环队列，每页有一个使用访问位，若该页被访问则置1。置换时采用一个指针，从当前指针位置开始按地址先后检查各页，寻找访问位为0的页面作为被置换页。指针经过的访问位为1的页都修改0，最后指针停留在被置换页的下一个页。</p><h4 id="改进Clock置换算法"><a href="#改进Clock置换算法" class="headerlink" title="改进Clock置换算法"></a>改进Clock置换算法</h4><p>由于Clock算法不考虑换出页面时，页面是否修改过的问题。这样在换出的页面如果被修改过的话，则必须做拷回磁盘处理，开销比较大。于是，改进型的Clock算法为每个页又增加了一个修改位。选择页面时，尽量选择既未使用又没有修改的页面。<br>访问位A，修改位M有四种不同情形：</p><ul><li>1类(A=0，M=0）既未访问，又没有修改，最佳淘汰页</li><li>2类(A=0，M=1）未访问，但是有修改，效率低的淘汰页</li><li>3类(A=1，M=0）被访问，但没有修改</li><li>4类(A=1，M=1）既被访问，又有修改<br>算法：</li></ul><ol><li>指针从当前位置开始，开始第一轮扫描循环队列，寻找A=0且M=0的页面，找到则可换出。</li><li>如果找不到，则开始第二轮扫描，寻找A=0且M=1的页面，并且每经过一个页面时，将其访问位A设置为0。如果找到一个第2类页面，则可换出。</li><li>如果仍旧未找到合适的换出页面，则此时指针回到初始位置，且所有页面其访问位A为0。再转回1继续工作。</li></ol><h4 id="页面缓冲算法"><a href="#页面缓冲算法" class="headerlink" title="页面缓冲算法"></a>页面缓冲算法</h4><p>在请求分页系统中，进程在运行的时候经常会发生页面换进换出的情况。而影响换进换出效率的原因如下：</p><ul><li>页面置换算法：好的页面置换算法能使进程运行中具有较低的缺页率，从而可以减少换进换出的开销。</li><li>写会磁盘的频率。</li><li>读入内存的频率。<br>而页面缓存算法就是降低读写磁盘的频率来降低开销。做法如下：</li><li>空闲页面链表：当有一个未被修改的页要换出时，实际上并不将其换出到外存，而是把它们所在的物理块挂在空闲链表的末尾。如果以后某进程请求此页时，便将其从空闲页面链表上取下。</li><li>修改页面链表：和空闲页面链表的功能一样，只是说此链表是存放已修改页面的。<br>当链表上挂有足够多的页面时，将它们一齐写入磁盘，这样可以降低读写磁盘的频率。</li></ul><p><br></p><h3 id="访问内存的有效时间"><a href="#访问内存的有效时间" class="headerlink" title="访问内存的有效时间"></a>访问内存的有效时间</h3><ul><li>被访问页在主存，且相应页表项在快表：$EAT= \lambda +t$<ul><li>查找快表+访问实际物理地址</li></ul></li><li>被访问页在主存，但相应页表项不在快表：$ EAT= \lambda +t + t + \lambda$<ul><li>查找快表+读取页表+读取数据+更新快表</li></ul></li><li>被访问页不在主存：$EAT= \lambda + t + \varepsilon + t + \lambda$<ul><li>查找快表+读取页表+缺页中断处理+读取数据+等新快表</li></ul></li><li>内存的有效访问时间为：$EAT= \lambda + t + (1 - a ) \ast [f \ast ( \varepsilon + \lambda + t)+(1-f) \ast(\lambda+t)]$<ul><li><code>a</code>为命中率，<code>f</code>为缺页率。</li><li>查找快表+访问内存一次+未命中不需要请求缺页访问快表+未命中时不需要请求缺页访问内存+未命中需要请求缺页访问快表+未命中时需要请求缺页访问内存+未命中时需要请求缺页开销。</li></ul></li></ul><p><br></p><h2 id="抖动与工作集"><a href="#抖动与工作集" class="headerlink" title="抖动与工作集"></a>抖动与工作集</h2><h3 id="抖动"><a href="#抖动" class="headerlink" title="抖动"></a>抖动</h3><p>由于只装入一个进程的部分程序和数据便可开始运行，故希望运行更多进程，增加多道程序度。但在多道程序环境下，并不是多道程序的度越高，系统吞吐量越大。当CPU的利用率达到某一峰值后，若继续增加多道程度，将产生“抖动”。<br>抖动是指同时运行进程太多，分配给每个进程物理块太少，进程在运行时频繁缺页，必须请求调页，等待页面调进调出的进程增多，磁盘访问时间急剧增加，进程大部分时间用于页面换进换出，处理机利用率急剧下降并趋于0。</p><p><br></p><h3 id="工作集"><a href="#工作集" class="headerlink" title="工作集"></a>工作集</h3><p>基于程序运行的局部性原理，程序运行时，对页面的访问并不均匀，一段时间仅局限于较少的页面；另一段时间，有可能局限于另一些较少的页面，如果能预知这些页面，并提前调入，将大大减少缺页率工作集，是指在某段时间间隔内，进程实际要访问的页面的集合。为了降低缺页率，应将程序全部工作集装入主存。</p><ul><li>方法：用程序过去某段时间的行为作为程序将来某段时间行为的近似。<br>定义：是指在某段时间间隔内，进程实际要访问的页面的集合。为了降低缺页率，应将程序全部工作集装入主存。</li><li>方法：用程序过去某段时间的行为作为程序将来某段时间行为的近似。<br>工作集$ \omega (t, \Delta) $是二元函数。某进程在时间<code>t</code>的工作集记为$ \omega (t, \Delta) $，其中，$\Delta$为工作集的窗口尺寸。</li></ul><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><ul><li>窗口大小$\Delta$选择得过小，频繁产生缺页中断。</li><li>窗口大小$\Delta$选择得很大，失去了虚拟存储器的意义</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/58a68c04-867c-4616-836b-6442f8dc42dc"></div><p><br></p><h3 id="抖动的预防方法"><a href="#抖动的预防方法" class="headerlink" title="抖动的预防方法"></a>抖动的预防方法</h3><ul><li>采取局部置换策略：仅允许进程在自身范围内进行置换，不影响其他进程</li><li>在CPU调度程序中引入工作集算法：调入新作业时，应该检查每个进程在内存中的驻留集是否足够大</li><li><code>L=S</code>准则：<code>产生缺页的平均时间L=系统处理进程缺页的平均时间S</code></li><li>选择暂停的进程：使某些低优先级的进程进程挂起，从而腾出内存空间</li></ul><p><br></p><h2 id="请求分段存储管理方式"><a href="#请求分段存储管理方式" class="headerlink" title="请求分段存储管理方式"></a>请求分段存储管理方式</h2><ul><li>请求分页系统建立的虚拟存储器，是以页面为单位进行换入、换出操作的。</li><li>在请求分段系统中实现的虚拟存储器，以分段为单位进行换入和换出。</li><li>程序在运行之前，只需要装入必要的若干个分段即可运行。当访问的分段不在内存时，可由OS将所缺少的段调入内存。<br>使用请求分段存储管理方式可以对动态链接有很好的支持。</li></ul><p><br></p><h3 id="请求段表机制"><a href="#请求段表机制" class="headerlink" title="请求段表机制"></a>请求段表机制</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/01222d76-e106-4c18-adc8-d19b9a59e4d6"></div>- 存取方式：标记本段存取属性。如读R，写W，执行X - 访问字段A：记录本段使用的频繁程度 - 修改位：是否在调入内存后做过修改 - 存在位：本段是否装入内存 - 增补位：该段是否动态增长过<br>### 缺段中断机构 要有专门的缺段中断处理程序。特点： - 指令和操作数必定不会跨越在段边界上。 - 由于段的长度是不固定的，处理比缺页系统复杂。 - 调入一个段可能要淘汰几个内存中的段。<br>### 请求中断处理<div align="center"><img src="http://blogfileqiniu.isjinhao.site/e70e650f-81ae-4000-b670-06c210adabd8"></div><p><br></p><h3 id="地址中断机构"><a href="#地址中断机构" class="headerlink" title="地址中断机构"></a>地址中断机构</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/986886e7-0ca3-4c6c-a3ff-02082cee3a70"></div><p><br></p><h3 id="分段的共享与保护"><a href="#分段的共享与保护" class="headerlink" title="分段的共享与保护"></a>分段的共享与保护</h3><h4 id="共享段表"><a href="#共享段表" class="headerlink" title="共享段表"></a>共享段表</h4><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/6ff2d558-015d-4051-848b-74903bb4ef9f"></div><p></p><ul><li>共享进程计数：多少进程在使用此段。</li><li>存取控制手段：每个共享段，应为不同进程赋予不同的存取权限。</li><li>断号：同一个共享段在不同进程那有不同的断号。</li></ul><h4 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h4><p>第一个请求的进程，由系统分配一物理块，调入共享段，设置相关表项信息，并置<code>count=1</code>； 以后的进程，在自己的段表中增加一项，填入共享段的信息，在共享段表项中做<code>count=count+1</code>，填写进程相关信息。</p><h4 id="回收"><a href="#回收" class="headerlink" title="回收"></a>回收</h4><ol><li>做count=count-1；</li><li>若count=0 ，则该共享段被回收。</li></ol><h4 id="分段保护"><a href="#分段保护" class="headerlink" title="分段保护"></a>分段保护</h4><ul><li>越界检查：在进行存储访问时，要将逻辑地址的段号与段表长度进行比较，如果超出则发生越界中断信号；其次，将段内地址与段表中该段的长度进行比较，如果有效才进行转换，否则产生越界中断信号。</li><li>存取控制检查：用于规定对该段的访问权限。通常的访问方式有：<ul><li>读：允许用户对该段/页内任何信息或其副本进行读操作。</li><li>写：允许用户修改该段/页内任何信息直至撤消整个段/页。</li><li>执行：用户可以执行该段/页程序，数据段/页除外。</li><li>增加：用户可在段/页的末尾添加信息，但不允许修改已存在于段/页中的信息。</li></ul></li><li>环保护检查：是一种功能较完善的保护机制。<ul><li>思想：将所有的程序分成不同的级别，分别放置在不同的环上。内环（编号小，在内侧）的程序具有高优先权，外环的程序优先权低。</li><li>操作系统核心安排在0环内；重要程序和操作系统服务安排在中间环；一般应用程序安排在外环。</li><li>一个程序可以直接访问在相同环或低优先级环（比自身相对靠外的环）上的数据。</li><li>一个程序访问高优先级（比自己靠内的环）时，通过系统调用方式实现。</li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;存储器的层次&quot;&gt;&lt;a href=&quot;#存储器的层次&quot; class=&quot;headerlink&quot; title=&quot;存储器的
      
    
    </summary>
    
      <category term="操作系统" scheme="https://isjinhao.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://isjinhao.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>处理机调度</title>
    <link href="https://isjinhao.github.io/posts/42865.html/"/>
    <id>https://isjinhao.github.io/posts/42865.html/</id>
    <published>2019-12-17T11:17:53.000Z</published>
    <updated>2019-12-17T15:07:27.010Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>处理机调度是指通过对处理机资源进程的合理分配来提升系统资源的利用率、降低作业周转时间等。但是由于不同操作系统的目标不同，所以处理机调度的策略和目标也不相同。</p><p><br></p><h3 id="处理机调度的层次"><a href="#处理机调度的层次" class="headerlink" title="处理机调度的层次"></a>处理机调度的层次</h3><ul><li>高级调度：又称作业调度或长程调度。它的主要功能是根据某种算法决定把外存上处于后备队列中的哪些作业调入内存，并为他们创建进程、分配资源等，然后放入就绪进程队列。主要用于批处理系统，分时系统的实时系统中不设置高级调度。</li><li>低级调度：又称进程调度或断层调度。它的主要功能是根据某种算法决定让哪些就绪队列获得处理机，并由分配程序将处理机分配给被选中的进程。在批处理系统、实时系统和分时系统中都设置低级调度。</li><li><p>中级调度：又称内存调度。它的主要功能是根据某种算法决定将哪些暂时不能运行的进程调至外存等待，当它们具备运行条件且内存又有空闲时再调入内存。这实际上是存储器管理中的对换功能，在下一章再展开介绍，</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/38d9944c-3486-467d-ae1e-87a64eaa8e55"></div></li></ul><p><br></p><h3 id="处理机调度的目标"><a href="#处理机调度的目标" class="headerlink" title="处理机调度的目标"></a>处理机调度的目标</h3><p><strong>共同目标</strong></p><ul><li>提升资源利用率：$ CPU的利用率=\frac{CPU有效工作时间}{CPU有效工作时间+CPU空闲等待时间}$。</li><li>公平：每个进程都应获得合理的CPU时间，不发生进程饥饿现象。</li><li>平衡：进程可以分成多个类型，如计算型、I/O型等等。平衡是指系统中不同的设备都能处于忙碌状态。</li><li>策略强制执行：指某些强制型任务，比如安全策略等，即使会造成其他工作的延迟。</li></ul><p><strong>批处理系统的目标</strong></p><ul><li>平均周转时间短：<ul><li>周转时间：从作业进入系统到作业完成退出系统所用的时间。</li><li>平均周转时间：同时参与系统运行的几个作业的周转时间的平均值。$ T=\frac{1}{n}[\sum_{i=1}^NT_i]$</li><li>带权周转时间：作业的周转时间（$ T$）和系统为它提供服务的时间（$T_S$）。$W=\frac{T}{T_s}$</li><li>平均带权周转时间：同时参与系统运行的几个作业的带权周转时间的平均值。$ T=\frac{1}{n}[\sum_{i=1}^NW_i]$</li></ul></li><li>系统吞吐量高：单位时间内系统完成的作业数尽量多。</li><li>处理机利用率高。</li></ul><p><strong>分时系统的目标</strong></p><ul><li>响应时间快：指终端提交一个请求到主机返回结果至终端的时间短。</li><li>均衡：不同请求的复杂度不同，所以响应时间必定不同，均衡是指响应时间应和请求复杂度相适应。</li></ul><p><strong>实时系统的目标</strong></p><ul><li>截止时间的保证：对于HRT任务截止时间必须满足要求，SRT也要尽可能满足。</li><li>可预测性：如在观看电影时一般都会连续播放帧，所以请求是可预测的，假如采用双缓冲实现第<code>i</code>帧和第<code>i+1</code>帧并行处理就能提高实时性。</li></ul><p><br></p><h2 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h2><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><ul><li>作业：比程序更为广泛的概念，不仅包含了通常的程序和数据，还有一份作业说明书。在批处理系统中，是以作业为基本单位从外存调入内存的。</li><li>作业步：在作业运行期间，每个作业都必须经过若干个相对独立。又相互关联的顺序加工步骤才能得到结果。期中每一个加工步骤成为一个作业步。</li></ul><p><br></p><h3 id="作业控制块"><a href="#作业控制块" class="headerlink" title="作业控制块"></a>作业控制块</h3><p>Job Control Block，JCB。是作业在系统中存在的标志。保存了系统对作业进行管理和调度所需的全部信息。如：作业标识、用户名称、用户账号、作业类型（CPU繁忙型、I/O繁忙型、批量型、终端型等）、作业状态、调度信息（优先级、作业运行时间）、资源需求（预计运行时间、要求内存大小等）、已申请到资源的使用情况。</p><p><br></p><h3 id="作业运行的三个阶段"><a href="#作业运行的三个阶段" class="headerlink" title="作业运行的三个阶段"></a>作业运行的三个阶段</h3><ul><li>收容阶段：每一个作业进入系统时（即输入到硬盘），便由“作业注册”程序为该作业建立一个作业控制块JCB并把它放入作业后备队列中。</li><li>运行阶段：后备队列中的作业被选中后，系统会为其分配必要的资源和建立进程，然后将其放入就绪队列。一个作业从第一次进入就绪状态开始到它运行结束前都是处于运行阶段。</li><li><p>完成阶段：当作业完成或发生异常而终止时，作业便处于完成阶段，此时系统会撤销进程和资源，并将运行结果通过某种方式输入，如输出到文件中。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/5514dcb1-1977-4326-8f23-8c3ca9ce19f4"></div></li></ul><p><br></p><h3 id="先来先服务算法"><a href="#先来先服务算法" class="headerlink" title="先来先服务算法"></a>先来先服务算法</h3><p>First-Come First-served，FCFS。每次调度都是选择一个或多个最先进入队列的作业或进程，为它们分配资源，创建进程和分配CPU，使之投入运行。它是最简单的调度算法，同时也可用于进程调度。效率不高，所以一般不作为主调度算法。<br>适用于CPU繁忙型而不适用于I/O繁忙型。因为CPU繁忙型长时间占用CPU很少有I/O操作，一旦获得CPU，就会运行很长时间，就是会长时间占用CPU，而I/O繁忙型由于要频繁访问IO端口，每次访问都要放弃CPU，等I/O访问完后要重新等待下一次调度（此时排到了就绪队列的队尾），所以要等待很久才能重新被调度。因此先来先服务有利于CPU繁忙型而不利于I/O繁忙型。</p><p><br></p><h3 id="短作业优先算法"><a href="#短作业优先算法" class="headerlink" title="短作业优先算法"></a>短作业优先算法</h3><p>Short Job First，SJF。指对短作业优先调度的算法，它从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行。<br>此种算法对长作业非常不利而且实际使用上很难预估每个作业的运行时间。</p><p><br></p><h3 id="静态优先级调度算法"><a href="#静态优先级调度算法" class="headerlink" title="静态优先级调度算法"></a>静态优先级调度算法</h3><p>为照顾紧迫性作业，使之进入系统后获得优先处理，引入优先级调度算法。按照进程的优先级大小来调度，使高优先级进程得到优先处理的策略称为优先权调度算法。<br>静态优先级调度算法是指在输入前作业为其赋予优先级且一直保持不变。虽然可以照顾紧迫性作业，但是没有考虑到作业本身的运行时间和作业的等待时间等，所以产生了更好的动态优先级算法。</p><p><br></p><h3 id="高响应比算法"><a href="#高响应比算法" class="headerlink" title="高响应比算法"></a>高响应比算法</h3><p>高响应比算法是动态优先级算法的一种，其中$ 优先级 = \frac{响应时间}{要求服务时间} = \frac{等待时间+要求服务时间}{要求服务时间}$。这样可以得到：</p><ul><li>对于短作业：其要求服务时间短，优先级相对较高。</li><li>对于长作业：在等待一段时间之后，其优先级会增长，直至够高而能获得服务。</li><li>对于先来作业：假如在某一时刻其仍未获得服务，和后来的作业相比其优先级相对较高。<br>相应时间与周转时间的对比，假如作业运行完了，两者相等，假如没有则 $响应时间&lt;周转时间$</li><li>周转时间：从作业进入系统到作业完成退出系统所用的时间。</li><li>响应时间：等待时间+要求服务时间。</li></ul><p><br></p><h2 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h2><h3 id="进程调度的任务"><a href="#进程调度的任务" class="headerlink" title="进程调度的任务"></a>进程调度的任务</h3><ul><li>保存处理机的现场信息：比如程序计数器、通用寄存器里的内容。</li><li>按某种算法选取进程。</li><li>把处理机分配给进程：把选中进程的PCB中的有关处理机调度的信息装入处理器的寄存器中，把处理器的控制权交给进程使其能从上次的断点处恢复运行。</li></ul><p><br></p><h3 id="进程调度机制"><a href="#进程调度机制" class="headerlink" title="进程调度机制"></a>进程调度机制</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/51c80e55-e603-4592-9a7c-c454fee155c5"></div>- 排队器：每当有进程转入就绪状态时，排队器会将它插入到相应的就绪队列。 - 分派器：分派器依据进程调度程序（更直接的说，进程调度算法）所选定的进程，将其从就绪队列中取出。 - 上下文切换器：会产生两次上下文切换： - 旧进程和分配程序之间的切换； - 分配程序和新进程之间的切换。 排队器、分派器、上下文切换器本身也是程序，但是它们是处于系统态的程序，而被调度的进程一般是用户态的程序，从系统态到用户态进行上下文切换需要很大的耗费，所以一般采用两组（或多组）寄存器，一组用于处理机在系统态时使用，一组用于系统在用户态时使用，这样在系统态和用户态之间切换时就可以只改变指针（用于从寄存器中存取数据和指令）使其指向指定寄存器就行。<br>### 进程调度方式 **非抢占方式** 一旦某进程获得处理机，就会一直运行下去，直至该进程完成或者因发生某种事件而被阻塞其他进程才能获得处理机。此时引起进程调度的因素： - 正在执行的进程运行完毕。 - 外部环境的改变使其不能再继续运行，如程序运行发生异常。 - 进程通信或进程同步时执行了某种原语，如`Block`。 - 正在执行的进程发出I/O请求。 **抢占方式** 允许调度程序根据某种原则去暂停某个正在执行的进程，将处理机分配给其他进程。这些原则一般有三种： - 高优先级原则 - 短进程优先原则 - 时间片原则 我们后面所提到的进程调度算法其实都是抢占方式下的策略。<br>### 轮转调度算法 将CPU的处理时间分成固定大小的时间片q， q的大小从几ms到几百ms。系统将所有就绪进程按先来先服务的原则排成队列。每次调度时，把CPU分配给队首进程，令其执行一个时间片，时间片用完后若进程未结束，则送回就需队列尾部重新调度，在一给定的时间内，就绪进程均能获得一时间片的执行时间。 此时时间片大小是关键问题，一般来说时间片q正比于响应时间，反比于就绪进程数目。计算机的处理能力。速度快，q可小些。通常q值是这样决定的： - 批处理系统:80%的CPU周期在一个时间片内完成 - 分时系统：$ q=T/N_{max}$，（$T-响应时间上限，N_{max}-最大进程数$）<br>### 优先级调度算法 #### 抢占式/非抢占式 **非抢占式优先级调度算法** 即一旦某个高优先级的进程占有了处理机，就一直运行下去，直到由于其自身的原因而主动让出处理机时（任务完成或等待事件）才让另一高优先级进程运行。主要用于批处理系统中；也可用于某些对实时性要求不严的实时系统中。 **抢占式优先级调度算法** 任何时刻都严格按照高优先级进程在处理机上运行的原则进行进程的调度。常用于要求比较严格的实时系统中， 以及对性能要求较高的批处理和分时系统中。 #### 静态/动态优先权 **静态优先权** 静态优先权是在创建进程时确定的，且在进程的整个运行期间保持不变。一般地，优先权是利用某一范围内的一个整数来表示的，这些整数被称为优先数。确定优先权大小的依据： - 进程类型； - 进程对资源的需求； - 用户要求。 **动态优先权** 动态优先权是指，在创建进程时所赋予的优先权，是可以随进程的推进或随其等待时间的增加而改变的，以便获得 更好的调度性能。例如，我们可以规定，在就绪队列中的进程，随其等待时间的增长，其优先权以速率`a`提高。若所有的进程都具有相同的优先权初值，则显然是最先进入就绪队列的进程，将因其动态优先权变得最高而优先获得处理机，此即`FCFS算法`。若所有的就绪进程具有各不相同的优先权初值，那么，对于优先权初值低的进程，在等待了足够的时间后，其优先权便可能升为最高，从而可以获得处理机。当采用抢占式优先权调度算法时，如果再规定当前进程的优先权以速率b下降，则可防止一个长作业长期地垄断处理机。<br>### 多队列调度算法 之前介绍的调度算法都是用一个算法来解决所有的进程调度，这样无法满足系统中不同用户对进程调度策略的不同要求。而多队列调度算法就是将就绪队列从一个分成多个，将不同性质或类型的进程放在不同的就绪队列，这样不同的队列之间设置优先级，和队列内部也可以设置优先级，能更好的满足用户的需求。 同时在多处理机系统中，可以方便的给每个处理机设置单独的就绪队列。 #### 多级反馈队列调度算法 1. 设置多个就绪队列，每个队列赋予不同的优先级，一个队列的优先级最高，第二个队列次之，其余各队列的优先级逐个降低，各队列内部使用FCFS原则排列。 2. 优先级越高的进程时间片越短。 3. 当一个进程进入内存后，首先放在第一队列的尾部，按FCFS的原则调度，如果该时间片内未结束，进程调度时将此进程转入第二队列队尾，直至第N个对列，若进程仍未结束，在第N个对列上采用时间片轮转算法。 4. 仅当第`i`队列空闲时才调度第`i+1`队列，如果有新进程进入优先级较高的队列，剥夺CPU执行新进程，旧进程放入原队列尾部。 此算法不必事先知道各进程执行的所需时间，可满足各种进程需要，是目前公认较好的进程调度算法。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/12ef01d9-3f05-4ff6-9cfb-2a250ca73b4f"></div><p><strong>举例</strong><br>第<code>i</code>个对列的时间片为$ 2^{i-1}$。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/4ac099d2-2a5d-4b3b-acbb-1b50387dca7d"></div><p><br></p><h3 id="基于公平原则的调度算法"><a href="#基于公平原则的调度算法" class="headerlink" title="基于公平原则的调度算法"></a>基于公平原则的调度算法</h3><h4 id="保证调度算法"><a href="#保证调度算法" class="headerlink" title="保证调度算法"></a>保证调度算法</h4><p>保证每个进程都获得相同的处理机时间：</p><ol><li>跟踪计算每个进程自创建以来已经执行的时间。</li><li>计算每个进程应该获得的处理机时间，即自创建以来的时间除以n。</li><li>比较各进程获得处理机时间的比率，即实际执行时间除以应获得的处理机时间。</li><li>比较各进程获得处理机时间的比率，如A：0.5；B：0.9；C：1.2。</li><li>调度程序应选择比率最小的进程将处理机分配给它，并让该进程一直运行，直到超过最接近它的进程比率，然后把处理机让给此时比率最小的进程。</li></ol><h4 id="公平调度算法"><a href="#公平调度算法" class="headerlink" title="公平调度算法"></a>公平调度算法</h4><p>在上个算法中，如果用户A有4个进程，用户B有1各进程，那用户A获得处理机的时间是用户B的四倍。而公平调度算法的目标是保证每个用户都获得相同的处理机时间。</p><p><br></p><h3 id="实时调度"><a href="#实时调度" class="headerlink" title="实时调度"></a>实时调度</h3><p>实时调度必须能满足实时任务对截止时间的要求。所以实时任务的算法和优先级算法有些区别。</p><h4 id="实时算法的分类"><a href="#实时算法的分类" class="headerlink" title="实时算法的分类"></a>实时算法的分类</h4><p><strong>非抢占式调度算法</strong></p><ul><li>非抢占式轮转调度算法</li><li>非抢占式优先调度算法</li></ul><p><strong>抢占式调度算法</strong></p><ul><li>基于时钟中断的抢占式优先级调度算法：在某实时任务到达后，如果它的优先级高于当前任务的优先级，这时并不立即抢占当前任务的处理机，而是等到时钟中断发生时，调度程序才剥夺当前任务的执行，将处理机分配给新到的高优先级任务。</li><li>立即抢占式优先级调度算法：一旦出现外部中断，只要当前任务未处于临界区，便立即剥夺当前任务的执行，把处理机分配给请求中断的紧迫任务。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/30d48a74-09c0-414d-84f9-af18b588b938"></div><h4 id="最早截止时间优先算法"><a href="#最早截止时间优先算法" class="headerlink" title="最早截止时间优先算法"></a>最早截止时间优先算法</h4><p>Earliest Deadline First，EDF。可用于非抢占式算法，也可用于抢占式算法。</p><p><strong>非抢占式</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/2187a911-f433-4d65-9eba-bd4af7660494"></div><p><strong>抢占式</strong><br>有两个周期任务，A、B的周期分别是20ms，50ms。A、B的执行时间分别是10ms和25ms。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/2612cb3c-d7df-4031-8b97-3292d05f638a"></div><h4 id="最低松弛度优先即算法"><a href="#最低松弛度优先即算法" class="headerlink" title="最低松弛度优先即算法"></a>最低松弛度优先即算法</h4><p>Least Laxity First，LLF。$ 松弛度=截止时间-当前时间-任务执行时间$。主要用于抢占式调度。</p><p><strong>例</strong><br>有两个周期任务，A、B的周期分别是20ms，50ms。A、B的执行时间分别是10ms和25ms。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/40c0060f-2a5c-40a1-8c8e-32aed3d969d6"></div><p><br></p><h3 id="优先级倒置"><a href="#优先级倒置" class="headerlink" title="优先级倒置"></a>优先级倒置</h3><p>即高优先级进程（或线程）被低优先级（或线程）延迟或阻塞。例，假如有三个完全独立的进程P1、P2和P3，优先级P1&gt;P2&gt;P3。P1和P3通过共享一个临界资源进行交互。<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P1：...P(mutex); CS<span class="number">-1</span>; V(mutex);... </span><br><span class="line">P2: ...Program2...;</span><br><span class="line">P3：...P(mutex); CS<span class="number">-3</span>; V(mutex);...</span><br></pre></td></tr></table></figure><p></p><p>假如P3最先执行，在执行了P(mutex)操作后，进入临界区CS-3。在时刻a，P2就绪，因为它比P3的优先级高，P2抢占了P3的处理机而运行，在时刻b，P1就绪，因为它比P2的优先级高，抢占处理机执行，但P1执行P(mutex)之后被阻塞，处理机被P2获得，P2执行结束后，P1仍不能进入临界区，处理机被P3获得，等P3退出临界区，P1才能获得处理机。所以本应该高优先级的P1优先执行，但是由于存在临界资源而导致优先级倒置。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/414d2145-02ed-48c9-86a8-988dda60f4c1"></div><h4 id="优先级倒置的解决"><a href="#优先级倒置的解决" class="headerlink" title="优先级倒置的解决"></a>优先级倒置的解决</h4><p>遵循动态优先级继承原则：当高优先级进程P1要进入临界区去使用临界资源，如果已经有一个低优先级进程P3正在使用该资源，此时一方面P1被阻塞，一方面P3继承P1的优先级并一直保持到P3退出临界区。这样做就能保证不会有比P3优先级高但比P1优先级低的进程插进来。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a336fb94-97da-456a-8a23-5ce5a0eeef1a"></div><p><br></p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h3><p><strong>可重用资源和消耗性资源</strong></p><ul><li>可重用性资源：可供用户重复使用多次的资源。特点：<ul><li>互斥访问</li><li>系统中此资源数目相对固定</li><li>系统中大多数资源属于此类</li></ul></li><li>可消耗性资源：临时性资源<ul><li>由进程动态创建和消耗，数目是可以不断变化的，比如信号量、进程通信的信息等。</li></ul></li></ul><p><strong>可抢占性资源和不可抢占性资源</strong></p><ul><li>可抢占性资源：CPU和主存，不会引起死锁。</li><li>不可抢占性资源：只能进程自行释放。如打印机，因为如果打印到一半，打印机被抢占，造成的结果只能是此次打印作废，所以它是不可抢占资源。</li></ul><p><br></p><h3 id="死锁定义"><a href="#死锁定义" class="headerlink" title="死锁定义"></a>死锁定义</h3><p>如果一组进程中的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件，那么该组进程是死锁的。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a6d26310-9d83-4d38-be3d-a50cbac353cb"></div><p><br></p><h3 id="死锁的起因"><a href="#死锁的起因" class="headerlink" title="死锁的起因"></a>死锁的起因</h3><h4 id="竞争不可抢占性资源引起死锁"><a href="#竞争不可抢占性资源引起死锁" class="headerlink" title="竞争不可抢占性资源引起死锁"></a>竞争不可抢占性资源引起死锁</h4><p>一个资源只能同时被一个进程使用，但是下图P1在获得R1后还去申请R2，同时P2获得R2后还去申请R1，陷入僵局，引发死锁。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/2bd54ddc-e4fa-46d0-a593-dd95f202ada5"></div><h4 id="竞争可消耗性资源引起死锁"><a href="#竞争可消耗性资源引起死锁" class="headerlink" title="竞争可消耗性资源引起死锁"></a>竞争可消耗性资源引起死锁</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P1：receive(p3,m3)； send(p2,m1)；</span><br><span class="line">P2：receive(p1,m1)； send(p3,m2)；</span><br><span class="line">P3：receive(p2,m2)； send(p1,m3)；</span><br></pre></td></tr></table></figure><p>如上代码，P1在等待P3给P1发消息，P2在等待P1给它P2发消息，P3在等待P2给P3发消息。造成一个死循环。</p><p><br></p><h3 id="进程推进顺序非法"><a href="#进程推进顺序非法" class="headerlink" title="进程推进顺序非法"></a>进程推进顺序非法</h3><p>在下图中，X轴表示进程P1推进图，Y轴表示进程P2推进图。如果按照4号路线推进，可以看出P1在经过b、d段的执行之后，获得R1，P2在进过a、c、e段的执行之后获得R2。此时如果不加以处理，系统一定会进入死锁状态，因为接下来P1在拥有R1后又去申请R2，P2在拥有R2后又去申请R1。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/fd646fa0-a793-4943-9249-c10e0e09e73b"></div><p><br></p><h3 id="死锁产生的必要条件"><a href="#死锁产生的必要条件" class="headerlink" title="死锁产生的必要条件"></a>死锁产生的必要条件</h3><ul><li>互斥条件：某段时间内，某资源只能由一个进程使用；</li><li>请求和保持条件：进程因请求资源而阻塞时，对已分配给它的资源保持不放；</li><li>不可抢占条件 ：资源在未使用完前，不能被剥夺，由使用进程释放；</li><li>循环等待条件 ：发生死锁时，有向图必构成一环路。</li></ul><p><br></p><h3 id="死锁处理"><a href="#死锁处理" class="headerlink" title="死锁处理"></a>死锁处理</h3><p>共有三类做法：</p><ul><li>第一类是预防死锁，也就是破坏死锁产生的条件（破坏其中一个就可以），这样系统就永远不会产生死锁。</li><li>第二类是死锁避免，死锁产生的根本原因是系统资源分配出现问题，如果能进行合理的资源分配就能避免死锁的发生。</li><li>第三类是死锁发生后的检测和解除。</li></ul><p><br></p><h3 id="预防死锁"><a href="#预防死锁" class="headerlink" title="预防死锁"></a>预防死锁</h3><p>预防死锁是给系统施加一个条件使其永远不可能满足死锁产生的必要条件，但是互斥条件是不能被破坏的条件，所以预防死锁有三类做法：</p><p><strong>破坏“请求和保持”条件</strong><br>即进程在请求资源时，它不能持有不可抢占资源。有两种做法：</p><ol><li>所有进程在开始运行之前，一次性的申请其在整个运行过程中的全部资源，如果申请成功，进程便陷入等待。这样进程在运行的时候就不会再发出请求。</li><li>进程在只获得运行初期所需的资源后便开始运行，但是进程在运行过程中需要逐步释放以分配给自己的资源，等初期获得所有资源都被释放后才能请求其他资源。</li></ol><p><strong>破坏“不可抢占”条件</strong><br>当进程保持了某些不可被抢占资源，且提出的新需求又不能被满足时，它必须释放已经保持的所有资源，待以后需要时再重新申请。这种预防策略的代价非常昂贵，比如进程请求的打印机被强制剥夺后，之前的工作等于作废。</p><p><strong>破坏“循环等待”条件</strong><br>常见的方法是“资源有序分配”。其基本思想是将系统中的所有资源顺序编号，将紧缺的，稀少的采用较大的编号，在申请资源时必须按照编号升序进行，一个进程只有获得较小编号的进程才能申请较大编号的进程，在拥有大编号资源再申请小编号资源时需要释放和小资源编号相等及以上的编号。</p><p><br></p><h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3><p>避免死锁讲道理是属于死锁的预防，但是它和预防死锁不同，预防死锁是破坏死锁产生的条件，避免死锁是防止系统进入不安全状态。所以我们就要明白什么是安全状态，它和死锁产生的必要条件有什么区别。</p><h4 id="安全状态"><a href="#安全状态" class="headerlink" title="安全状态"></a>安全状态</h4><p>安全状态指的是系统能按某种进程推进顺序<code>(P1, P2, …, Pn)</code>为每个进程分配其所需的资源，直至满足每个进程对资源的最大需求，使每个进程都可顺利地完成。此时，序列<code>(P1, P2, …, Pn)</code>为安全序列。如果系统无法找到这样一个序列，则称系统处于不安全状态。<br>为什么能找到这样的序列系统就是安全的呢？其实它是一个递推的关系，假如系统在时刻<code>i</code>发起申请资源请求，其此时状态为<code>a</code>，系统会判断它申请成功后是否还能寻找到一个安全序列，如果能找到便可以分配，否则便是系统不安全状态。假如系统申请到了资源，还想发出申请请求，便会再次判断请求成功之后能否找到安全序列，由此递推下去可保证整个系统能避免死锁。</p><h4 id="安全状态和死锁必要条件的区别"><a href="#安全状态和死锁必要条件的区别" class="headerlink" title="安全状态和死锁必要条件的区别"></a>安全状态和死锁必要条件的区别</h4><p>仍以此图为例。假如我们采用的是预防死锁策略中的破坏“请求和保持”条件里的第一个做法，那么推进顺序就不可能为4，因为进程P1在执行的时候需要获取全部资源才能执行。但对于避免死锁来说，系统可以按照4号推进顺序推进到e段和阴影区的交界处，然后进程P2在申请资源R2的时候会去判断分配R2给P2之后系统能否找到安全序列，事实上是找不到的，所以R2便不会分配给P2，这样系统就进入不了阴影区，从而可以避免死锁。<br>所以预防死锁和避免死锁的区别是：</p><ul><li>预防死锁是每个进程在执行之前确保其自身不陷入死锁状态，如果每个进程都能不陷入死锁状态，系统便能永远安全。即从单个进程角度静态解决问题。</li><li>但避免死锁是在每一次进行资源分配时判断分配之后是否系统处于安全状态，如果处于安全状态便可分配，否则便不能分配。即从系统整体角度动态解决问题。</li></ul><p><br></p><h3 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ol><li>可利用资源向量$Available$：是个含有m个元素的数组，其中的每一个元素代表一类可利用的资源数目。如果$Available[j]=K$，则表示系统中现有$R_j$类资源K个。</li><li>最大需求矩阵$Max$：这是一个$n×m$的矩阵，它定义了系统中$n$个进程中的每一个进程对$m$类资源的最大需求。如果$Max[i, j]=K$，则表示进程$i$需要$R_j$类资源的最大数目为K。</li><li>分配矩阵$Allocation$：这也是一个$n×m$的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数。如果$Allocation[i,j]=K$，则表示进程i当前已分得$R_j$类资源的 数目为K。</li><li>需求矩阵$Need$：这也是一个$n×m$的矩阵，用以表示每一个进程尚需的各类资源数。如果$Need[i,j]=K$，则表示进程$i$还需要$R_j$类资源K个，方能完成其任务。<br>可得：$Need[i,j]=Max[i,j]-Allocation[i,j]$</li></ol><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>设进程$cusneed$提出请求$REQUEST[i]$，则银行家算法按如下规则进行判断。</p><ol><li>如果$REQUEST[cusneed] [i]&lt;= Need[cusneed][i]$，则转2；否则，出错。</li><li>如果$REQUEST [cusneed] [i]&lt;= Available[i]$，则转3；否则，等待。</li><li>系统试探分配资源，修改相关数据：<ol><li>$Available[i]-=REQUEST[cusneed][i]$;</li><li>$Allocation[cusneed][i]+=REQUEST[cusneed][i]$;</li><li>$Need[cusneed][i]-=REQUEST[cusneed][i]$;</li></ol></li><li>系统执行安全性检查算法，如安全，则分配成立；否则试探险性分配作废，系统恢复原状，进程等待。</li></ol><h4 id="安全性算法"><a href="#安全性算法" class="headerlink" title="安全性算法"></a>安全性算法</h4><ol><li>设置两个工作向量$Work=Available$、$Finish=false$。</li><li>从进程集合中找到一个满足下述条件的进程$i$，$Finish[i]==false;$$Need[i, j]&lt;=Work[j];$，如找到，执行3；否则，执行4。</li><li>设进程获得资源，可顺利执行，直至完成，从而释放资源。$Work[i]=Work[i]+Allocation[i,j];$，$Finish[i]=true;$，循环2。</li><li>如所有的进程$Finish= true$，则表示安全；否则系统不安全。</li></ol><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul><li>假定系统中有五个进程$\lbrace P0, P1, P2, P3, P4\rbrace$和三类资源$\lbrace A,B, C\rbrace$，各种资源的数量分别为10、5、7，在$T0$时刻的资源分配情况如图所示。</li></ul><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/ee046284-dee0-41b3-9fdb-18efbcd663a8"></div><p></p><ul><li>$T0$时刻的安全性</li></ul><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/d87f5050-6673-4f43-9841-fd8e20ae086d"></div><p></p><ul><li>$P1$请求资源：$P1$发出请求向量$Request1(1,0,2)$，系统按银行家算法进行检查。<ul><li>$Request_1(1, 0, 2)≤Need_1(1, 2, 2)$</li><li>$Request_1(1, 0, 2)≤Available_1(3, 3, 2)$</li><li>系统先假定可为$P1$分配资源，并修改$Available,Allocation_1和Need_1$向量。由此得到的资源变换情况如上上图括号所示。</li><li>再利用安全性算法检查此时系统是否安全。</li></ul></li></ul><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/93c661fb-3c05-470c-ae0f-ef075f462e2c"></div><p></p><ul><li>$P4$请求资源：$P4$发出请求向量$Request_4(3,3,0)$，系统按银行家算法进行检查。<ul><li>$Request_4(3, 3, 0)≤Need_4(4, 3, 1);$。</li><li>$Request_4(3, 3, 0)&gt;Available(2, 3, 0)$，让$P4$等待。</li></ul></li><li><p>$P0$请求资源：$P0$发出请求向量$Requst_0(0,2,0)$，系统按银行家算法进行检查。</p><ul><li>$Request_0(0, 2, 0)≤Need_0(7, 4, 3);$</li><li>$Request_0(0, 2, 0)≤Available(2, 3, 0);$</li><li>系统暂时先假定可为$P0$分配资源，并修改有关数据，如下图所示。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/b3f54307-9e0e-4913-92fd-ae8e2379ef32"></div></li><li>进行安全性检查：此时可用资源$Available(2,1,0)$已经不能满足任何进程的需要，进入不安全状态，因此系统不分配资源。</li></ul><p><br></p><h3 id="死锁的检测和解除"><a href="#死锁的检测和解除" class="headerlink" title="死锁的检测和解除"></a>死锁的检测和解除</h3><h4 id="死锁的检测"><a href="#死锁的检测" class="headerlink" title="死锁的检测"></a>死锁的检测</h4><p>在图中找一既非阻塞又非独立的进程节点$P_i$，如顺利，$P_i$可获得所有资源直至运行完毕。消去$P_i$所有的请求边和分配边，即释放占有的所有资源，同理再选下一进程节点$P_{i+1}, …, $若能消去所有的边，那么该图是可完全简化的，否则该图是不可完全简化的。</p><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/05a53765-99c3-465d-97e1-e6240f500337"></div><br>具体做法如下：<p></p><ol><li>可利用资源向量$Available[]$，它表示了m类资源中每一类资源的可用数目。</li><li>把不占用资源的进程（向量$Allocation[i]∶= 0$）记入L表中，即$L_i \bigcup L$。</li><li>从进程集合中找到一个$Request_i≤Work$的进程，做如下处理：<ol><li>将其资源分配图简化，释放出资源，增加工作向量$Work∶ =Work+Allocation_i$。</li><li>将它记入L表中。</li></ol></li><li>若不能把所有进程都记入L表中， 便表明系统状态S的资源分配图是不可完全简化的。 因此，该系统状态将发生死锁。</li></ol><h4 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h4><p>死锁解除有多种做法，如下是按代价递减排序的几种。</p><ol><li>撤销所有死锁的进程。</li><li>将每个进程回退到先前定义的某个检查点，再重新启动所有进程。</li><li>逐个撤销死锁进程，直至死锁不存在。撤销进程的顺序应是基于某种最小代价原则，每次撤销后，死锁检测算法应该重新检测死锁是否依然存在。</li><li>剥夺进程P的资源交给进程Q，P同时会退到获得此资源的节点上。<br>对于3和4，选择的标准可以如下：</li></ol><ul><li>以占用处理器的时间最小；</li><li>以产生的输出少；</li><li>所估计的剩余运行时间最长；</li><li>所占用的资源最少；</li><li>优先权最低。</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/
      
    
    </summary>
    
      <category term="操作系统" scheme="https://isjinhao.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://isjinhao.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>外存管理</title>
    <link href="https://isjinhao.github.io/posts/30939.html/"/>
    <id>https://isjinhao.github.io/posts/30939.html/</id>
    <published>2019-12-17T11:17:53.000Z</published>
    <updated>2019-12-17T15:07:27.013Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><em>外存管理分成两块，文件系统和磁盘管理</em></p><p><br></p><h2 id="文件管理概述"><a href="#文件管理概述" class="headerlink" title="文件管理概述"></a>文件管理概述</h2><p>计算机中有很多的程序和数据都是保存在外存中，在需要使用的时候才调入内存中。而如何保存这些信息是很重要的问题，因为不同类型的文件存储的数据格式不同，但这些格式却必须“迎合”硬件只能存储二进制数据的硬性条件。所以操作系统提供了文件管理的功能，让使用者能在不了解文件特性和外存特性的情况下完成文件的存储和查找等功能。同时还提供了文件共享和安全管理等功能。</p><p><br></p><h3 id="文件系统-amp-文件"><a href="#文件系统-amp-文件" class="headerlink" title="文件系统 &amp; 文件"></a>文件系统 &amp; 文件</h3><p>操作系统中负责管理和存储文件信息的软件称为文件管理系统，简称文件系统。包含：文件系统的接口，对对象操纵和管理的软件集合，对象及属性三部分。它负责对文件存储设备的空间进行组织和分配，负责文件存储并对存入的文件进行保护和检索的系统。包含创建文件、删除文件等功能。<br>文件是指具有文件名的若干相关元素的集合，可以分成有结构文件和无结构文件，无结构文件可以看成一个字符流。有结构文件是由一组记录的集合，记录又是一组数据项的集合。</p><ul><li>数据项：用来描述一个对象的某种属性的字符集。例如学生的学号、姓名等。</li><li>记录：一组数据项的集合，用来描述一个对象在某方面的属性，例如学生的成绩。能唯一标识一个记录的一个或多个数据项叫做关键字。</li></ul><p><br></p><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>不同的文件类型由于本身存储的信息具有不同的结构，在管理的时候也是不同。所以文件会被分成很多类型，下面是常用的文件分类方法：</p><ul><li>按用途分类：系统文件、库文件、用户文件。</li><li>按文件中数据的形式分类：源文件、目标文件、可执行文件。</li><li>按存储控制属性分类：可读、可写、可执行文件。</li><li>按组织形式和处理方法分类：普通文件、目录文件、特殊文件。</li></ul><p><br></p><h3 id="剖析文件和目录"><a href="#剖析文件和目录" class="headerlink" title="剖析文件和目录"></a>剖析文件和目录</h3><p>我们刚才在定义中说道，文件是指具有文件名的若干相关元素的集合，在有结构文件中这些元素是数据项集合的集合，在无结构文件指的是字符流。所以文件的概念中本身是：</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/48e07c68-5ff3-4076-9203-a310cb6e99e0"></div><p><br></p><h2 id="文件系统的层次结构"><a href="#文件系统的层次结构" class="headerlink" title="文件系统的层次结构"></a>文件系统的层次结构</h2><p>文件系统从底层到高层可分成三部分：对象及其属性、对对象操纵和管理的软件集合、文件系统接口：</p><p><strong>对象及其属性</strong><br>文件管理系统管理的文件如下：</p><ul><li>文件：在文件管理系统中有着各种不同类型的文件，它们都作为文件管理的直接对象。</li><li>目录：用于对文件的存储和检索，目录的每个目录项包含了一个文件或目录的信息。</li><li>磁盘存储空间：文件和目录必定占用存储空间，对这部分空间的有效管理不仅能提高外存的利用率，而且能提高对文件的存取速度。</li></ul><p><strong>对对象操纵和管理的软件集合</strong><br>该层是文件管理系统的核心部分。文件系统的功能大多是在这一层实现的。如：文件存储的管理、文件目录的管理、将文件的逻辑地址转换为物理地址的机制、文件读写控制的管理、文件的共享和保护等功能。这些功能被可分为四层：</p><ul><li>I/O控制层：文件系统的最底层、主要由磁盘驱动程序等组成。</li><li>基本文件系统层：主要用于处理内存和磁盘之间数据块的交换。</li><li>基本I/O管理程序：完成与磁盘I/O有关的事务，如将文件的逻辑块号转换为物理块号、管理磁盘中的空闲盘块、I/O缓冲的指定等。</li><li>逻辑文件系统：管控对文件的操作，如控制用户或应用程序对文件的读写等。</li></ul><p><strong>文件系统的接口</strong><br>操作系统提供给用户或应用程序用来使用文件系统的接口：</p><ul><li>命令接口：用户与文件系统直接交互的接口，如Shell命令。</li><li>程序接口：应用程序可以通过一系列命令调用文件系统的服务。</li></ul><p><br></p><h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><p>当用户要求对一个文件实施多次读/写操作时，如果每次都检索目录效率较低，所以为了避免多次重复的检索目录，OS提供了“打开（Open）”操作，当此操作被执行时，OS会把被打开文件的信息存为“打开文件表”的一个条目，然后把这个条目编号返回用户，这样用户就可以通过这个编号和文件之间建立一个连接，也就可以进行文件的读写等操作。当用户再次向系统发出请求时，把这个编号提交给OS，OS通过这个编号在打开文件表中查找文件信息就可以减少检索时间。而关闭就是OS从“打开文件表”上删除此条目，这样断开了用户和文件之间的连接。</p><p><br></p><h2 id="文件的逻辑结构和物理结构"><a href="#文件的逻辑结构和物理结构" class="headerlink" title="文件的逻辑结构和物理结构"></a>文件的逻辑结构和物理结构</h2><ul><li>逻辑结构：从用户的角度来看，文件是能被存取的基本单位。</li><li>物理结构：文件在磁盘上存储时的组织形式。</li></ul><p><br></p><h3 id="逻辑文件按结构分类"><a href="#逻辑文件按结构分类" class="headerlink" title="逻辑文件按结构分类"></a>逻辑文件按结构分类</h3><ul><li>有结构文件：每个文件用于描述实体集中的一个实体。每个记录的长度对OS来说都是可知的。但记录之间可以分为定长和变长两种。<ul><li>定长记录：所有记录的长度都是相同的、所有记录中的各数据项都处在记录中相同的位置具有相同的顺序和长度。</li><li>变长记录：各记录的长度不相同。比如论文的摘要可能长度差距很大，不能在存储之前估计出所需要的空间。</li></ul></li><li>无结构文件：系统中运行的大量的源程序、可执行文件、文本文件等都是无结构文件，即流式文件。其文件长度是以字节为单位的。</li></ul><p><br></p><h3 id="逻辑文件按组织方式分类"><a href="#逻辑文件按组织方式分类" class="headerlink" title="逻辑文件按组织方式分类"></a>逻辑文件按组织方式分类</h3><p>组织方式指的是文件中记录的组织方式。只对有结构文件有效。可以分成：顺序文件、索引文件、索引顺序文件。</p><p><br></p><h3 id="顺序文件"><a href="#顺序文件" class="headerlink" title="顺序文件"></a>顺序文件</h3><p>指由一系列记录按某种顺序排列所形成的的文件。</p><ul><li>串结构：按存入时间的先后顺序排列。所以检索时必须从头挨个查找，效率低。</li><li>顺序结构：用户指定一个字段作为关键字，他可以是任意类型的变量。如sql文件。</li></ul><p><br></p><h3 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h3><p>为变长记录文件创建一张索引表，索引表是定长记录文件，检索时，先查找索引表，再根据指针所指的地址读取记录。可以解决变长文件记录较难直接存取的问题。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/453ddfa5-648b-4d80-a82f-8c23075d486e"></div><p><br></p><h3 id="索引顺序文件"><a href="#索引顺序文件" class="headerlink" title="索引顺序文件"></a>索引顺序文件</h3><p>将顺序文件的所有记录分成若干组，为顺序文件建立一张索引表，索引表中为每组的第一个记录建立一个索引项。检索时，先检索索引表，找到记录所在记录组的第一个记录的表项，再顺序查找主文件，得到要求的记录。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e955a679-4e9f-47fe-a922-5c340b31e898"></div><p><br></p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><h3 id="文件控制块"><a href="#文件控制块" class="headerlink" title="文件控制块"></a>文件控制块</h3><p>包含三类信息</p><ul><li>基本信息类：文件名、文件物理位置、文件逻辑结构、文件物理结构</li><li>控制信息类：各类用户的读、写、可执行文件等。</li><li>使用信息类：文件的建立时间，当前的使用信息，上一次修改的时间，是否被进程锁住等。</li></ul><p><br></p><h3 id="索引节点"><a href="#索引节点" class="headerlink" title="索引节点"></a>索引节点</h3><p>为了唯一确定外存中的一个文件，必须要把文件的FCB加载进内存，而每次加载的数据大小是一定的，所以为了一次能多加载进内存一个文件标识。将FCB分成两部分：</p><h4 id="磁盘索引节点"><a href="#磁盘索引节点" class="headerlink" title="磁盘索引节点"></a>磁盘索引节点</h4><ul><li>文件主标识符</li><li>文件类型</li><li>文件存取权限</li><li>文件物理地址</li><li>文件长度</li><li>文件连接计数：本人理解为硬链接计数</li><li>文件存取时间</li></ul><h4 id="内存索引节点。"><a href="#内存索引节点。" class="headerlink" title="内存索引节点。"></a>内存索引节点。</h4><ul><li>索引节点编号</li><li>状态</li><li>访问计数</li><li>文件所属文件系统的逻辑设备号：不明白</li><li>链接指针：不明白</li></ul><p><br></p><h3 id="树形结构目录"><a href="#树形结构目录" class="headerlink" title="树形结构目录"></a>树形结构目录</h3><p>在树形结构目录中，目录应该保存文件的信息。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/48c2c8df-2f08-420a-9ebc-6ced18b6e735"></div>同时目录的目录项要能既作为目录文件的FCB，又作为数据文件的FCB。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/3558f5fe-43a4-4902-9f69-a6debd7a99d3"></div><p><br></p><h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><h3 id="基于有向无循环图实现文件共享"><a href="#基于有向无循环图实现文件共享" class="headerlink" title="基于有向无循环图实现文件共享"></a>基于有向无循环图实现文件共享</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/063db2c4-3e1a-4042-985a-a4bc2c41e36a" style="width:80%"></div>此种方法存在问题： 比如对于文件`F8`，`D5:p`、`D6:e`、`D3:p`都保存了`F8`的物理地址，即从某个盘块开始，总长度多少等。此时如果`D6:e`对`F8`进行了删除操作，`D5:p`和`D3:P`都无法察觉，仍然会认为在它们存储的位置上有文件，即一个目录项对文件的操作对其他目录项来说是不可见的。<br>### 利用索引节点<div align="center"><img src="http://blogfileqiniu.isjinhao.site/b49d3d0c-b042-4a62-8f43-40519ca0023b" style="width:60%"></div>引入索引结点，将文件的物理地址和其他的属性放在索引结点中，只在目录项中存放文件名和指向索引结点的指针。由任何用户对文件进行Append操作或修改，引起相应索引结点内容的改变。此种方法即Linux中的硬链接。<br>### 利用符号链接实现文件共享 建立符号链接文件，它是一种特殊类型的文件，其内容是被链接文件的路径名。建立符号链接文件，并不影响原文件，实际上它们各是一个文件。可以建立任意的别名关系，甚至原文件是在其他计算机上。只有文件主才有指向索引结点的指针，而其他共享用户只有该文件的路径名。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/dcb09a0e-6f1f-46da-a87b-9a8d3ef5e046"></div><p><br></p><h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><h3 id="访问权-amp-保护域"><a href="#访问权-amp-保护域" class="headerlink" title="访问权&amp;保护域"></a>访问权&amp;保护域</h3><ul><li>访问权：一个进程能对某对象执行操作的权利，用&lt;对象名，权集&gt;表示，如<code>&lt;F1, {R/W}&gt;</code>表示进程对F1有读和写的权利。</li><li>保护域：进程对一组对象访问权的集合，进程只能在域内进行操作。</li></ul><p><br></p><h3 id="进程和域的联系方式"><a href="#进程和域的联系方式" class="headerlink" title="进程和域的联系方式"></a>进程和域的联系方式</h3><p>进程和域之间是一对多的关系，即一个进程可以联系多个域。此时进程的运行分为多个阶段，每个阶段联系一个域，这样就可以根据运行的实际需要规定进程每个阶段所能访问的对象。</p><p><br></p><h3 id="访问矩阵"><a href="#访问矩阵" class="headerlink" title="访问矩阵"></a>访问矩阵</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/bbf7a827-4fa5-4eac-9010-4012650b2ffd"></div>- R：在域内运行的进程对文件具有读权限 - W：在域内运行的进程对文件具有写权限 - $R^\ast$：在域内运行的进程能把其对文件的读权限扩展到其他域中，但在其他域中是R权限，不再是$R^\ast$。 - $W^\ast$：在域内运行的进程能把其对文件的写权限扩展到其他域中，但在其他域中是W权限，不再是$W^\ast$。 - S：在域Di中运行的进程能转移到域Dj中运行，如图中在域D3运行的进程能转移到域D2中运行。 - O：在域中运行的进程能增加或删除对某文件的访问权。 - Control：在域Di中运行的进程能删除在域Dj中运行进程对各对象的访问权。如图中在D2中运行的进程能删除在D3中运行进程的访问权。<br>### 访问矩阵的实现 **访问控制表** 将访问对象按列划分，为每一列建立一张访问控制表，在该表中把属于对象的所有空项都删除。此时表中的每一项都是一个有序对`<域 ，权集>`构成。 **访问权限表** 将访问矩阵按行划分，每一行是一个访问权限表，表中的每一项表示该域对某对象的访问权限。 文件管理的目标是管理文件的组织方式，管理文件的访问权等。而磁盘存储器的管理是管理存储器的使用，如何高效利用存储器。他俩是棋与棋盘的关系。<br>## 连续组织方式 文件的信息存放在若干连续的物理块中。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/d6f4358a-b197-4d60-a80c-d60b4e096bc8" style="width:70%"></div>- 优点 - 简单 - 支持顺序存取和随机存取 - 顺序存取速度快，所需的磁盘寻道次数和寻道时间最少 - 缺点 - 文件不能动态增长（预留空间：浪费、重新分配和移动） - 不利于文件插入和删除 - 外部碎片问题<br>## 链接组织方式 ### 隐式链接 在文件的目录中记录该文件的第一和最后一个盘块的指针，每一个盘块的指针指向文件的下一物理块号。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/3c2e3657-42eb-4d81-9cf4-ea51597deeb9"></div>- 优点 - 文件可动态增长 - 有利于文件的插入和删除 - 提高了磁盘空间利用率,不存在外部碎片问题 - 缺点 - 存取速度慢，不适于随机存取 - 可靠性问题，如指针出错 - 更多的寻道次数和寻道时间 - 链接指针占用一定的空间<br>### 显示链接 将链接文件各物理块的指针显示地放在内存的一张链接表（文件分配表，File Allocation Table）中。在FCB的物理地址中填写其首指针所对应的盘块号。由于文件分配表示存储在内存中的，可以大大减少访问磁盘的次数。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/c6a74b5e-0bd6-4213-8fc6-98d18c1e05d3" style="width:70%"></div><p><br></p><h3 id="FAT"><a href="#FAT" class="headerlink" title="FAT"></a>FAT</h3><p>微软公司早、中期推出的操作系统一直都是采用的FAT技术，即利用文件分配表FAT来记录每个文件中所有盘块之间的链接。FAT中引入了“卷”的概念，支持将一个物理磁盘分成四个逻辑磁盘，每个逻辑磁盘就是一个卷（也称为分区），每个卷都可以被单独格式化和使用。把盘块作为基本分配单位，同时每个分区中都配有两张相同的文件分配表FAT1和FAT2。<br>FAT技术的发展有三个阶段：FAT12、FAT16和FAT32</p><p><strong>FAT12</strong><br>FAT表的每个表项占用12个bit。所以最多有$2^{12}$个表项，每个盘块的大小是512B，则每个磁盘分区的容量是2MB，能处理的磁盘最大容量是8MB。<br>为了增大FAT能管理的最大容量，引入了“簇”的概念，每个簇是一组相邻的扇区，这样如果分配时以簇为单位进行分配就能管理更大的磁盘容量，但是相应的簇内零头也会更大，降低磁盘的利用率。</p><p><strong>FAT16</strong><br>FAT表的每个表项占用16个bit。最多有$2^{16}$个表项。</p><p><strong>FAT32</strong><br>FAT表的每个表项占用32个bit。最多有$2^{32}$个表项。同时每个簇固定为4KB。所以最大可管理$4 \ast 2^{10} \ast 2^{32} = 2TB$大小的空间。</p><p><br></p><h2 id="索引组织方式"><a href="#索引组织方式" class="headerlink" title="索引组织方式"></a>索引组织方式</h2><h3 id="单级索引组织方式"><a href="#单级索引组织方式" class="headerlink" title="单级索引组织方式"></a>单级索引组织方式</h3><p>一个文件的信息存放在若干不连续物理块中，系统为每个文件建立一个专用数据结构索引表，并将这些块的块号存放在一个索引表中。一个索引表就是磁盘块地址数组，其中第i个条目指向文件的第i块。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a1e85fd4-81bc-47e2-a25e-7efd96482df9" style="width:60%"></div>·<br>### 多级索引组织方式<div align="center"><img src="http://blogfileqiniu.isjinhao.site/3d242750-4183-4a06-9f11-38d1002c71e8"></div><p><br></p><h3 id="增量式索引组织方式"><a href="#增量式索引组织方式" class="headerlink" title="增量式索引组织方式"></a>增量式索引组织方式</h3><p>可以更好的满足大、中、小文件的组织。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/1982b12b-d189-41d1-abf2-024ebfb94ed9"></div><p><br></p><h2 id="文件存储空间的管理"><a href="#文件存储空间的管理" class="headerlink" title="文件存储空间的管理"></a>文件存储空间的管理</h2><p>文件存储空间的管理包括空闲块的组织分配和回收。</p><p><br></p><h3 id="空闲表法"><a href="#空闲表法" class="headerlink" title="空闲表法"></a>空闲表法</h3><p>把一个连续未分配区域称为“空闲文件”，系统为所有空闲文件单独建立一个目录。表目内容：序号，第一个空白块号，空白块个数。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/57c8df64-d3ca-4136-8432-a9da5117dc0f"></div>- 分配算法：内存管理中的首次适应算法、循环首次适应算法。 - 合并：空闲区邻接合并<br>### 空闲链表法 空闲盘块链：所有空闲盘块拉成一条链，分配时从头分配，回收时链接在尾部。 空闲盘区链：每个连续的盘块组成一个盘区，每个盘区包含本盘区的大小和下一个盘区的地址。<br>### 位示图法 用一串二进制位反映磁盘空间中分配使用情况，每个物理块对应一位，分配物理块为1，否则为0。申请物理块时，可以在位示图中查找为0的位，返回对应物理块号；归还时；将对应位转置0。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/d269b94c-777a-4ab3-a839-483808396ace"></div><p><br></p><h3 id="成组链接法（重点）"><a href="#成组链接法（重点）" class="headerlink" title="成组链接法（重点）"></a>成组链接法（重点）</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/c4490525-02ba-48a7-8662-6ae97c00ece7"></div>- 把所有的空闲盘块按每n个一组分成m个组。 - 最后一个组放在内存的空闲盘块号栈中，其他组存在外存上。空闲盘块号栈是一个临界资源，只允许一个进程同时访问。 - 数据结构，一个size为n+1的栈。图上是一个倒着的的栈（栈底在上方，栈顶在下方） - 一个n+1的栈实际可用盘块只有n（图上只有99个可用盘块），因为栈底是一个计数器，指示当前有多少个可用盘块，但是可用盘块中有一个是指向下一个组，即stack[1]指向下一个组。如果stack[1]==0表示此时是最后一组。 - 分配时从栈顶开始向下分配，直至分配出n-1个盘块，此时如果再想分配一个块就需要把下一个组调入空闲盘块号栈。调入后新组覆盖旧组。**然后把新组在外存中占用的盘块分配出去。** - 回收时从栈底向上回收，如果计数器==100时还有空闲盘块（设这个盘块编号为p）要回收，就把空闲盘块号栈内的组取出来存在p中，在空闲盘块号栈内新开辟一个组，新组的stack[1]指向p。 #### 例 此题题目及来源：https://blog.csdn.net/ajay666/article/details/73569654<div align="center"><img src="http://blogfileqiniu.isjinhao.site/fc7e0c9e-a0b5-42ae-a986-7fd6c42c7473"></div>分配3个盘块后，回收它所占的5个盘块，回收的盘块号依次为700、711、703、788、701，画出分配回收过程。 ##### 第一次分配<div align="center"><img src="http://blogfileqiniu.isjinhao.site/2c6b8991-4667-4937-a800-6354c3a2893f"></div><h5 id="第二次分配"><a href="#第二次分配" class="headerlink" title="第二次分配"></a>第二次分配</h5><p>注意：300号盘块中存储的组信息调入空闲盘块号栈之后其自己也可以被分配。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/4f6799e5-a774-4141-ae40-30f0bdc4fc03"></div><h5 id="第三次分配"><a href="#第三次分配" class="headerlink" title="第三次分配"></a>第三次分配</h5><div align="center"><img src="http://blogfileqiniu.isjinhao.site/8954e673-34e3-422a-94cb-181adf554aef"></div><h5 id="第一次回收"><a href="#第一次回收" class="headerlink" title="第一次回收"></a>第一次回收</h5><div align="center"><img src="http://blogfileqiniu.isjinhao.site/9cc9d4da-b64d-46cb-87bb-6c77b94421cf"></div><h5 id="第二次回收"><a href="#第二次回收" class="headerlink" title="第二次回收"></a>第二次回收</h5><div align="center"><img src="http://blogfileqiniu.isjinhao.site/7cc820f8-0269-4c40-a50b-cb672cbc7d8a"></div><h5 id="第三次-amp-第四次-amp-第五次回收"><a href="#第三次-amp-第四次-amp-第五次回收" class="headerlink" title="第三次&amp;第四次&amp;第五次回收"></a>第三次&amp;第四次&amp;第五次回收</h5><div align="center"><img src="http://blogfileqiniu.isjinhao.site/4043faec-7325-4382-8de2-742f72598ae1"></div></域><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;em&gt;外存管理分成两块，文件系统和磁盘管理&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;文件管理概述&quot;&gt;&lt;a href=&quot;#文件管理
      
    
    </summary>
    
      <category term="操作系统" scheme="https://isjinhao.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://isjinhao.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>输入输出系统</title>
    <link href="https://isjinhao.github.io/posts/49474.html/"/>
    <id>https://isjinhao.github.io/posts/49474.html/</id>
    <published>2019-12-17T11:17:53.000Z</published>
    <updated>2019-12-17T15:07:27.044Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>输入输出系统和OS中的其他部分有很大区别，因为其他部分都是在说计算机接受任务后该怎么运行能又快又可靠的完成任务并把结果输出。而输入输出系统是怎么快速稳定的将任务的需求输入和任务的结果输出。<br>又由于输入输出设备种类繁多，比如输入设备中的键盘、鼠标、网卡、摄像头，输出设备中的打印机、音频等。所以输入输出系统被划分很多层次来尽可能屏蔽物理细节。</p><p><br></p><h3 id="IO系统的基本功能"><a href="#IO系统的基本功能" class="headerlink" title="IO系统的基本功能"></a>IO系统的基本功能</h3><ul><li>隐藏物理设备的细节：只需要使用简单的命令就能操作各种具有不同实现的硬件完成相应需求。</li><li>与设备的无关性：用户不需要指定哪些设备完成功能，只需要描述需求，OS会选择一个设备完成功能。</li><li>提高处理机和IO设备的利用率：IO设备之间一般是相互独立的，因此设备之间能够并行操作，所以OS应让处理机和设备之间能并行操作。</li><li>对IO设备进行控制：<ul><li>轮询的可编程IO方式。</li><li>采用中断你的可编程IO方式。</li><li>直接存储器访问方式。</li><li>IO通道方式。</li></ul></li><li>确保对设备的正确共享。</li><li>错误处理。</li></ul><p><br></p><h2 id="IO软件的层次结构"><a href="#IO软件的层次结构" class="headerlink" title="IO软件的层次结构"></a>IO软件的层次结构</h2><div align="center"><img src="http://blogfileqiniu.isjinhao.site/933ea414-24d5-4dfd-8201-8cacf6cbeff1"></div>- 用户层软件：提供设备与用户交互的接口，用户可以使用该层提供的功能直接控制设备。 - 设备独立性软件：设备分配，设备保护，设备分配，设备回收，数据缓存等。 - 设备驱动软件：发出控制设备的命令。 - 中断处理程序：保存被中断的进程的CPU环境，转入相应的中断处理程序仅需处理，处理完毕后再恢复被中断进程的现场，返回到被中断的进程。<br>## IO系统各模块层次视图<div align="center"><img src="http://blogfileqiniu.isjinhao.site/770f375c-c73f-46e5-828a-bbf0938c241a"></div>- 块设备：输入输出以数据块为单位的设备。如磁盘。 - 流设备：字符设备的输入输出，如键盘。 - 网络通信接口：网卡。<br>## IO设备和设备控制器 直接和IO设备对接的是设备控制器。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/953ad1c7-eacf-4d86-9a95-87cf7a978c62"></div><p><strong>作用</strong></p><ol><li>接收和识别命令（控制寄存器、命令译码器）：设备控制器将CPU送来的命令写入控制器寄存器中，并进行译码。</li><li>数据交换（数据寄存器）。</li><li>设备状态的了解和报告（状态寄存器）。</li><li>地址识别（地址译码器）：系统中的每个设备都有自己的地址段，设备接口电路中有多个寄存器，一个寄存器有唯一的一个地址，每个地址为I/O端口，该地址称为I/O端口地址。设备控制器必须能识别每个设备的地址。</li><li>数据缓冲：缓冲器。</li><li>差错控制：差错检测码。</li></ol><p><strong>组成</strong></p><ul><li>设备控制器和处理机的接口：用于实现CPU与设备控制器之间的通信。</li><li>设备控制器和设备的接口。</li><li>IO逻辑：在一个设备控制器上，可以连一个或多个设备。相应的，在控制器中就有一个或多个设备接口，一个接口连一台设备，控制器中的I/O逻辑根据处理机发来的地址信号，去选择一个设备接口。控制器中的I/O逻辑用来实现对设备的控制。通过接收CPU 发来的命令和地址信息，对所选设备进行控制</li></ul><p><br></p><h3 id="CPU如何控制设备控制器"><a href="#CPU如何控制设备控制器" class="headerlink" title="CPU如何控制设备控制器"></a>CPU如何控制设备控制器</h3><p>CPU控制内存时需要指定指令地址、数据地址等。控制设备控制器亦如此，一般有两种控制方式：</p><ul><li>利用特定IO指令：利用特殊的IO指令控制设备控制器。</li><li>内存映像IO：不再区分内存和控制器中的寄存器地址。假如有一个地址K，当0&lt;=K<n时被认为是内存地址 ，k>=N时被认为是寄存器地址。</n时被认为是内存地址></li></ul><p><br></p><h3 id="IO通道"><a href="#IO通道" class="headerlink" title="IO通道"></a>IO通道</h3><p>有了设备控制器之后，CPU便可以操作控制器完成对IO设备的控制，但是此时数据交换仍然需要CPU的全程参与，所以引入IO通道来使数据传送、IO设备的组织管理等都独立于CPU。<br>通道是独立于CPU的专门负责数据输入/输出传输工作的处理机，对外部设备实现统一管理，代替CPU对输入/输出操作进行控制，从而使输入，输出操作可与CPU并行操作。通道执行通道程序来控制IO操作。与CPU的区别：</p><ul><li>通道程序指令类型单一</li><li>通道没有自己的内存，通道程序在主机的内存中，即通道与CPU共享内存。</li></ul><h4 id="字节多路通道"><a href="#字节多路通道" class="headerlink" title="字节多路通道"></a>字节多路通道</h4><p>主要连接以字节为单位的低速IO设备。如打印机，终端。</p><ul><li>按字节交叉方式工作的通道。通常含有许多非分配型子通道，其数量从几十个到数百个，每一个子通道连接一台I/O设备。这些子通道按时间片轮转方式共享主通道。</li><li>字节多路通道以字节为单位传输信息，它可以分时地执行多个通道程序。当一个通道程序控制某台设备传送一个字节后，通道硬件就控制转去执行另一个通道程序，控制另一台设备传送信息。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e84be910-3765-4aaf-9fad-4129b1ac7442"></div><h4 id="数组选择通道"><a href="#数组选择通道" class="headerlink" title="数组选择通道"></a>数组选择通道</h4><p>主要连接磁盘，磁带等高速I/O设备<br>选择通道是按数组方式进行数据传送，每次传送一批数据，故传送速度很高。<br>选择通道在一段时间内只能执行一个通道程序，只允许一台设备进行数据传输。当这台设备数据传输完成后，再选择与通道连接的另一台设备，执行它的相应的通道程序。这种独占性又使得通道利用率很低。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/bcbc610f-941b-4b1f-b16c-70e915f25f26"></div><h4 id="数组多路通道"><a href="#数组多路通道" class="headerlink" title="数组多路通道"></a>数组多路通道</h4><p>主要连接高速设备。</p><ul><li>结合了数组选择通道传送速度高和字节多路通道能进行分时并行操作的优点。它先为一台设备执行一条通道指令，然后自动转接，为另一台设备执行一条通道指令。它含有多个非分配型的子通道，既有很高的数据传输率，又能获得令人满意的通道利用率</li><li>对通道程序采用多道程序设计的硬件实现</li><li>可以连接多台高速设备，数据传输按数组方式，一段时间内可以执行多道通道程序</li></ul><h4 id="解决瓶颈"><a href="#解决瓶颈" class="headerlink" title="解决瓶颈"></a>解决瓶颈</h4><p>通道执行通道程序，向控制器发出命令，并具有向CPU发中断信号的功能。一旦CPU发出指令，启动通道，则通道独立于CPU工作。但是，由于通道价格贵，通道数量少，往往使之成为IO的“瓶颈”。解决办法是在不增加通道的前提下，增加设备到主机间的通路，一个通道可连接多个控制器，一个控制器可连接多个设备，形成树形交叉连接。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/916c4771-7b35-43bc-8723-c55e7c4c6162"></div><p><br></p><h2 id="中断机构"><a href="#中断机构" class="headerlink" title="中断机构"></a>中断机构</h2><h3 id="中断的理解"><a href="#中断的理解" class="headerlink" title="中断的理解"></a>中断的理解</h3><p>说到中断还不得不从现代操作系统的特性说起，无论是桌面PC操作系统还是嵌入式都是多任务的操作系统，而很遗憾，处理器往往是单个的，即使在硬件成本逐渐下降，但处理器的数量依然不可能做到每个任务一个CPU，所以CPU必须作为一种全局的资源让所有任务共享。即什么时候给任务A用，什么时候给任务B用……这就是进程调度，具体的安排就由调度算法决定了。<br>进程如何去调度？现代操作系统一般都是采用基于时间片的优先级调度算法，把CPU的时间划分为很细粒度的时间片，一个任务每次只能时间这么多的时间，时间到了就必须交出使用权，即换其他的任务使用。这种要看操作系统的定时器机制了。那么时间片到之后，系统做了什么呢？这就要用到我们的中断了，时间片到了由定时器触发一个软中断，然后进入相应的处理历程。当然这一点不足以表明中断的重要，计算机操作系统自然离不开外部设备：鼠标、键盘、网卡、磁盘等等。就拿网卡来讲，我计算机并不知道时候数据包会来到，我能保证的就是数据来了我能正常接收就行了。但是我又不可能一直等着接收数据包，要是这样其他任务就死完了。所以合理的办法是，你数据包来到之后，通知我，然后我再对你处理，怎么通知呢？？答：中断！键盘、鼠标亦是如此！</p><p><br></p><h3 id="中断的定义"><a href="#中断的定义" class="headerlink" title="中断的定义"></a>中断的定义</h3><p>指处理机处理程序运行中出现的紧急事件的整个过程。程序运行过程中，系统外部、系统内部或者现行程序本身若出现紧急事件，处理机立即中止现行程序的运行，自动转入相应的处理程序（中断服务程序），待处理完后，再返回原来的程序运行，这整个过程称为程序中断。可分为两类：</p><h4 id="硬中断（Hardware-Interrupt）"><a href="#硬中断（Hardware-Interrupt）" class="headerlink" title="硬中断（Hardware Interrupt）"></a>硬中断（Hardware Interrupt）</h4><ul><li>外部中断：一般是指由计算机外设发出的中断请求，如：键盘中断、打印机中断、定时器中断等。外部中断是可屏蔽的。</li><li>内部中断是指因硬件出错（如突然掉电、奇偶校验错等）,或运算出错（除数为零、运算溢出、单步中断等）所引起的中断，内部中断是不可屏蔽的。</li></ul><h4 id="软中断（Software-Interrupt）"><a href="#软中断（Software-Interrupt）" class="headerlink" title="软中断（Software Interrupt）"></a>软中断（Software Interrupt）</h4><p>软中断是利用硬中断的概念，用软件方式进行模拟，实现宏观上的异步执行效果。很多情况下，软中断和”信号”有些类似，同时，软中断又是和硬中断相对应的，硬中断是外部设备对CPU的中断，软中断通常是硬中断服务程序（模拟硬件发出中断的程序）对内核的中断，信号则是由内核（或其他进程）对某个进程的中断。</p><p><br></p><h3 id="时钟中断"><a href="#时钟中断" class="headerlink" title="时钟中断"></a>时钟中断</h3><p>在Linux的0号中断是一个定时器中断。在固定的时间间隔都发生一次中断，也是说每秒发生该中断的频率都是固定的。该频率是常量HZ，该值一般是在100 ~ 1000之间。该中断的作用是为了定时更新系统日期和时间，使系统时间不断地得到跳转。另外该中断的中断处理函数除了更新系统时间外，还需要更新本地CPU统计数。若进程的时间片递减到0，进程则被调度出去而放弃CPU使用权。<br>Linux的OS时钟的物理产生原因是可编程定时/计数器产生的输出脉冲，这个脉冲送入CPU，就可以引发一个中断请求信号，我们就把它叫做<code>时钟中断</code>。<br><code>时钟中断</code>是特别重要的一个中断，因为整个操作系统的活动都受到它的激励。系统利用时钟中断维持系统时间、促使环境的切换，以保证所有进程共享CPU；利用时钟中断进行记帐、监督系统工作以及确定未来的调度优先级等工作。可以说，<code>时钟中断</code>是整个操作系统的脉搏。</p><p><br></p><h2 id="设备驱动程序"><a href="#设备驱动程序" class="headerlink" title="设备驱动程序"></a>设备驱动程序</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li>接受设备独立性软件发来的命令和参数，将接收到的抽象要求转换为具体要求</li><li>检查用户IO请求的合法性，了解IO设备的状态，传递有关参数，设置设备的工作方式</li><li>发出IO命令，如果设备空闲，启动IO设备完成指定的IO操作；如果设备忙碌，则将请求挂在设备队列上等待</li><li>及时响应由控制器或通道发来的中断请求，并根据其中断类型调用相应的中断处理程序进行处理。</li><li>对于设置有通道的计算机系统，驱动程序还应能够根据用户的IO请求，自动地构成通道程序。</li></ol><p><br></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>驱动程序主要是在设备无关性软件和设备控制器之间的一个通信程序</li><li>驱动程序与IO设备特性密切相关：通常由硬件厂商提供</li><li>驱动程序与I/O控制方式密切相关:中断驱动和DMA方式</li><li>驱动程序与硬件相关,部分代码需用汇编语言编写</li><li>驱动程序应允许可重入</li></ol><p><br></p><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><ol><li>将抽象要求转换为具体要求<ol><li>通常设备控制器中都有若干个寄存器，分别用于暂存命令、数据和参数等；</li><li>用户及上层软件对设备控制器的具体情况毫无了解，因而只能向它们发出抽象的要求(命令)，但不能直接传送给设备控制器。需要将抽象要求转换为具体要求(命令码，数据，参数)。例如，将抽象要求中的盘块号转换为磁盘的盘面、磁道号及扇区。这一转换工作只能由驱动程序来完成；</li><li>在OS中只有驱动程序才同时了解抽象要求和设备控制器中的寄存器情况；也只有它才知道命令、数据和参数应分别送往哪个寄存器。</li></ol></li><li>检查IO请求的合法性</li><li>读出和检查设备的状态</li><li>传送必要的参数，设置工作方式</li><li>启动I/O设备<ol><li>在完成上述准备工作后，驱动程序可以向控制器中的命令寄存器传送相应的控制命令</li><li>对于字符设备，若发出的是写命令，驱动程序将把一个数据传送给控制器；若发出的是读命令，则驱动程序等待接收数据，并通过从控制器中的状态寄存器读入状态字的方法，来确定数据是否到达。</li><li>驱动程序发出IO命令后，基本的IO是在设备控制器的控制下进行的，通常IO操作所要完成的工作较多，需要一定的时间，如读/写一个盘块中的数据，此时，驱动程序进程把自己阻塞起来，直至中断到来时才将它唤醒。</li></ol></li></ol><p><br></p><h3 id="对IO设备的控制方式"><a href="#对IO设备的控制方式" class="headerlink" title="对IO设备的控制方式"></a>对IO设备的控制方式</h3><h4 id="使用轮询的可编程I-O方式"><a href="#使用轮询的可编程I-O方式" class="headerlink" title="使用轮询的可编程I/O方式"></a>使用轮询的可编程I/O方式</h4><p>CPU发出启动外设的I/O指令，同时将忙/闲标志置为1。如果外设的工作没有完成，则标志一直为1，CPU不断循环检测该标志，直到标志为不忙为止。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/71de03d5-8111-44f5-96fa-15ee82e189c0"></div><h4 id="使用中断的可编程I-O方式"><a href="#使用中断的可编程I-O方式" class="headerlink" title="使用中断的可编程I/O方式"></a>使用中断的可编程I/O方式</h4><p>CPU设定I/O设备的初始值，然后不再忙等待，运行其他进程，当前进程阻塞；I/O设备完成对当前数据的处理后，向CPU发出中断，I/O中断处理程序将负责传送剩余数据。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/5019de9a-b7c9-4eeb-a0a9-d00882dbd3ea"></div><h4 id="直接存储器访问-DMA-方式"><a href="#直接存储器访问-DMA-方式" class="headerlink" title="直接存储器访问(DMA)方式"></a>直接存储器访问(DMA)方式</h4><p>采用中断驱动IO方式时的CPU，是以字为单位进行干预的。如果将这种方式用于块设备的I／O，是极其低效的。如：为了从磁盘中读出1KB的数据块；需要中断1K次CPU。而DMA方式使用独立的DMA控制器代替CPU的工作，I/O设备与DMA通信，DMA在传输完成一个数据缓冲区之后再向CPU发中断。</p><ul><li>数据传输的基本单位是数据块，即CPU与IO设备之间，每次传送至少是一个数据块，主要用在块设备的IO操作中。</li><li>在DMA方式中，利用总线直接连接外设和内存，由DMA控制机构窃取总线占有权，完成外设与内存间的成批数据交换。所传送的数据是从设备直接送入内存的，或者相反。</li><li>仅在传送一个或多个数据块的开始和结束时，才需CPU干预，整块数据的传送是在控制器的控制下完成的，不再需要CPU进行干预。</li></ul><h4 id="I-O通道控制方式"><a href="#I-O通道控制方式" class="headerlink" title="I/O通道控制方式"></a>I/O通道控制方式</h4><p>使用DMA方式，CPU每发出一条I/O指令，只能读写一个连续的数据块。如果需要一次去读多个离散的数据块且将它们分别送到不同的内存区域，则需要CPU分别发出多条I/O指令及进行多次中断处理，才能完成。<br>而IO通道可实现CPU、通道和I/O设备三者的并行操作，进一步提高CPU与外设之间的并行工作能力，使I/O操作形成独立于CPU的体系，减少CPU的负担，使外设与内存的数据交换更加灵活，从而更有效地提高整个系统的资源利用率。</p><p><br></p><h2 id="与设备无关的I-O软件"><a href="#与设备无关的I-O软件" class="headerlink" title="与设备无关的I/O软件"></a>与设备无关的I/O软件</h2><p>为了便于对外设进行管理，系统对每台进入计算机系统中的设备都给定一个对应的编号，作为调用时识别和区分设备用。这种编号无任何重复，一般被称为设备的绝对号（或物理设备名）。早期操作系统，应用程序直接使用物理设备名称，非常不灵活。所以引入逻辑设备名，规定用户申请外设时，只需要向系统说明所需用的某类设备真正在实际中使用哪台设备，由系统根据这类设备的应用情况作出分配。</p><p><br></p><h3 id="设备分配"><a href="#设备分配" class="headerlink" title="设备分配"></a>设备分配</h3><p>在多道程序环境下，设备不允许用户自行使用，而必须由系统分配。对于进程的IO请求，只要是安全（无死锁），设备分配程序便按照一定的策略进行设备分配。数据结构：</p><p><strong>系统设备表SDT（System Device Table）</strong></p><ul><li>整个系统中只有一张，全面反映了系统中的外设资源的类型、数量、占用情况等。</li><li>在SDT表中，每个接入系统中的外围设备都占有一个表目项。登录了该设备的名称、标识、设备控制表DCT的入口地址、设备驱动程序的入口地址及占用设备的进程名称等相关信息。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/539d5402-4cc5-490c-985c-fad795ce64ac"></div><p><strong>设备控制表DCT（Device Control Table）</strong><br>每台设备都有一张设备控制表DCT，用于记录本设备的情况。</p><ul><li>Type：设备类型</li><li>Deviceid:设备标识符</li><li>设备队列队首指针</li><li>设备状态：标识设备忙或者空闲；</li><li>与设备连接的控制器表指针。</li><li>重复执行次数</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/2c6655c2-822f-4ab3-9687-fcd81f033f9d"></div><p><strong>控制器控制表COCT（Controller Control Table）</strong><br>每个控制器都有一张，用于记录某控制器的使用分配情况及与该控制器相连的通道的情况。</p><ul><li>控制器号：控制器的内部标识符。</li><li>控制器状态：控制器忙/闲，好/坏的状态标志。</li><li>通道指针：指向与该控制器相联的通道控制表CHCT，当控制器与若干通道连接时该项内含多个指针。</li><li>等待队列指针：指向等待该控制器的I/O进程队列</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/5a78bf33-edc8-44fa-a002-b0353ed26c29"></div><p><strong>通道控制表CHCT（Channel Control Table）</strong><br>反映了通道的情况，系统中的每个通道一张CHCT。</p><ul><li>通道号：通道内部标识符</li><li>通道状态：通道的各种状态（好/坏，已分/未分等）的反映</li><li>等待队列指针：等待该通道的I/O进程队列的首位置</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/bace2576-4035-437b-a4ac-30414ffea488"></div><p><br></p><h3 id="设备分配算法"><a href="#设备分配算法" class="headerlink" title="设备分配算法"></a>设备分配算法</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/6b9fe6d2-8133-4526-82a3-08a24238ae27"></div><p><br></p><h2 id="用户层的I-O软件"><a href="#用户层的I-O软件" class="headerlink" title="用户层的I/O软件"></a>用户层的I/O软件</h2><h3 id="系统调用与库函数"><a href="#系统调用与库函数" class="headerlink" title="系统调用与库函数"></a>系统调用与库函数</h3><p>用户层软件必须使用一组系统调用来取得操作系统服务，在高级语言中都提供了相应的库函数来完成此功能。</p><p><br></p><h3 id="SPOOLing程序"><a href="#SPOOLing程序" class="headerlink" title="SPOOLing程序"></a>SPOOLing程序</h3><p>多道程序技术将一台CPU虚拟为多台CPU，从而可以提高CPU的利用率。而SPOOLing系统是模拟脱机输入输出系统来实现多个用户共享一台物理IO设备。</p><ul><li>脱机输入输出系统的IO处理机 对应 SPOOLing程序。</li><li>脱机输入输出系统的高速缓冲 对应 内存。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e7324c67-1eb4-4616-a966-8e8b29021a1e"></div><p><br></p><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p><strong>单缓冲区</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/92ffc296-47a4-4a11-9bd8-8ab8b45505cc"></div><p><strong>双缓冲区</strong><br>为输入或输出分配两个缓冲区，让两个缓冲区交替工作，形成并行操作的方式。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/11af4878-bdf2-4196-ae83-b8365f4e09ae"></div><p><strong>环形缓冲区</strong></p><ul><li>空缓冲区R：用于存放数据（指针：Nexti）</li><li>已装满数据的缓冲区G：其中的数据提供给进程使用。（指针：Nextg）</li><li>现行工作缓冲区C：当前进程使用的缓冲区。（指针：Current）</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/7da390f7-d59f-4fb1-8ce8-f5eac19bd508"></div><p><br></p><h2 id="磁盘存储器的性能和调度"><a href="#磁盘存储器的性能和调度" class="headerlink" title="磁盘存储器的性能和调度"></a>磁盘存储器的性能和调度</h2><div align="center"><img src="http://blogfileqiniu.isjinhao.site/fcb16fbb-dee2-4438-ae5c-070fa08106e0"></div>当磁盘驱动器执行读/写功能时。盘片装在一个主轴上，并绕主轴高速旋转，当磁道在读/写头（又叫磁头）下通过，就可以进行数据的读/写了。 一般磁盘分为固定头盘（磁头固定）和活动头盘。固定头盘的每一个磁道上都有独立的磁头，它是固定不动的，专门负责这一磁道上数据的读/写。 活动头盘 （如上图）的磁头是可移动的。每一个盘面上只有一个磁头（磁头是双向的，因此正反盘面都能读写）。它可以从该面的一个磁道移动到另一个磁道。所有磁头都装在同一个动臂上，因此不同盘面上的所有磁头都是同时移动的（行动整齐划一）。当盘片绕主轴旋转的时候，磁头与旋转的盘片形成一个圆柱体。各个盘面上半径相同的磁道组成了一个圆柱面，我们称为柱面 。因此，柱面的个数也就是盘面上的磁道数。<br>### 磁盘访问时间 1. 寻道时间$T_s$：$T_s = s$ 2. 旋转延迟时间$T_τ$：$T_t = \frac{1}{2r}$ 3. 磁盘访问时间 ：$T_t=\frac{b}{rN}$ $s$是指磁头从当前位置定位到开始点的时间，$b$是传输的字节数，$r$是每秒的转数，$N$是一条磁道上的字节数。$总时间 = T_s + \frac{1}{2r} + \frac{b}{rN}$<br>### 磁盘调度算法 假设磁盘访问序列：98，183，37，122，14，124，65，67，读写头起始位置：53。 #### 先来先服务 按访问请求到达的先后次序服务。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/3d7fcac5-9594-490a-8922-5591670a9fe7"></div><h4 id="最短寻道时间优先"><a href="#最短寻道时间优先" class="headerlink" title="最短寻道时间优先"></a>最短寻道时间优先</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/4f6b90ae-cda1-4121-a194-e5d05c399f1e"></div><h4 id="扫描算法"><a href="#扫描算法" class="headerlink" title="扫描算法"></a>扫描算法</h4><p>当设备无访问请求时，磁头不动；当有访问请求时，磁头按一个方向移动，在移动过程中对遇到的访问请求进行服务，然后判断该方向上是否还有访问请求，如果有则继续扫描；否则改变移动方向，并为经过的访问请求服务，如此反复。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/5d8e546a-f8a3-4325-b885-2888c59c10ac"></div><h4 id="循环扫描算法"><a href="#循环扫描算法" class="headerlink" title="循环扫描算法"></a>循环扫描算法</h4><p>CSCAN算法规定磁头单向移动，例如由里向外移动，当磁头移到最外的磁道并访问后磁头立即返回到最里的欲访<br>问磁道，即最小磁道号紧接最大磁道号构成循环，进行循环扫描。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/
      
    
    </summary>
    
      <category term="操作系统" scheme="https://isjinhao.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://isjinhao.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>html5_handle_camera_image</title>
    <link href="https://isjinhao.github.io/posts/1237.html/"/>
    <id>https://isjinhao.github.io/posts/1237.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:26.950Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="H5启用默认摄像头"><a href="#H5启用默认摄像头" class="headerlink" title="H5启用默认摄像头"></a>H5启用默认摄像头</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/holder.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">/**</span></span><br><span class="line"><span class="undefined"> * constraints：打开摄像头时约束，下面的约束对video没有约束，它选择设备的默认摄像头，但是禁止了音频</span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> constraints = &#123;</span></span><br><span class="line"><span class="undefined">       video: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">       audio : <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> promise;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(navigator.mediaDevices.getUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//最新标准API</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.mediaDevices.getUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitGetUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//webkit内核浏览器</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.webkitGetUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.mozGetUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Firefox浏览器</span></span></span><br><span class="line"><span class="undefined">        promise = navagator.mozGetUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//旧版API</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.getUserMedia(constraints);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">MediaStream</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        video.srcObject = MediaStream;</span></span><br><span class="line"><span class="undefined">        video.play();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">class</span>=<span class="string">"myvideo"</span> <span class="attr">style</span>=<span class="string">"border-radius: 10%;"</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">autoplay</span>=<span class="string">"autoplay"</span> &gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><ul><li>上面的代码只能打开设备默认摄像头，在手机上会是前置摄像头。</li><li>此博文代码测试时间为<code>2019.4.7</code>。在开启摄像头这一块，不同的浏览器兼容性很差，而且标准进年来改动过大，很多的<code>API</code>都被弃用，所以不能使用时请勿喷。</li></ul><p><br></p><h2 id="H5启用手机后置摄像头"><a href="#H5启用手机后置摄像头" class="headerlink" title="H5启用手机后置摄像头"></a>H5启用手机后置摄像头</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/holder.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 此API请求可用媒体输入和输出设备的列表，例如麦克风，摄像头，耳机等。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> promoseDevs = navigator.mediaDevices.enumerateDevices();</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> exArray = [];</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">promoseDevs.then(<span class="function"><span class="keyword">function</span>(<span class="params">devices</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">        devices.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">dv</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> kind = dv.kind;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//我们需要的是摄像头，所以匹配video</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (kind.match(<span class="regexp">/^video.*/</span>)) &#123;</span></span><br><span class="line"><span class="undefined">            exArray.push(dv.deviceId);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(dv);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    alert(<span class="string">"摄像头个数："</span> + exArray.length);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">     <span class="comment">// 设置启用摄像头时的约束，在手机端约束摄像头为后置</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> constraints = &#123;</span></span><br><span class="line"><span class="undefined">    video: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 如果电脑插入了多个摄像头，在这里可以进行选择</span></span></span><br><span class="line"><span class="undefined">    deviceId: exArray[exArray.length - 1]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    audio : <span class="literal">false</span>  </span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> promise;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//最新的标准API</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.mediaDevices.getUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitGetUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//webkit核心浏览器</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.webkitGetUserMedia(constraints, success, error)</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.mozGetUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//firfox浏览器</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.mozGetUserMedia(constraints, success, error);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//旧版API</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.getUserMedia(constraints, success, error);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">MediaStream</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            video.srcObject = MediaStream;</span></span><br><span class="line"><span class="undefined">            video.play();</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"> &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">class</span>=<span class="string">"myvideo"</span> <span class="attr">style</span>=<span class="string">"border-radius: 10%;"</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">autoplay</span>=<span class="string">"autoplay"</span> &gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="H5实现图片预览"><a href="#H5实现图片预览" class="headerlink" title="H5实现图片预览"></a>H5实现图片预览</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/holder.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">select_file</span>(<span class="params">fileid</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(fileid).click();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//预览图片并获得图片的base64编码</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">imgPreview</span>(<span class="params">fileDom</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//判断是否支持FileReader</span></span></span><br><span class="line"><span class="undefined">    /**</span></span><br><span class="line"><span class="undefined">     * FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件</span></span><br><span class="line"><span class="undefined">     */</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.FileReader) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"请更新您的浏览器！"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取文件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> file = fileDom.files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> imageType = <span class="regexp">/^image\//</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//是否是图片</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!imageType.test(file.type)) &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"请选择图片文件！"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">     * readAsDataURL 方法会读取指定的 Blob 或 File 对象。返回文件的base64编码</span></span><br><span class="line"><span class="undefined">     */</span></span><br><span class="line"><span class="undefined">    reader.readAsDataURL(file);</span></span><br><span class="line"><span class="undefined">    /**</span></span><br><span class="line"><span class="undefined">     * 当文件读取完成的时候会回调此函数，e就是获取的文件</span></span><br><span class="line"><span class="undefined">     */</span></span><br><span class="line"><span class="javascript">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取图片dom</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//e是获取的文件，reader.readAsDataURL(file);读取的Base64编码存放在target.result中</span></span></span><br><span class="line"><span class="undefined">        img.src = e.target.result;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-title"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"image"</span> <span class="attr">onchange</span>=<span class="string">"imgPreview(this)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"height: 200px; border-radius: 50%;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"holder.js/300x300"</span> <span class="attr">onclick</span>=<span class="string">"select_file('image');"</span> <span class="attr">id</span>=<span class="string">"img"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="canvas把摄像头拍摄到的视频保存为图片"><a href="#canvas把摄像头拍摄到的视频保存为图片" class="headerlink" title="canvas把摄像头拍摄到的视频保存为图片"></a>canvas把摄像头拍摄到的视频保存为图片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/holder.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">/**</span></span><br><span class="line"><span class="undefined"> * constraints：打开摄像头时约束，下面的约束对video没有约束，它选择设备的默认摄像头，但是禁止了音频</span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> constraints = &#123;</span></span><br><span class="line"><span class="undefined">       video: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">       audio : <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> promise;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(navigator.mediaDevices.getUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//最新标准API</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.mediaDevices.getUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitGetUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//webkit内核浏览器</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.webkitGetUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.mozGetUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Firefox浏览器</span></span></span><br><span class="line"><span class="undefined">        promise = navagator.mozGetUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//旧版API</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.getUserMedia(constraints);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">MediaStream</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        video.srcObject = MediaStream;</span></span><br><span class="line"><span class="undefined">        video.play();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">class</span>=<span class="string">"myvideo"</span> <span class="attr">style</span>=<span class="string">"border-radius: 10%;"</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">autoplay</span>=<span class="string">"autoplay"</span> &gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>画图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"b"</span>);  </span></span><br><span class="line"><span class="javascript">    btn.onclick =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span></span><br><span class="line"><span class="javascript">    ctx=c.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="undefined">        ctx.drawImage(video, 0, 0, 270, 135);</span></span><br><span class="line"><span class="undefined">    &#125;  </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>转化为file</strong><br>此标题中说的<code>file</code>是表单中<code>&lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt;</code>。<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap/css/bootstrap.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bootstrap/holder.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">/**</span></span><br><span class="line"><span class="undefined"> * constraints：打开摄像头时约束，下面的约束对video没有约束，它选择设备的默认摄像头，但是禁止了音频</span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> constraints = &#123;</span></span><br><span class="line"><span class="undefined">       video: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">       audio : <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> promise;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(navigator.mediaDevices.getUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//最新标准API</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.mediaDevices.getUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitGetUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//webkit内核浏览器</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.webkitGetUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.mozGetUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Firefox浏览器</span></span></span><br><span class="line"><span class="undefined">        promise = navagator.mozGetUserMedia(constraints);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//旧版API</span></span></span><br><span class="line"><span class="undefined">        promise = navigator.getUserMedia(constraints);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">MediaStream</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        video.srcObject = MediaStream;</span></span><br><span class="line"><span class="undefined">        video.play();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getBase64</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获得Canvas对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> cas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ctx = cas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">"video"</span>);</span></span><br><span class="line"><span class="undefined">    ctx.drawImage(video, 0, 0, 500, 400);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> data = cas.toDataURL(<span class="string">'image/png'</span>, <span class="number">0.1</span>);<span class="comment">//1表示质量(无损压缩)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> data;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//'file'  等价于   浏览本地文件上传时本地文件的名字</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoFile</span>(<span class="params">dataurl, filename = <span class="string">'file'</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">dataurl = dataurl + <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span></span><br><span class="line"><span class="javascript">        bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">while</span>(n--)&#123;</span></span><br><span class="line"><span class="undefined">        u8arr[n] = bstr.charCodeAt(n);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], filename, &#123;<span class="attr">type</span>:mime&#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">autoplay</span>=<span class="string">"autoplay"</span> &gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>画图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"500px"</span> <span class="attr">height</span>=<span class="string">"500px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"b"</span>);  </span></span><br><span class="line"><span class="javascript">    btn.onclick =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(dataURLtoFile(getBase64()));</span></span><br><span class="line"><span class="undefined">    &#125;  </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><br></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/isjinhao/html5-handle-img">https://github.com/isjinhao/html5-handle-img</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;H5启用默认摄像头&quot;&gt;&lt;a href=&quot;#H5启用默认摄像头&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="前端" scheme="https://isjinhao.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://isjinhao.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>opencv实现人脸识别、人脸打框、人脸剪切</title>
    <link href="https://isjinhao.github.io/posts/38658.html/"/>
    <id>https://isjinhao.github.io/posts/38658.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:26.961Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="Opencv在各平台上的配置"><a href="#Opencv在各平台上的配置" class="headerlink" title="Opencv在各平台上的配置"></a>Opencv在各平台上的配置</h2><p><a href="https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html。">https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html。</a><br>下面的代码使用opencv3.4.5</p><p><br></p><h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><div align="center"><img src="http://blogfileqiniu.isjinhao.site/475f4c0c-dbef-4a66-88fd-3ed9f781886f"></div><p><br></p><h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><p><strong>代码</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Core;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Mat;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.MatOfRect;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Rect;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line"><span class="keyword">import</span> org.opencv.objdetect.CascadeClassifier;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetImgFace</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String classifier = <span class="string">"D:/opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 必须要加载Opencv的Library</span></span><br><span class="line">System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图片路径不能有中文...</span></span><br><span class="line">GetImgFace.getImgFace(<span class="string">"C:\\Users\\ISJINHAO\\Desktop\\test.jpg"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Rect&gt; <span class="title">getImgFace</span><span class="params">(String imgPath)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 加载分类器，选择已经训练好的opencv分类器，训练器路径：%OPENCV_HOME%/sources/data/haarcascades/</span></span><br><span class="line"><span class="comment">  * 分类器包含眼睛，人脸，人体，微笑等等，其中对于仅仅识别人脸来说，最好的训练器是：</span></span><br><span class="line"><span class="comment">  * haarcascade_frontalface_default.xml</span></span><br><span class="line"><span class="comment">  * haarcascade_frontalface_alt.xml</span></span><br><span class="line"><span class="comment">  * haarcascade_frontalface_alt2.xml</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分类器路径不要有中文...</span></span><br><span class="line">CascadeClassifier faceDetector = <span class="keyword">new</span> CascadeClassifier(classifier);</span><br><span class="line"><span class="keyword">if</span> (faceDetector.empty()) &#123;</span><br><span class="line">System.out.println(<span class="string">"请选择正确的分类器！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建Mat，Mat是用来保存图片信息的类。Imgcodecs是用来读取图片的工具类</span></span><br><span class="line">Mat image = Imgcodecs.imread(imgPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测人脸，检测结果存在faceDetections中</span></span><br><span class="line">MatOfRect faceDetections = <span class="keyword">new</span> MatOfRect();</span><br><span class="line">faceDetector.detectMultiScale(image, faceDetections);</span><br><span class="line">List&lt;Rect&gt; faceList = Arrays.asList(faceDetections.toArray());</span><br><span class="line">System.out.println(faceList);</span><br><span class="line"><span class="keyword">return</span> faceList;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>结果</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e4b50851-240f-4ca4-909b-906b949115da"></div><p><br></p><h2 id="人脸打框"><a href="#人脸打框" class="headerlink" title="人脸打框"></a>人脸打框</h2><p><strong>代码</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Mat;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Point;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Rect;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Scalar;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgproc.Imgproc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaceRect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String imgPath = <span class="string">"C:\\Users\\ISJINHAO\\Desktop\\test.jpg"</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Rect&gt; faceRects = GetImgFace.getImgFace(imgPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把识别出来的图片分别打框</span></span><br><span class="line">Iterator&lt;Rect&gt; iterator1 = faceRects.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator1.hasNext()) &#123;</span><br><span class="line">Rect rect = iterator1.next();</span><br><span class="line">FaceRect.imageMark(imgPath, <span class="string">"D:\\test\\"</span> + UUID.randomUUID() + <span class="string">".jpg"</span>, rect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在一张图片中把所有识别出来的人脸都打框</span></span><br><span class="line">Mat image = Imgcodecs.imread(imgPath);</span><br><span class="line">Iterator&lt;Rect&gt; iterator2 = faceRects.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator2.hasNext()) &#123;</span><br><span class="line">Rect rect = iterator2.next();</span><br><span class="line">Imgproc.rectangle(image, <span class="keyword">new</span> Point(rect.x, rect.y), <span class="comment">// 左上点</span></span><br><span class="line"><span class="keyword">new</span> Point(rect.x + rect.width, rect.y + rect.height), <span class="comment">// 右下点</span></span><br><span class="line"><span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>); <span class="comment">// 框的颜色和粗细</span></span><br><span class="line">&#125;</span><br><span class="line">Imgcodecs.imwrite(<span class="string">"D:\\test\\"</span> + UUID.randomUUID() + <span class="string">".jpg"</span>, image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">imageMark</span><span class="params">(String imagePath, String outFilePath, Rect rect)</span> </span>&#123;</span><br><span class="line">Mat image = Imgcodecs.imread(imagePath);<span class="comment">// 原始图片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Imgproc.rectangle的作用是在修改image中的数据，把相应的位置打上框</span></span><br><span class="line">Imgproc.rectangle(image, <span class="keyword">new</span> Point(rect.x, rect.y), <span class="comment">// 左上点</span></span><br><span class="line"><span class="keyword">new</span> Point(rect.x + rect.width, rect.y + rect.height), <span class="comment">// 右下点</span></span><br><span class="line"><span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>); <span class="comment">// 框的颜色和粗细</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把mat写入图片</span></span><br><span class="line">Imgcodecs.imwrite(outFilePath, image);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> File(outFilePath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>结果</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/8c536395-fde0-4623-9f60-b774f185df2a"></div><p><br></p><h2 id="人脸剪切"><a href="#人脸剪切" class="headerlink" title="人脸剪切"></a>人脸剪切</h2><p><strong>代码</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Mat;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Rect;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Size;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgproc.Imgproc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaceCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String imgPath = <span class="string">"C:\\Users\\ISJINHAO\\Desktop\\test.jpg"</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Rect&gt; faceRects = GetImgFace.getImgFace(imgPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把识别出来的图片分别打框</span></span><br><span class="line">Iterator&lt;Rect&gt; iterator1 = faceRects.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator1.hasNext()) &#123;</span><br><span class="line">Rect rect = iterator1.next();</span><br><span class="line">FaceCut.imageCut(imgPath, <span class="string">"D:\\test\\"</span> + UUID.randomUUID() + <span class="string">".jpg"</span>, rect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">imageCut</span><span class="params">(String imagePath, String outFilePath, Rect rect)</span> </span>&#123;</span><br><span class="line">Mat image = Imgcodecs.imread(imagePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照原始图片中的人脸提取出来</span></span><br><span class="line">Mat sub = image.submat(rect);</span><br><span class="line">Mat mat = <span class="keyword">new</span> Mat();</span><br><span class="line">Size size = <span class="keyword">new</span> Size(rect.width, rect.height);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改提取出来的人脸信息sub在坐标轴的位置。</span></span><br><span class="line">Imgproc.resize(sub, mat, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将截图保存</span></span><br><span class="line">Imgcodecs.imwrite(outFilePath, mat);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> File(outFilePath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>结果</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a966abaa-95c7-4e78-9eac-b8d1d8ee9859"></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;Opencv在各平台上的配置&quot;&gt;&lt;a href=&quot;#Opencv在各平台上的配置&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://isjinhao.github.io/posts/63534.html/"/>
    <id>https://isjinhao.github.io/posts/63534.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:26.970Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><p><br></p><h2 id="存储器的层次"><a href="#存储器的层次" class="headerlink" title="存储器的层次"></a>存储器的层次</h2><p>我们都知道存储器的容量和速度是限制计算机发展的一大原因，人们对存储器的要求需要既快又大，但是这样带来的结果就是存储器的造价非常昂贵，所以不可能在计算机中全部配置既快又大的存储器。所以现代的计算机系统中都配置了多层结构的存储器系统来平衡速度差异问题。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/57187fc9-7345-44d6-af47-47ab8b2f4256"></div>存储器一般被分成六层，不过在只有前四层属于内存，所以此篇只介绍前四层。 **主存储器** - 用于保存进程运行时的程序和数据。 - 对于微机系统和大中型机，容量为数十MB到数GB；对于嵌入式系统，容量为数十KB到数MB。 - CPU从主存读取指令和数据。 - CPU与外设交换信息要依托主存。 - 为缓解CPU执行指令速度和主存访问速度的矛盾，引入寄存器和高速缓冲。 **寄存器** - 访问速度做快，完全与CPU协调工作，价格十分昂贵，容量不可能很大。 - 长度一般以字为单位。 - 对于微机系统和大中型机，可能有几十个甚至上百个；对于嵌入式系统，仅有几个到几十个。 **高速缓冲** - 容量大于或远大于寄存器，比内存小两到三个数量级左右，从几十KB到几MB。 - 访问速度快于主存。 - 将主存中经常访问的信息存放在高速缓冲，减少访问主存次数。 **磁盘缓冲** - 将一部分频繁使用的磁盘数据和信息，暂时存放在磁盘缓冲中，减少访问磁盘次数。 - 不是实际存在的存储介质，利用主存的存储空间，暂存从磁盘读出或写入的信息。 总结一下：磁盘缓冲是为了解决内存和外存的速度差异而在内存中开辟的一块用于暂存磁盘数据的存储介质。主存储器是保存进程运行时的程序和数据的。寄存器是和CPU速度匹配的存储器，直接给CPU提供数据。虽然CPU是直接从寄存器去取指令和数据，但是寄存器的数据来源最终还是主存储器，所以为了减少访问CPU的次数，产生了高速缓冲来缓和寄存器和主存储器的矛盾。至于为什么能缓和呢？这是由于[程序局部性原理](https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86/15572003)。 **程序局部性原理** 指程序在执行时呈现出局部性规律，即在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。 局部性原理又表现为：时间局部性和空间局部性。 - 时间局部性：如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。 - 空间局部性：一旦程序访问了某个存储单元，则不久之后。其附近的存储单元也将被访问。 另外，根据程序的局部性理论，Denning提出了工作集理论。所谓工作集是指进程运行时被频繁访问的页面集合。显然我们知道只要使程序的工作集全部集中在内存中，就可以大大减少进程的缺页次数；否则会使进程在运行过程中频繁出现缺页中断，从而出现频繁的页面调入/调出现象，造成系统性能的下降，甚至出现“抖动”。 划分工作集可以按定长时间或定长页面两种方法进行划分。当颠簸现象发生时，说明系统的负荷过大，通常采用处理器均衡调度。另一种是控制缺页率，当缺页率达到上限时，则增加内存分配量；当缺页率达到下限时，就减少内存的分配量。<br><br>## 程序的装入和链接 用户程序要在系统中运行，必须将它装入内存，其中有三个过程。 - 编译：由编译程序（Complier）将用户源代码编译成若干个目标模块（Object Module）； - 链接：由链接程序（Linker）将编译后形成的目标模块以及它们所需要的库函数，链接在一起，形成一个装入模块（Load Module）； - 装入：由装入程序(Loader)将装入模块装入内存。<br><br>### 链接 链接程序的功能是将经过编译后得到的一组目标模块以及它们所需要的库函数，装配成一个完整的装入模块。 #### 静态链接方式 生成可执行文件时进行链接。主要有两步。 1. 修改相对地址。 2. 变换外部调用符号。 #### 装入时动态链接 目标模块是在装入内存时，边装入边链接的。装入时动态链接方式有以下优点： - 便于修改和更新。 - 便于实现对目标模块的共享。 #### 运行时动态链接 将对某些模块的链接推迟到执行时才执行，即在执行过程中，当发现一个被调用模块尚未装入内存时，立即由OS去找到该模块并将之装入内存， 把它链接到调用者模块上。 凡在执行过程中未被用到的目标模块，都不会被调入内存和被链接到装入模块上，这样不仅可加快程序的装入过程，而且可节省大量的内存空间。<br><br>### 装入 装入是将一个具有执行资格的模块加载进内存。 #### 绝对装入方式 在可执行文件中指定内存地址，装入时直接定位在上述（即文件中记录的地址）内存地址。逻辑地址和物理地址完全相同。 #### 可重定位装入方式 编译程序所生成的目标模块中采用逻辑地址，根据当前内存情况，将装入模块装入到适当位置。地址映射是在装入模块装入内存时一次性进行的，即是静态重定位。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/828b8bca-cc39-4f95-b638-ac687aed4c82"></div><h4 id="动态运行时装入方式"><a href="#动态运行时装入方式" class="headerlink" title="动态运行时装入方式"></a>动态运行时装入方式</h4><p>静态重定位时程序装入内存后不能移动，而且通常需要占用连续的内存空间。所以与其对应的动态重定位是将地址映射工作推迟到程序真正执行时才进行。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/0dd5a600-9e18-4e30-ac2b-4ed1ae698a76"></div><br><br>### 现代计算机运行过程 - 预处理 - 把存储在不同文件中的源程序聚合在一起。 - 把被称为宏的缩写语句转换为原始语句。 - 编译：将高级语言翻译成汇编语言或机器语言。 - 链接 - 将多个可重定位的机器代码文件（包括库文件）连接到一起。 - 解决外部内存地址（一个文件中的代码会引用其他文件中的数据对象或过程，这些数据对象或过程的地址对于此文件来说就是外部地址）问题。 - 装入 确定程序在内中的绝对地址（即修改程序起始地址），将修改后的指令和数据放到内存中适当的位置。<br><br>### 连续分配存储管理方式 连续分配是指为一个用户程序分配空间的时候，将所有程序装入到一段连续的物理内存中。在早期（20世纪60-80 年代）的操作系统中，这种分配内存的方式曾经被广泛的使用。 #### 单一连续分配 这是最简单的一种存储管理方式，但只能用于单用户、单任务的操作系统中。内存分为以下两个分区：系统区和用户区。操作系统使用系统区；应用程序装入到用户区，可使用用户区全部空间。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/6832a4fb-0a2c-4580-9d61-53421c11028f"></div><h4 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h4><p>固定分区式分配，是最早使用的一种可运行多道程序的存储管理方式。它将内存空间划分为若干个固定大小的区域，每个分区大小可相同，也可不同。OS占一区，其余每个分区中可以装入一道作业。<br>为了便于内存分配，系统需建立一张分区使用表。当有一用户程序要装入时，从表中找出一个能满足要求的、尚未分配的分区分配给该程序，然后修改分区使用表。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/3dedf899-aaec-438b-8000-1697086bf1d5"></div><h4 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h4><p><strong>数据结构</strong></p><ul><li>空闲分区表<ul><li>每个空闲分区占用一个表项。</li><li>分区表的表项中包含分区号、分区始址及分区大小等表目。</li><li>表长不易确定。</li><li>占用额外内存。</li></ul></li><li>空闲分区链表<ul><li>利用各空闲分区自身的单元组成双向链表。</li><li>操作速度较慢。</li></ul></li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/50d0b9cb-d452-4651-be2f-ec582dcbf9a3"></div><p><strong>分区分配</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/f97ae2b8-f686-472d-b570-dd787528f453"></div><p><strong>分区回收</strong></p><ul><li>如果回收区的前后有空闲区，可分为图示三种情况。回收时将空闲区和回收区合并。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/903e731f-002e-47b0-8bd7-6a8fa4ece434"></div>- 如果回收区的前后无空闲区，新建一个表项，填写信息插入。 #### 分区检索算法 **顺序检索算法** - 首次适应算法：按各空闲分区首址的升序的方法组织，分配时，按空闲分区表（或空闲分区链）的先后次序，从头查找，找到符合要求的第一个分区。 - 循环首次适应算法：分配空闲空间时，不是从链首（或表头）开始查找，而是从上次找到的空闲分区的下一个空闲分区开始查找。 - 最佳适应算法：按空闲区大小的升序方法组织，分配时，按空闲分区表（或空闲分区链）的先后次序，从 头查找，找到符合要求的第一个分区。就说明它是最适合的（即最佳的）。 - 最坏适应算法：按空闲区大小的降序方法组织，分配时总是取空闲分区表（或空闲分区链）中的第一项， 若大小不能满足申请者的要求，则表示系统中无满足要求的空闲区，分配失败；否则分配。 **索引检索算法** - 快速适应算法：将空闲分区根据其容量大小进行分类，对于每一类具有相同容量的所有空闲分区，单独设立一个空闲分区链表，同时在内存中设立一张管理索引表，该表的每一个表项对应一种空闲分区类型，并记录其表头指针。空闲分区的分类是根据进程常用的空间大小进行划分，对于其他大小的分区，可以放在一个特殊的空闲区链表中。 - 伙伴系统：分区大小均为2的K次幂。假设系统可利用空间容量为$2^m$个字，系统运行过程中，不断划分，将空闲分区根据大小分类。为长度为n的进程分配分区时，首先计算$i$值使得$2^{i-1}≦n≦2^i$。先找大小为$2^i$的分区分配，否则找大小为$2^{i+1}$的分区分配，把$2^{i+1}$分区分成两个$2^i$分区（互称伙伴），一个分配，另一个加入$2^i$的空闲分区链表。分配可能经过多次分割，回收可能进行多次合并。 - 哈希算法：根据空闲分区在可利用空闲区表中的分布规律，建立哈希函数，构造一张以空闲分区大小为关键字的哈希表，该表的每一个表项记录了一个对应的空闲分区链表表头指针。当进行空闲分区分配时，根据所需空闲分区大小，通过哈希函数计算，即得到在哈希表中的位置，从中得到相应的空闲分区链表，实现最近分配策略。 #### 紧凑 可变式分区也有零头问题。在系统不断地分配和回收中，必定会出现一些不连续的小的空闲区，称为外零头。虽然可能所有零头的总和超过某一个作业的要求，但是由于不连续而无法分配。解决零头的方法是拼接（或称紧凑），即向一个方向（例如向低地址端）移动已分配的作业，使那些零散的小空闲区在另一方向连成一片。分区的拼接技术，一方面是要求能够对作业进行重定位，另一方面系统在拼接时要耗费较多的时间。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/14408d45-b0be-4d64-96a0-7dbca67e8a9c"></div><br><br>## 分页存储管理方式 ### 基本概念 **页面** 将一个进程的逻辑地址空间分成若干个大小相等的片，称为页面或页。 **物理块** 把内存空间分成与页面相同大小的若干个存储块，称为（物理）块或页框（frame）。 **页面碎片** 由于进程的最后一页经常装不满一块而形成了不可利用的碎片，称之为“页内碎片”。 **页面大小** 每一页可进行编址的地址数目。页面大小应该满足2的n此幂。 - 方便计算：如果要将（线性）地址转换为`page：offset`，则需要将地址除以页面大小，并将整数答案作为页面，将余数作为偏移量。 这是使用编程语言中的整数除法和模数运算符完成的。 计算机将地址表示为数字，存储为二进制位。 这是一个示例地址：`12`是二进制`1100`。 如果页面大小为`3`，那么我们需要计算`12/3`和`12%3`来查找页面和偏移量（分别为`4`、`0`）。 但是，如果页面大小为`4`（`2`的幂），则二进制中的`4`为`100`，此时使用特殊的“快捷方式”计算整数除法和模数：右移进行除法，按位与进行取模。所以： `12/4 == 12>>2`（右移两位） `12%4 == 12&(4-1)`（`1100`和`11`按位与）。同时页面大小转为2进制可以使用左移，可以减小时间开销。 - 充分利用空间：如果页面大小不满足2的n次幂，假如是5，则页内偏移地址，采用2位则每页有一个地址不能使用，采用3位则`111`、`110`、`101`未被使用。怎么做都不能完全利用地址空间。 **逻辑地址**<div align="center"><img src="http://blogfileqiniu.isjinhao.site/59533072-5531-4107-b7c6-5f20e3bc7e61"></div><p><strong>页表</strong><br>系统为每个进程建一张页表，其在内存的起始地址和长度记录在该进程的PCB中。页表的每一行是一个页表项。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/afba25ae-a6a3-49e5-b02e-8232928d59bd"></div><p><strong>页表项长度</strong><br>每个页表项占用的编址个数。从逻辑地址那里我们可以看到页号占用了20位，对应的块号也要占用20位，当然块号本身可能不止$2^{20}$个。又由于为了控制对物理块的读写等操作，会在页表项中加上控制字段。如果内存按字节编址，即每个编址可以存储8个二进制位，那么页表项占用的二进制位总数大于内存的字长度。我们需要把一个页表项拆开存放在多个编址后的空间中。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a1fad94a-ee4e-4421-97e1-eb7004253ca0" style="width:80%"></div><br><br>### 地址变换 #### 普通地址变换<div align="center"><img src="http://blogfileqiniu.isjinhao.site/7dac4487-37f0-436c-a5b6-7d59d47be7b6"></div>$物理地址=块号+块内地址=F(逻辑地址的页号*页表项长度+页表始址)+业内地址$。 每次进行地址变换需要访问两次内存，内存速度较慢，所以影响计算机整体性能。 #### 具有快表的地址变换 根据程序局部性原理，把最近使用的页表项存放在快表中，下次再进行地址变换时先去快表中查找对应项，如果没找到再去内存中查找，然后把新找到的页表项存放在快表中，如果快表已满，采用某种算法淘汰一份。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/4d110b83-5a36-468b-a971-57a6b99da83a"></div><h4 id="有效访问时间"><a href="#有效访问时间" class="headerlink" title="有效访问时间"></a>有效访问时间</h4><p>设t是访问内存的时间，a是快表命中率，λ是查找快表所需的时间。</p><ul><li>普通地址变换时间：<code>t+t</code></li><li>具有快表的地址变换时间：$ a \ast \lambda + (1-a) \ast (t+\lambda)$。</li></ul><h4 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h4><p>对于两级页表，是将页表再进行分页，页面的大小与内存物理块的大小相同。逻辑地址结构可描述如下：</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/9be850db-8e21-4a1d-8dbe-4a8d76194017"></div><p><strong>两级页表地址变换</strong></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/3ec51dd1-5b26-4d98-bfb5-18d567e4c164"></div>可推广至N级页表。 #### 反置页表 页表是按每个进程的页号排序，指示出物理块号的位置，反置页表是按物理块号排序，指示出每个页隶属的进程和页号。 此方法需要为每个进程创建一个外部页表，即将页表建立在外存中。进程进行地址变换时先从反置页表里查找，如果查找不到则去外村中查找，再将查找到的页表项调入内存。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/3984a943-8925-44e0-b30d-b9aace27fe66"></div><br><br>## 分段存储管理方式 之前的分区管理都是为了更好的利用内存。为了满足程序员在编程上的要求引入了分段管理方式。 **方便编程** 通常，用户把自己的作业按照逻辑关系划分为若干个段，每个段都是从0开始编址，并有自己的名字和长度。因此，希望要访问的逻辑地址是由段名（段号）和段内偏移量（段内地址）决定的。例如，下述的两条指令便是使用段名和段内地址：其中，前一条指令的含义是将分段A中D单元内的值读入寄存器1；后一条指令的含义是将寄存器1的内容存入B分段的C单元中。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOAD 1，[A] |〈D〉；</span><br><span class="line">STORE 1，[B] |〈C〉；</span><br></pre></td></tr></table></figure>**信息共享** 在实现对程序和数据的共享时，是以信息的逻辑单位为基础的。比如，共享某个例程和函数。分页系统中的“页”只是存放信息的物理单位（块），并无完整的意义，不便于实现共享；然而段却是信息的逻辑单位。由此可知，为了实现段的共享，希望存储管理能与用户程序分段的组织方式相适应。 **信息保护** 信息保护同样是对信息的逻辑单位进行保护，因此，分段管理方式能更有效和方便地实现信息保护功能。 **动态增长** 在实际应用中，往往有些段，特别是数据段，在使用过程中会不断地增长，而事先又无法确切地知道数据段会增长到多大。前述的其它几种存储管理方式，都难以应付这种动态增长的情况，而分段存储管理方式却能较好地解决这一问题。 **动态链接** 动态链接是指在作业运行之前，并不把几个目标程序段链接起来。要运行时，先将主程序所对应的目标程序装入内存并启动运行，当运行过程中又需要调用某段时，才将该段（目标程序）调入内存并进行链接。可见，动态链接也要求以段作为管理的单位。<br><br>### 分段地址<div align="center"><img src="http://blogfileqiniu.isjinhao.site/4a8347b6-2f86-4db6-99a4-7c8100267182"></div><h4 id="段表"><a href="#段表" class="headerlink" title="段表"></a>段表</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/0d0640e3-74c5-4d3d-8541-171c13c8e495"></div><h4 id="地址映射"><a href="#地址映射" class="headerlink" title="地址映射"></a>地址映射</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e9f3f706-b819-440d-b3a4-f69756e1b5f7"></div><h4 id="地址变换"><a href="#地址变换" class="headerlink" title="地址变换"></a>地址变换</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/374a427d-4223-4e49-88e4-eb5563dd9fd4"></div><h4 id="分页和分段的主要区别"><a href="#分页和分段的主要区别" class="headerlink" title="分页和分段的主要区别"></a>分页和分段的主要区别</h4><ul><li>页是信息的物理单位，段则是信息的逻辑单位；</li><li>页的的大小固定且由系统决定，而段的长度不固定，由用户所编写的程序决定；</li><li>分页的地址空间是一维的，而分段的地址空间是二维的。</li><li>分页是系统管理的需要；分段是为了更好满足用户的需要。<br><br></li></ul><p><br></p><h2 id="段页式存储管理方式"><a href="#段页式存储管理方式" class="headerlink" title="段页式存储管理方式"></a>段页式存储管理方式</h2><p>分段结构具有逻辑上清晰的优点，但它的一个致命弱点是每个段必须占据主存储器的连续区域，于是，要装入一个分段时可能要移动已在主存储器中的信息，为了克服这个缺点，可兼用分段和分页的方法，构成段页式存储管理。每个作业仍按逻辑分段，但对每一段不是按单一的连续整体存放到存储器中，而是把每个段再分成若干个页面，每一段不必占据连续的主存空间，可把它按页存放在不连续的主存块中。<br><br></p><p><br></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>逻辑地址空间分段，段内分页，内存分块（页框），存储管理的分配单位是：物理块（页框）</li><li>地址结构：段号，页号，页内偏移地址。</li><li>每个作业一张段表，每段一张页表。地址变换：先查段表，再查该段的页表。<br><br></li></ul><p><br></p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/d4ab1762-e6c8-4a13-8eea-e841c471df50"></div><br><br>### 地址变换机构<div align="center"><img src="http://blogfileqiniu.isjinhao.site/aaacf025-9204-4019-9bdc-18399f121b3a"></div><br><br>## 传统存储器的问题 传统的内存管理方式要求将一个作业全部装入内存才可以运行，由此造成了以下两种情况： - 大作业对内存的要求超出物理内存总容量，致使其无法运行。 - 内存由于容量的限制，只能装入少量的作业使其运行，而其它大量作业留在外存。<br><br>### 解决原理 #### 程序局部性原理 1. 程序执行时， 除了少部分的转移和过程调用指令外，在大多数情况下仍是顺序执行的。 2. 过程调用将会使程序的执行轨迹由一部分区域转至另一部分区域， 但经研究看出，过程调用的深度在大多数情况下都不超过5。 3. 程序中存在许多循环结构， 这些虽然只由少数指令构成， 但是它们将多次执行。 4. 程序中还包括许多对数据结构的处理， 如对数组进行操作， 它们往往都局限于很小的范围内。 **表现两个方面** 1. 时间局限性。如果程序中的某条指令一旦执行， 则不久以后该指令可能再次执行；如果某数据被访问过， 则不久以后该数据可能再次被访问。产生时间局限性的典型原因，是由于在程序中存在着大量的循环。 2. 空间局限性。一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，其典型情况便是程序的顺序执行。 **基于局部性原理** 在程序装入时，不必将其全部读入到内存，而只需将当前需要执行的部分页或段读入到内存，就可让程序开始执行。在程序执行过程中，如果需执行的指令或访问的数据尚未在内存（称为缺页或缺段），则由处理器通知操作系统，将相应的页或段调入到内存，然后继续执行程序。<br><br>### 虚拟存储器定义 所谓虚拟存储器， 是指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统。其逻辑容量由内存容量和外存容量之和所决定，其运行速度接近于内存速度，而每位的成本却又接近于外存。可见，虚拟存储技术是一种性能非常优越的存储器管理技术，故被广泛地应用于大、 中、 小型机器和微型机中。<br><br>### 实现虚拟存储器的条件 由于一个作业被分成多次地调入内存运行，所以在内存分配时必须采用离散分配方式。同时需要解决以下问题： - 页表（段表）的设计（软件支持） - 程序不在内存时去外存调度需要中断（硬件支持） - 逻辑地址转换为物理地址（软件硬件支持） - 如何给每个进程分配物理块 - 一个页（段）进入内存时，淘汰哪个页（段）<br><br>## 请求分页存储管理方式 ### 页表机制 用于将用户逻辑地址空间变换为内存的物理地址空间。在页表中增加若干项，以便于标志程序或数据的状态。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/fa041bc8-d719-4aa7-9ba8-4baa6918ac91"></div>- 状态位（存在位）P：表示该页是否调入内存。 - 访问字段A：用于记录该页在某段时间内被访问的次数。 - 修改位M：表示该页在调入内存后是否被修改过。未修改过不必写回外存，修改要写回外存。 - 外存地址：该页在外存上的地址，通常是物理块号。<br><br>### 缺页中断机构 - 在地址映射过程中，在页表中发现所要访问的页不在内存，则产生缺页中断。操作系统接到此中断信号后，就调出缺页中断处理程序，根据页表中给出的外存地址，将该页调入内存，使进程继续运行下去。 - 如果内存中有空闲块，则分配一页，将新调入页装入内存，并修改页表中相应页表项目的状态位及相应的内存块号。 - 若此时内存中没有空闲块，则要淘汰某页，若该页在内存期间被修改过，则要将其写回外存。 - 缺页中断发生在指令执行期间，而通常情况下，CPU是在一条指令执行完后，才检查是否有中断请求到达；一条指令在执行期间，可能产生多次缺页中断。所以硬件机构应能保存多次中断时的状态，并保证最后能返回到中断前产生缺页中断的指令处，继续执行。<br><br>### 地址转换机构<div align="center"><img src="http://blogfileqiniu.isjinhao.site/b164ab99-02d0-494b-bb7f-f787c2613fc0"></div><br><br>### 内存分配 #### 最小物理块数的确定 最小物理块数：保证进程正常运行所需的最小物理块数。与计算机的硬件机构有关，取决于指令的格式、功能和寻址方式。 #### 内存分配策略 在请求分页中，可采取两种分配策略，即固定和可变分配策略。在进行置换时，也可采取两种策略，即全局置 换和局部置换（置换范围不同）。于是组合出三种适用的策略： - 固定分配局部置换：分配固定数目的内存空间，在整个运行期间都不改变。如果缺页，则先从该进程在内存的页面中选中一页，进行换出操作，然后再调入一页。 - 可变分配全局置换：每个进程预先分配一定数目的物理块，同时OS也保持一个空闲物理块队列。当缺页时，首先将对OS所占有的空闲块进行分配，从而增加了各进程的物理块数。当OS的空闲块全部用完，将引起换出操作。 - 可变分配局部置换：系统根据缺页率动态调整各进程占有的物理块数目，使其保持在一个较低的缺页率状态。 #### 物理块分配算法 - 平均分配算法：将系统中所有可供分配的物理块，平均分配给各个进程。 - 按比例分配算法：按照进程的大小比例分配物理块。 - 考虑优先权的分配算法：为了对于紧迫的作业，能够尽快完成。可以将内存的物理块分成两部分，一部分按照比例分配给各进程，另一部分根据进程优先级，适当增加其相应的份额，分配给各进程。<br><br>### 页面调入 #### 何时调入页面 - 提前取页：预先装入主存一页或几页（提前页）。 - 请求取页：当用到某页而不在主存时即缺页时取页。 #### 从何处调入页面 外存有两个部分：文件区和对换区。对换区I/O操作速度比文件区相对快一些，因此一般应当尽量使用对换区来调入页面。对于不同情况，采用不同的策略： - 系统有足够的对换空间：全部从对换区调入。 - 系统对换空间不足：未修改的从文件区调入，修改的从对换区调入。 - UNIX的调入方式：未运行过的从文件区调入，运行过的放在对换区，允许页面共享。 #### 页面调入过程 1. 进程需要的页面不在内存，引起缺页中断 2. 中断处理程序保留现场环境，转入缺页中断处理程序 3. 中断处理程序查找页表，得到对应的外存物理块号。如果内存有空闲，则启动磁盘操作，将所缺的页面读入，并修改页表。否则，到4。 4. 执行置换算法，选出要换出的页面，如果该页修改过，应将其写入磁盘，然后将所缺页调入内存，修改相应表项，将其存在位置为`1`，并放入快表。 5. 利用修改后的页表，形成物理地址，访问内存数据。 #### 缺页率 - 假设进程逻辑空间为n页，系统为其分配物理块数为`m`。 - 如果进程运行过程中，访问页面成功次数为S，访问页面失败次数为F，总页面访问次数`A=S+F`，则进程运行过程中 缺页率`f=F/A`。 影响缺页率的主要因素： - 页面大小：页面越大，缺页率越小 - 进程所分配物理块数：物理块越多，缺页率越小 - 页面置换算法：合理的置换算法能更少将页面调入调出 - 程序固有特性：比如做循环操作时，缺页率较低，因为执行的命令都是一系列大致相同的指令。<br><br>### 页面置换算法 #### 最佳置换算法 所选择的被淘汰页面，将是以后永不使用的， 或许是在最长（未来）时间内不再被访问的页面。采用最佳置换算法，通常可保证获得最低的缺页率。这是一种理想情况，是实际执行中无法预知的，因而不能实现。可用作性能评价的依据。 例：假定系统为某进程分配了三个物理块， 并考虑有以下的页面号引用串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，1，7，0，1</span><br></pre></td></tr></table></figure>进程运行时， 先将7，0，1三个页面装入内存。 以后， 当进程要访问页面2时， 将会产生缺页中断。此时OS根据最佳置换算法， 将选择页面7予以淘汰。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/2979051c-7252-4c91-b6d5-2836841ad7be"></div><h4 id="先进先出页面置换算法"><a href="#先进先出页面置换算法" class="headerlink" title="先进先出页面置换算法"></a>先进先出页面置换算法</h4><p>选择装入最早的页面被置换。可以通过链表来表示各页的建立时间先后。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/6c79128c-993d-4689-8b24-c0ed1222742a"></div><h4 id="最近最久未使用置换算法"><a href="#最近最久未使用置换算法" class="headerlink" title="最近最久未使用置换算法"></a>最近最久未使用置换算法</h4><p>选择内存中最久未使用的页面被置换。这是局部性原理的合理近似，性能接近最佳算法。但由于需要记录页面使用时间的先后关系，硬件开销太大。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/f0576a05-7e3b-4c25-8f85-e23d186f6df5"></div><h5 id="硬件支持"><a href="#硬件支持" class="headerlink" title="硬件支持"></a>硬件支持</h5><p><strong>寄存器</strong><br>每个页面设立移位寄存器：被访问时左边最高位置1，定期右移并且最高位补0，于是寄存器数<br>值最小的是最久未使用页面。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/8781a6ff-ee5c-4bd5-8c39-72bafb68e249"></div><p><strong>栈</strong><br>一个特殊的栈，每当进程访问某页面时，便把被访问的页面移到栈顶，于是栈底的是最久未使用页面。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/deec2ffc-d896-4e78-bcaf-3f1d69815ac7"></div><h4 id="最少使用置换算法"><a href="#最少使用置换算法" class="headerlink" title="最少使用置换算法"></a>最少使用置换算法</h4><p>选择到当前时间为止被访问次数最少的页面被置换。</p><ul><li>实现方法1：每个页面设立移位寄存器：被访问时左边最高位置1，定期右移并且最高位补0，这样，在最近一段时间内时用最少的页面将是$\sum_{R_i}$最小的页。</li><li>实现方法2：每页设置访问计数器，每当页面被访问时，该页面的访问计数器加1；发生缺页中断时，淘汰计数值最小的页面，并将所有计数清零。</li></ul><h4 id="Clock置换算法"><a href="#Clock置换算法" class="headerlink" title="Clock置换算法"></a>Clock置换算法</h4><p>也称最近未使用算法（NRU, Not Recently Used），它是LRU（最近最久未使用算法）和FIFO的折衷。<br>内存中所有页面通过链接指针形成一个循环队列，每页有一个使用访问位，若该页被访问则置1。置换时采用一个指针，从当前指针位置开始按地址先后检查各页，寻找访问位为0的页面作为被置换页。指针经过的访问位为1的页都修改0，最后指针停留在被置换页的下一个页。</p><h4 id="改进Clock置换算法"><a href="#改进Clock置换算法" class="headerlink" title="改进Clock置换算法"></a>改进Clock置换算法</h4><p>由于Clock算法不考虑换出页面时，页面是否修改过的问题。这样在换出的页面如果被修改过的话，则必须做拷回磁盘处理，开销比较大。于是，改进型的Clock算法为每个页又增加了一个修改位。选择页面时，尽量选择既未使用又没有修改的页面。<br>访问位A，修改位M有四种不同情形：</p><ul><li>1类(A=0，M=0）既未访问，又没有修改，最佳淘汰页</li><li>2类(A=0，M=1）未访问，但是有修改，效率低的淘汰页</li><li>3类(A=1，M=0）被访问，但没有修改</li><li>4类(A=1，M=1）既被访问，又有修改<br>算法：</li></ul><ol><li>指针从当前位置开始，开始第一轮扫描循环队列，寻找A=0且M=0的页面，找到则可换出。</li><li>如果找不到，则开始第二轮扫描，寻找A=0且M=1的页面，并且每经过一个页面时，将其访问位A设置为0。如果找到一个第2类页面，则可换出。</li><li>如果仍旧未找到合适的换出页面，则此时指针回到初始位置，且所有页面其访问位A为0。再转回1继续工作。</li></ol><h4 id="页面缓冲算法"><a href="#页面缓冲算法" class="headerlink" title="页面缓冲算法"></a>页面缓冲算法</h4><p>在请求分页系统中，进程在运行的时候经常会发生页面换进换出的情况。而影响换进换出效率的原因如下：</p><ul><li>页面置换算法：好的页面置换算法能使进程运行中具有较低的缺页率，从而可以减少换进换出的开销。</li><li>写会磁盘的频率。</li><li>读入内存的频率。<br>而页面缓存算法就是降低读写磁盘的频率来降低开销。做法如下：</li><li>空闲页面链表：当有一个未被修改的页要换出时，实际上并不将其换出到外存，而是把它们所在的物理块挂在空闲链表的末尾。如果以后某进程请求此页时，便将其从空闲页面链表上取下。</li><li>修改页面链表：和空闲页面链表的功能一样，只是说此链表是存放已修改页面的。<br>当链表上挂有足够多的页面时，将它们一齐写入磁盘，这样可以降低读写磁盘的频率。<br><br></li></ul><p><br></p><h3 id="访问内存的有效时间"><a href="#访问内存的有效时间" class="headerlink" title="访问内存的有效时间"></a>访问内存的有效时间</h3><ul><li>被访问页在主存，且相应页表项在快表：$EAT= \lambda +t$<ul><li>查找快表+访问实际物理地址</li></ul></li><li>被访问页在主存，但相应页表项不在快表：$ EAT= \lambda +t + t + \lambda$<ul><li>查找快表+读取页表+读取数据+更新快表</li></ul></li><li>被访问页不在主存：$EAT= \lambda + t + \varepsilon + t + \lambda$<ul><li>查找快表+读取页表+缺页中断处理+读取数据+等新快表</li></ul></li><li>内存的有效访问时间为：$EAT= \lambda + t + (1 - a ) \ast [f \ast ( \varepsilon + \lambda + t)+(1-f) \ast(\lambda+t)]$<ul><li><code>a</code>为命中率，<code>f</code>为缺页率。</li><li>查找快表+访问内存一次+未命中不需要请求缺页访问快表+未命中时不需要请求缺页访问内存+未命中需要请求缺页访问快表+未命中时需要请求缺页访问内存+未命中时需要请求缺页开销。<br><br></li></ul></li></ul><p><br></p><h2 id="抖动与工作集"><a href="#抖动与工作集" class="headerlink" title="抖动与工作集"></a>抖动与工作集</h2><h3 id="抖动"><a href="#抖动" class="headerlink" title="抖动"></a>抖动</h3><p>由于只装入一个进程的部分程序和数据便可开始运行，故希望运行更多进程，增加多道程序度。但在多道程序环境下，并不是多道程序的度越高，系统吞吐量越大。当CPU的利用率达到某一峰值后，若继续增加多道程度，将产生“抖动”。<br>抖动是指同时运行进程太多，分配给每个进程物理块太少，进程在运行时频繁缺页，必须请求调页，等待页面调进调出的进程增多，磁盘访问时间急剧增加，进程大部分时间用于页面换进换出，处理机利用率急剧下降并趋于0。<br><br></p><p><br></p><h3 id="工作集"><a href="#工作集" class="headerlink" title="工作集"></a>工作集</h3><p>基于程序运行的局部性原理，程序运行时，对页面的访问并不均匀，一段时间仅局限于较少的页面；另一段时间，有可能局限于另一些较少的页面，如果能预知这些页面，并提前调入，将大大减少缺页率工作集，是指在某段时间间隔内，进程实际要访问的页面的集合。为了降低缺页率，应将程序全部工作集装入主存。</p><ul><li>方法：用程序过去某段时间的行为作为程序将来某段时间行为的近似。<br>定义：是指在某段时间间隔内，进程实际要访问的页面的集合。为了降低缺页率，应将程序全部工作集装入主存。</li><li>方法：用程序过去某段时间的行为作为程序将来某段时间行为的近似。<br>工作集$ \omega (t, \Delta) $是二元函数。某进程在时间<code>t</code>的工作集记为$ \omega (t, \Delta) $，其中，$\Delta$为工作集的窗口尺寸。</li></ul><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><ul><li>窗口大小$\Delta$选择得过小，频繁产生缺页中断。</li><li>窗口大小$\Delta$选择得很大，失去了虚拟存储器的意义</li></ul><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/58a68c04-867c-4616-836b-6442f8dc42dc"></div><br><br><p></p><p><br></p><h3 id="抖动的预防方法"><a href="#抖动的预防方法" class="headerlink" title="抖动的预防方法"></a>抖动的预防方法</h3><ul><li>采取局部置换策略：仅允许进程在自身范围内进行置换，不影响其他进程</li><li>在CPU调度程序中引入工作集算法：调入新作业时，应该检查每个进程在内存中的驻留集是否足够大</li><li><code>L=S</code>准则：<code>产生缺页的平均时间L=系统处理进程缺页的平均时间S</code></li><li>选择暂停的进程：使某些低优先级的进程进程挂起，从而腾出内存空间<br><br></li></ul><p><br></p><h2 id="请求分段存储管理方式"><a href="#请求分段存储管理方式" class="headerlink" title="请求分段存储管理方式"></a>请求分段存储管理方式</h2><ul><li>请求分页系统建立的虚拟存储器，是以页面为单位进行换入、换出操作的。</li><li>在请求分段系统中实现的虚拟存储器，以分段为单位进行换入和换出。</li><li>程序在运行之前，只需要装入必要的若干个分段即可运行。当访问的分段不在内存时，可由OS将所缺少的段调入内存。<br>使用请求分段存储管理方式可以对动态链接有很好的支持。<br><br></li></ul><p><br></p><h3 id="请求段表机制"><a href="#请求段表机制" class="headerlink" title="请求段表机制"></a>请求段表机制</h3><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/01222d76-e106-4c18-adc8-d19b9a59e4d6"></div><p></p><ul><li>存取方式：标记本段存取属性。如读R，写W，执行X</li><li>访问字段A：记录本段使用的频繁程度</li><li>修改位：是否在调入内存后做过修改</li><li>存在位：本段是否装入内存</li><li>增补位：该段是否动态增长过<br><br></li></ul><p><br></p><h3 id="缺段中断机构"><a href="#缺段中断机构" class="headerlink" title="缺段中断机构"></a>缺段中断机构</h3><p>要有专门的缺段中断处理程序。特点：</p><ul><li>指令和操作数必定不会跨越在段边界上。</li><li>由于段的长度是不固定的，处理比缺页系统复杂。</li><li>调入一个段可能要淘汰几个内存中的段。<br><br></li></ul><p><br></p><h3 id="请求中断处理"><a href="#请求中断处理" class="headerlink" title="请求中断处理"></a>请求中断处理</h3><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e70e650f-81ae-4000-b670-06c210adabd8"></div><br><br><p></p><p><br></p><h3 id="地址中断机构"><a href="#地址中断机构" class="headerlink" title="地址中断机构"></a>地址中断机构</h3><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/986886e7-0ca3-4c6c-a3ff-02082cee3a70"></div><br><br><p></p><p><br></p><h3 id="分段的共享与保护"><a href="#分段的共享与保护" class="headerlink" title="分段的共享与保护"></a>分段的共享与保护</h3><h4 id="共享段表"><a href="#共享段表" class="headerlink" title="共享段表"></a>共享段表</h4><p></p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/6ff2d558-015d-4051-848b-74903bb4ef9f"></div><p></p><ul><li>共享进程计数：多少进程在使用此段。</li><li>存取控制手段：每个共享段，应为不同进程赋予不同的存取权限。</li><li>断号：同一个共享段在不同进程那有不同的断号。</li></ul><h4 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h4><p>第一个请求的进程，由系统分配一物理块，调入共享段，设置相关表项信息，并置<code>count=1</code>； 以后的进程，在自己的段表中增加一项，填入共享段的信息，在共享段表项中做<code>count=count+1</code>，填写进程相关信息。</p><h4 id="回收"><a href="#回收" class="headerlink" title="回收"></a>回收</h4><ol><li>做count=count-1；</li><li>若count=0 ，则该共享段被回收。</li></ol><h4 id="分段保护"><a href="#分段保护" class="headerlink" title="分段保护"></a>分段保护</h4><ul><li>越界检查：在进行存储访问时，要将逻辑地址的段号与段表长度进行比较，如果超出则发生越界中断信号；其次，将段内地址与段表中该段的长度进行比较，如果有效才进行转换，否则产生越界中断信号。</li><li>存取控制检查：用于规定对该段的访问权限。通常的访问方式有：<ul><li>读：允许用户对该段/页内任何信息或其副本进行读操作。</li><li>写：允许用户修改该段/页内任何信息直至撤消整个段/页。</li><li>执行：用户可以执行该段/页程序，数据段/页除外。</li><li>增加：用户可在段/页的末尾添加信息，但不允许修改已存在于段/页中的信息。</li></ul></li><li>环保护检查：是一种功能较完善的保护机制。<ul><li>思想：将所有的程序分成不同的级别，分别放置在不同的环上。内环（编号小，在内侧）的程序具有高优先权，外环的程序优先权低。</li><li>操作系统核心安排在0环内；重要程序和操作系统服务安排在中间环；一般应用程序安排在外环。</li><li>一个程序可以直接访问在相同环或低优先级环（比自身相对靠外的环）上的数据。</li><li>一个程序访问高优先级（比自己靠内的环）时，通过系统调用方式实现。<br>Process finished with exit code 0</li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;存储器的层次&quot;&gt;&lt;a href=&quot;#存储器的层次&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="test" scheme="https://isjinhao.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://isjinhao.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>仅使用Servlet3完成文件上传下载</title>
    <link href="https://isjinhao.github.io/posts/36072.html/"/>
    <id>https://isjinhao.github.io/posts/36072.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:26.989Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="上传文件的html界面"><a href="#上传文件的html界面" class="headerlink" title="上传文件的html界面"></a>上传文件的html界面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>单文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/servlet3-upload-and-download/uploadone"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>多文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/servlet3-upload-and-download/uploadmany"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件下载<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/servlet3-upload-and-download/download"</span>&gt;</span>点击下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> download;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">download</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//filepath</span></span><br><span class="line">String filePath = <span class="string">"D:\\我.jpg"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(filePath));</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(resp.getOutputStream());</span><br><span class="line"></span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> fileLength = <span class="keyword">new</span> File(filePath).length();</span><br><span class="line">resp.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment; filename="</span> + <span class="keyword">new</span> String(<span class="keyword">new</span> File(filePath).getName().getBytes(<span class="string">"utf-8"</span>), <span class="string">"ISO8859-1"</span>));</span><br><span class="line">resp.setHeader(<span class="string">"Content-Length"</span>, String.valueOf(fileLength));</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line"><span class="keyword">int</span> bytesRead;</span><br><span class="line"><span class="keyword">while</span> (-<span class="number">1</span> != (bytesRead = bis.read(buff, <span class="number">0</span>, buff.length))) &#123;</span><br><span class="line">bos.write(buff, <span class="number">0</span>, bytesRead);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><h3 id="单文件"><a href="#单文件" class="headerlink" title="单文件"></a>单文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> upload;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.MultipartConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Part;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/uploadone"</span>)</span><br><span class="line"><span class="meta">@MultipartConfig</span><span class="comment">//Servlet3中处理multipart/form-data类型请求的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadOne</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line"><span class="comment">//说明输入的请求信息采用UTF-8编码方式</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Servlet3.0中新引入的方法，用来处理multipart/form-data类型编码的表单</span></span><br><span class="line">Part part = request.getPart(<span class="string">"file"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取HTTP头信息headerInfo=（form-data; name="file" filename="文件名"）</span></span><br><span class="line">String headerInfo = part.getHeader(<span class="string">"content-disposition"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"headinfo  ==&gt;  "</span> + headerInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从HTTP头信息中获取文件名fileName=（文件名）</span></span><br><span class="line">String fileName = headerInfo.substring(headerInfo.lastIndexOf(<span class="string">"="</span>) + <span class="number">2</span>, headerInfo.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得存储上传文件的文件夹路径</span></span><br><span class="line">String fileSavingFolder = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得存储上传文件的完整路径（文件夹路径+文件名）</span></span><br><span class="line"><span class="comment">//文件夹位置固定，文件夹采用与上传文件的原始名字相同</span></span><br><span class="line">String fileSavingPath = fileSavingFolder + File.separator + fileName;</span><br><span class="line">System.out.println(<span class="string">"filePath  ==&gt;  "</span> + fileSavingPath);</span><br><span class="line"><span class="comment">//如果存储上传文件的文件夹不存在，则创建文件夹</span></span><br><span class="line">File f = <span class="keyword">new</span> File(fileSavingFolder + File.separator);</span><br><span class="line"><span class="keyword">if</span>(!f.exists())&#123;</span><br><span class="line">f.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将上传的文件内容写入服务器文件中</span></span><br><span class="line">part.write(fileSavingPath);</span><br><span class="line"><span class="comment">//输出上传成功信息</span></span><br><span class="line">out.println(<span class="string">"文件上传成功~！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> upload;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.MultipartConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Part;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/uploadmany"</span>)</span><br><span class="line"><span class="meta">@MultipartConfig</span><span class="comment">//Servlet3中处理multipart/form-data类型请求的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadMany</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line"><span class="comment">//说明输入的请求信息采用UTF-8编码方式</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Servlet3.0中新引入的方法，用来处理multipart/form-data类型编码的表单</span></span><br><span class="line">Collection&lt;Part&gt; parts = request.getParts();</span><br><span class="line">Iterator&lt;Part&gt; iterator = parts.iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得存储上传文件的文件夹路径</span></span><br><span class="line">String fileSavingFolder = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">Part next = iterator.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得文件大小</span></span><br><span class="line"><span class="keyword">long</span> size = next.getSize();</span><br><span class="line"></span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取HTTP头信息headerInfo=（form-data; name="file" filename="文件名"）</span></span><br><span class="line">String headerInfo = next.getHeader(<span class="string">"content-disposition"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"headinfo  ==&gt;  "</span> + headerInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从HTTP头信息中获取文件名fileName=（文件名）</span></span><br><span class="line">String fileName = headerInfo.substring(headerInfo.lastIndexOf(<span class="string">"="</span>) + <span class="number">2</span>, headerInfo.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得存储上传文件的完整路径（文件夹路径+文件名）</span></span><br><span class="line"><span class="comment">//文件夹位置固定，文件夹采用与上传文件的原始名字相同</span></span><br><span class="line">String fileSavingPath = fileSavingFolder + File.separator + fileName;</span><br><span class="line">System.out.println(<span class="string">"filePath  ==&gt;  "</span> + fileSavingPath);</span><br><span class="line"><span class="comment">//如果存储上传文件的文件夹不存在，则创建文件夹</span></span><br><span class="line">File f = <span class="keyword">new</span> File(fileSavingFolder + File.separator);</span><br><span class="line"><span class="keyword">if</span>(!f.exists())&#123;</span><br><span class="line">f.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将上传的文件内容写入服务器文件中</span></span><br><span class="line">next.write(fileSavingPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出上传成功信息</span></span><br><span class="line">out.println(<span class="string">"文件上传成功~！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo下载：<a href="https://github.com/isjinhao/servlet3-upload-and-download。">https://github.com/isjinhao/servlet3-upload-and-download。</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;上传文件的html界面&quot;&gt;&lt;a href=&quot;#上传文件的html界面&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://isjinhao.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>动态代理</title>
    <link href="https://isjinhao.github.io/posts/41590.html/"/>
    <id>https://isjinhao.github.io/posts/41590.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="理解代理"><a href="#理解代理" class="headerlink" title="理解代理"></a>理解代理</h2><p>代理这个词对于广告满天飞的现代社会应该是很常见了，和它具有相同意义还有中介、经纪人等词。我们就以找影视明星拍片为例来理解代理。<br>假如你有一个很好的剧本，现在想找A明星来做主角，可以两种方式：第一种是直接找A明星本人，第二种是找A明星的经纪人。但是明星的主要功能是拍戏，如果诸如报酬、档期、宣传等工作也让A明星来负责，势必会减少他/她的拍戏时间，所以更好的方式是去寻求他/她的经纪人，让经纪人来做这些拍戏以外的工作。<br>但同时经济人也得有和明星A一样的功能，比如A会演戏、唱歌、跳舞，那么经纪人也得有这些功能，只不过经纪人的功能是让明星A去完成的，经纪人本身只提供这种服务的接口。而我们所说的明星A便是目标对象，经纪人便是代理对象。<br>对于Java中的代理，假如有一个方法（设为M1）的功能是把UTF-8编码下的字符转化成GBK编码下的字符。那么这个方法的功能就是进行转化、对于判断传入的是不是UTF-8编码下的字符这种事情应该传入之前就处理完成，所以这时候就要有一个代理方法（设为M2）在M1执行之前做个处理。当然M1执行完毕之后也可能存在M3进行一些处理。</p><p><br></p><h3 id="代理对象的要点"><a href="#代理对象的要点" class="headerlink" title="代理对象的要点"></a>代理对象的要点</h3><blockquote><ol><li>代理对象存在的价值主要用于拦截对目标对象的访问。</li><li>代理对象应该具有和目标对象相同的方法。</li></ol></blockquote><p><br></p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在我们刚才的解释中，每个目标对象都要有一个实在的代理对象，这在实际开发中是很耗费精力的一件事，但如果说能在程序运行期间给我们动态生成一个代理对象可以大大减小编写的代码的压力。所以动态代理的概念就是：不用手动编写一个代理对象，不需要编写与目标对象相同的方法，运行时在内存中<strong>动态生成代理对象</strong>（字节码对象级别的代理对象）。</p><p><br></p><h2 id="JDK提供的动态代理"><a href="#JDK提供的动态代理" class="headerlink" title="JDK提供的动态代理"></a>JDK提供的动态代理</h2><p>JDK1.5之后为我们提供了用于专用于动态生成代理对象的类：java.lang.reflect.Proxy。有一个很重要的静态方法：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Object newProxyInstance</span><br><span class="line">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHander h)</span><br></pre></td></tr></table></figure><p></p><p>在解释参数之前，我们先看一个接口InvocationHander，JDK对它的解释是：</p><blockquote><p>Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the method of its invocation handler.（每个代理实例都有一个关联的调用处理程序。当在代理实例上调用方法时，将方法调用编码并调度到其调用处理程序的方法。） 它只有一个invoke()方法。我们之后执行时真正起作用的也是这个方法。<br><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;</code><br>对<code>newProxyInstance()</code>方法参数的解释在下面的例子中。</p><ul><li>明星接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrightStar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dancing</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ShootFilm</span><span class="params">(String filmName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>A明星类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarA</span> <span class="keyword">implements</span> <span class="title">BrightStar</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A is singing..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dancing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hai cao wu"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ShootFilm</span><span class="params">(String filmName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> filmName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StarA starA = <span class="keyword">new</span> StarA();</span><br><span class="line">BrightStar newProxyInstance = (BrightStar)Proxy.newProxyInstance(</span><br><span class="line"><span class="comment">//代理类的类加载器，获取目标类加载器即可</span></span><br><span class="line">StarA.class.getClassLoader(), </span><br><span class="line"><span class="comment">//代理类应该实现的接口，由于代理类和目标类需要继承相同的接口，使用目标类的接口即可</span></span><br><span class="line">StarA.class.getInterfaces(), </span><br><span class="line"><span class="comment">//使用匿名内部类传入InvocationHandler的实例</span></span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * proxy：传入代理对象。</span></span><br><span class="line"><span class="comment"> * method：被执行的方法。</span></span><br><span class="line"><span class="comment"> * args：传入的参数。</span></span><br><span class="line"><span class="comment"> * 例子：newProxyInstance.ShootFilm("我不是药神");</span></span><br><span class="line"><span class="comment"> * proxy：newProxyInstance；      method：ShootFilm；       args："我不是药神"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//执行前的操作</span></span><br><span class="line">System.out.println(<span class="string">"before"</span>);</span><br><span class="line">Object invoke = method.invoke(starA, args);</span><br><span class="line"><span class="comment">//执行后的操作</span></span><br><span class="line">System.out.println(<span class="string">"after"</span>);</span><br><span class="line"><span class="keyword">return</span> invoke;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">newProxyInstance.sing();</span><br><span class="line">System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">String dancing = newProxyInstance.dancing();</span><br><span class="line">System.out.println(dancing);</span><br><span class="line">System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">String film = newProxyInstance.ShootFilm(<span class="string">"我不是药神"</span>);</span><br><span class="line">System.out.println(film);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Console : </span></span><br><span class="line"><span class="comment"> before</span></span><br><span class="line"><span class="comment">A is singing...</span></span><br><span class="line"><span class="comment">after</span></span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="comment">before</span></span><br><span class="line"><span class="comment">after</span></span><br><span class="line"><span class="comment">Hai cao wu</span></span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="comment">before</span></span><br><span class="line"><span class="comment">after</span></span><br><span class="line"><span class="comment">我不是药神</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>下面介绍一个经典案例，使用动态代理解决Web工程的全局编码问题。</p><ul><li><p>前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert_Title_Here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主体部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>get方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/ProxySolveCoding/test"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>post方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/ProxySolveCoding/test"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(urlPatterns=<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterCoding</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> HttpServletRequest req = (HttpServletRequest)request;</span><br><span class="line">HttpServletRequest proReq = (HttpServletRequest)Proxy.newProxyInstance(</span><br><span class="line">req.getClass().getClassLoader(),</span><br><span class="line">req.getClass().getInterfaces(),</span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(method.getName().equalsIgnoreCase(<span class="string">"getParameter"</span>)) &#123;</span><br><span class="line">String gm = req.getMethod();</span><br><span class="line"><span class="keyword">if</span>(gm.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;</span><br><span class="line"><span class="comment">//处理get方式的请求</span></span><br><span class="line">String before = (String) method.invoke(req, args);</span><br><span class="line">System.out.println(before);</span><br><span class="line">String after = <span class="keyword">new</span> String(before.getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="keyword">return</span> after;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//处理post形式的请求</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> method.invoke(req, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">chain.doFilter(proReq, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>JDK动态代理的特点</strong><br>能被代理的对象必须存在接口，否则会报错。且被增强的方法一定是在接口中有相同的方法签名。因为它生成代理对象的方式是拿到类的所有接口，然后根据这些接口和我们实现的<code>InvocationHandler</code>中的<code>invoke()</code>动态创建一个对象。</p><p><br></p><h2 id="Cglib概述"><a href="#Cglib概述" class="headerlink" title="Cglib概述"></a>Cglib概述</h2><p>是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。它是第三方实现的，所以需要导入<code>jar</code>包。</p><p><strong>特点</strong><br>和JDK提供的动态代理相比，Cglib更加灵活，不需要类上存在接口，因为它生成代理对象是通过现有的类派生出一个子类，在子类中加入我们新的条件。所以被代理的类不能使用final修饰。</p><p><strong>使用的例子</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"HelloWorld"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"保存..."</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中没有我"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"UserDaoImpl [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> com.spring.secondday.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.spring.secondday.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao ud;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CglibProxy</span><span class="params">(UserDao ud)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ud = ud;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDaoImpl <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">en.setSuperclass(ud.getClass());</span><br><span class="line">en.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line"><span class="comment">//proxy：被代理的对象   m：被增强的方法   args：方法所需的参数  methodProxy：增强后的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method m, Object[] args, MethodProxy methodProxy)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"before"</span>);</span><br><span class="line">Object super1 = methodProxy.invokeSuper(proxy, args);</span><br><span class="line">System.out.println(<span class="string">"after"</span>);</span><br><span class="line"><span class="keyword">return</span> super1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">UserDaoImpl proxy = (UserDaoImpl)en.create();</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">UserDaoImpl ud = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">UserDaoImpl proxy = <span class="keyword">new</span> CglibProxy(ud).getProxy();</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment"> before</span></span><br><span class="line"><span class="comment">接口中没有我</span></span><br><span class="line"><span class="comment">after */</span></span><br><span class="line">proxy.talk();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;理解代理&quot;&gt;&lt;a href=&quot;#理解代理&quot; class=&quot;headerlink&quot; title=&quot;理解代理&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于winpcap的cpp控制台网络协议分析</title>
    <link href="https://isjinhao.github.io/posts/38170.html/"/>
    <id>https://isjinhao.github.io/posts/38170.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.005Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><ul><li>winpcap4.1.3</li><li>vs2015</li></ul><p><br></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li><code>新建项目-&gt;Visual C++项目-&gt;Win32控制台项目</code>，在<code>Win32应用程序向导</code>窗口中的<code>应用程序设置-&gt;附加选项</code>选中<code>空项目</code>。</li><li>将<code>WinPcap</code>开发包中的Include和Lib两个文件夹复制到新建项目所在文件夹下。</li><li>点击项目，右击，然后点击属性<ul><li><code>C/C++-&gt;常规-&gt;附加包含目录</code>：如 ..\include</li><li><code>链接器-&gt;常规-&gt;附加库目录</code>：如 ..\lib</li><li><code>链接器-&gt;输入-&gt;附加依赖项</code>：wpcap.lib（winpcap的包），ws2_32.lib（windows的socket）</li></ul></li></ul><p><br></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pcap.h"</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">eth_address</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">u_char byte1;</span><br><span class="line">u_char byte2;</span><br><span class="line">u_char byte3;</span><br><span class="line">u_char byte4;</span><br><span class="line">u_char byte5;</span><br><span class="line">u_char byte6;</span><br><span class="line">&#125;eth_address;</span><br><span class="line"><span class="comment">/* 4 bytes IP address */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ip_address</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">u_char byte1;</span><br><span class="line">u_char byte2;</span><br><span class="line">u_char byte3;</span><br><span class="line">u_char byte4;</span><br><span class="line">&#125;ip_address;</span><br><span class="line"><span class="comment">/* IPv4 header */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ip_header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">u_charver_ihl;<span class="comment">// Version (4 bits) + Internet header length (4 bits)</span></span><br><span class="line">u_chartos;<span class="comment">// Type of service </span></span><br><span class="line">u_short tlen;<span class="comment">// Total length </span></span><br><span class="line">u_short identification; <span class="comment">// Identification</span></span><br><span class="line">u_short flags_fo;<span class="comment">// Flags (3 bits) + Fragment offset (13 bits)</span></span><br><span class="line">u_charttl;<span class="comment">// Time to live</span></span><br><span class="line">u_charproto;<span class="comment">// Protocol</span></span><br><span class="line">u_short crc;<span class="comment">// Header checksum</span></span><br><span class="line">ip_addresssaddr;<span class="comment">// Source address</span></span><br><span class="line">ip_addressdaddr;<span class="comment">// Destination address</span></span><br><span class="line">u_intop_pad;<span class="comment">// Option + Padding</span></span><br><span class="line">&#125;ip_header;</span><br><span class="line"><span class="comment">/* UDP header*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">udp_header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">u_short sport;<span class="comment">// Source port</span></span><br><span class="line">u_short dport;<span class="comment">// Destination port</span></span><br><span class="line">u_short len;<span class="comment">// Datagram length</span></span><br><span class="line">u_short crc;<span class="comment">// Checksum</span></span><br><span class="line">&#125;udp_header;</span><br><span class="line"><span class="comment">/* MAC header*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">eth_header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">eth_address daddr;</span><br><span class="line">eth_address saddr;</span><br><span class="line">u_short type;</span><br><span class="line">&#125;eth_header;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">arp_header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">u_short hardtype;<span class="comment">//硬件类型字段</span></span><br><span class="line">u_short prototype;<span class="comment">//协议类型字段</span></span><br><span class="line">u_char htlen;<span class="comment">//硬件地址的长度,以字节为单位.对于以太网上IP地址的ARP请求或应答来说,它们的值为6</span></span><br><span class="line">u_char ptlen;<span class="comment">//协议地址的长度,以字节为单位.对于以太网上IP地址的ARP请求或应答来说,它们的值为4</span></span><br><span class="line">u_short op;<span class="comment">//操作字段</span></span><br><span class="line">eth_address arp_esa;<span class="comment">//发送端MAC地址</span></span><br><span class="line">ip_address arp_isa;<span class="comment">//发送端IP地址</span></span><br><span class="line">eth_address arp_eda;<span class="comment">//目的端MAC地址</span></span><br><span class="line">ip_address arp_ida;<span class="comment">//目的端IP地址</span></span><br><span class="line">&#125;arp_header;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">icmp_header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">u_char type;<span class="comment">//ICMP报文类型</span></span><br><span class="line">u_char code;<span class="comment">//代码</span></span><br><span class="line">u_short checksum;<span class="comment">//校验和</span></span><br><span class="line">u_short identifier;<span class="comment">//标识符</span></span><br><span class="line">u_short sequence_number;<span class="comment">//序列号</span></span><br><span class="line">&#125;icmp_header;</span><br><span class="line"><span class="comment">/* TCP header */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcp_header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">u_shortsport;<span class="comment">//源端口</span></span><br><span class="line">u_short dport;<span class="comment">//目的端口</span></span><br><span class="line">u_long  sequence_number;<span class="comment">//序号（4字节ntohl）  </span></span><br><span class="line">u_long  acknowlegement_number;<span class="comment">//确认号</span></span><br><span class="line">u_short hlen_bl_flags;<span class="comment">//数据偏移+保留+控制位</span></span><br><span class="line">u_short window_size;<span class="comment">//窗口（发送方自己的接收窗口）</span></span><br><span class="line">u_short checksum;<span class="comment">//检验和（首部+数据）</span></span><br><span class="line">u_short urg;<span class="comment">//紧急指针</span></span><br><span class="line">u_long  option;<span class="comment">//可选+填充</span></span><br><span class="line">&#125;tcp_header;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dns_packet</span> //报文<span class="title">head</span>+<span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u_short id;<span class="comment">//每一个占2个字节，共12个字节</span></span><br><span class="line">    u_short flags;<span class="comment">//标志第一个为0代表查询报文</span></span><br><span class="line">    u_short ques;</span><br><span class="line">    u_short answer;</span><br><span class="line">    u_short author;</span><br><span class="line">    u_short addition;</span><br><span class="line">    u_char dns_data;<span class="comment">//查询问题部分</span></span><br><span class="line">&#125;dns_packet;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pcap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"headers.c"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DNSPORT 53</span></span><br><span class="line"><span class="comment">//输出基本信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintBaseInfo</span><span class="params">(<span class="keyword">const</span> struct pcap_pkthdr *header)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">ltime</span>;</span></span><br><span class="line"><span class="keyword">char</span> timestr[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">time_t</span> local_tv_sec;</span><br><span class="line"></span><br><span class="line">local_tv_sec = header-&gt;ts.tv_sec;</span><br><span class="line">ltime=localtime(&amp;local_tv_sec);</span><br><span class="line">strftime(timestr, <span class="keyword">sizeof</span> timestr, <span class="string">"%H:%M:%S"</span>, ltime);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n\n\n监听到Mac帧的时间：%s   MAC帧长度:%d Byte(s)\n"</span>, timestr, header-&gt;len * <span class="number">4</span>);  <span class="comment">/* 以四字节为单位 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出硬件地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintEthAddress</span><span class="params">(eth_address eth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X:%02X:%02X:%02X:%02X:%02X"</span>, </span><br><span class="line">eth.byte1,</span><br><span class="line">eth.byte2,</span><br><span class="line">eth.byte3,</span><br><span class="line">eth.byte4,</span><br><span class="line">eth.byte5,</span><br><span class="line">eth.byte6</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出IP地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintIPAddress</span><span class="params">(ip_address ia)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d.%d.%d.%d"</span>, </span><br><span class="line">ia.byte1,</span><br><span class="line">ia.byte2,</span><br><span class="line">ia.byte3,</span><br><span class="line">ia.byte4</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出网络层协议类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintNetType</span><span class="params">(u_short type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"网络层协议： "</span>);</span><br><span class="line"><span class="keyword">if</span>(type==<span class="number">0x0800</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IP协议"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">0x0806</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ARP协议"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">0x8035</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"RARP协议"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"接收到非本程序能处理的网络层协议类型！"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析Mac帧：</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">网络层协议类型：源MAC -&gt; 目的MAC</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">网络层协议类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">u_short <span class="title">handleMac</span><span class="params">(eth_header *eth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u_short type=ntohs(eth-&gt;type);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Mac地址： "</span>);</span><br><span class="line">myPrintEthAddress(eth-&gt;saddr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-&gt;"</span>);</span><br><span class="line">myPrintEthAddress(eth-&gt;daddr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleARPAndRARP</span><span class="params">(arp_header *ah)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u_short arp_ht;<span class="comment">//硬件地址的类型.它的值为1即表示以太网地址</span></span><br><span class="line">u_short arp_pt;<span class="comment">//要映射的协议地址类型.它的值为0x0800，即表示IP地址</span></span><br><span class="line">u_short arp_op;<span class="comment">//四种操作类型,它们是ARP请求(值为1)、ARP应答(值为2)、RARP请求(值为3)和RARP应答(值为4)</span></span><br><span class="line">arp_ht=ntohs(ah-&gt;hardtype);<span class="comment">//硬件地址的类型.它的值为1即表示以太网地址</span></span><br><span class="line">arp_pt=ntohs(ah-&gt;prototype);<span class="comment">//要映射的协议地址类型.它的值为0x0800，即表示IP地址</span></span><br><span class="line">arp_op=ntohs(ah-&gt;op);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"硬件地址类型为：%d\t\t\t"</span>,arp_ht);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"协议地址类型为：0x%04X\n"</span>,arp_pt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"硬件地址长度为：%d\t\t\t"</span>,ah-&gt;htlen);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"协议地址长度为：%d\n"</span>,ah-&gt;ptlen);</span><br><span class="line"><span class="keyword">if</span> (arp_op == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"操作类型为：ARP请求报文。\n本机Mac地址："</span>);</span><br><span class="line">myPrintEthAddress(ah-&gt;arp_esa);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\t正在请求"</span>);</span><br><span class="line">myPrintIPAddress(ah-&gt;arp_ida);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"的Mac地址\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arp_op == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"操作类型为：ARP应答报文。\n应答方的Mac地址："</span>);</span><br><span class="line">myPrintEthAddress(ah-&gt;arp_eda);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\t应答方的IP地址"</span>);</span><br><span class="line">myPrintIPAddress(ah-&gt;arp_ida);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arp_op == <span class="number">3</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"操作类型为：RARP请求报文\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (arp_op == <span class="number">4</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"操作类型为：RARP应答报文\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> all_ip_len = <span class="number">20</span>;</span><br><span class="line"><span class="function">u_short <span class="title">handleIP</span><span class="params">(ip_header *ih)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u_int ip_ver;<span class="comment">//版本</span></span><br><span class="line">u_int ip_len;<span class="comment">//首部长度</span></span><br><span class="line">u_short ip_tlen;    <span class="comment">//总长度</span></span><br><span class="line">u_short ip_ident;<span class="comment">//标识</span></span><br><span class="line">u_short ip_flag_fo; <span class="comment">//标志和片偏移</span></span><br><span class="line">u_int ip_flag;<span class="comment">//标志（3位，值为2还有分片且允许分片,1不能分片,0没有分片且允许分片）</span></span><br><span class="line">u_int ip_fo;<span class="comment">//片偏移</span></span><br><span class="line">u_short ip_type;<span class="comment">//协议</span></span><br><span class="line">u_short ip_crc;<span class="comment">//首部检验和</span></span><br><span class="line">u_long ip_op_pad;<span class="comment">//可选项</span></span><br><span class="line"><span class="comment">/* retireve the position of the ip header */</span><span class="comment">//检索IP首部的位置</span></span><br><span class="line">ip_ver = (ih-&gt;ver_ihl &gt;&gt; <span class="number">4</span>);<span class="comment">//版本</span></span><br><span class="line">ip_len = (ih-&gt;ver_ihl &amp; <span class="number">0xf</span>) * <span class="number">4</span>;<span class="comment">//首部长度，与运算，可以只取ip头部的版本长度字段的后4位</span></span><br><span class="line">ip_tlen=ntohs(ih-&gt;tlen);<span class="comment">//总长度</span></span><br><span class="line">ip_ident=ntohs(ih-&gt;identification);<span class="comment">//标识</span></span><br><span class="line">ip_flag_fo = ntohs(ih-&gt;flags_fo);<span class="comment">//2字节存放，会有字节序问题</span></span><br><span class="line">ip_flag = (ip_flag_fo &gt;&gt; <span class="number">13</span>);<span class="comment">//标志</span></span><br><span class="line">ip_fo = (ip_flag_fo &amp; <span class="number">0x1fff</span>);<span class="comment">//片偏移</span></span><br><span class="line">ip_type = ih-&gt;proto;<span class="comment">//上层协议类型</span></span><br><span class="line">ip_crc = ntohs(ih-&gt;crc);<span class="comment">//首部校验和</span></span><br><span class="line"><span class="comment">/*打印IP数据报首部*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"版本：%d\t\t\t"</span>,ip_ver);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"首部长度：%d\n"</span>,ip_len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"区分服务：%d\t\t"</span>, ih-&gt;tos);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"总长度：%d\n"</span>, ip_tlen);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标识：%d\t\t"</span>, ip_ident);</span><br><span class="line"><span class="keyword">if</span> (ip_flag == <span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：DF=1（不能分片），MF=0（没有后续分片）\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (ip_flag == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：DF=0（允许分片），MF=1（还有后续分片）\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (ip_flag == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：DF=0（允许分片），MF=0（没有后续分片）\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"片偏移：%d\t\t"</span>,ip_fo*<span class="number">8</span>);<span class="comment">//片偏移以8字节为单位</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"生存时间：%d\n"</span>,ih-&gt;ttl);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"协议：%d\t\t\t"</span>,ih-&gt;proto);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"首部校验和：%d\n"</span>,ip_crc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IP地址：  "</span>);</span><br><span class="line">myPrintIPAddress(ih-&gt;saddr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" -&gt; "</span>);</span><br><span class="line">myPrintIPAddress(ih-&gt;daddr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (ip_len == <span class="number">20</span>)<span class="comment">//IP首部长度&gt;20时才有</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"首部长度为20，IP报文首部没有可选字段。\n"</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ip_op_pad = ntohl(ih-&gt;op_pad);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"可选自段内容为：%u\n"</span>, ip_op_pad);</span><br><span class="line">&#125;</span><br><span class="line">all_ip_len = ip_len;</span><br><span class="line"><span class="keyword">return</span> ip_type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleICMP</span><span class="params">(icmp_header *ich)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u_short icmp_checksum;<span class="comment">//校验和</span></span><br><span class="line">u_short icmp_ident;<span class="comment">//标识符</span></span><br><span class="line">u_short icmp_seqnum;<span class="comment">//序列号</span></span><br><span class="line">icmp_checksum = ntohs(ich-&gt;checksum);<span class="comment">//校验和</span></span><br><span class="line">icmp_ident = ntohs(ich-&gt;identifier);<span class="comment">//标识符</span></span><br><span class="line">icmp_seqnum = ntohs(ich-&gt;sequence_number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n运输层协议：  ICMP协议\n"</span>);</span><br><span class="line"><span class="comment">/*打印ICMP报文首部*/</span></span><br><span class="line"><span class="keyword">if</span> (ich-&gt;type == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ICMP类型：回显应答\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ich-&gt;type == <span class="number">8</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ICMP类型：回显请求\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ICMP类型：其他\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"代码：%d\t\t"</span>,ich-&gt;code);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"校验和：%d\n"</span>,icmp_checksum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标识符：%d\t\t"</span>,icmp_ident);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"序列号：%d\n"</span>,icmp_seqnum);</span><br><span class="line">&#125;</span><br><span class="line">u_int udp_len;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">handleUDP</span><span class="params">(udp_header *uh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u_short sport, dport;<span class="comment">//端口</span></span><br><span class="line">u_short uh_len; <span class="comment">//长度</span></span><br><span class="line">u_short uh_crc; <span class="comment">//校验和</span></span><br><span class="line">sport = ntohs( uh-&gt;sport );<span class="comment">//源端口</span></span><br><span class="line">dport = ntohs( uh-&gt;dport );<span class="comment">//目的端口</span></span><br><span class="line">uh_len = ntohs(uh-&gt;len);<span class="comment">//长度</span></span><br><span class="line">uh_crc = ntohs(uh-&gt;crc);<span class="comment">//校验和</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n运输层协议：  UDP协议\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"端口号：%d -&gt; %d\n"</span>, sport, dport);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"长度：%d\t\t"</span>, uh_len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"校验和：%d\n"</span>, uh_crc);</span><br><span class="line">udp_len = uh_len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sport == DNSPORT || dport == DNSPORT)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleTCP</span><span class="params">(tcp_header *th)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u_shorttcp_sport;<span class="comment">//源端口</span></span><br><span class="line">u_short tcp_dport;<span class="comment">//目的端口</span></span><br><span class="line">u_long  tcp_seqnum;<span class="comment">//序号（4字节ntohl）  </span></span><br><span class="line">u_long  tcp_acknum;<span class="comment">//确认号</span></span><br><span class="line">u_short tcp_hlen_bl_flags;<span class="comment">//数据偏移+保留+控制位</span></span><br><span class="line">u_short  tcp_hlen;</span><br><span class="line">u_short  tcp_bl;</span><br><span class="line">u_short  tcp_flags_urg;<span class="comment">//紧急1有效 </span></span><br><span class="line">u_short  tcp_flags_ack;<span class="comment">//确认=1时，确认号有效</span></span><br><span class="line">u_short  tcp_flags_psh;<span class="comment">//推送1有效，可以不用填满缓存就发报</span></span><br><span class="line">u_short  tcp_flags_rst;<span class="comment">//复位1有效，重新建立连接</span></span><br><span class="line">u_short  tcp_flags_syn;<span class="comment">//同步syn=1,ack=0时，表明这是一个连接请求报文；syn=1,ack=1,接受连接请求</span></span><br><span class="line">u_short  tcp_flags_fin;<span class="comment">//释放连接=1时，表示数据报</span></span><br><span class="line">u_short tcp_window_size;<span class="comment">//窗口（发送方自己的接收窗口）</span></span><br><span class="line">u_short tcp_checksum;<span class="comment">//检验和（首部+数据）</span></span><br><span class="line">u_short tcp_urg;<span class="comment">//紧急指针</span></span><br><span class="line">u_long tcp_option;</span><br><span class="line">tcp_sport=ntohs(th-&gt;sport);<span class="comment">//源端口</span></span><br><span class="line">tcp_dport=ntohs(th-&gt;dport);<span class="comment">//目的端口</span></span><br><span class="line">tcp_seqnum=ntohl(th-&gt;sequence_number);<span class="comment">//序号（4字节ntohl）  </span></span><br><span class="line">tcp_acknum=ntohl(th-&gt;acknowlegement_number);<span class="comment">//确认号</span></span><br><span class="line">tcp_hlen_bl_flags=ntohs(th-&gt;hlen_bl_flags);<span class="comment">//数据偏移4+保留6+控制位6</span></span><br><span class="line">tcp_hlen=(tcp_hlen_bl_flags &gt;&gt; <span class="number">12</span>)*<span class="number">4</span>;<span class="comment">//以4字节为单位</span></span><br><span class="line">tcp_bl=(tcp_hlen_bl_flags &amp; <span class="number">0x0fc0</span>);<span class="comment">//保留</span></span><br><span class="line">tcp_flags_urg=(tcp_hlen_bl_flags &amp; <span class="number">0x0020</span>);<span class="comment">//紧急1有效                                                    ----- </span></span><br><span class="line">tcp_flags_ack=(tcp_hlen_bl_flags &amp; <span class="number">0x0010</span>);<span class="comment">//确认=1时，确认号有效</span></span><br><span class="line">tcp_flags_psh=(tcp_hlen_bl_flags &amp; <span class="number">0x0008</span>);<span class="comment">//推送1有效，可以不用填满缓存就发报</span></span><br><span class="line">tcp_flags_rst=(tcp_hlen_bl_flags &amp; <span class="number">0x0004</span>);<span class="comment">//复位1有效，重新建立连接</span></span><br><span class="line">tcp_flags_syn=(tcp_hlen_bl_flags &amp; <span class="number">0x0002</span>);<span class="comment">//同步syn=1,ack=0时，表明这是一个连接请求报文；syn=1,ack=1,接受连接请求</span></span><br><span class="line">tcp_flags_fin=(tcp_hlen_bl_flags &amp; <span class="number">0x0001</span>);<span class="comment">//释放连接=1时，表示数据报</span></span><br><span class="line">tcp_window_size=ntohs(th-&gt;window_size);<span class="comment">//窗口（发送方自己的接收窗口）</span></span><br><span class="line">tcp_checksum=ntohs(th-&gt;checksum);<span class="comment">//检验和（首部+数据）</span></span><br><span class="line">tcp_urg=ntohs(th-&gt;urg);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n运输层协议：  TCP协议\n"</span>);</span><br><span class="line"><span class="comment">/*打印TCP数据报首部*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"端口号：%d -&gt; %d\n"</span>,tcp_sport,tcp_dport);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"序号：%u\t"</span>,tcp_seqnum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"确认号：%u\n"</span>,tcp_acknum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数据偏移：%d\t\t"</span>,tcp_hlen);<span class="comment">//首部长度</span></span><br><span class="line"><span class="comment">//printf("保留：%d\n",tcp_bl);</span></span><br><span class="line"><span class="comment">/*控制字段,标志位*/</span></span><br><span class="line"><span class="keyword">if</span> (tcp_flags_urg == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：URG\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (tcp_flags_ack == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：ACK\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (tcp_flags_psh == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：PSH\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (tcp_flags_rst == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：RST\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (tcp_flags_syn == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：SYN\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (tcp_flags_fin == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"标志：FIN\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"窗口：%d\t\t"</span>,tcp_window_size);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"检验和：%d\n"</span>,tcp_checksum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"紧急指针：%d\t\t"</span>,tcp_urg);<span class="comment">//URG=1时才有用，窗口大小为0也能发送</span></span><br><span class="line"><span class="keyword">if</span>(tcp_hlen == <span class="number">20</span>)<span class="comment">//数据偏移(TCP首部长度)&gt;20时才有</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"首部长度为20字节，没有填充字段。\n"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tcp_option = ntohl(th-&gt;option);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"填充字段:%u\n"</span>, tcp_option);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Callback function invoked by libpcap for every incoming packet */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">packet_handler</span><span class="params">(u_char *param, <span class="keyword">const</span> struct pcap_pkthdr *header, <span class="keyword">const</span> u_char *pkt_data)</span>   <span class="comment">//param 无用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">eth_header *eth;</span><br><span class="line">u_short macType;</span><br><span class="line">myPrintBaseInfo(header);</span><br><span class="line">eth=(eth_header *) (pkt_data);</span><br><span class="line"><span class="comment">//过滤以太网头部</span></span><br><span class="line">pkt_data += <span class="number">14</span>;</span><br><span class="line"><span class="comment">//HandleMac</span></span><br><span class="line">macType=handleMac(eth);</span><br><span class="line">myPrintNetType(macType);</span><br><span class="line"><span class="comment">// 处理ARP 和 RARP</span></span><br><span class="line"><span class="keyword">if</span>(macType==<span class="number">0x0806</span> || macType==<span class="number">0x8035</span>)</span><br><span class="line">&#123;</span><br><span class="line">arp_header *ap;</span><br><span class="line">ap = (arp_header *)(pkt_data);</span><br><span class="line">handleARPAndRARP(ap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理IP</span></span><br><span class="line"><span class="keyword">if</span>(macType==<span class="number">0x0800</span>)</span><br><span class="line">&#123;</span><br><span class="line">u_short ip_type;</span><br><span class="line">ip_header *ih;</span><br><span class="line">ih = (ip_header *) (pkt_data);</span><br><span class="line">ip_type = handleIP(ih);</span><br><span class="line"><span class="keyword">if</span> (ip_type == <span class="number">1</span>) &#123;</span><br><span class="line">icmp_header *ich;</span><br><span class="line">ich = (icmp_header *)((u_char*)ih + all_ip_len);</span><br><span class="line">handleICMP(ich);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ip_type == <span class="number">17</span>)&#123;</span><br><span class="line">udp_header *uh;</span><br><span class="line">uh = (udp_header *) ((u_char*)ih + all_ip_len);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(handleUDP(uh))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct dns_packet *pdns;</span></span><br><span class="line"><span class="comment">pdns = (struct dns_packet *)(pkt_data + all_ip_len + udp_len); // sport+dport+length+checksum,DNS头指针</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">u_char *query=&amp;(pdns-&gt;dns_data);//定位到查询部分头部</span></span><br><span class="line"><span class="comment">printf("QueryDomain=");</span></span><br><span class="line"><span class="comment">u_char domainname[100]=&#123;0&#125;;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">u_int i=0;</span></span><br><span class="line"><span class="comment">//query++;//把点去了</span></span><br><span class="line"><span class="comment">while(*query)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("%d", *query);</span></span><br><span class="line"><span class="comment">if(*query &lt; 0x10)//48以后出现数字和英文字母</span></span><br><span class="line"><span class="comment">printf(".");</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">printf("%c", *query);</span></span><br><span class="line"><span class="comment">query++;</span></span><br><span class="line"><span class="comment">i++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf("\n"); */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ip_type == <span class="number">6</span>)&#123;</span><br><span class="line">tcp_header *th;</span><br><span class="line">th=(tcp_header *) ((u_char*)ih + all_ip_len);</span><br><span class="line">handleTCP(th);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">pcap_if_t</span> *alldevs;</span><br><span class="line"><span class="keyword">pcap_if_t</span> *d;</span><br><span class="line"><span class="keyword">int</span> inum;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">pcap_t</span> *adhandle;</span><br><span class="line"><span class="keyword">char</span> errbuf[PCAP_ERRBUF_SIZE];</span><br><span class="line">u_int netmask;</span><br><span class="line"><span class="keyword">char</span> packet_filter[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分析IP数据报输入：\t1\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分析ARP数据报输入：\t2\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分析TCP数据报输入：\t3\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分析UDP数据报输入：\t4\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分析ICMP数据报输入：\t5\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分析MAC、IP、ARP、TCP、UDP、IMCP输入\t6\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">packet_filter = <span class="string">"ip"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)</span><br><span class="line">packet_filter = <span class="string">"arp"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)</span><br><span class="line">packet_filter = <span class="string">"ip and tcp"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">4</span>)</span><br><span class="line">packet_filter = <span class="string">"ip and udp"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">5</span>)</span><br><span class="line">packet_filter = <span class="string">"ip and icmp"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">6</span>)</span><br><span class="line">packet_filter = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"InputError : check the number you input! exit(1)"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bpf_program</span> <span class="title">fcode</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pcap_findalldevs(&amp;alldevs, errbuf) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error in pcap_findalldevs: %s\n"</span>, errbuf);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(d=alldevs; d; d=d-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d. %s"</span>, ++i, d-&gt;name);</span><br><span class="line"><span class="keyword">if</span> (d-&gt;description)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" (%s)\n"</span>, d-&gt;description);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" (No description available)\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nNo interfaces found! Make sure WinPcap is installed.\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Enter the interface number (1-%d):"</span>,i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inum);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check if the user specified a valid adapter */</span></span><br><span class="line"><span class="keyword">if</span>(inum &lt; <span class="number">1</span> || inum &gt; i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nAdapter number out of range.\n"</span>);</span><br><span class="line">pcap_freealldevs(alldevs);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Jump to the selected adapter */</span></span><br><span class="line"><span class="keyword">for</span>(d=alldevs, i=<span class="number">0</span>; i&lt; inum<span class="number">-1</span> ;d=d-&gt;next, i++);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Open the adapter */</span></span><br><span class="line"><span class="keyword">if</span> ((adhandle= pcap_open_live(d-&gt;name,<span class="comment">// name of the device</span></span><br><span class="line"> <span class="number">65536</span>,<span class="comment">// portion of the packet to capture. </span></span><br><span class="line"><span class="comment">// 65536 grants that the whole packet will be captured on all the MACs.</span></span><br><span class="line"> <span class="number">1</span>,<span class="comment">// promiscuous mode (nonzero means promiscuous)</span></span><br><span class="line"> <span class="number">1000</span>,<span class="comment">// read timeout</span></span><br><span class="line"> errbuf<span class="comment">// error buffer</span></span><br><span class="line"> )) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"\nUnable to open the adapter. %s is not supported by WinPcap\n"</span>);</span><br><span class="line">pcap_freealldevs(alldevs);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check the link layer. We support only Ethernet for simplicity. */</span></span><br><span class="line"><span class="keyword">if</span>(pcap_datalink(adhandle) != DLT_EN10MB)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"\nThis program works only on Ethernet networks.\n"</span>);</span><br><span class="line">pcap_freealldevs(alldevs);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(d-&gt;addresses != <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment">/* Retrieve the mask of the first address of the interface */</span></span><br><span class="line">netmask=((struct sockaddr_in *)(d-&gt;addresses-&gt;netmask))-&gt;sin_addr.S_un.S_addr;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">/* If the interface is without addresses we suppose to be in a C class network */</span></span><br><span class="line">netmask=<span class="number">0xffffff</span>; </span><br><span class="line"><span class="comment">//compile the filter</span></span><br><span class="line"><span class="keyword">if</span> (pcap_compile(adhandle, &amp;fcode, packet_filter, <span class="number">1</span>, netmask) &lt;<span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"\nUnable to compile the packet filter. Check the syntax.\n"</span>);</span><br><span class="line">pcap_freealldevs(alldevs);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set the filter</span></span><br><span class="line"><span class="keyword">if</span> (pcap_setfilter(adhandle, &amp;fcode)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"\nError setting the filter.\n"</span>);</span><br><span class="line">pcap_freealldevs(alldevs);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nlistening on %s...\n"</span>, d-&gt;description);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* At this point, we don't need any more the device list. Free it */</span></span><br><span class="line">pcap_freealldevs(alldevs);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* start the capture */</span></span><br><span class="line">pcap_loop(adhandle, <span class="number">0</span>, packet_handler, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li><p>听到网卡上Mac帧时的回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">packet_handler</span><span class="params">(u_char *param, </span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> struct pcap_pkthdr *header, <span class="keyword">const</span> u_char *pkt_data)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>输出基本信息：包括监听到帧的时间，帧的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintBaseInfo</span><span class="params">(<span class="keyword">const</span> struct pcap_pkthdr *header)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>输出硬件地址，格式：<code>xx:xx:xx:xx:xx:xx</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintEthAddress</span><span class="params">(eth_address eth)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>输出IP地址，格式：<code>xx.xx.xx.xx</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintIPAddress</span><span class="params">(ip_address ia)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>输出网络层协议类型，格式：<code>网络层协议：xxxx</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintNetType</span><span class="params">(u_short type)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>分析Mac帧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">u_short <span class="title">handleMac</span><span class="params">(eth_header *eth)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>分析ARP和RARP帧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleARPAndRARP</span><span class="params">(arp_header *ah)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>分析IP数据报</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">u_short <span class="title">handleIP</span><span class="params">(ip_header *ih)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>分析ICMP数据报</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleICMP</span><span class="params">(icmp_header *ich)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>分析UDP数据报</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">handleUDP</span><span class="params">(udp_header *uh)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>分析TCP数据报</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleTCP</span><span class="params">(tcp_header *th)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="网络" scheme="https://isjinhao.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="cpp" scheme="https://isjinhao.github.io/tags/cpp/"/>
    
      <category term="网络" scheme="https://isjinhao.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统引论</title>
    <link href="https://isjinhao.github.io/posts/17122.html/"/>
    <id>https://isjinhao.github.io/posts/17122.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:08:20.991Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="操作系统的定义"><a href="#操作系统的定义" class="headerlink" title="操作系统的定义"></a>操作系统的定义</h2><p>操作系统（Operating System，简称OS）是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。主要作用是管理硬件设备来提高利用率和吞吐量，同时为用户和应用系统提供易于使用的接口。</p><ul><li>提高利用率：使系统中各设备的空闲时间尽可能短。</li><li>提高吞吐量：使单位时间内完成的业务更多。</li><li>提供易于使用的接口：即是方便使用计算机资源。例如没有操作系统，操纵计算机可能需要用户输入二进制代码，有了操作系统，用户可以点击图标，操作系统就会将其转换成二进制代码。</li></ul><p><br></p><h3 id="操作系统的目标"><a href="#操作系统的目标" class="headerlink" title="操作系统的目标"></a>操作系统的目标</h3><ul><li>方便性：即对用户和应用程序提供易于使用的接口。</li><li>有效性：提高利用率和吞吐量。</li><li>可扩充性：计算机硬件和体系结构等都在不断发展中，OS需要有好的可扩充性来满足不断发展的需求。</li><li>开放性：为了使计算机的应用环境从单机转换成网络，OS需要满足相应的软硬件标准来实现设备的互联。</li></ul><p><br></p><h3 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h3><ul><li>提供易于使用的接口，如Shell、图形界面等。</li><li>管理计算机所有的资源，负责计算机系统全部资源的分配、控制、调度和回收。</li><li>隐蔽硬件特性，如计算2*3，某些机器的实现是使用加法器做2+2+2，而有的机器是乘法器实现2*3。操作系统屏蔽这些细节，用户只需要输入2*3就能完成。</li></ul><p><br></p><h2 id="未配置操作系统的计算机系统"><a href="#未配置操作系统的计算机系统" class="headerlink" title="未配置操作系统的计算机系统"></a>未配置操作系统的计算机系统</h2><ul><li>人工操作：程序员把程序和数据通过穿孔的方式记录在纸带上，再启动机器读入纸带，运行完成并取走计算结果后，才允许下一个用户上机。缺点：<ul><li>用户独占整机：计算机上的资源为上机用户独占。</li><li>设备空闲率高：用户装卡，卸卡等人工操作时，设备资源是空闲的。</li></ul></li><li>脱机输入/输出（Off-Line I/O）：为了解决人机矛盾及CPU、I/O等设备之间速度的不匹配。它是先把纸带通过输入设备在外围机（与主机相比处于次要地位的计算机）的控制下输入到磁带上，当CPU需要这些信息时再从磁带上高速地调取。类似的，在输出时把信息输出到磁盘中，在外围机的控制下通过输出设备输出。也就是说主机直接对磁盘进行操作，输入输出和程序运行脱离。<ul><li>減少了CPU的空闲时间：主机不必依赖输入输出，可以从磁盘中读取数据。</li><li>提升了I/O速度：主机读取信息不再是从卡片中读取，从磁盘读取速度较快。<br><div align="center"><img src="http://blogfileqiniu.isjinhao.site/40683018-6777-42a0-ae90-90a136f75876"></div><br><br><h2 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h2>为了提升计算机资源的利用率和提升计算机的吞吐量研发出了批操作系统。</li></ul></li></ul><p><strong>基础概念</strong></p><ul><li>作业：程序+数据+作业说明书（系统根据说明书来对程序的运行进行控制）。</li><li>周转时间：从作业进入系统到作业完成退出系统所用的时间。</li><li>平均周转时间：同时参与系统运行的几个作业的周转时间的平均值。$T=\frac{1}{n}[\sum_{i=1}^NT_i]$</li><li>带权周转时间：作业的周转时间（$T$）和系统为它提供服务的时间（$T_S$）。$W=\frac{T}{T_s}$</li><li>平均带权周转时间：同时参与系统运行的几个作业的带权周转时间的平均值。$T=\frac{1}{n}[\sum_{i=1}^NW_i]$</li></ul><p><br></p><h3 id="单道批处理系统"><a href="#单道批处理系统" class="headerlink" title="单道批处理系统"></a>单道批处理系统</h3><p>设计一个常驻内存的程序（监督程序），操作员有选择地把若干作业合成一批，安装输入设备上，并启动监督程序，然后由监督程序自动控制这批作业运行，从而减少部分人工干预，有效地缩短了作业运行前的准备时间，相对的提高CPU的利用率。同一时刻只有一个硬件在运行。特点：自动性、顺序性、单道性。缺点：</p><ul><li>I/O的慢速与CPU 的高速不匹配，且输入时需要CPU等待。</li><li>用户交互性差。作业安装输入后，就不能再交互。<br><div align="center"><img src="http://blogfileqiniu.isjinhao.site/5404ba6f-d320-4018-a0d1-5a289d94f674"></div><br><br><h3 id="多道批处理系统"><a href="#多道批处理系统" class="headerlink" title="多道批处理系统"></a>多道批处理系统</h3>把一个以上的作业存放在主存中，并且同时处于运行状态，使这些作业共享处理机和外部设备等其它系统资源。对于一个单处理机系统来说，作业同时处于运行状态只是宏观的概念，其含义是指每个作业都已开始运行，但尚未完成。就微观而言，在任意特定时刻，处理机上运行的作业只有一个。特点：多道性、无序性、调度性。优缺点：</li><li>优点：资源利用率高、系统吞吐量大。</li><li>缺点：作业仍然要排队处理，所以平均周转时间长、无交互能力。<br>此时如何调度程序已经不是再用一张简单的流程图能说明了。下图只是说明处理器利用率高。<br><div align="center"><img src="http://blogfileqiniu.isjinhao.site/3cf806a0-cc5d-40ca-9590-52b94be8a2c1"></div><br><br><h3 id="举例证明资源利用率高和系统吞吐量大"><a href="#举例证明资源利用率高和系统吞吐量大" class="headerlink" title="举例证明资源利用率高和系统吞吐量大"></a>举例证明资源利用率高和系统吞吐量大</h3>设内存中有三道程序 A、B、C，它们的计算和I/O操作的时间如下表所示：<br>| 程序操作 | A | B | C |<br>| :———: | :—: | :—: | :—: |<br>| 计算 | 30 | 60 | 20 |<br>| I/O | 40 | 30 | 40 |<br>| 计算 | 10 | 10 | 20 |</li><li>单道<div align="center"><img src="http://blogfileqiniu.isjinhao.site/ae55bc34-5c24-455e-8203-e7ca54ce1fc7" width="100%"></div></li><li>多道<br><div align="center"><img src="http://blogfileqiniu.isjinhao.site/cbdd6ae8-1724-4643-b97e-6ce7e1742cb4" width="100%"></div><br><br><h2 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h2>批处理系统中，作业一旦提交就不能进行更改，所以人机交互性很差。为了满足人机交互的需求诞生分时系统。每一个用户通过一台终端与计算机相连，以交互式的命令使用系统，采用分享CPU的方法，由于CPU的速度比人在终端输入指令的时间快得多，所以用户感到自己独占了整个计算机系统。系统规定一个称之为“时间片”的时间单位，所有终端用户轮流享用一个时间片的CPU。需要解决的问题：</li><li>及时接受：所有终端用户输入的信息都要能够被及时的送到处理器上。所以主机会以很快的速度循环扫描各个终端。每个终端也要拥有缓存区来保存输入的信息。</li><li>及时处理：用户需要能对自己的作业及其允许及时地实施控制。所以所有的作业必须驻留在内存中，因此批作业系统不能被使用。它采用的方式是：作业直接进入内存。但每个用户只连续使用一个“时间片”的时间，对所有用户进行循环。这样每个用户都能及时地与自己的作业进行交互。<br><div align="center"><img src="http://blogfileqiniu.isjinhao.site/98780fe2-3f17-4ec0-a295-b21276cad639"></div><br><br><h3 id="分时系统与多道批处理系统的不同特性"><a href="#分时系统与多道批处理系统的不同特性" class="headerlink" title="分时系统与多道批处理系统的不同特性"></a>分时系统与多道批处理系统的不同特性</h3></li><li>多路性：允许多个用户共享一台计算机，提高资源利用率。</li><li>独立性：每个用户之间互不干扰，感觉就是一个人在独占一台计算机。</li><li>及时性：用户的请求能在很短的时间内得到回应。</li><li>交互性：用户可以通过终端和计算机进行及时交互。</li></ul><p><br></p><h2 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h2><p>指系统能及时响应外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致地运行。实时系统强调程序运行的时间，它需对接收到的某些信号做出及时地反应。大多数的实时系统是专用系统，如：工业（武器）控制系统、信息查询系统、多媒体系统、嵌入式系统等。最大的特点就是可靠性：系统必须高度可靠，因为任何可能的差错都可能带来灾难性后果，所以系统一般都有多级容错措施。</p><ul><li>按是否周期执行分类：<ul><li>周期性实时任务：如外部设备周期性地发出状态信号给计算机使其状态能被实时感知。</li><li>非周期性实时任务：提交给系统时需要指定开始截止时间和完成截止时间。</li></ul></li><li>硬实时任务&amp;软实时任务：<ul><li>硬实时任务（Hard Real-time Task）：截止时间到达时任务必须完成，比如武器控制系统。</li><li>软实时任务（Soft Real-time Task）：截止时间到达时任务没有完成没有太大影响，比如多媒体系统。</li></ul></li></ul><p><br></p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li>进程：在系统中能独立运行并作为资源分配的基本单位。</li><li>线程：独立运行的基本单位，比进程更小，基本上不拥有系统资源。通常在一个进程中包含了若干个线程。</li></ul><p><br></p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><ul><li>并发：宏观上是多个进程同时运行，微观上是每一时刻只有一道进程在执行。</li><li>共享：系统中的资源可供内存中多个并发执行的进程（线程）共同使用。有两种共享方式：<ul><li>互斥共享方式，如打印机；</li><li>同时访问方式，如共享文件夹、网络资源。</li></ul></li><li>虚拟：通过某种技术把一个物理实体变为若干个逻辑上的对应物。这样可以避免一个进程单独占用某个物理设备，一个物理设备被分配给多个进程便可以提升物理设备的使用率。</li><li>不确定性（异步性）：进程以人们不可预知的速度向前推进，即为进程的不确定性。这样的话很可能是先进入内存的作业后完成；而后进入内存的作业先完成。尽管如此，但只要有合理的进程同步方式且运行环境相同，作业经多次运行，都会获得完全相同的结果。因此，异步运行方式是允许的。</li></ul><p><br></p><h2 id="操作系统的结构"><a href="#操作系统的结构" class="headerlink" title="操作系统的结构"></a>操作系统的结构</h2><h3 id="传统操作系统结构"><a href="#传统操作系统结构" class="headerlink" title="传统操作系统结构"></a>传统操作系统结构</h3><ul><li>无结构OS：<ul><li>关注功能的实现和获得高的效率操作系统是为数众多的一组过程的集合，各过程之间可以相互调用，在操作系统内部不存在任何结构。</li><li>程序设计的技巧，只是如何编制紧凑的程序，以便于有效地利用内存。</li><li>操作系统既庞大又杂乱，缺乏清晰的程序结构。</li><li>程序错误很多，给调试工作带来很多困难；另一方面也使程序难以阅读和理解，增加了维护人员的负担。</li></ul></li><li>模块化结构OS<ul><li>模块化程序设计技术，是最早（20世纪60年代）出现的一种程序设计技术。该技术是基于“分解”和“模块”原则来控制大型软件的复杂度的。</li><li>将OS按其功能划分为若干个具有一定独立性和大小的模块。每个模块具有某方面的管理功能，并规定好各模块间的接口， 使各模块之间能通过该接口实现交互，然后再进一步将各模块细分为若干个具有一定管理功能的子模块。（会导致模块之间的依赖关系很重，OS结构不清晰）</li><li>若子模块较大时，再进一步将它细分。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/3637ba18-bc51-4b80-ba93-7e2ac5780c21"></div></li></ul></li><li>分层式结构OS：<ul><li>改进设计方式，使每一步设计都是建立在可靠的基础上一层一层地自底向上增添软件层，每一层都实现若干功能，最后总能构成一个能满足需要的OS。</li><li>每一层都仅使用其底层所提供的功能和服务，这样可使系统的调试和验证都变得容易。</li><li>一旦发现错误后，通常该错误只会局限于某一层，因为它与所有其高层的软件无关，而此层以下的各层软件，又都经过仔细的调试，bug修复较为容易。</li></ul></li></ul><p><br></p><h3 id="客户-服务器结构"><a href="#客户-服务器结构" class="headerlink" title="客户/服务器结构"></a>客户/服务器结构</h3><ul><li>为了提高OS的灵活性和可扩充性而将OS划分为两部分。</li><li>一部分是用于提供各种服务的一组服务器（进程），所有这些服务器（进程）都运行在用户态。当有一用户进程（现在称为客户进程）要求读文件的一个盘块时，该进程便向文件服务器（进程）发出一个请求；当服务器完成了该客户的请求后，便给该客户回送一个响应。</li><li>另一部分是内核，用来处理客户和服务器之间的通信， 即由内核来接收客户的请求，再将该请求送至相应的服务器；同时它也接收服务器的应答， 并将此应答回送给请求客户。</li><li>此外，在内核中还应具有其它一些机构，用于实现与硬件紧密相关的和一些较基本的功能。</li></ul><p><br></p><h3 id="面向对象结构（20世纪80年代）"><a href="#面向对象结构（20世纪80年代）" class="headerlink" title="面向对象结构（20世纪80年代）"></a>面向对象结构（20世纪80年代）</h3><ul><li>该技术是基于“抽象”和“隐蔽”原则来控制大型软件的复杂度的。所谓对象，是指在现实世界中具有相同属性、服从相同规则的一系列事物的抽象，而把其中的具体事物称为对象的实例。</li><li>OS中的各类实体如进程、线程、消息、存储器等，都使用了对象这一概念，相应地，便有进程对象、线程对象、 存储器对象等。<ul><li>由于隐蔽了表示实体的数据和操作，因而可以改变对象的表示而不会影响其它部分， 从而可以方便地改变老的对象和增加新的对象。</li><li>继承性。继承性是面向对象技术所具有的重要特性。继承性是指子对象可以继承父对象的属性，这样，在创建一个新的对象时， 便可减少大量的时空开销。</li><li>正确性和可靠性。由于对象是构成操作系统的基本单元，可以独立地对它进行测试，这样，比较易于保证其正确性和可靠性，从而比较容易保证整个系统的正确性和可靠性。</li></ul></li></ul><p><br></p><h3 id="微服务结构（20世纪90年代）"><a href="#微服务结构（20世纪90年代）" class="headerlink" title="微服务结构（20世纪90年代）"></a>微服务结构（20世纪90年代）</h3><ul><li>能有效支持多处理机，适用于分布式系统环境。</li><li>以微内核为操作系统核心，以客户/服务器为基础，采用了面向对象的程序设计方法。<ul><li>所谓微内核技术，是指精心设计的、能实现现代OS核心功能的小型内核，它与一般的OS（程序）不同， 它更小更精炼，它不仅运行在核心态，而且开机后常驻内存， 它不会因内存紧张而被换出内存。</li><li>微内核并非是一个完整的OS， 而只是为构建通用OS提供一个重要基础。</li><li>在微内核OS结构中，通常都采用了客户/服务器模式，因此OS的大部分功能和服务，都是由若干服务器来提供的， 如文件服务器、作业服务器和网络服务器等。</li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;操作系统的定义&quot;&gt;&lt;a href=&quot;#操作系统的定义&quot; class=&quot;headerlink&quot; title=&quot;操作
      
    
    </summary>
    
      <category term="操作系统" scheme="https://isjinhao.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://isjinhao.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>方法功能的增强</title>
    <link href="https://isjinhao.github.io/posts/18731.html/"/>
    <id>https://isjinhao.github.io/posts/18731.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.020Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>方法功能的增强是开发时常做的事情，当官方或者第三方提供的API不能满足我们的需要时，可以在原有API的基础上加上我们自定义的功能来实现需求。<br>常见的功能增强的方式有三种：继承、装饰者模式、动态代理。</p><p><br></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>现在有一个很火的概念：无人驾驶。假设无人驾驶的标准是Oracle公司制定的，Google想使用Java语言来开发无人驾驶系统，那么首先它需要创建一个类实现Oracle公司提供的无人驾驶的接口（接口为AIDriving，类为GoogleAIDriving）。</p><ul><li><p>AIDriving</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;  <span class="comment">//无人驾驶汽车启动的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;   <span class="comment">//无人驾驶汽车停止的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>GoogleAIDriving</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleAIDriving</span> <span class="keyword">implements</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Google汽车启动了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Google汽车停止了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>这个时候国内某汽车制造公司（设为A公司）想使用Google提供的无人驾驶系统。但是Google提供的系统不太适合我国国情，所以A公司的工程师就想在Google系统的基础上进行定制。他们选择的方式是继承GoogleAIDriving，创建一个自己的类：A1GoogleAIDriving。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A1GoogleAIDriving</span> <span class="keyword">extends</span> <span class="title">GoogleAIDriving</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国启动汽车"</span>);</span><br><span class="line"><span class="keyword">super</span>.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国停止汽车"</span>);</span><br><span class="line"><span class="keyword">super</span>.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br></p><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>但理想很美好，现实很残忍。GoogleAIDriving被定义为一个final类（不能被继承），这个是可以理解的，因为如果GoogleAIDriving不是一个final类，任何继承GoogleAIDriving的类都可以对其start()、stop()方法进行覆盖，如果覆盖时出现bug就可能会出现大问题。所以像启动、停止这种核心功能是不允许汽车制造商随意修改的。A公司的工程师就想到了使用装饰者模式来增强功能（设类为A2GoogleAIDriving）。<br>装饰者模式该怎么做呢？</p><ol><li>首先，装饰类得和被装饰类实现相同的接口，即AIDriving；</li><li>第二，在装饰类中定义一个AIDriving类型的属性，即AIDriving car；</li><li>第三，有一个参数为AIDriving类型的构造函数，即A2GoogleAIDriving(AIDriving car)；</li><li>第四，装饰类的每个方法都要调用被装饰类相应的方法；</li><li>第五，使用第三步中的构造函数创建装饰类；</li><li>第六，在装饰类的方法中自定义功能。</li></ol><ul><li><p>创建装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A2GoogleAIDriving</span> <span class="keyword">implements</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> AIDriving car;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A2GoogleAIDriving</span><span class="params">(AIDriving car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国启动汽车..."</span>);</span><br><span class="line">car.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国停止汽车..."</span>);</span><br><span class="line">car.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">GoogleAIDriving car = <span class="keyword">new</span> GoogleAIDriving();</span><br><span class="line">A2GoogleAIDriving aCar = <span class="keyword">new</span> A2GoogleAIDriving(car);</span><br><span class="line">aCar.start();</span><br><span class="line"> <span class="comment">/* Console : </span></span><br><span class="line"><span class="comment">  在中国启动汽车...</span></span><br><span class="line"><span class="comment">Google汽车启动了... */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>A公司工程师正沉浸在胜利到来前的喜悦中，突然他们发现AIDriving接口有1000个方法，所以在装饰类中其他不需要加入自定义动能的998个方法我们也要调用。这一看就不是一个好的解决方案，A公司的某大佬就想起来动态代理。<br>动态代理中可以使用反射技术得到方法的信息，如果是<code>start()</code>或者<code>stop()</code>方法就加上自定义的功能，其他方法直接执行。</p><ul><li><p>A3GoogleAIDriving</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A3GoogleAIDriving</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> AIDriving car;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A3GoogleAIDriving</span><span class="params">(AIDriving car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AIDriving <span class="title">getIns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AIDriving a3GoogleAIDriving = (AIDriving)Proxy.newProxyInstance(</span><br><span class="line">GoogleAIDriving.class.getClassLoader(), </span><br><span class="line">GoogleAIDriving.class.getInterfaces(), </span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(method.getName().equals(<span class="string">"start"</span>)</span><br><span class="line">&amp;&amp;method.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"在中国启动汽车..."</span>);</span><br><span class="line"><span class="keyword">return</span> method.invoke(car, args);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"stop"</span>)</span><br><span class="line">&amp;&amp;method.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"在中国停止汽车..."</span>);</span><br><span class="line"><span class="keyword">return</span> method.invoke(car, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> method.invoke(car, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> a3GoogleAIDriving;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行A3GoogleAIDriving</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">GoogleAIDriving car = <span class="keyword">new</span> GoogleAIDriving();</span><br><span class="line">A3GoogleAIDriving a3GoogleAIDriving = <span class="keyword">new</span> A3GoogleAIDriving(car);</span><br><span class="line">AIDriving ins = a3GoogleAIDriving.getIns();</span><br><span class="line">ins.start();</span><br><span class="line">ins.stop();</span><br><span class="line"><span class="comment">/*   Console : </span></span><br><span class="line"><span class="comment">  在中国启动汽车...</span></span><br><span class="line"><span class="comment">Google汽车启动了...</span></span><br><span class="line"><span class="comment">在中国停止汽车...</span></span><br><span class="line"><span class="comment">Google汽车停止了...  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="三种方式总结"><a href="#三种方式总结" class="headerlink" title="三种方式总结"></a>三种方式总结</h2><p>分析了三种方式的功能增强，各位大腿是不是被博主带入了一个误区：后者比前者更好？按照存在即合理的解释，肯定不是这样的。相反，三种方法中继承却是最常见的增强方式，因为它结构简单、易于理解。而后两种都是设计模式，一般在大型软件开发时才会用到。<br>而且对于装饰者模式和动态代理的区别是：装饰者模式一般用于增强功能，动态代理一般用于拦截对方法的请求。</p><p><br></p><h2 id="装饰者模式解决Web开发乱码"><a href="#装饰者模式解决Web开发乱码" class="headerlink" title="装饰者模式解决Web开发乱码"></a>装饰者模式解决Web开发乱码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: RequestEncodingUtils </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO(解决request乱码的工具类)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 詹金浩 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年3月11日 下午2:27:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestEncodingUtils</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"><span class="keyword">private</span> Boolean isEncoded = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestEncodingUtils</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(request);</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line"></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"></span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line"><span class="comment">//处理Post请求</span></span><br><span class="line"><span class="keyword">if</span>(method.equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">parameterMap =  request.getParameterMap();</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;  <span class="comment">//处理Get请求</span></span><br><span class="line"><span class="comment">//保证编码只被执行一次</span></span><br><span class="line"><span class="keyword">if</span>(!isEncoded) &#123;</span><br><span class="line"><span class="keyword">for</span>(String key : parameterMap.keySet()) &#123;</span><br><span class="line">String []values = parameterMap.get(key);</span><br><span class="line"><span class="keyword">if</span>(values != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">values[i] = <span class="keyword">new</span> String(values[i].getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEncoded = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> parameterMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = <span class="keyword">this</span>.getParameterMap();</span><br><span class="line">String []values = parameterMap.get(name);</span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">String []values = getParameterValues(name);</span><br><span class="line"><span class="keyword">return</span> values!=<span class="keyword">null</span>?values[<span class="number">0</span>]:<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: GlobalEncoding </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO(解决全局编码的filter) </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 詹金浩 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年3月10日 下午10:26:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalEncoding</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlobalEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    RequestEncodingUtils myRequest = <span class="keyword">new</span> RequestEncodingUtils((HttpServletRequest)request);</span><br><span class="line">    chain.doFilter(myRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#destroy()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#doFilter(ServletRequest, ServletResponse, FilterChain)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#init(FilterConfig)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>计算机体系结构</title>
    <link href="https://isjinhao.github.io/posts/60393.html/"/>
    <id>https://isjinhao.github.io/posts/60393.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.026Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><div align="center"><img src="http://blogfileqiniu.isjinhao.site/9f75c222-797e-43c6-8d05-2355435770f2"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/668f8d35-bd5f-4807-afd5-329713fd597d"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/30701b0e-d235-4fac-a502-5f4d227c0c58"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/7c71fd55-b6ba-463b-ab08-f50594348314"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/7d436421-cd00-434d-8892-f2e06bb1a3de"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/562f2d96-2a05-4b72-842a-caecc2646422"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/c8284d8e-2c0a-465b-87ec-48d9106194c8"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/38c2190a-472a-4d24-992b-1e2488925930"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a6bf8b62-6160-4c4f-b15d-1c9a409af20d"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/5a08a767-b18f-4b1d-9c42-b5f58437283d"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/71918083-5a05-4f4d-a002-027c056ea965"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/1c8dbe60-ae6b-460d-9ab4-f89246c68f78"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/323a2022-6f04-44ee-936a-10d2955a4889"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/06dc6fc4-9bcd-4dac-b5e3-b53ac9da073a"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/44e48e3b-2871-4c03-abe4-35f6ff4e7659"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e207d200-503f-4a98-8d27-1825cd643cac"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a8b8171f-2338-44e1-aa15-17cfad3905b7"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/cfd25cfa-b171-4e93-b8ac-acd69950c000"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/8f50d795-4ddd-4db0-82b9-5850cafd4f30"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/c3090aca-387f-49cc-8aca-cf509a78cf82"></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://blogfileqiniu.isjinhao.site/9f75c222-7
      
    
    </summary>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/categories/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="计算机体系结构" scheme="https://isjinhao.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>电子邮件&amp;Java完成发送</title>
    <link href="https://isjinhao.github.io/posts/65368.html/"/>
    <id>https://isjinhao.github.io/posts/65368.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.023Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p>邮件服务器邮件服务器的功能是发送和接收邮件，邮件服务器按照客户服务器方式工作。邮件服务器需要使用发送和读取两个不同的协议。发送时使用了两次SMTP协议（简单邮件传送协议SMTP），负责发送邮件的SMTP进程就是SMTP客户，而负责接收邮件的SMTP进程就是SMTP服务器。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/f7da17b4-3d36-436b-a5ca-1c93dbd55efb"></div><p><strong>电子邮件发送和接收的流程</strong></p><ol><li>发信人使用用户代理（例如：Outlook）编辑要发送的信件。</li><li>发件人的 Outlook 软件使用SMTP协议，把邮件“推送”给发送方邮件服务器，SMTP服务器把邮件临时存放在缓冲区内,等待发送。</li><li>发送方邮件服务器的SMTP客户与接收方邮件服务器的SMTP服务器建立TCP连接，然后发送邮件。</li><li>运行在接收方邮件服务器中的SMTP服务器进程收到邮件后，把邮件放入收件人的邮箱中，等待收件人进行读取。</li><li>收件人在打算收信时，就打开自己PC机中的软件, Outlook 使用POP3（或IMAP）协议，将自己邮箱内的邮件“拉取”回来。<br>注意：当张三给李四发电子邮件时，李四的电脑可能是关机的，这时就没办法联通。所以电子邮件的客户/服务器编程的思想有一点另类，使用了一些中间计算机，就是邮件服务器，邮件服务器始终运行，当要发信或收信时，需先连接到邮件服务器上。</li></ol><p><strong>邮件协议</strong><br>电子邮件需要在邮件客户端和邮件服务器之间，以及两个邮件服务器之间进行邮件传递，那就必须要遵守一定的规则，这个规则就是邮件传输协议：</p><ol><li>SMTP协议：全称为 Simple Mail Transfer Protocol，简单邮件传输协议。它定义了邮件客户端软件和SMTP邮件服务器之间，以及两台SMTP邮件服务器之间的通信规则。</li><li>POP3协议：全称为 Post Office Protocol，邮局协议。它定义了邮件客户端软件和POP3邮件服务器的通信规则。</li><li>IMAP协议：全称为 Internet Message Access Protocol，Internet消息访问协议，它是对POP3协议的一种扩展，也是定义了邮件客户端软件和IMAP邮件服务器的通信规则。</li></ol><p><strong>邮件的格式</strong><br>一个邮件含有这么几个部分：收件人、发件人、抄送人、密送人、主题、内容（现在很多邮箱服务器的内容都支持富文本）、附件。收件人、主题就不说了。内容和附件的话我们等下看怎么用代码把文字&amp;图片&amp;附件发出去。我们现在解释抄送和密送：<br>如果A 发送邮件给B、C，抄送给D、E，密送给F、G，那么：</p><ul><li>B、C、D、E、F、G都能收到这封邮件。</li><li>B知道这是A发送给他和C的邮件，并且抄送给了D、E，但不知道密送给了F、G。</li><li>D知道这是A发送给B、C的邮件，并且抄送给了他和E，但也不知道密送给了F、G。</li><li>F知道这是A发送给B、C的邮件，并且抄送给了D、E，密送给了他，但不知道同时还密送给了G。</li></ul><p><br></p><h2 id="Java完成发送"><a href="#Java完成发送" class="headerlink" title="Java完成发送"></a>Java完成发送</h2><p><strong>jar包引入</strong><br>这个工具的jar包非常乱，为了避免问题，请严格使用下面的依赖。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><strong>类分析</strong></p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/6f246906-8ed8-487b-aeb1-4e047e529c08"></div><p><strong>发送文本文件</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailText</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发件人地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String senderAddress = <span class="string">"@163.com"</span>;</span><br><span class="line">    <span class="comment">//收件人地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String recipientAddress = <span class="string">"@qq.com"</span>;</span><br><span class="line">    <span class="comment">//发件人账户名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String senderAccount = <span class="string">"@163.com"</span>;</span><br><span class="line">    <span class="comment">//发件人账户密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String senderPassword = <span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1、连接邮件服务器的参数配置</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//设置用户的认证方式</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">        <span class="comment">//设置传输协议</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);</span><br><span class="line">        <span class="comment">//设置发件人的SMTP服务器地址</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.163.com"</span>);</span><br><span class="line">        <span class="comment">//2、创建定义整个应用程序所需的环境信息的 Session 对象</span></span><br><span class="line">        Session session = Session.getInstance(props);</span><br><span class="line">        <span class="comment">//设置调试信息在控制台打印出来</span></span><br><span class="line">        session.setDebug(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3、创建邮件的实例对象</span></span><br><span class="line">        Message msg = getMimeMessage(session);</span><br><span class="line">        <span class="comment">//4、根据session对象获取邮件传输对象Transport</span></span><br><span class="line">        Transport transport = session.getTransport();</span><br><span class="line">        <span class="comment">//设置发件人的账户名和密码</span></span><br><span class="line">        transport.connect(senderAccount, senderPassword);</span><br><span class="line">        <span class="comment">//发送邮件，并发送到所有收件人地址，message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人</span></span><br><span class="line">        transport.sendMessage(msg, msg.getAllRecipients());</span><br><span class="line">        <span class="comment">//如果只想发送给指定的人，可以如下写法</span></span><br><span class="line">        <span class="comment">//transport.sendMessage(msg, new Address[]&#123;new InternetAddress("xxx@qq.com")&#125;);</span></span><br><span class="line">        <span class="comment">//5、关闭邮件连接</span></span><br><span class="line">        transport.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得创建一封邮件的实例对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AddressException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MimeMessage <span class="title">getMimeMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建一封邮件的实例对象</span></span><br><span class="line">        MimeMessage msg = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">        <span class="comment">//设置发件人地址</span></span><br><span class="line">        msg.setFrom(<span class="keyword">new</span> InternetAddress(senderAddress));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置收件人地址（可以增加多个收件人、抄送、密送），即下面这一行代码书写多行</span></span><br><span class="line"><span class="comment">         * MimeMessage.RecipientType.TO：发送</span></span><br><span class="line"><span class="comment">         * MimeMessage.RecipientType.CC：抄送</span></span><br><span class="line"><span class="comment">         * MimeMessage.RecipientType.BCC：密送</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        msg.setRecipient(MimeMessage.RecipientType.TO, <span class="keyword">new</span> InternetAddress(recipientAddress));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 为了防止邮箱服务器认定为垃圾邮件，抄送一份给自己，会大大降低失效概率</span></span><br><span class="line">        msg.setRecipient(MimeMessage.RecipientType.CC, <span class="keyword">new</span> InternetAddress(senderAddress));</span><br><span class="line">        <span class="comment">//设置邮件主题</span></span><br><span class="line">        msg.setSubject(<span class="string">"邮件主题"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//设置邮件正文，邮件正文可以支持html</span></span><br><span class="line">        msg.setContent(<span class="string">"&lt;h1&gt;简单的纯文本邮件！&lt;/h1&gt;"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">//设置邮件的发送时间,默认立即发送</span></span><br><span class="line">        msg.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>发送带附件和图片的邮件</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailText_Picture_Enclosure</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发件人地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String senderAddress = <span class="string">"@163.com"</span>;</span><br><span class="line">    <span class="comment">//收件人地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String recipientAddress = <span class="string">"@qq.com"</span>;</span><br><span class="line">    <span class="comment">//发件人账户名，账户名和密码一般是一样的，至于Sun公司为什么给他分开，需要去看smtp、pop3协议的了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String senderAccount = <span class="string">"@163.com"</span>;</span><br><span class="line">    <span class="comment">//发件人账户密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String senderPassword = <span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1、连接邮件服务器的参数配置</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//设置用户的认证方式</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">        <span class="comment">//设置传输协议</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);</span><br><span class="line">        <span class="comment">//设置发件人的SMTP服务器地址</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.163.com"</span>);</span><br><span class="line">        <span class="comment">//2、创建定义整个应用程序所需的环境信息的 Session 对象</span></span><br><span class="line">        Session session = Session.getInstance(props);</span><br><span class="line">        <span class="comment">//设置调试信息在控制台打印出来</span></span><br><span class="line">        session.setDebug(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3、创建邮件的实例对象</span></span><br><span class="line">        Message msg = getMimeMessage(session);</span><br><span class="line">        <span class="comment">//4、根据session对象获取邮件传输对象Transport</span></span><br><span class="line">        Transport transport = session.getTransport();</span><br><span class="line">        <span class="comment">//设置发件人的账户名和密码</span></span><br><span class="line">        transport.connect(senderAccount, senderPassword);</span><br><span class="line">        <span class="comment">//发送邮件，并发送到所有收件人地址，message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人</span></span><br><span class="line">        transport.sendMessage(msg, msg.getAllRecipients());</span><br><span class="line">        <span class="comment">//5、关闭邮件连接</span></span><br><span class="line">        transport.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得创建一封邮件的实例对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AddressException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MimeMessage <span class="title">getMimeMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一封邮件的实例对象</span></span><br><span class="line">        MimeMessage msg = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">        <span class="comment">//2.设置发件人地址</span></span><br><span class="line">        msg.setFrom(<span class="keyword">new</span> InternetAddress(senderAddress));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.设置收件人地址（可以增加多个收件人、抄送、密送），即下面这一行代码书写多行</span></span><br><span class="line"><span class="comment">         * MimeMessage.RecipientType.TO：发送</span></span><br><span class="line"><span class="comment">         * MimeMessage.RecipientType.CC：抄送</span></span><br><span class="line"><span class="comment">         * MimeMessage.RecipientType.BCC：密送</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        msg.setRecipient(MimeMessage.RecipientType.TO, <span class="keyword">new</span> InternetAddress(recipientAddress));</span><br><span class="line">        msg.setRecipient(MimeMessage.RecipientType.CC, <span class="keyword">new</span> InternetAddress(senderAddress));</span><br><span class="line">        <span class="comment">//4.设置邮件主题</span></span><br><span class="line">        msg.setSubject(<span class="string">"毕业设计答辩论文"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//下面是设置邮件正文</span></span><br><span class="line">        <span class="comment">//msg.setContent("简单的纯文本邮件！", "text/html;charset=UTF-8");</span></span><br><span class="line">        <span class="comment">// 5. 创建图片"节点"</span></span><br><span class="line">        MimeBodyPart image = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        <span class="comment">// 读取本地文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\ISJINHAO\\Desktop\\3.jpg"</span>);</span><br><span class="line">        DataHandler dh = <span class="keyword">new</span> DataHandler(<span class="keyword">new</span> FileDataSource(file));</span><br><span class="line">        <span class="comment">// 将图片数据添加到"节点"</span></span><br><span class="line">        image.setDataHandler(dh);</span><br><span class="line">        <span class="comment">// 为"节点"设置一个唯一编号（在文本"节点"将引用该ID）</span></span><br><span class="line">        image.setContentID(<span class="string">"mailTestPic"</span>);</span><br><span class="line">        <span class="comment">// 6. 创建文本"节点"</span></span><br><span class="line">        MimeBodyPart text = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        <span class="comment">// 这里添加图片的方式是将整个图片包含到邮件内容中, 实际上也可以以http链接的形式添加网络图片</span></span><br><span class="line">        text.setContent(<span class="string">"这是一张图片&lt;br/&gt;&lt;a href='http://www.cnblogs.com/ysocean/p/7666061.html'&gt;&lt;img src='cid:mailTestPic'/&gt;&lt;/a&gt;"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 7. （文本+图片）设置 文本 和 图片"节点"的关系（将 文本 和 图片"节点"合成一个混合"节点"）</span></span><br><span class="line">        MimeMultipart mm_text_image = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line">        mm_text_image.addBodyPart(text);</span><br><span class="line">        mm_text_image.addBodyPart(image);</span><br><span class="line">        mm_text_image.setSubType(<span class="string">"related"</span>);    <span class="comment">// 关联关系</span></span><br><span class="line">        <span class="comment">// 8. 将 文本+图片 的混合"节点"封装成一个普通"节点"</span></span><br><span class="line">        <span class="comment">// 最终添加到邮件的 Content 是由多个 BodyPart 组成的 Multipart, 所以我们需要的是 BodyPart,</span></span><br><span class="line">        <span class="comment">// 上面的 mailTestPic 并非 BodyPart, 所有要把 mm_text_image 封装成一个 BodyPart</span></span><br><span class="line">        MimeBodyPart text_image = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        text_image.setContent(mm_text_image);</span><br><span class="line">        <span class="comment">// 9. 创建附件"节点"</span></span><br><span class="line">        MimeBodyPart attachment = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">        <span class="comment">// 读取本地文件</span></span><br><span class="line">        DataHandler dh2 = <span class="keyword">new</span> DataHandler(<span class="keyword">new</span> FileDataSource(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\ISJINHAO\\Desktop\\4.jpg"</span>)));</span><br><span class="line">        <span class="comment">// 将附件数据添加到"节点"</span></span><br><span class="line">        attachment.setDataHandler(dh2);</span><br><span class="line">        <span class="comment">// 设置附件的文件名（需要编码）</span></span><br><span class="line">        attachment.setFileName(MimeUtility.encodeText(dh2.getName()));</span><br><span class="line">        <span class="comment">// 10. 设置（文本+图片）和 附件 的关系（合成一个大的混合"节点" / Multipart ）</span></span><br><span class="line">        MimeMultipart mm = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line">        mm.addBodyPart(text_image);</span><br><span class="line">        mm.addBodyPart(attachment);     <span class="comment">// 如果有多个附件，可以创建多个多次添加</span></span><br><span class="line">        mm.setSubType(<span class="string">"mixed"</span>);         <span class="comment">// 混合关系</span></span><br><span class="line">        <span class="comment">// 11. 设置整个邮件的关系（将最终的混合"节点"作为邮件的内容添加到邮件对象）</span></span><br><span class="line">        msg.setContent(mm);</span><br><span class="line">        <span class="comment">//设置邮件的发送时间,默认立即发送</span></span><br><span class="line">        msg.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br></p><h2 id="部分转至"><a href="#部分转至" class="headerlink" title="部分转至"></a>部分转至</h2><p><a href="https://www.cnblogs.com/ysocean/p/7666061.html">https://www.cnblogs.com/ysocean/p/7666061.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;电子邮件&quot;&gt;&lt;a href=&quot;#电子邮件&quot; class=&quot;headerlink&quot; title=&quot;电子邮件&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>软件开发文档用图</title>
    <link href="https://isjinhao.github.io/posts/14908.html/"/>
    <id>https://isjinhao.github.io/posts/14908.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.035Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="系统流程图"><a href="#系统流程图" class="headerlink" title="系统流程图"></a>系统流程图</h2><p>表达的是数据在系统各部件之间流动的情况，但不表达对数据进行加工处理的控制过程。<br>基本思想：用图形符号以黑盒子形式描绘组成系统的每个部件（程序，文档，数据库，人工过程等），表达数据在系统各部件之间流动的情况。</p><p><br></p><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/46544f90-d319-4765-818a-ff5a84005136"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/cce7af23-6057-4719-a809-44c512b58067"></div><p><br></p><h3 id="装配厂供货流程图"><a href="#装配厂供货流程图" class="headerlink" title="装配厂供货流程图"></a>装配厂供货流程图</h3><p>某装配厂有一座存放零件的仓库，仓库中现有的各种零件的数量以及每种零件的库存量临界值等数据记录在库存清单主文件中。当仓库中零件数量有变化时，应该及时修改库存清单主文件，如果哪种零件的库存量少于它的库存量临界值，则应该报告给采购部门以便订货，规定每天向采购部门送一次订货报告。<br>该装配厂使用一台小型计算机处理更新库存清单主文件和产生订货报告的任务。零件库存量的每一次变化称为一个事务，由放在仓库中的CRT终端输入到计算机中；系统中的库存清单程序对事务进行处理，更新存储在磁盘上的库存清单主文件，并且把必要的订货信息写在磁带上。最后，每天由报告生成程序读一次磁带，并且打印出订货报告。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/b280fae3-ebeb-4ad1-b1dd-9ee9b767e04f" width="40%"></div><p><br></p><h3 id="人工销售教材流程图"><a href="#人工销售教材流程图" class="headerlink" title="人工销售教材流程图"></a>人工销售教材流程图</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/aa147181-dfbc-42ed-9432-1f89ee65a776" width="65%"></div><p><br></p><h3 id="计算机售书系统流程图"><a href="#计算机售书系统流程图" class="headerlink" title="计算机售书系统流程图"></a>计算机售书系统流程图</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a80a66e6-afd7-4cfb-ac60-6cc5f2702f10" width="65%"></div><p><br></p><h2 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h2><h3 id="符号-1"><a href="#符号-1" class="headerlink" title="符号"></a>符号</h3><p>通过图形的方法，从数据传递和数据处理的角度，刻画数据流从输入到输出的移动变换过程。数据流三个重要属性：</p><ul><li>数据流名字</li><li>数据组成</li><li>流向</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/42c80956-ce1a-4ebf-a6a6-093afb4968bd"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/8dce117e-59fe-45aa-bfd9-228b3ced8b8a"></div><p><br></p><h3 id="银行取款过程的数据流图"><a href="#银行取款过程的数据流图" class="headerlink" title="银行取款过程的数据流图"></a>银行取款过程的数据流图</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e437551a-0b86-467b-8fb8-b85b1e4fe83e"></div><p><br></p><h3 id="数据流程图分层"><a href="#数据流程图分层" class="headerlink" title="数据流程图分层"></a>数据流程图分层</h3><ul><li>顶层流图仅包含一个数据处理，它代表被开发系统。它的输入流是该系统的输入数据，输出流是系统所输出数据</li><li>底层流图是指其数据处理不需再做分解的数据流图，它处在最底层</li><li>中间层流图则表示对其上层父图的细化。它的每一数据处理可能继续细化，形成子图</li></ul><p><br></p><h3 id="商场业务处理系统的分层数据流图"><a href="#商场业务处理系统的分层数据流图" class="headerlink" title="商场业务处理系统的分层数据流图"></a>商场业务处理系统的分层数据流图</h3><p>商场进货时，先发订货单给供应商，供应商收到订货单，将商品发给商场，商场货到付款，供应商收款后，将收据发给商场；</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/b3190c89-259a-4a9a-829e-0cf10962926f"></div>当顾客到商场采购商品时，先下购物订单，商场查询库存中是否有此种商品，若有则发货给顾客；若没有，则向供应商订货，货到之后再销售给顾客；顾客收到货物之后付款，商场开收据给顾客；<div align="center"><img src="http://blogfileqiniu.isjinhao.site/536c6202-4fe5-4514-b398-1f3ef7370051"></div>商场对货物的管理方面要求知道每种货物详细的销售情况。 #### 绘制L0层数据流图 首先从问题的描述中提取数据流图中的源（终）点、数据处理、数据流和数据存储四种成份。 - 分析源（终）点：将商场的购、销业务系统看成一个整体，外部的与这个系统有交往的对象（机构、人员、或外部系统）是“供应商，和“顾客”，二者是商场购销系统源点和终点。 - 分析数据处理：在顶层数据流图的处理中，用一个整体来表示 - 分析数据流： - 供应商方 $\rightarrow$ 商场：发货单、货款收据 - 顾客 $\rightarrow$ 商场：订单、货款 - 商场 $\rightarrow$ 供货商：订货单、货款 - 商场 $\rightarrow$ 顾客：货物、收据 - 分析数据存储 - 库存信息 - 暂存订单（缺货订单） - 采购订单 - 商品销售历史 - 资金帐目<div align="center"><img src="http://blogfileqiniu.isjinhao.site/73075cb4-30e9-4fbb-a1b7-7070836b5d58"></div><h4 id="绘制L1层数据流图"><a href="#绘制L1层数据流图" class="headerlink" title="绘制L1层数据流图"></a>绘制L1层数据流图</h4><p>商店业务处理的主要数据处理是销售、采购、会计三大数据处理，三者之间的数据流：</p><ul><li>销售 $\rightarrow$ 采购：订货通知</li><li>销售 $\rightarrow$ 会计：收款单</li><li>会计 $\rightarrow$ 销售：收据</li><li>采购 $\rightarrow$ 销售：到货通知</li><li>采购 $\rightarrow$ 会计：付款单</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/2e191ea7-8cc0-49b4-8c9d-e01779009444" width="50%"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/b5f887cd-68e2-4ed6-808e-b47085896fca"></div><h4 id="绘制L2层数据流图"><a href="#绘制L2层数据流图" class="headerlink" title="绘制L2层数据流图"></a>绘制L2层数据流图</h4><ul><li>销售细化</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/97596b46-7a66-41fd-b253-e2e9d2b0c6de"></div>- 采购细化<div align="center"><img src="http://blogfileqiniu.isjinhao.site/23c650a9-8627-4b58-9dc4-1b9e0ab68434"></div><p><br></p><h3 id="教务管理系统"><a href="#教务管理系统" class="headerlink" title="教务管理系统"></a>教务管理系统</h3><p>某校准备开发一个学生成绩管理系统。在该系统中，教务人员录入学生信息、课程信息和成绩信息，学生可以随时查询自己所选课程的成绩。由于学生成绩属于敏感信息，系统必须提供必要的安全措施以防非法存取。</p><h4 id="绘制L0层数据流图"><a href="#绘制L0层数据流图" class="headerlink" title="绘制L0层数据流图"></a>绘制L0层数据流图</h4><ul><li>源点终点：教务人员（源点）；学生（终点）</li><li>数据处理：将系统当成一个整体“学生成绩管理”</li><li>数据流：学生信息、课程信息和成绩；（教务人员录入时）查询请求、查询结果（学生查询时）</li><li>数据文件：成绩文件、学生文件、课程文件。<br>教务人员维护学生信息和课程信息，并登录学生的选课成绩；学生查询自己的成绩单。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/54ad0865-6ad9-425c-92c7-1167a01ad685"></div><h4 id="绘制L1层数据流图-1"><a href="#绘制L1层数据流图-1" class="headerlink" title="绘制L1层数据流图"></a>绘制L1层数据流图</h4><p>“学生信息”是教务人员需要录入的一个信息，因此加入一个加入“录入学生信息” ；同样得到“录入课程信息”、“登记成绩”两个数据处理。另外，数据流“查询请求”和“查询结果”应该由数据处理“查询成绩”来完成。<br>对第 0 层 DFD 的加工“学生成绩管理“进行展开。<br>数据处理：</p><ul><li>录入学生信息</li><li>录入课程信息</li><li>登记学生成绩</li><li>查询学生成绩<br>数据存储：<br>增加这些数据流对应的数据存储，即“学生”、“课程”和“成绩” ，最后得到如图所示的第 1 层 DFD 。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/c12e1400-fabb-45eb-a4e9-7a8f805fe0b2"></div><h4 id="绘制L2层数据流图-1"><a href="#绘制L2层数据流图-1" class="headerlink" title="绘制L2层数据流图"></a>绘制L2层数据流图</h4><p>继续分解第 1 层 DFD 中的加工“查询学生成绩”</p><ul><li>数据处理：分解为“合法性检查”和“查询成绩”</li><li>数据文件：合法的查询条件</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/7e1c4511-68d2-4a9e-bd95-cbe6b94ad2d4" width="75%"></div><p><br></p><h2 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在状态图中：</p><ul><li>初态用实心圆表示；</li><li>终态用一对同心圆（内圆为实心圆）表示。</li><li>中间状态用圆角矩形表示，可以用两条水平横线把它分成上、中、下3个部分。<ul><li>上面部分为状态的名称（必须）；</li><li>中间部分为状态变量的名字和值（可选）；</li><li>下面部分是活动表（可选）。</li></ul></li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/6bb85296-3781-4ca3-8c5e-3192fa6d3e28"></div><h4 id="活动表的语法格式"><a href="#活动表的语法格式" class="headerlink" title="活动表的语法格式"></a>活动表的语法格式</h4><p>事件名(参数表)/动作表达式。</p><ul><li>在活动表中经常使用下述3种标准事件：entry, exit和do。<ul><li>entry事件指定进入该状态的动作；</li><li>exit事件指定退出该状态的动作；</li><li>do事件则指定在该状态下的动作。</li></ul></li><li>活动表中的动作表达式描述应做的具体动作。</li></ul><h4 id="事件表达式的语法"><a href="#事件表达式的语法" class="headerlink" title="事件表达式的语法"></a>事件表达式的语法</h4><ul><li>事件说明［守卫条件］／动作表达式</li><li>其中事件说明的语法为：事件名(参数表)。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e7586f71-3c72-450e-a26d-8c1f4e321a9d" width="80%"></div><p><br></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/fb9f570d-320d-4212-b522-5b2ac9d990f1" width="60%"></div><p><br></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><h3 id="模块关系"><a href="#模块关系" class="headerlink" title="模块关系"></a>模块关系</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/78899b5a-02de-451f-95e7-5d0526dc0840" width="80%"></div>- 一个方框表示一个模块； - 一个模块指向另一个模块的箭头或直线，表示前一模块对后一模块的调用； - 调用直线边的小箭头，表示调用时从一个模块传给另一个模块的数据，也指出了传送方向。<br>### 四种模块<div align="center"><img src="http://blogfileqiniu.isjinhao.site/346970ba-f796-441c-baa1-6fe6ef49081b" width="80%"></div>1. 从下属模块取得数据，经过处理，再传入上级模块 2. 从上级模块获得数据，经过处理，再传送给下属模块 3. 加工模块。从上级模块获得数据，经过处理，转换成其他形式，再送回上级模块 4. 对所有下属模块进行协调和管理的模块<br>### 医院管理系统<div align="center"><img src="http://blogfileqiniu.isjinhao.site/dcfc2c68-6ac2-4814-ae21-6b2b3e75c91a"></div><p><br></p><h3 id="选择-循环调用"><a href="#选择-循环调用" class="headerlink" title="选择/循环调用"></a>选择/循环调用</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/7fa48625-455c-4c4d-9cc2-461f5389dc13" width="60%"></div><div align="center"><img src="http://blogfileqiniu.isjinhao.site/4532f642-c57e-4e58-a5ac-f98aad82f3a5" width="30%"></div><p><br></p><h3 id="变换型SC"><a href="#变换型SC" class="headerlink" title="变换型SC"></a>变换型SC</h3><h4 id="DFD"><a href="#DFD" class="headerlink" title="DFD"></a>DFD</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/4c6ebc14-f436-4296-8cbb-9db670afb210"></div><h4 id="第一级分解后-SC-的数据流"><a href="#第一级分解后-SC-的数据流" class="headerlink" title="第一级分解后 SC 的数据流"></a>第一级分解后 SC 的数据流</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/d9e40fe8-483d-4b5b-88be-7b64eb79f3c9" width="80%"></div><h4 id="传入分支的分解"><a href="#传入分支的分解" class="headerlink" title="传入分支的分解"></a>传入分支的分解</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/521c0940-fc2b-4c0c-94cc-bba34a956d60" width="80%"></div><h4 id="传出分支的分解"><a href="#传出分支的分解" class="headerlink" title="传出分支的分解"></a>传出分支的分解</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/03e616ed-b999-44cd-9437-52cb5e9fd186"></div><h4 id="中心加工分支的分解"><a href="#中心加工分支的分解" class="headerlink" title="中心加工分支的分解"></a>中心加工分支的分解</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/5fb778c2-376d-48dd-89a1-4653ec2a4955" width="40%"></div><p><br></p><h3 id="事务型SC"><a href="#事务型SC" class="headerlink" title="事务型SC"></a>事务型SC</h3><h4 id="DFD-1"><a href="#DFD-1" class="headerlink" title="DFD"></a>DFD</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/d5dca47b-c1c0-4ddd-a0b6-028ca045480a"></div><h4 id="分解系统设置控制器"><a href="#分解系统设置控制器" class="headerlink" title="分解系统设置控制器"></a>分解系统设置控制器</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/12641069-ba7e-4b4c-bdb8-b1cf7f10484e"></div><h4 id="分解密码处理控制器"><a href="#分解密码处理控制器" class="headerlink" title="分解密码处理控制器"></a>分解密码处理控制器</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/3ba109d9-0b49-4ab8-bae2-f02dfa069a7c"></div><p><br></p><h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><h3 id="符号-2"><a href="#符号-2" class="headerlink" title="符号"></a>符号</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/ab0863eb-aba5-4cc9-9a4c-112e7b0bf9ce" width="80%"></div>(a) 选择(分支)； (b) 注释； (c) 预先定义的处理； (d) 多分支； (e) 开始或停止； (f) 准备； (g) 循环上界限； (h) 循环下界限； (i) 虚线； (j) 省略符； (k) 并行方式； (l) 处理； (m) 输入输出； (n) 连接； (o) 换页连接； (p) 控制流<br>### 例子<div align="center"><img src="http://blogfileqiniu.isjinhao.site/f832a816-cbe3-4180-870c-041a5f3b9669"></div><p><br></p><h2 id="盒图"><a href="#盒图" class="headerlink" title="盒图"></a>盒图</h2><h3 id="符号-3"><a href="#符号-3" class="headerlink" title="符号"></a>符号</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/60307494-c1a6-4e4e-b25c-cab16088e463"></div><p><br></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/b6f791c1-aaf8-4c0b-af6e-cccf1c13d117"></div><p><br></p><h2 id="PAD图"><a href="#PAD图" class="headerlink" title="PAD图"></a>PAD图</h2><h3 id="符号-4"><a href="#符号-4" class="headerlink" title="符号"></a>符号</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/cd78afdd-a1d8-4a83-bd55-e60724bc80af" width="60%"></div>1. 顺序(先执行P1后执行P2)； 2. 选择(IF C THEN P1 ELSE P2); 3. CASE型多分支； 4. WHILE型循环(WHILE C DO P); 5. UNTIL型循环(REPEAT P UNTIL C)； 6. 语句标号； 7. 定义<br>### PAD 描述的示例<div align="center"><img src="http://blogfileqiniu.isjinhao.site/5f0d5ee3-c061-40d7-a2ae-44728704a4e5"></div><p><br></p><h2 id="判定表"><a href="#判定表" class="headerlink" title="判定表"></a>判定表</h2><div align="center"><img src="http://blogfileqiniu.isjinhao.site/b5d9f02e-4c76-42af-b2a0-8b4d3f4b2b27"></div><p><br></p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>检查发货单判定表</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/65901219-3011-4cc3-bc3b-6ed97ecbf9e9"></div><p><br></p><h2 id="判定树"><a href="#判定树" class="headerlink" title="判定树"></a>判定树</h2><div align="center"><img src="http://blogfileqiniu.isjinhao.site/eb06aac4-dbd8-4255-9258-5c704db309c5"></div><p><br></p><h2 id="程序图"><a href="#程序图" class="headerlink" title="程序图"></a>程序图</h2><h3 id="从流程图导出程序图"><a href="#从流程图导出程序图" class="headerlink" title="从流程图导出程序图"></a>从流程图导出程序图</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/0bdc1a6b-1dfa-4be2-b8a7-8afb081e5c4f"></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;系统流程图&quot;&gt;&lt;a href=&quot;#系统流程图&quot; class=&quot;headerlink&quot; title=&quot;系统流程图&quot;
      
    
    </summary>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/categories/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="软件工程" scheme="https://isjinhao.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>软件测试</title>
    <link href="https://isjinhao.github.io/posts/26323.html/"/>
    <id>https://isjinhao.github.io/posts/26323.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.040Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="什么是软件测试"><a href="#什么是软件测试" class="headerlink" title="什么是软件测试"></a>什么是软件测试</h2><ul><li>使用人工或自动手段来运行或测定某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别。</li><li>软件测试是根据软件开发各阶段的规格说明和程序的内部结构而精心设计一批测试用例，并利用这些测试用例去执行程序，以发现软件故障的过程。</li><li>软件测试是一种软件质量保证活动，其动机是通过一些经济有效的方法，发现软件中存在的缺陷，从而保证软件质量。</li></ul><p><br></p><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h3><ul><li>错误 Error：错误是针对人来说的，人非圣贤，孰能无过？</li><li>缺陷 Bug：由于人为的错误，在软件中引入了Bug。</li><li>故障 Fault：带有Bug的软件在某种条件下被激活，称为Fault。</li><li>失效 Failure：如果没能及时解决Fault，便会导致失效。</li></ul><p><br></p><h3 id="软件测试的原则"><a href="#软件测试的原则" class="headerlink" title="软件测试的原则"></a>软件测试的原则</h3><ul><li>不可能进行完全测试</li><li>软件测试只能表明缺陷的存在，而不能证明产品已经没有缺陷</li><li>软件产品中所存在的缺陷数与已发现的缺陷数成正比</li></ul><p><br></p><h3 id="软件测试的杀虫剂效应"><a href="#软件测试的杀虫剂效应" class="headerlink" title="软件测试的杀虫剂效应"></a>软件测试的杀虫剂效应</h3><p>由于测试人员的思路不尽相同，每个人测试的侧重点不同，由于都按照测试用例进行测试，但是测试用例一般仅描述系统的一些基本测试项，不会将所有的测试用例方方面面都写到，有时还需要测试人员的经验和素质。所以A测试某个产品用了七个工作日，第一天到第四天报出许多bug，但从第5天开始几乎报不出啥bug了。七天后换了B，B一下子又测试出一堆bug，不能说A的水平差，只能说该产品已经对A产生了抗药性，这就是测试学中的杀虫剂现象。所以在测试中每次轮流测试最好安排不同的测试人员进行不同模块测试工作，以避免杀虫剂现象。</p><p><br></p><h3 id="尽早测试的原则"><a href="#尽早测试的原则" class="headerlink" title="尽早测试的原则"></a>尽早测试的原则</h3><p>WHY SHOULD WE “FIX”BUGS ASAP?<br>LIKE MANY LIVING CREATURES, BUGS GROW IN SIZE THROUGHOUT THEIR LIFE. IT IS DESIRABLE TO DISCOVER AND EXTERMINATE BUGS SOON AFTER CONCEPTION.</p><p><br></p><h3 id="回归测试的原则"><a href="#回归测试的原则" class="headerlink" title="回归测试的原则"></a>回归测试的原则</h3><p>Regression: “when you fix one bug, you introduce several newer bugs.”</p><p><br></p><h3 id="软件测试的价值-微笑模型"><a href="#软件测试的价值-微笑模型" class="headerlink" title="软件测试的价值-微笑模型"></a>软件测试的价值-微笑模型</h3><p><img src="http://blogfileqiniu.isjinhao.site/1befc042-f58b-44fe-b78e-34c40cdb1557" width="80%"></p><p><br></p><h3 id="软件测试的内容"><a href="#软件测试的内容" class="headerlink" title="软件测试的内容"></a>软件测试的内容</h3><p><img src="http://blogfileqiniu.isjinhao.site/c7828c3e-0a43-4752-9ebc-697e6e804f27" width="80%"></p><p><br></p><h2 id="软件测试过程"><a href="#软件测试过程" class="headerlink" title="软件测试过程"></a>软件测试过程</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li>针对函数或类中的方法进行的测试</li><li>检查函数功能和函数内部实现是否和详细设计说明书相符</li></ul><h4 id="驱动和桩"><a href="#驱动和桩" class="headerlink" title="驱动和桩"></a>驱动和桩</h4><p><img src="http://blogfileqiniu.isjinhao.site/fc9cfb72-6f9c-4e8a-a067-24a16a68815f" width="70%"><br>假设现在项目组把任务分给了7个人，每个人负责实现一个模块。你负责的是B模块，你很优秀，第一个完成了编码工作，现在需要开展单元测试工作，先分析结构图：<br><img src="http://blogfileqiniu.isjinhao.site/80072759-cc1c-47cb-9a0a-e0ac640c70ad" width="30%"><br>由于B模块不是最顶层模块，所以它一定不包含main函数（A模块包含main函数），也就不能独立运行。B模块调用了D模块和E模块，而目前D模块和E模块都还没有开发好，那么想让B模块通过编译器的编译也是不可能的。<br>那么怎样才能测试B模块呢？需要做：</p><ul><li>写两个模块Sd和Se分别代替D模块和E模块（函数名、返回值、传递的参数相同），这样B模块就可以通过编译了。Sd模块和Se模块就是桩模块。</li><li>写一个模块Da用来代替A模块，里面包含main函数，可以在main函数中调用B模块，让B模块运行起来。Da模块就是驱动模块。<br>知识点：</li><li>桩模块的使命除了使得程序能够编译通过之外，还需要模拟返回被代替的模块的各种可能返回值（什么时候返回什么值需要根据测试用例的情况来决定）。</li><li>驱动模块的使命就是根据测试用例的设计去调用被测试模块，并且判断被测试模块的返回值是否与测试用例的预期结果相符</li></ul><p><br></p><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><ul><li>针对单元、模块或者子系统间接口进行的测试</li><li>检查接口和集成后的功能是否和概要设计说明书相符合<br><img src="http://blogfileqiniu.isjinhao.site/3d6c3352-c49c-46e7-83c6-232cc70f1167" width="100%"><br>在把各模块连接起来的时候，穿越模块接口的数据是否会丢失。</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h5><p>某软件公司测试人员在测试某法院办案办公系统时，先通过具有分配案件权限的用户登录，为某案件选择承办部门，测试人员故意为该案件选择了错误的承办部门，比如状态为立案侦查的案件，本应选择侦查部门作为承办部门，却选择了民事行政。结果当以民事行政的身份登录到系统时，却并没有发现该案件，再以具有分配案件权限的用户登录，也没有发现该案件。可以料想与该案件有关的记录已经被存入了数据库，但却无法取出。<br>由于用户操作失误，引起了数据在模块间流转中发生了丢失，系统应该对这种操作失误进行处理，保证数据的完整性。</p><p><strong>一个模块的功能是否会对另一个模块的功能产生不利的影响。</strong></p><h5 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h5><p>电信系统中经常会发生一些异常话单，例如无主叫话单、无被叫话单、超长话单、超短话单、通话同时进行等错误的异常话单。测试人员要注意测试这些异常话单是否对电信计费无影响。</p><p><strong>当一个模块的功能对另一个模块有不良影响时，其中一个模块要进行处理。</strong></p><h5 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h5><p>某石油公司管理系统的地区数据库入库省数据库，在测试人员测试过程中发现，当地方数据库中某条记录有误时，省数据库的处理是将全部数据全都回滚，包括正确的记录，这样的处理方式显然是不合理的，当省数据库发现错误记录时，应告之地方数据库，而不是把所有的数据库回滚回去。</p><h5 id="others"><a href="#others" class="headerlink" title="others"></a>others</h5><p>上面只是提到了集成测试中需要注意的一部分问题，还有：</p><ul><li>各个子功能组合起来，能否达到预期要求的父功能。</li><li>全局数据结构是否有问题。</li><li>单个模块的误差累积起来，是否会放大，从而达到不能接受的程度。</li><li>模块间是否存在时序问题（实时系统）与资源竞争。</li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口用于不同单元、模块、子系统或者系统间进行信息交互。<br><img width="80%" src="http://blogfileqiniu.isjinhao.site/21c34f03-8bdc-47a6-b5c4-3418a1325d68"></p><h5 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h5><ul><li>函数接口</li><li>消息接口</li><li>文件接口</li><li>数据库接口</li><li>共享内存接口</li><li>类接口</li><li>。。。</li></ul><h4 id="集成测试策略"><a href="#集成测试策略" class="headerlink" title="集成测试策略"></a>集成测试策略</h4><ul><li>大爆炸集成</li><li>自顶向下集成</li><li>自底向上集成</li></ul><p><br></p><h3 id="确认测试"><a href="#确认测试" class="headerlink" title="确认测试"></a>确认测试</h3><ul><li>对照软件需求规格说明书</li><li>对软件产品进行评估以确认其是否满足软件需求</li><li>测试内容包括：功能、性能、可移植性、兼容性、可维护性、人机接口等</li><li>给出结论性评价<ul><li>合格</li><li>不合格，给出缺陷清单</li></ul></li></ul><p><br></p><h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><ul><li>针对集成后的整个系统进行的测试</li><li>检查集成后的整个系统功能、性能、易用性等特性是否和需求规格说明书相符合<br><img width="100%" src="http://blogfileqiniu.isjinhao.site/dbbe44e8-cf92-4e7f-9637-435c42d91fad"></li></ul><h4 id="系统类型"><a href="#系统类型" class="headerlink" title="系统类型"></a>系统类型</h4><ul><li>桌面软件</li><li>Web系统</li><li>嵌入式系统</li><li>移动应用</li><li>开放平台应用</li><li>浏览器扩展/插件</li></ul><p><br></p><h3 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h3><ul><li>针对系统在用户实际使用环境下使用进行的测试</li><li>检查系统在实际使用环境下是否和用户需求相一致<br><img width="60%" src="http://blogfileqiniu.isjinhao.site/4481171c-5475-4170-b3b7-5521ad43f36e"></li></ul><p><br></p><h3 id="验收测试-1"><a href="#验收测试-1" class="headerlink" title="验收测试"></a>验收测试</h3><ul><li>正式验收测试：第三方验收测试</li><li>α测试：用户验收测试（开发环境、有人指导、受控）</li><li>β测试：用户验收测试（实际环境、无人指导、不受控）</li></ul><p><br></p><h2 id="软件测试模型"><a href="#软件测试模型" class="headerlink" title="软件测试模型"></a>软件测试模型</h2><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><p><img width="70%" src="http://blogfileqiniu.isjinhao.site/a5118bf6-0494-4da4-9e99-044e283674ef"></p><p><br></p><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/d3fb21df-ab9c-4f61-9076-5a5336ae4f93"></p><ul><li>明确地表明了测试的不同级别，清晰地展示了软件测试与开发之间的关系</li><li>每一测试阶段的前提和基础是对应开发阶段的文档</li></ul><p><br></p><h3 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h3><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/305411cf-665a-4a97-af42-cdbcf7a1777b"></p><ul><li>测试活动伴随整个软件开发生命周期</li><li>测试对象不仅包括程序，还包括需求和设计阶段形成的各种文档</li></ul><p><br></p><h3 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h3><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/46687fd3-9e6a-45e6-9b42-ad89417300b7"></p><ul><li>测试流程独立于其他流程</li><li>其他流程包括开发、设计和评审等</li><li>支持反复和迭代过程</li></ul><p><br></p><h3 id="软件测试环境的搭建"><a href="#软件测试环境的搭建" class="headerlink" title="软件测试环境的搭建"></a>软件测试环境的搭建</h3><ul><li>硬件环境</li><li>软件环境</li><li>网络环境</li><li>数据准备</li><li>测试工具</li></ul><p><br></p><h2 id="软件质量度量"><a href="#软件质量度量" class="headerlink" title="软件质量度量"></a>软件质量度量</h2><p><img width="60%" src="http://blogfileqiniu.isjinhao.site/a11750f2-d590-45e2-b6d0-e0d29428ff6c"></p><p><br></p><h3 id="外部质量和内部质量模型"><a href="#外部质量和内部质量模型" class="headerlink" title="外部质量和内部质量模型"></a>外部质量和内部质量模型</h3><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/6b0bd1e4-b284-485a-b397-0609523e3c29"></p><h4 id="功能性"><a href="#功能性" class="headerlink" title="功能性"></a>功能性</h4><ul><li>适合性：功能有没有</li><li>准确性：功能准不准</li><li>互操作性：与其它系统交互</li><li>安全保密性：信息安全、权限控制</li><li>功能性依从性：是否符合标准</li></ul><h4 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h4><ul><li>成熟性：对软件内部错误处理能力</li><li>容错性：对软件外部错误处理能力</li><li>易恢复性：从故障或失效恢复的能力</li><li>可靠性依从性：是否符合标准</li></ul><h4 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h4><ul><li>易理解性：界面提示</li><li>易学性：帮助</li><li>易操作性：操作步骤数</li><li>吸引性：外观、颜色</li><li>易用性依从性：是否符合标准</li></ul><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><ul><li>时间特性：花费多长时间</li><li>资源利用性：占用多少内存、CPU</li><li>效率依从性：是否符合标准</li></ul><h4 id="维护性"><a href="#维护性" class="headerlink" title="维护性"></a>维护性</h4><ul><li>易分析性：容易定位缺陷</li><li>易改变性：容易修改代码</li><li>稳定性：内部接口稳定</li><li>易测试性：容易被操作、观察</li><li>维护性依从性：是否符合标准</li></ul><h4 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h4><ul><li>适应性：可以在各种环境下使用</li><li>易安装性：容易在各种环境下安装</li><li>共存性：可以与其它软件共存</li><li>易替换性：很容易更换版本</li></ul><p><br></p><h3 id="使用质量模型"><a href="#使用质量模型" class="headerlink" title="使用质量模型"></a>使用质量模型</h3><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/453af464-ade9-4d8f-86f3-fa65eaf7f6f3"></p><h4 id="有效性"><a href="#有效性" class="headerlink" title="有效性"></a>有效性</h4><p>在特定的使用环境下，用户执行任务时能否准确和完全的达到规定目标。</p><h4 id="生产率"><a href="#生产率" class="headerlink" title="生产率"></a>生产率</h4><p>在特定使用环境下，用户为达到有效性消耗的资源，如时间、金钱等</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>在特定使用环境下，对用户人身财产产生伤害的风险级别</p><h4 id="满意度"><a href="#满意度" class="headerlink" title="满意度"></a>满意度</h4><p>特定的使用环境下用户对软件使用的态度</p><p><br></p><h2 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h2><ul><li>又称功能测试或基于规格说明的测试</li><li>与软件具体实现无关，变化后原测试用例仍可使用</li><li>可与软件实现同步进行，压缩项目总的开发时间</li></ul><p><br></p><h3 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h3><p>系统业务熟悉模型-SFDPOT模型。<br><img width="80%" src="http://blogfileqiniu.isjinhao.site/004fa18a-f620-42d7-9200-74517e00de43"></p><h4 id="Structure系统架构"><a href="#Structure系统架构" class="headerlink" title="Structure系统架构"></a>Structure系统架构</h4><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/aaa8137c-89e7-4a4b-89f8-b4d1e2ee4114"></p><h4 id="Function系统功能"><a href="#Function系统功能" class="headerlink" title="Function系统功能"></a>Function系统功能</h4><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/ce342f75-a917-46f0-83b9-0e4e23df5d67"></p><h4 id="Data数据处理"><a href="#Data数据处理" class="headerlink" title="Data数据处理"></a>Data数据处理</h4><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/bf1fb03a-bca6-4b3f-b631-fce63fdee20f"></p><h4 id="Platform平台支持"><a href="#Platform平台支持" class="headerlink" title="Platform平台支持"></a>Platform平台支持</h4><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/7158f3a7-954e-4a19-aafc-cf3e6c5df6a3"></p><h4 id="Operation用户操作"><a href="#Operation用户操作" class="headerlink" title="Operation用户操作"></a>Operation用户操作</h4><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/ae6c495c-e605-46f2-a7c3-bf56a5ed079b"></p><h4 id="Time时间影响"><a href="#Time时间影响" class="headerlink" title="Time时间影响"></a>Time时间影响</h4><p><img width="40%" src="http://blogfileqiniu.isjinhao.site/88e0843d-e065-4e72-8738-f1bd20c426bb"></p><h4 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h4><ul><li>Structure：客户端和服务器端间通过UDP包和TCP包混合传输数据</li><li>Function：登录、聊天、文件传输</li><li>Data：聊天记录保存、在线状态更新</li><li>Platform：支持Windows、Linux、Android</li><li>Operation：用户以年轻人为主，且很多为非技术用户</li><li>Time：用户会在不同时区登录和使用</li></ul><h4 id="通用测试用例写作"><a href="#通用测试用例写作" class="headerlink" title="通用测试用例写作"></a>通用测试用例写作</h4><ul><li>用例编号</li><li>测试项目</li><li>测试标题</li><li>重要级别</li><li>预置条件</li><li>观察点</li><li>检查点</li><li>测试步骤</li><li>预期结果<br>| <strong>用例编号</strong> | <strong>F-01-001</strong> |<br>| :—————: | :——————————————————: |<br>| <strong>测试项目</strong> | <strong>登录功能</strong> |<br>| <strong>测试标题</strong> | <strong>测试有效用户登录</strong> |<br>| <strong>重要级别</strong> | <strong>高</strong> |<br>| <strong>预置条件</strong> | <strong>用户事先没有登录或已经退出系统</strong> |<br>| <strong>观察点</strong> | <strong>系统主页</strong> |<br>| <strong>检查点</strong> | <strong>左上角登录标签显示内容</strong> |<br>| <strong>测试步骤</strong> | 输入用户名admin和密码123后点击登录按钮 |<br>| <strong>预期结果</strong> | 进入系统主页并显示欢迎您：admin字样 |</li></ul><p><br></p><h3 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h3><ul><li>输入域的某个互不相交的子集</li><li>并集等于整个输入域</li><li>对测试的意义<ul><li>完备性</li><li>无冗余性</li></ul></li></ul><h4 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h4><ul><li>有效等价类<ul><li>符合程序规格说明书</li><li>有意义，合理的数据</li></ul></li><li>无效等价类<ul><li>不符合程序规格说明书</li><li>无意义或者不合理的数据</li></ul></li></ul><h4 id="等价类划分原则"><a href="#等价类划分原则" class="headerlink" title="等价类划分原则"></a>等价类划分原则</h4><ul><li>按区间划分：区间内、区间外</li><li>按数值划分：一个值一个</li><li>按数值集合划分：集合内、集合外</li><li>按限制条件或规则划分</li><li>细分等价类</li></ul><h4 id="等价类用例设计原则"><a href="#等价类用例设计原则" class="headerlink" title="等价类用例设计原则"></a>等价类用例设计原则</h4><ul><li>设计一个测试用例，使其<strong>尽可能多的覆盖所有尚未覆盖的有效等价类</strong>。重复这一步骤，使得有效等价类均被测试用例所覆盖。</li><li>设计一个测试用例，使其<strong>只覆盖一个无效等价类</strong>。重复这一步骤使得所有无效等价类均被覆盖。</li></ul><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><ul><li>某保险公司人寿保险的保费计算方式为：保费＝投保额×保险费率</li><li>保险费率根据年龄、性别、婚姻状况和抚养人数的不同而有所不同，体现在不同年龄、性别、婚姻状况和抚养人数，点数设定不同，10点及10点以上保险费率为0.6%，10点以下保险费率为0.1%<br><img width="80%" src="http://blogfileqiniu.isjinhao.site/06b5bf69-7d8f-4f71-a18a-de181e5699ab"></li></ul><h5 id="数据需求分析"><a href="#数据需求分析" class="headerlink" title="数据需求分析"></a>数据需求分析</h5><ul><li>年龄：一位或两位非零整数，取值的有效范围为1-99。</li><li>性别：一位英文字符，只能取 ‘M’或’F’ 值。</li><li>婚姻：字符，只能取‘已婚’或‘未婚’。</li><li>抚养人数：空白或字符‘无’或一位非零整数（1-9）</li><li>点数 ：一位或两位非零整数，取值范围为8-19</li></ul><h5 id="等价类划分-1"><a href="#等价类划分-1" class="headerlink" title="等价类划分"></a>等价类划分</h5><div class="table-container"><table><thead><tr><th style="text-align:center">输入</th><th style="text-align:center">输入条件</th><th style="text-align:center">有效等价类</th><th style="text-align:center">无效等价类</th></tr></thead><tbody><tr><td style="text-align:center">年龄</td><td style="text-align:center">1-2位非0整数，有效范围为1-99</td><td style="text-align:center">20-39、40-59、1-19、60-99</td><td style="text-align:center">大于99小于1负数非数字</td></tr><tr><td style="text-align:center">性别</td><td style="text-align:center">一个英文字符，且只能取M或F</td><td style="text-align:center">M、F</td><td style="text-align:center">长度为1的其他英文字符长度大于1长度等于0非英文字符</td></tr><tr><td style="text-align:center">婚姻</td><td style="text-align:center">字符，只能取“已婚”或“未婚”</td><td style="text-align:center">“已婚”、“未婚”</td><td style="text-align:center">其他字符</td></tr><tr><td style="text-align:center">抚养人数</td><td style="text-align:center">空白或者字符“无”或1-9之间的一位整数</td><td style="text-align:center">空白、“无”、1-6、7-9</td><td style="text-align:center">除空白或“无”之外的其他字符小于1大于9</td></tr></tbody></table></div><h5 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h5><div class="table-container"><table><thead><tr><th style="text-align:center">用例编号</th><th style="text-align:center">年龄</th><th style="text-align:center">性别</th><th style="text-align:center">婚姻</th><th style="text-align:center">抚养人数</th><th style="text-align:center">预期输出</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">27</td><td style="text-align:center">M</td><td style="text-align:center">已婚</td><td style="text-align:center">空白</td><td style="text-align:center">0.60%</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">50</td><td style="text-align:center">F</td><td style="text-align:center">未婚</td><td style="text-align:center">无</td><td style="text-align:center">0.60%</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">70</td><td style="text-align:center">M</td><td style="text-align:center">已婚</td><td style="text-align:center">1</td><td style="text-align:center">0.10%</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">27</td><td style="text-align:center">F</td><td style="text-align:center">未婚</td><td style="text-align:center">7</td><td style="text-align:center">0.60%</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center">M</td><td style="text-align:center">已婚</td><td style="text-align:center">空白</td><td style="text-align:center">年龄错误</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center"><strong>100</strong></td><td style="text-align:center">F</td><td style="text-align:center">未婚</td><td style="text-align:center">无</td><td style="text-align:center">年龄错误</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">50</td><td style="text-align:center"><strong>男</strong></td><td style="text-align:center">已婚</td><td style="text-align:center">4</td><td style="text-align:center">性别错误</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">27</td><td style="text-align:center">M</td><td style="text-align:center"><strong>离婚</strong></td><td style="text-align:center">7</td><td style="text-align:center">婚姻错误</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">45</td><td style="text-align:center">F</td><td style="text-align:center">已婚</td><td style="text-align:center"><strong>没有</strong></td><td style="text-align:center">抚养人数错误</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">62</td><td style="text-align:center">M</td><td style="text-align:center">未婚</td><td style="text-align:center"><strong>0</strong></td><td style="text-align:center">抚养人数错误</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">30</td><td style="text-align:center">F</td><td style="text-align:center">已婚</td><td style="text-align:center"><strong>10</strong></td><td style="text-align:center">抚养人数错误</td></tr></tbody></table></div><p><br></p><h3 id="边界值分析法"><a href="#边界值分析法" class="headerlink" title="边界值分析法"></a>边界值分析法</h3><p>错误往往出现在边界处，如：</p><ul><li>&lt;写成&lt;=</li><li>第一个、最后一个</li><li>最小值、最大值</li><li>开始、完成</li><li>超过、未超过</li><li>空、满</li><li>最短/最长; 最快/最慢; 最高/最低</li><li>相邻/最远<br>程序含有n个变量。选择其中一个变量依次取min、min+、nom、max-、max。若采用健壮性边界值测试，另外增加min-和max+。其余变量取正常值，总共有4n+1 / 6n+1个测试用例。</li></ul><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><p>1-100之间的三条边构成何种三角形？<br><img width="80%" src="http://blogfileqiniu.isjinhao.site/304f6194-abf2-44a6-9a1a-4c631dcb1365"></p><h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2<img width="30%" src="http://blogfileqiniu.isjinhao.site/259a1bdf-c789-4a29-8f7c-eae19a59eb72"></h4><p><img width="80%" src="http://blogfileqiniu.isjinhao.site/b1f916ce-23a0-4d24-8b10-8cb7e5c14d19"></p><h4 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h4><p>对于方法<code>int textSearch(char* txt, char* s)</code>。txt和s均为字符串，返回s在txt中的起始位置，如果txt中不含s，返回-1。<br><img width="60%" src="http://blogfileqiniu.isjinhao.site/b3dea4ed-3e67-4778-b57f-a8076bc8d63e"><br>| No | S | txt |<br>| —— | ————- | ———————————————- |<br>| 1 | | Laughter is good for the heart. |<br>| 2 | Laughter | |<br>| 3 | | |<br>| 4 | good for | Laughter is good for the heart. |<br>| 5 | Laughter | Laughter is good for the heart. |<br>| 6 | aughter | Laughter is good for the heart. |<br>| 7 | gLaughter | Laughter is good for the heart. |<br>| 8 | heart. | Laughter is good for the heart. |<br>| 9 | heart | Laughter is good for the heart. |<br>| 10 | heart.d | Laughter is good for the heart. |</p><p><br></p><h3 id="因果图法"><a href="#因果图法" class="headerlink" title="因果图法"></a>因果图法</h3><h4 id="因果图基本符号"><a href="#因果图基本符号" class="headerlink" title="因果图基本符号"></a>因果图基本符号</h4><p><img width="60%" src="http://blogfileqiniu.isjinhao.site/489e6ca6-eb05-4af6-a024-f82c8386877c"></p><h4 id="因果图约束符号"><a href="#因果图约束符号" class="headerlink" title="因果图约束符号"></a>因果图约束符号</h4><p><img width="60%" src="http://blogfileqiniu.isjinhao.site/39042eb2-28b9-4491-adaf-b2ba29904aa7"></p><h4 id="因果图法测试用例设计步骤"><a href="#因果图法测试用例设计步骤" class="headerlink" title="因果图法测试用例设计步骤"></a>因果图法测试用例设计步骤</h4><ul><li>确定原因和结果（输入和输出）</li><li>确定逻辑关系</li><li>确定约束关系</li><li>转换为决策表</li><li>设计测试用例</li></ul><h4 id="案例1-1"><a href="#案例1-1" class="headerlink" title="案例1"></a>案例1</h4><p>输入第一个字符必须是#或者*，第二个字符必须是数字，在此情况下进行文件的修改。如果第一个字符不正确，给出信息N。如果第二个字符不正确，给出信息M。<br><img width="80%" src="http://blogfileqiniu.isjinhao.site/2e1724c8-186d-4529-9fd5-26b423fc441a"></p><h4 id="案例2-1"><a href="#案例2-1" class="headerlink" title="案例2"></a>案例2</h4><ul><li>若落点在棋盘外，则不移动棋子；</li><li>若落点与起点不构成日字型，则不移动棋子；</li><li>若绊马腿，则不移动棋子；</li><li>若落点处有己方棋子，则不移动棋子；</li><li>若不属于1-4条，且落点处无棋子，则移动棋子；</li><li>若不属于1-4条，且落点处为对方棋子（非老将），则移动棋子并除去对方棋子；</li><li>若不属于1-4条，且落点处为对方老将，则移动棋子，并提示战胜对方，游戏结束。</li></ul><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><ul><li>棋盘内</li><li>成日字</li><li>绊马腿</li><li>己方子</li><li>无棋子</li><li>对方子(非老将)</li><li>对方将</li></ul><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><ul><li>不动</li><li>跳马</li><li>吃掉对方棋子</li><li>战胜<br><img width="80%" src="http://blogfileqiniu.isjinhao.site/33b1a17b-e558-43ff-9fad-be5ee4294b08"></li></ul><p><br></p><h3 id="决策表法"><a href="#决策表法" class="headerlink" title="决策表法"></a>决策表法</h3><p>适用于描述复杂的业务规则（输入输出较多，且制约关系比较多）</p><ul><li>条件桩</li><li>条件项</li><li>动作桩</li><li>动作项</li></ul><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><ul><li>NextDate(month, day, year)</li><li>month, day, year都是整数、month:[1-12]、day:[1-31]、year:[1900-2050]</li></ul><h5 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h5><ul><li>A1：不可能</li><li>A2：day加1</li><li>A3：day复位为1</li><li>A4：month加1</li><li>A5：month复位为1</li><li>A6：year加1</li></ul><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><p><img width="60%" src="http://blogfileqiniu.isjinhao.site/78121ee1-80ca-4237-854b-8f85562ad768"></p><h5 id="决策表"><a href="#决策表" class="headerlink" title="决策表"></a>决策表</h5><p><img width="60%" src="http://blogfileqiniu.isjinhao.site/307ea02b-3538-448a-960b-60a9e9aa3794"></p><p><br></p><h2 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h2><h3 id="控制流测试"><a href="#控制流测试" class="headerlink" title="控制流测试"></a>控制流测试</h3><h4 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h4><p>程序中的每个可执行语句至少被执行一次。流程图中的节点全部被覆盖。</p><h4 id="分支覆盖-判定覆盖"><a href="#分支覆盖-判定覆盖" class="headerlink" title="分支覆盖/判定覆盖"></a>分支覆盖/判定覆盖</h4><p>程序中每个分支都至少获得一次“真”值和“假”值。流程图中的有向边全部被覆盖。</p><h4 id="谓词覆盖-条件覆盖"><a href="#谓词覆盖-条件覆盖" class="headerlink" title="谓词覆盖/条件覆盖"></a>谓词覆盖/条件覆盖</h4><p>每个复合谓词所包含的每一个原子谓词都至少获得一次“真”值和一次“假”值。</p><h4 id="分支谓词覆盖-判定条件覆盖"><a href="#分支谓词覆盖-判定条件覆盖" class="headerlink" title="分支谓词覆盖/判定条件覆盖"></a>分支谓词覆盖/判定条件覆盖</h4><p>是分支和谓词覆盖的交集。条件中的所有谓词可能取值至少执行一次。同时，所有分支的可能结果至少执行一次。</p><h4 id="复合谓词覆盖-条件组合覆盖"><a href="#复合谓词覆盖-条件组合覆盖" class="headerlink" title="复合谓词覆盖/条件组合覆盖"></a>复合谓词覆盖/条件组合覆盖</h4><p>不是简单地要求每个谓词都出现“真”与“假”两种结果，而是要求让这些结果的所有可能组合都至少出现一次。】</p><h4 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h4><p>覆盖程序中所有可能的执行路径。</p><p><br></p><h3 id="数据流测试"><a href="#数据流测试" class="headerlink" title="数据流测试"></a>数据流测试</h3><p><br></p><h2 id="单元测试的目标和任务"><a href="#单元测试的目标和任务" class="headerlink" title="单元测试的目标和任务"></a>单元测试的目标和任务</h2><ol><li>模块独立执行通路测试：检查每一条独立执行路径的测试。保证每条语句被至少执行一次。</li><li>模块局部数据结构测试：检查局部数据结构完整性。</li><li>模块接口测试：检查模块接口是否正确。</li><li>模块边界条件测试：检查临界数据处理的正确性。</li><li>模块的各条错误处理通路测试：预见、预设的各种出错处理是否正确有效。</li></ol><p><br></p><h2 id="静态测试"><a href="#静态测试" class="headerlink" title="静态测试"></a>静态测试</h2><p>不运行被测试程序，对代码通过检查、阅读进行分析。</p><ol><li>走查：采用讲解、讨论和模拟运行的方式进行的查找错误的活动。</li><li>审查：采用讲解、提问方式进行，一般有正式的计划、流程和结果。主要方法采用缺陷检查表。</li><li>评审：通常在审查会后进行，审查小组根据记录和报告进行评估。<ol><li>充分审查了所规定的代码，并且全部编码准则被遵守。</li><li>审查中发现的错误已全部修改。<br>走查与审查的比较：<br><img width="60%" src="http://blogfileqiniu.isjinhao.site/1f0d7885-b163-4274-8c12-662837205b7e"></li></ol></li></ol><p><br></p><h2 id="缺陷测试"><a href="#缺陷测试" class="headerlink" title="缺陷测试"></a>缺陷测试</h2><p><img width="40%" src="http://blogfileqiniu.isjinhao.site/6367dbcd-1f0d-45e8-aaa7-102ac9e2f156"><br><img width="30%" src="http://blogfileqiniu.isjinhao.site/3f008e47-f491-457c-bb09-9ee97e983506"><br><img width="30%" src="http://blogfileqiniu.isjinhao.site/3afadb17-0b7b-4ad0-8fe1-3c0cd7e040f7"><br><img width="30%" src="http://blogfileqiniu.isjinhao.site/bd370a1f-733d-42e5-8c2f-3cebfc64bcae"><br><img width="50%" src="http://blogfileqiniu.isjinhao.site/bae16917-cc92-4121-a6a4-14ab4273a8f8"></p><p><br></p><h3 id="缺少copy构造函数造成申请内存的重复释放"><a href="#缺少copy构造函数造成申请内存的重复释放" class="headerlink" title="缺少copy构造函数造成申请内存的重复释放"></a>缺少copy构造函数造成申请内存的重复释放</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:<span class="keyword">char</span> *p;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">base()&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(<span class="string">"default value"</span>) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">"default value"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"base constructor is calling\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/* base(base &amp;a)&#123;</span></span><br><span class="line"><span class="comment">printf("base copy constructor is calling\n");</span></span><br><span class="line"><span class="comment">p = new char[strlen(a.p) + 1];</span></span><br><span class="line"><span class="comment">strcpy(p, a.p);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setp</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>) <span class="keyword">delete</span>[] p;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s)+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(p, s);</span><br><span class="line">&#125;</span><br><span class="line">~base()&#123;</span><br><span class="line"><span class="keyword">if</span>(p) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"base deconstructor is calling\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">derive</span>:</span><span class="keyword">public</span> base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">derive()&#123;&#125;</span><br><span class="line"></span><br><span class="line">derive(derive &amp;a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"derive copy constructor is calling\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>*argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">derive c;</span><br><span class="line">c.setp(<span class="string">"this is c"</span>);</span><br><span class="line"><span class="function">derive <span class="title">b</span><span class="params">(c)</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"c:%s\n"</span>, c.p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b:%s\n"</span>, b.p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img width="50%" src="软件测试/2019-11-09_155428.jpg"></p><p><br></p><h2 id="集成测试-1"><a href="#集成测试-1" class="headerlink" title="集成测试"></a>集成测试</h2><h3 id="集成测试主要关注问题"><a href="#集成测试主要关注问题" class="headerlink" title="集成测试主要关注问题"></a>集成测试主要关注问题</h3><ul><li>模块间的数据传递是否正确？</li><li>一个模块的功能是否会对另一个模块的功能产生错误的影响？</li><li>全局数据结构是否有问题，会不会被异常修改？</li><li>块组合起来的功能能否满足要求？</li><li>集成后，各个模块的累积误差是否会扩大，是否达到不可接受的程度？</li></ul><p><br></p><h3 id="集成测试的原则"><a href="#集成测试的原则" class="headerlink" title="集成测试的原则"></a>集成测试的原则</h3><ul><li>所有公共接口必须被测试到；</li><li>关键模块必须进行充分测试；</li><li>集成测试应当按一定层次进行；</li><li>集成测试策略选择应当综合考虑质量、成本和进度三者之间的关系；</li><li>集成测试应当尽早开始，并以概要设计为基础；</li><li>在模块和接口的划分上，测试人员应该和开发人员进行充分沟通；</li><li>当测试计划中的结束标准满足时，集成测试才能结束；</li><li>当接口发生修改时，涉及到的相关接口都必须进行回归测试；</li><li>集成测试应根据集成测试计划和方案进行，不能随意测试；</li><li>项目管理者应保证测试用例经过审核；</li><li>测试执行结果应当如实的记录。</li></ul><p><br></p><h2 id="集成测试策略-1"><a href="#集成测试策略-1" class="headerlink" title="集成测试策略"></a>集成测试策略</h2><ul><li>非渐增式集成BIG BANG：很难确定出错的真正位置、所在的模块、错误的原因。这种方法并不推荐在任何系统中使用，适合在规模较小的应用系统中使用。</li><li>渐增式集成 INCREMENTAL：<ul><li>自顶向下 TOP-DOWN：自顶向下集成：大量桩模块的开发是困难的。且在测试过程中，由于桩模块代替了低层模块，无重要数据自上往下流动。</li><li>自底向上 BOTTOM-UP：不需要开发桩模块；重要的UI部分最后才能进行测试；适合于OO system，Real-time system以及有严格性能要求的系统。</li><li>三明治集成 SANDWICH：是一种混合增量式测试策略，综合了自顶向下和自底向上两种集成方法的优点，桩模块和驱动模块的开发都比较少。主要缺点是：在真正集成之前每一个独立的模块没有完全测试过。</li></ul></li></ul><p><br></p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>性能测试主要检验软件是否达到需求规格说明书中规定的各类性能指标，并满足一些性能相关的约束和限制条件。性能测试包括以下几个方面：</p><ul><li>评估系统的能力。测试中得到的负荷和响应时间等数据可以被用于验证所计划的模型的能力，并帮助做出决策。</li><li>识别系统中的弱点。受控的负荷可以被增加到一个极端的水平并突破它，从而修复系统的瓶颈或薄弱的地方。</li><li>系统调优。重复运行测试，验证调整系统的活动得到了预期的结果，从而改进性能，检测软件中的问题。</li></ul><p><strong>性能测试方法</strong><br>基准法：</p><ul><li>响应时间</li><li>并发用户数</li><li>吞吐量</li><li>性能计数器</li></ul><p><strong>性能测试执行</strong><br>三个阶段：</p><ul><li>计划阶段<ul><li>定义目标并设置期望值</li><li>收集系统和测试要求</li><li>定义工作负载</li><li>选择要收集的性能度量值</li><li>标出要运行的测试并决定什么时候运行它们</li><li>决定工具选项和生成负载</li><li>编写测试计划，设计用户场景并创建测试脚本</li></ul></li><li>测试阶段<ul><li>做准备工作（如建立测试服务器或布置其他设备）</li><li>运行测试</li><li>收集数据</li></ul></li><li>分析阶段<ul><li>分析结果</li><li>改变系统以优化性能</li><li>设计新的测试</li></ul></li></ul><p><br></p><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><p>压力测试（Stress Testing）是指模拟巨大的工作负荷，以查看系统在峰值使用情况下是否可以正常运行。<br>压力测试是通过逐步增加系统负载来测试系统性能的变化，并最终确定在什么负载条件下系统性能处于失效状态，以此来获得系统性能提供的最大服务级别的测试。</p><p><strong>压力测试方法特点：</strong></p><ul><li>压力测试是检查系统处于压力情况下的能力表现：比如，通过增加并发用户的数量，检测系统的服务能力和水平；通过增加文件记录数来检测数据处理的能力和水平等等。</li><li>压力测试一般通过模拟方法进行：通常在系统对内存和CPU利用率上进行模拟，以获得测量结果。如将压力的基准设定为：内存使用率达到75%以上、CPU使用率达到75%以上，并在此观测系统响应时间、系统有无错误产生。除了对内存和CPU的使用率进行设定外，数据库的连接数量、数据库服务器的CPU利用率等等也都可以作为压力测试的依据。</li><li>压力测试一般用于测试系统的稳定性：如果一个系统能够在压力环境下稳定运行一段时间，那么该系统在普遍的运行环境下就应该可以达到令人满意的稳定程度。在压力测试中，通常会考察系统在压力下是否会出现错误等方面的问题。</li></ul><p><strong>压力测试与性能测试的联系与区别：</strong></p><ul><li>压力测试是用来保证产品发布后系统能否满足用户需求，关注的重点是系统整体；</li><li>性能测试可以发生在各个测试阶段，即使是在单元层，一个单独模块的性能也可以进行评估。</li><li>压力测试是通过确定一个系统的瓶颈，来获得系统能提供的最大服务级别的测试。</li><li>性能测试是检测系统在一定负荷下的表现，是正常能力的表现；而压力测试是极端情况下的系统能力的表现。</li></ul><p><strong>压力测试和负载测试（Load Test）：</strong></p><ul><li>负载测试是通过逐步增加系统工作量，测试系统能力的变化，并最终确定在满足功能指标的情况下，系统所能承受的最大工作量的测试。</li><li>压力测试实质上就是一种特定类型的负载测试。</li></ul><p><strong>压力测试和并发性测试：</strong></p><ul><li>并发性测试是一种测试手段，在压力测试中可以利用并发测试来进行压力测试。</li></ul><p><strong>压力测试方法：</strong><br>压力测试应该尽可能逼真的模拟系统环境。对于实时系统，测试者应该以正常和超常的速度输入要处理的事务从而进行压力测试。批处理的压力测试可以利用大批量的批事务进行，被测事务中应该包括错误条件。</p><p><strong>压力测试中使用事务获得途径：</strong></p><ul><li>测试数据生成器；</li><li>由测试小组创建的测试事务；</li><li>原来在系统环境中处理过的事务。</li></ul><p><strong>压力测试手段：</strong></p><ul><li>重复（Repetition）测试：重复测试就是一遍又一遍地执行某个操作或功能，比如重复调用一个Web服务。压力测试的一项任务就是确定在极端情况下一个操作能否正常执行，并且能否持续不断地在每次执行时都正常。这对于推断一个产品是否适用于某种生产情况至关重要，客户通常会重复使用产品。重复测试往往与其它测试手段一并使用。</li><li>并发（Concurrency）测试：并发是同时执行多个操作的行为，即在同一时间执行多个测试线程。例如，在同一个服务器上同时调用许多Web服务。并发测试原则上不一定适用于所有产品（比如无状态服务），但多数软件都具有某个并发行为或多线程行为元素，这一点只能通过执行多个代码测试用例才能得到测试结果。</li><li>量级（Magnitude）增加：压力测试可以重复执行一个操作，但是操作自身也要尽量给产品增加负担。例如一个Web服务允许客户机输入一条消息，测试人员可以通过模拟输入超长消息来使操作进行高强度的使用，即增加这个操作的量级。这个量级的确定总是与应用系统有关，可以通过查找产品的可配置参数来确定量级。</li><li>随机变化：该手段是指对上述测试手段进行随机组合，以便获得最佳的测试效果。</li></ul><p><strong>压力测试执行：</strong><br>可以设计压力测试用例来测试应用系统的整体或部分能力。压力测试用例选取可以从以下几个方面考虑：</p><ul><li>输入待处理事务来检查是否有足够的磁盘空间；</li><li>创造极端的网络负载；</li><li>制造系统溢出条件；</li><li>当应用系统所能正常处理的工作量并不确定时需要使用压力测试。压力测试意图通过对系统施加超负载事务量来达到破坏系统的目的。</li><li>压力测试和在线应用程序非常类似，因为很难利用其他测试技术来模拟高容量的事务。</li><li>压力测试的弱点在于准备测试的时间与在测试的实际执行过程中所消耗的资源数量都非常庞大。通常在应用程序投入使用之前这种消耗的衡量是无法进行的。</li></ul><p><br></p><h2 id="容量测试"><a href="#容量测试" class="headerlink" title="容量测试"></a>容量测试</h2><ul><li>所谓的容量测试（Volume Testing）是指，采用特定的手段测试系统能够承载处理任务的极限值所从事的测试工作。</li><li>这里的特定手段是指，测试人员根据实际运行中可能出现极限，制造相对应的任务组合，来激发系统出现极限的情况。</li></ul><p><strong>容量测试的目的</strong><br>容量测试的目的是使系统承受超额的数据容量来发现它是否能够正确处理，通过测试，预先分析出反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），确定系统在其极限值状态下是否还能保持主要功能正常运行。容量测试还将确定测试对象在给定时间内能够持续处理的最大负载或工作量。<br>对软件容量的测试，能让软件开发商或用户了解该软件系统的承载能力或提供服务的能力，如电子商务网站所能承受的、同时进行交易或结算的在线用户数。知道了系统的实际容量，如果不能满足设计要求，就应该寻求新的技术解决方案，以提高系统的容量。有了对软件负载的准确预测，不仅能对软件系统在实际使用中的性能状况充满信心，同时也可以帮助用户经济地规划应用系统，优化系统的部署。</p><p><strong>容量测试与压力测试的区别</strong><br>与容量测试十分相近的概念是压力测试。二者都是检测系统在特定情况下，能够承担的极限值。然而两者的侧重点有所不同，压力测试主要是使系统承受速度方面的超额负载，例如一个短时间之内的吞吐量。容量测试关注的是数据方面的承受能力，并且它的目的是显示系统可以处理的数据容量。</p><p><strong>压力测试、容量测试和性能测试的区别</strong><br>更确切的说，压力测试可以看作是容量测试、性能测试和可靠性测试的一种手段，不是直接的测试目标。压力测试的重点在于发现功能性测试所不易发现的系统方面的缺陷，而容量测试和性能测试是系统测试的主要目标内容，也就是确定软件产品或系统的非功能性方面的质量特征，包括具体的特征值。容量测试和性能测试更着力于提供性能与容量方面的数据，为软件系统部署、维护、质量改进服务，并可以帮助市场定位、销售人员对客户的解释、广告宣传等服务。<br>压力测试、容量测试和性能测试的测试方法相通，在实际测试工作中，往往结合起来进行以提高测试效率。一般会设置专门的性能测试实验室完成这些工作，即使用虚拟的手段模拟实际操作，所需要的客户端有时还是很大，所以性能测试实验室的投资较大。对于许多中小型软件公司，可以委托第三方完成性能测试，可以在很大程度上降低成本。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;什么是软件测试&quot;&gt;&lt;a href=&quot;#什么是软件测试&quot; class=&quot;headerlink&quot; title=&quot;什么
      
    
    </summary>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/categories/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="软件测试" scheme="https://isjinhao.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>高德API使用-查询市内公交</title>
    <link href="https://isjinhao.github.io/posts/23418.html/"/>
    <id>https://isjinhao.github.io/posts/23418.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.053Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h2><p>location.java<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String key;</span><br><span class="line"><span class="keyword">private</span> String location;</span><br><span class="line"><span class="keyword">private</span> String city;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> location;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.location = location;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> city;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.city = city;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Location [key="</span> + key + <span class="string">", location="</span> + location + <span class="string">", city="</span> + city + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>RoutePojo.java<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutePojo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> time;   <span class="comment">// 秒</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> cost;  <span class="comment">// 元</span></span><br><span class="line"><span class="keyword">private</span> List&lt;SegmentPojo&gt; segments;  <span class="comment">// 分段信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.time = time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCost</span><span class="params">(<span class="keyword">double</span> cost)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cost = cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SegmentPojo&gt; <span class="title">getSegments</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> segments;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSegments</span><span class="params">(List&lt;SegmentPojo&gt; segments)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.segments = segments;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"RoutePojo [time="</span> + time + <span class="string">", cost="</span> + cost + <span class="string">", segments="</span> + segments + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SegmentPojo.java<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一段路径。RoutePojo的一段，有步行、公交、地铁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ISJINHAO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentPojo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String type;</span><br><span class="line"><span class="keyword">private</span> String start;</span><br><span class="line"><span class="keyword">private</span> String end;</span><br><span class="line"><span class="keyword">private</span> String vias;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(String start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.start = start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">(String end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.end = end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getVias</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> vias;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVias</span><span class="params">(String vias)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.vias = vias;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SegmentPojo [type="</span> + type + <span class="string">", start="</span> + start + <span class="string">", end="</span> + end + <span class="string">", vias="</span> + vias + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br></p><h2 id="查询经纬度，由经纬度查询市内公交"><a href="#查询经纬度，由经纬度查询市内公交" class="headerlink" title="查询经纬度，由经纬度查询市内公交"></a>查询经纬度，由经纬度查询市内公交</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> pojo.Location;</span><br><span class="line"><span class="keyword">import</span> pojo.RoutePojo;</span><br><span class="line"><span class="keyword">import</span> pojo.SegmentPojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GaoDeUtils</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> origin</span></span><br><span class="line"><span class="comment"> *            起点经纬度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dst</span></span><br><span class="line"><span class="comment"> *            终点经纬度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> city</span></span><br><span class="line"><span class="comment"> *            城市名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strategy</span></span><br><span class="line"><span class="comment"> *            0：最快捷模式; 1：最经济模式; 2：最少换乘模式; 3：最少步行模式; 5：不乘地铁模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dateTime（可选）</span></span><br><span class="line"><span class="comment"> *            日期时间，格式：2014-03-19 22:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RoutePojo <span class="title">cityInnerGuide</span><span class="params">(String origin, String dst, String city, String strategy, String... dateTime)</span> </span>&#123;</span><br><span class="line">String url = <span class="string">"https://restapi.amap.com/v3/direction/transit/integrated?strategy="</span> + strategy + <span class="string">"&amp;origin="</span></span><br><span class="line">+ origin + <span class="string">"&amp;destination="</span> + dst + <span class="string">"&amp;key=d4393e4b379c905601d89f62b8c0c0aa&amp;city="</span> + city;</span><br><span class="line"><span class="comment">// 处理日期时间</span></span><br><span class="line"><span class="keyword">int</span> argsNum = dateTime.length;</span><br><span class="line"><span class="keyword">if</span> (argsNum &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (argsNum == <span class="number">1</span>) &#123;</span><br><span class="line">url = url + <span class="string">"&amp;date="</span> + dateTime[<span class="number">0</span>].split(<span class="string">" "</span>)[<span class="number">0</span>] + <span class="string">"&amp;time="</span> + dateTime[<span class="number">0</span>].split(<span class="string">" "</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建Get请求</span></span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"><span class="comment">// 响应模型</span></span><br><span class="line">CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">response = httpClient.execute(httpGet);</span><br><span class="line"><span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">HttpEntity responseEntity = response.getEntity();</span><br><span class="line"><span class="keyword">if</span> (responseEntity == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 整个结果</span></span><br><span class="line">JSONObject result = JSON.parseObject(EntityUtils.toString(responseEntity));</span><br><span class="line"><span class="comment">// 和路径有关的信息</span></span><br><span class="line">JSONObject routes = result.getJSONObject(<span class="string">"route"</span>);</span><br><span class="line"><span class="comment">// 查询出来的路径个数</span></span><br><span class="line"><span class="comment">//int ways = Integer.parseInt(result.getString("count"));</span></span><br><span class="line"><span class="comment">// 所有路径的详细信息</span></span><br><span class="line">JSONArray transits = routes.getJSONArray(<span class="string">"transits"</span>);</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; ways; i++) &#123;</span></span><br><span class="line"><span class="comment">// 一条路径</span></span><br><span class="line">JSONObject route = (JSONObject) transits.get(<span class="number">0</span>);</span><br><span class="line">RoutePojo rp = <span class="keyword">new</span> RoutePojo();</span><br><span class="line"><span class="comment">// 此路径的花费</span></span><br><span class="line">rp.setCost(Double.valueOf(route.getString(<span class="string">"cost"</span>)));</span><br><span class="line"><span class="comment">// 此路径的时间</span></span><br><span class="line">rp.setTime(Long.valueOf(route.getString(<span class="string">"duration"</span>)));</span><br><span class="line"><span class="comment">// 每条路径的分段</span></span><br><span class="line">JSONArray segments = (JSONArray) route.get(<span class="string">"segments"</span>);</span><br><span class="line"><span class="comment">// 每条路径经过的 段数</span></span><br><span class="line"><span class="keyword">int</span> segmentsSize = segments.size();</span><br><span class="line">List&lt;SegmentPojo&gt; segList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segmentsSize; j++) &#123;</span><br><span class="line"><span class="comment">// 每个子段。每个子段都包含三种方式：步行、地铁、公交。地铁和公交不会同时存在。</span></span><br><span class="line">JSONObject path = (JSONObject) segments.get(j);</span><br><span class="line"><span class="comment">// 解析 步行</span></span><br><span class="line">SegmentPojo segWalking = <span class="keyword">new</span> SegmentPojo();</span><br><span class="line">segWalking.setType(<span class="string">"WALKING"</span>);</span><br><span class="line"><span class="comment">// 如果需要换乘，解析为JSONObject。如果不需要换乘解析为JSONArray</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">JSONObject walking = path.getJSONObject(<span class="string">"walking"</span>);</span><br><span class="line">JSONArray steps = walking.getJSONArray(<span class="string">"steps"</span>);</span><br><span class="line"><span class="keyword">int</span> stepSize = steps.size();</span><br><span class="line">String instructions = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; stepSize; k++) &#123;</span><br><span class="line">JSONObject step = (JSONObject) steps.get(k);</span><br><span class="line">String instruction = step.getString(<span class="string">"instruction"</span>);</span><br><span class="line">instructions = instructions + <span class="string">"`"</span> + instruction;</span><br><span class="line">&#125;</span><br><span class="line">segWalking.setVias(instructions.substring(<span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">segWalking.setVias(<span class="string">"在此站换乘！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">segList.add(segWalking);</span><br><span class="line"><span class="comment">// 解析 出租车</span></span><br><span class="line"><span class="comment">// JSONArray taxi = path.getJSONArray("taxi");</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 如果是公交车，解析为JSONArray，不是公交车，解析为JSONObject</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">path.getJSONArray(<span class="string">"exit"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">SegmentPojo segBus = <span class="keyword">new</span> SegmentPojo();</span><br><span class="line"><span class="comment">// 获得bus和sub的信息，字段都是 bus</span></span><br><span class="line">JSONObject bus = path.getJSONObject(<span class="string">"bus"</span>);</span><br><span class="line">JSONArray buslinesHelp = (JSONArray) bus.getJSONArray(<span class="string">"buslines"</span>);</span><br><span class="line"><span class="keyword">if</span> (buslinesHelp.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">JSONObject buslines = (JSONObject) buslinesHelp.get(<span class="number">0</span>);</span><br><span class="line">JSONArray viaStops = buslines.getJSONArray(<span class="string">"via_stops"</span>);</span><br><span class="line"><span class="comment">// 处理bus和sub的公交经停</span></span><br><span class="line">String vias = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> viaSize = viaStops.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; viaSize; k++) &#123;</span><br><span class="line">JSONObject stop = (JSONObject) viaStops.get(k);</span><br><span class="line">vias = vias + <span class="string">"`"</span> + stop.getString(<span class="string">"name"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (vias.length() &gt; <span class="number">0</span>)</span><br><span class="line">segBus.setVias(vias.substring(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// 设置公交路线</span></span><br><span class="line">segBus.setName(buslines.getString(<span class="string">"name"</span>));</span><br><span class="line"><span class="comment">// 处理公交车</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">segBus.setType(<span class="string">"BUS"</span>);</span><br><span class="line"><span class="comment">// 设置起点</span></span><br><span class="line">JSONObject departureStop = buslines.getJSONObject(<span class="string">"departure_stop"</span>);</span><br><span class="line">segBus.setStart(departureStop.getString(<span class="string">"name"</span>));</span><br><span class="line"><span class="comment">// 设置终点</span></span><br><span class="line">JSONObject arrivalStop = buslines.getJSONObject(<span class="string">"arrival_stop"</span>);</span><br><span class="line">segBus.setEnd(arrivalStop.getString(<span class="string">"name"</span>));</span><br><span class="line">segList.add(segBus);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">segBus.setType(<span class="string">"SUB"</span>);</span><br><span class="line">JSONObject exitObject = path.getJSONObject(<span class="string">"exit"</span>);</span><br><span class="line"><span class="comment">// 设置起点</span></span><br><span class="line">JSONObject departureStop = buslines.getJSONObject(<span class="string">"departure_stop"</span>);</span><br><span class="line"><span class="comment">// 不用换站使用JSONArray解析，换站使用JSONObject解析</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">JSONObject entranceObject = path.getJSONObject(<span class="string">"entrance"</span>);</span><br><span class="line">segBus.setStart(departureStop.getString(<span class="string">"name"</span>) + <span class="string">"`"</span> + entranceObject.getString(<span class="string">"name"</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">segBus.setStart(departureStop.getString(<span class="string">"name"</span>) + <span class="string">"`在此站换乘！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置终点</span></span><br><span class="line">JSONObject arrivalStop = buslines.getJSONObject(<span class="string">"arrival_stop"</span>);</span><br><span class="line">segBus.setEnd(arrivalStop.getString(<span class="string">"name"</span>) + <span class="string">"`"</span> + exitObject.getString(<span class="string">"name"</span>));</span><br><span class="line">segList.add(segBus);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rp.setSegments(segList);</span><br><span class="line"><span class="keyword">return</span> rp;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyWords</span></span><br><span class="line"><span class="comment"> *            关键字，务必尽量准确</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> types</span></span><br><span class="line"><span class="comment"> *            所有地点：all 交通运输类：150000 机场类：150100 火车站类：150200 公交车：150700 地铁类 150500</span></span><br><span class="line"><span class="comment"> *            轻轨类：150600</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> city</span></span><br><span class="line"><span class="comment"> *            限定查询的城市</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Location <span class="title">getLocation</span><span class="params">(String keyWords, String types, String city)</span> </span>&#123;</span><br><span class="line">Location loc = <span class="keyword">new</span> Location();</span><br><span class="line">loc.setKey(keyWords);</span><br><span class="line">String url = <span class="string">"https://restapi.amap.com/v3/place/text?keywords="</span> + keyWords + <span class="string">"&amp;city="</span> + city</span><br><span class="line">+ <span class="string">"&amp;key=d4393e4b379c905601d89f62b8c0c0aa&amp;offset=1&amp;page=1&amp;extensions=all"</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">"all"</span>.equals(types)) &#123;</span><br><span class="line">url = url + <span class="string">"&amp;types="</span> + types;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建Get请求</span></span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"><span class="comment">// 响应模型</span></span><br><span class="line">CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">response = httpClient.execute(httpGet);</span><br><span class="line"><span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">HttpEntity responseEntity = response.getEntity();</span><br><span class="line"><span class="keyword">if</span> (responseEntity == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">JSONObject result = JSON.parseObject(EntityUtils.toString(responseEntity));</span><br><span class="line">System.out.println(result);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"0"</span>.equals(result.getString(<span class="string">"count"</span>)))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 获得第一个poi</span></span><br><span class="line">JSONObject poi = (JSONObject) result.getJSONArray(<span class="string">"pois"</span>).get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 经纬度</span></span><br><span class="line">String location = poi.getString(<span class="string">"entr_location"</span>);</span><br><span class="line"><span class="comment">// 结构化城市名：省（直辖市）`市（直辖市）`县区</span></span><br><span class="line">String structureName = poi.getString(<span class="string">"pname"</span>) + <span class="string">"`"</span> + poi.getString(<span class="string">"cityname"</span>) + <span class="string">"`"</span></span><br><span class="line">+ poi.getString(<span class="string">"adname"</span>);</span><br><span class="line">loc.setLocation(location);</span><br><span class="line">loc.setCity(structureName);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"[]"</span>.equals(loc.getLocation()))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> loc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;POJO&quot;&gt;&lt;a href=&quot;#POJO&quot; class=&quot;headerlink&quot; title=&quot;POJO&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>进程调度</title>
    <link href="https://isjinhao.github.io/posts/54832.html/"/>
    <id>https://isjinhao.github.io/posts/54832.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.048Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h2><h3 id="前趋图"><a href="#前趋图" class="headerlink" title="前趋图"></a>前趋图</h3><p>数据结构中的有向无环图。箭头表示进程之间执行的先后关系。结点表示一个程序或一个进程，甚至一条语句。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/5f58725a-616a-4a24-90c5-9896c8172650"></div><p><br></p><h3 id="程序的并发执行"><a href="#程序的并发执行" class="headerlink" title="程序的并发执行"></a>程序的并发执行</h3><p>不存在前趋关系的程序之间才有可能并发执行。特征：</p><ul><li>间断性：程序在并发执行时，由于它们共享系统资源，以及为完成同一项任务而相互合作，致使在这些并发执行的程序之间形成了相互制约的关系，进而导致并发程序具有“执行-暂停-执行”这种间断性的活动规律。</li><li>失去封闭性：由于资源共享，所以当某程序的运行影响资源的状态时，其他程序的运行环境就会被破坏。</li><li>不可再现性：计算结果与并发程序各自执行速度有关。即同一程序，使用相同输入、在相同环境下运行，却可能获得完全不同的结果。</li></ul><p><br></p><h3 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h3><p>在多道程序环境下，程序的执行属于并发执行，此时他们将失去其封闭性，并具有间断性，以及运行结果的不可再现性。由此，决定了通常的程序是不能参与并发执行的。为了能使程序并发执行，引入了进程。</p><ul><li>进程实体：程序+数据+进程控制块（Process Control Block，PCB）。</li><li>进程：运行态的进程实体是就是进程，是系统进行资源分配和调度的一个独立单位。<br>PCB是为了使程序能并发执行而诞生的一种数据结构，它用来控制和管理进程。由于数据和程序本来就存在，所以创建/撤销进程也就是创建/撤销PCB。至于如何并发执行，见下面的进程同步。<br>区别于作业：进程是程序在数据集上的一次作执行，作业是用户提交给系统的一个任务，包含一个或多个进程。</li></ul><p><br></p><h3 id="进程的特点"><a href="#进程的特点" class="headerlink" title="进程的特点"></a>进程的特点</h3><ul><li>动态性：由创建而产生，由调度而执行，由撤销而消亡。</li><li>并发性：进程的重要特征，操作系统的重要特征。</li><li>独立性：独立运行、独立分配资源、独立接受调度。</li><li>异步性：按各自独立、不可预知的速度向前推进。</li></ul><p><br></p><h2 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h2><h3 id="PCB中保存的信息"><a href="#PCB中保存的信息" class="headerlink" title="PCB中保存的信息"></a>PCB中保存的信息</h3><ul><li>进程标识符。用于唯一的标识某个进程。<ul><li>外部标识符：不仅可以标识进程，还指明其父进程、子进程以及拥有该进程的用户。</li><li>内部标识符：方便系统使用进程，仅能标识进程。</li></ul></li><li>处理机状态。用于在进程切换时保存处理机中各个寄存器的内容。以便在该进程重新调度时能再从断点执行。</li><li>进程调度信息。<ul><li>进程状态：指明进程的状态，方便进程调度和对换时的依据。</li><li>进程优先级：进程优先级高的更容易获得处理机。</li><li>进程调度所需信息：保存的内容和进程调度算法有关，如进程等待了多久CPU，使用了多长CPU。</li><li>事件：进程因何由执行状态转变为阻塞状态，即阻塞原因。</li></ul></li><li>进程控制信息。<ul><li>程序和数据的地址。</li><li>进程同步的通信机制。</li><li>资源清单。进程已分配到的除处理机之外的资源。</li><li>链接指针。用于指向下一个PCB的首地址。用于进程调度。</li></ul></li></ul><p><br></p><h3 id="PCB的组织方式"><a href="#PCB的组织方式" class="headerlink" title="PCB的组织方式"></a>PCB的组织方式</h3><ul><li>线性方式：所有的PCB都保存在一张表中，每次寻找PCB都在表中查找。效率低。</li><li>链接方式：把具有相同状态的PCB链接起来。</li><li>索引方式：把具有相同状态的PCB保存在相应的表中。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/3094cb7a-bffa-4d13-8d8a-9e6458c2098b"></div></li></ul><p><br></p><h2 id="OS内核"><a href="#OS内核" class="headerlink" title="OS内核"></a>OS内核</h2><h3 id="系统态-amp-用户态"><a href="#系统态-amp-用户态" class="headerlink" title="系统态 &amp; 用户态"></a>系统态 &amp; 用户态</h3><p>对于处理机来说，根据其执行的指令不同，可以将其分成系统态（管态、内核态）和用户态。处理机处于系统态时可以执行任意的指令，访问所有的寄存器和存储区，而处于用户态的时候会受到相应的限制。所以计算机中的程序可以分成系统程序和用户程序，用户程序运行在用户态，这样就可以防止用户程序对操作系统进行破坏。</p><p><br></p><h3 id="指令分类"><a href="#指令分类" class="headerlink" title="指令分类"></a>指令分类</h3><p>操作系统把CPU指令分成两类：</p><ul><li>特权指令：在系统态执行的指令。执行几乎不受限制，如启动外部设备、设置系统时钟等。</li><li>非特权指令：在用户态执行的指令。限制较多，比如不能操作硬件等。</li></ul><p><br></p><h3 id="内核概念"><a href="#内核概念" class="headerlink" title="内核概念"></a>内核概念</h3><p>现代操作系统采用分层设计模式，不同权重的程序分别设置在不同的层次中。通常与<strong>硬件紧密相关的程序</strong>、<strong>设备驱动程序</strong>和<strong>运行频率高的程序</strong>等放置在高级别层次中，操作系统会将它们常驻内存，这些程序便被称为OS内核。OS内核运行在系统态中。</p><h4 id="内核的功能"><a href="#内核的功能" class="headerlink" title="内核的功能"></a>内核的功能</h4><p>不同操作系统的内核在功能上有一定的差异，但是一般都包含两类功能：</p><ul><li>支撑功能<ul><li>中断处理：是指计算机运行过程中，出现某些意外情况需主机干预时，机器能自动停止正在运行的程序并转入处理新情况的程序，且处理完毕后又返回原被暂停的程序继续运行。人机交互、设备驱动和进程调度等都需要依赖中断处理。</li><li>时钟管理：系统中很多活动都需要用到时钟，如定时任务、时间片轮转调度算法等。</li><li>原语操作：原语是若干条机器指令构成的，用以完成特定功能的一段程序。而原语操作便是原语的执行，其在执行期间是不可分割的。</li></ul></li><li>资源管理功能<ul><li>进程管理：进程的创建、撤销、调度等操作。</li><li>存储器管理：空间的分配、撤销、逻辑地址转换为物理地址等。</li><li>设备管理：进行设备分配、缓和CPU和I/O速度不匹配矛盾的缓冲管理等。</li></ul></li></ul><p><br></p><h2 id="进程的生命周期"><a href="#进程的生命周期" class="headerlink" title="进程的生命周期"></a>进程的生命周期</h2><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><ol><li>为新进程申请内部标识符，同时从PCB集合中索取一个空白的PCB。</li><li>为新进程分配其运行所需的资源。这些资源直接来自操作系统或者父进程。</li><li>初始化PCB。如处理机状态信息、标识符和进程优先级等。</li><li>若就绪队列还能接受进程，则插入就绪队列。不能接受则执行相应处理机制。</li></ol><p><br></p><h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><ol><li>从PCB集合中获得某进程的PCB，并读出该进程的状态。<ul><li>若进程正处于执行状态，应立即终止该进程的执行。</li><li>若此进程有子进程则一并终止，防止其成为不可控进程。</li></ul></li><li>将进程拥有的所有资源归还给其父进程或操作系统。</li><li>将被终止的进程从所在队列或链表（指PCB的组织方式）中移出，等待其他程序收集信息，释放空间等。</li></ol><p><br></p><h3 id="三种基本状态"><a href="#三种基本状态" class="headerlink" title="三种基本状态"></a>三种基本状态</h3><ul><li>就绪状态：分配到出处理机之外的其他所有必要资源。此时可运行，但其他进程正在占用CPU。</li><li>执行状态：就绪状态的进程获得CPU，正在执行的状态。</li><li>阻塞状态：进程发出的请求没有及时得到满足而无法继续执行的状态，此时会引起进程调度，OS把处理机分配给其他就绪进程，原进程暂停。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/f044ec2c-345b-430b-bd6d-8e84ce65d839"></div></li></ul><p><br></p><h3 id="挂起"><a href="#挂起" class="headerlink" title="挂起"></a>挂起</h3><p>进程暂停执行或不接受调度的状态。原因有如下几点：</p><ul><li>用户的需要：用户想暂停正在的进程，观察其状态或修改程序等。</li><li>父进程请求：父进程为了完成某项任务，协调其各子进程间的活动。</li><li>负荷调节的需要：系统压力过大或实时操作系统不能很好的满足可靠性时会挂起一些进程。</li><li>操作系统的需要：操作系统挂起某些进程来更方便的检查系统资源。<br>挂起和阻塞不同在于阻塞是客观条件不能得到满足，即资源不足引起暂停。挂起是主观需要引起暂停。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/e1bf9eb8-939f-4235-b97d-6f9ffcaecd1e"></div></li></ul><p><br></p><h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a><span id="jump">进程同步</span></h2><p>进程同步的主要任务是使并发执行的诸进程之间能有效的共享资源和相互合作，从而使程序的执行具有可再现性。</p><p><br></p><h3 id="同步-amp-互斥"><a href="#同步-amp-互斥" class="headerlink" title="同步 &amp; 互斥"></a>同步 &amp; 互斥</h3><p>并发执行的诸进程之间既有独立性又有制约性。</p><ul><li>独立性：各进程都可独立地向前推进；</li><li>制约性：由于资源共享和进程合作引起的进程之间的相互依赖和相互制约的关系。可归结为互斥和同步。<ul><li>同步：两个或多个事件的发生有着某种时序上的关系。按照这种时序关系进行能保证各任务安全的完成。</li><li>互斥：资源的使用要排它使用，防止冲突（不同时使用，但无先后次序。一种特殊同步）。</li></ul></li></ul><p><br></p><h3 id="临界资源-amp-临界区"><a href="#临界资源-amp-临界区" class="headerlink" title="临界资源 &amp; 临界区"></a>临界资源 &amp; 临界区</h3><ul><li>临界资源：需要被各进程互斥访问的资源。</li><li>临界区：各进程中访问临界资源的代码。<br>若能保证各进程互斥地进入自己的临界区，便可以保证互斥地访问临界资源，进而保证进程同步。常用的方式有硬件同步机制和信号量机制。</li></ul><p><br></p><h3 id="同步准则"><a href="#同步准则" class="headerlink" title="同步准则"></a>同步准则</h3><ul><li>空闲让进：当无进程处于临界区时，应当允许一个进程进入自己的临界区。</li><li>忙则等待：当有进程处于临界区时其他请求就如临界区的进程必须等待。</li><li>有限等待：对要求访问临界资源的进程，应保证在有限的时间内能进入自己的临界区。</li><li>让权等待：当进程不能进入临界区时，应立即释放处理机避免进程陷入“忙等”的状态。</li></ul><p><br></p><h2 id="硬件同步机制"><a href="#硬件同步机制" class="headerlink" title="硬件同步机制"></a>硬件同步机制</h2><h3 id="关中断"><a href="#关中断" class="headerlink" title="关中断"></a>关中断</h3><p>当进程在临界区执行期间，计算机系统不响应中断，因此不会引发调度，临界资源只会被一个进程占据，这样就不会发生进程同步问题。</p><p><br></p><h3 id="利用Test-and-Set指令实现互斥"><a href="#利用Test-and-Set指令实现互斥" class="headerlink" title="利用Test-and-Set指令实现互斥"></a>利用Test-and-Set指令实现互斥</h3><p>指令的描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">TS</span><span class="params">(boolean *lock)</span></span>&#123;</span><br><span class="line">    boolean old;</span><br><span class="line">    old = *lock;</span><br><span class="line">    *lock = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为临界资源设置一个布尔变量<code>lock = false</code>。在进程进入临界区之前利用TS指令测试，如果得到的值为<code>false</code>表示资源未被使用，如果得到的值为<code>true</code>，则一直测试到结果为<code>false</code>。使用TS指令实现互斥描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (TS(&amp;lock));</span><br><span class="line">...</span><br><span class="line">lock = <span class="literal">false</span>;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p></p><p><br></p><h3 id="利用Swap指令实现互斥"><a href="#利用Swap指令实现互斥" class="headerlink" title="利用Swap指令实现互斥"></a>利用Swap指令实现互斥</h3><p>指令描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(boolean *a, boolean *b)</span></span>&#123;</span><br><span class="line">    boolean temp;</span><br><span class="line">    temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为每个临界资源设置一个全局变量<code>lock=false</code>。每个进程设置一个局部变量<code>key</code>。实现互斥的描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">...</span><br><span class="line">    key = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        swap(&amp;lock, &amp;key);</span><br><span class="line">    &#125;<span class="keyword">while</span>(key != <span class="literal">false</span>)</span><br><span class="line">    critical section;</span><br><span class="line">    lock = <span class="literal">false</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br></p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>关中断：效率低下且不适用于多处理机系统。且其他进行会”忙等“，不符合让权等待。</li><li>TS指令 &amp; Swap指令：其他进行会”忙等“，不符合让权等待。</li></ul><p><br></p><h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><h3 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h3><p>整型信号量是一个用于描述资源数目的整型量（S）。但除了初始化以外，仅能通过两个原子操作来访问。</p><ul><li><p>wait(S)：P操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wait(S)&#123;</span><br><span class="line">    <span class="keyword">while</span>(S &lt;= <span class="number">0</span>);</span><br><span class="line">    S--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>signal(S)：V操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">signal(S)&#123;</span><br><span class="line">    S++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>P操作用于分配资源，V操作用于释放资源。</p><p><br></p><h3 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h3><p>整型信号量未遵循让权等待原则。只要<code>S &lt;= 0</code>就会不断的循环。此时需要增加一个进程链表指针链接等待进程。</p><ul><li><p>数据结构的描述：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;<span class="comment">// 资源数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process_control_block</span> *<span class="title">list</span>;</span><span class="comment">// 阻塞队列</span></span><br><span class="line">&#125; semaphore;</span><br></pre></td></tr></table></figure></li><li><p>wait(S)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wait(semaphore *S)&#123;</span><br><span class="line">    S-&gt;value--;</span><br><span class="line">    if(S-&gt;value &lt; 0)</span><br><span class="line">    block(S-&gt;list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>signal(S)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">signal(semaphore *S)&#123;</span><br><span class="line">    S-&gt;value++;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;value &lt;= <span class="number">0</span>)</span><br><span class="line">    wakeup(S-&gt;<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>当进程被阻塞时会被加入阻塞对列，资源被满足时唤醒阻塞对列中的某个资源。</p><p><br></p><h3 id="AND型信号量"><a href="#AND型信号量" class="headerlink" title="AND型信号量"></a>AND型信号量</h3><p>记录型信号量只能解决共享一个临界资源的情况，若有多个临界资源则需要使用多个记录型信号量。但是信号量越多，系统死锁的概率越大，且大量的同步操作会给系统的管理带来麻烦。AND型信号量的思想是一次性分配进程所需的全部资源，如果有一个没有分配成功，则其他所有可能为之分配的资源亦不分配。</p><ul><li><p>Swait(S)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Swait(S1, S2, ..., Sn) &#123;</span><br><span class="line">    <span class="keyword">if</span>(Si &gt;= <span class="number">1</span> &amp;&amp; ... &amp;&amp; Sn &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            Si--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 把进程阻塞在请求第一次未能得到满足的资源Si所对应的阻塞队列里，同时把进程的程序计数器</span></span><br><span class="line">        <span class="comment">// （放置CPU下一条要执行的指令地址）放置在本操作的开始处（下一次再调度到此进程，需要再次</span></span><br><span class="line">        <span class="comment">// 检查所有的资源）。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Ssignal(S)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ssignal(S1, S2, ..., Sn) &#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        Si++;</span><br><span class="line">        <span class="comment">// 唤醒等待Si资源的阻塞队列。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h3 id="信号量集"><a href="#信号量集" class="headerlink" title="信号量集"></a>信号量集</h3><p>之前的信号量都是一次申请或释放某资源一份，若申请或释放N份资源需要进行N次操作，效率比较低下。此外，当资源数量低于某一下限值时，为了系统安全，就不能再予以分配。所以产生信号量集解决以上问题。描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Swait(S1, t1, d1, ..., Sn, tn, dn)&#123;</span><br><span class="line">    <span class="keyword">if</span> (S1 &gt;= t1 &amp;&amp; ... &amp;&amp; Sn &gt;= tn)</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            Si -= di;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 把进程阻塞在请求第一次未能得到满足的资源Si所对应的阻塞队列里，同时把进程的程序计数器</span></span><br><span class="line">        <span class="comment">// （放置CPU下一条要执行的指令地址）放置在本操作的开始处（下一次再调度到此进程，需要再次</span></span><br><span class="line">        <span class="comment">// 检查所有的资源）。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里有个问题，就是 Si &gt; ti 之后，能保证Si &gt; di吗？我个人的理解是di和ti的资源量是动态的，比如di为4，</span></span><br><span class="line"><span class="comment">// 原始ti为2，那程序在运行到Swait之前，si会被修改为6。</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ssignal(S1, S2, ..., Sn) &#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        Si += di;</span><br><span class="line">        <span class="comment">// 唤醒等待Si资源的阻塞队列。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊的信号量集</strong></p><ul><li><code>Swait(S1, d, d)</code>：每次申请d份资源，资源少于d时不分配。</li><li><code>Swait(S, 1, 1)</code>：退化成一般的记录型信号量。</li><li><code>Swait(S, 1, 0)</code>：<code>S &gt;= 1</code>时运行多个进行进入特定区。<code>S &lt;= 0</code>时禁止进程进入特定区。</li></ul><p><br></p><h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><p>直接使用信号量机制会把大量的同步操作分散在各个进程中，这会增加系统死锁的概率并且不方便系统的管理。而管程就是把代表共享资源的数据结构和对共享数据结构的操作（包括同步机制）封装起来以更好的为进程使用。这时所有请求访问共享资源的进程都只能通过管程间接访问，同时管程每次只允许一个进程进入管程。<br>此时的管程可以使用面相对象的操作来完成整型信号量的功能。但是此时无法解决“让权等待”的问题，所以再按照面相对象的思想将<code>block</code>和<code>wakeup</code>操作封装起来来解决这个问题，即构成条件变量。条件变量的操作如下：</p><ul><li><code>condition.wait()</code>：使进程在因某条件不能满足时阻塞在其所对应的条件变量上。</li><li><code>condition.signal()</code>：唤醒因某条件不能满足而阻塞的进程。<br>可以很容易看出来，设置不同的条件变量能使由不同原因等待的进程阻塞在不同的队列中。使用时把<code>signal()</code>操作放在函数/过程的最后，这样保证在唤醒其他进程后本进程能直接退出而不再产生冲突。</li></ul><p><strong>管程的描述如下：</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、局部数据和条件变量组成管程内的数据结构。</span></span><br><span class="line"><span class="comment">2、过程/函数1~过程/函数k组成管程内的一组过程对管程内的数据结构进行操作。</span></span><br><span class="line"><span class="comment">3、初始化代码：对管程内的数据结构进行初始化。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Monitor monitor_name&#123;</span><br><span class="line">    share variable declartions; <span class="comment">//共享变量说明</span></span><br><span class="line">    condition declarations;<span class="comment">//条件变量说明</span></span><br><span class="line">    &#123;<span class="comment">//管程主体</span></span><br><span class="line">        initialization code;    <span class="comment">//初始化代码</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>:<span class="comment">//能被进程调用的过程</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">P1</span><span class="params">(...)</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">P2</span><span class="params">(...)</span></span>&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pn</span><span class="params">(...)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br></p><h2 id="信号量的应用"><a href="#信号量的应用" class="headerlink" title="信号量的应用"></a>信号量的应用</h2><h3 id="互斥访问资源"><a href="#互斥访问资源" class="headerlink" title="互斥访问资源"></a>互斥访问资源</h3><p>设某共享资源的信号量是<code>mutex</code>，PA和PB进程并发时需互斥访问。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line">PA()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">        wait(mutex);</span><br><span class="line">        ...</span><br><span class="line">        signal(mutex);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">PB()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">        wait(mutex);</span><br><span class="line">        ...</span><br><span class="line">        signal(mutex);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br></p><h3 id="利用信号量实现前趋关系"><a href="#利用信号量实现前趋关系" class="headerlink" title="利用信号量实现前趋关系"></a>利用信号量实现前趋关系</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/e6058fc8-cf80-40ae-bec9-123125d36b92"></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">P1（）&#123;...V(f1);V(f1);V(f1);&#125;</span><br><span class="line">P2（）&#123;P(f1)；... V(f2);&#125;</span><br><span class="line">P3（）&#123;P(f1)；... V(f3);&#125;</span><br><span class="line">P4（）&#123;P(f1)；... V(f4);&#125;</span><br><span class="line">P5（）&#123;P(f2)；... V(f5);&#125;</span><br><span class="line">P6（）&#123;P(f3);P(f4);P(f5);...;&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    semaphore f1=f2=f3=f4=f5=<span class="number">0</span>；</span><br><span class="line">    Cobegin</span><br><span class="line">    P1(); P2();P3(); P4();P5(); P6();</span><br><span class="line">    Coend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在并发时，如果`P1`的功能代码未执行完，`f1`为0，每次对`f1`进行V操作能使`P2`、`P3`、`P4`运行一个。其他亦然。<br>### 生产者—消费者问题 **问题描述** 多个生产者进程生产产品以供多个消费者消费。通过由n个环形缓冲区构成的缓冲池（循环队列），把多个生产者和多个消费者联系起来。不允许消费者进程到一个空缓冲区去取产品，也不允许生产者进程向一个已装满产品且尚未取走的缓冲区中投放产品。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/f23286c5-6773-4bd1-9e94-fc96dc382ed3"></div><p><strong>分析</strong></p><ul><li>任何时刻，只能有一个进程在缓冲区中操作。</li><li>对于“生产者”而言，缓冲区满则应等待。</li><li>对于“消费者”而言，缓冲区空则应等待。</li></ul><p><strong>利用记录型信号量解决问题</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>;<span class="comment">// in指向此次生产的产品应该放置的位置。out指向此次消费的产品所在的位置。</span></span><br><span class="line">item buffer[n];<span class="comment">// 缓存区大小为n，地址为[0, n-1]。</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>, empty = n, full = <span class="number">0</span>;<span class="comment">// mutex用于互斥访问缓存区</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        produce an item nextproducer;</span><br><span class="line">        ...</span><br><span class="line">        wait(empty);<span class="comment">//消耗一个empty，当empty&lt;=0时等待</span></span><br><span class="line">        wait(mutex);</span><br><span class="line">        buffer[in] = nextproducer;</span><br><span class="line">        in = (in+<span class="number">1</span>) % n;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(full);<span class="comment">//增加一个full</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        wait(full);<span class="comment">//消耗一个full，当full&lt;=0时等待</span></span><br><span class="line">        wait(mutex);</span><br><span class="line">        nextconsumer = buffer[out];</span><br><span class="line">        out = (out+<span class="number">1</span>) % n;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(empty);<span class="comment">//增加一个empty</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        produce();consumer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>互斥信号量 &amp; 资源信号量</strong><br>互斥使用的资源设置一个互斥信号量，资源数为1。资源信号量的资源数和资源的意义有关。资源信号量的资源为1时退化成互斥信号量。<br>在使用时互斥信号量的P操作需要紧邻其对应共享资源的临界区使用，否则可能造成同步问题。比如互换上面代码的第8行和第9行之后，若生产者进程和消费者进程都只有一个，且生产者通过了<code>P(mutex)</code>，阻塞在<code>P(empty)</code>，消费者通过了<code>P(full)</code>，阻塞在<code>P(mutex)</code>，此时生产者等待消费者的<code>V(empty)</code>，消费者等待生产者的<code>V(mutex)</code>，发生死锁。而V操作不需要注意顺序。</p><p><strong>利用AND型信号量解决问题</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>;<span class="comment">//in指向此次生产的产品应该放置的位置。out指向此次消费的产品所在的位置。</span></span><br><span class="line">item buffer[n];<span class="comment">//缓存区大小为n，地址为[0, n-1]。</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>, empty = n, full = <span class="number">0</span>;<span class="comment">//mutex用于互斥访问缓存区</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        produce an item nextproducer;</span><br><span class="line">        ...</span><br><span class="line">        Swait(empty, mutex);<span class="comment">//消耗一个empty，当empty&lt;=0时等待</span></span><br><span class="line">        buffer[in] = nextproducer;</span><br><span class="line">        in = (in+<span class="number">1</span>) % n;</span><br><span class="line">        signal(empty, mutex);<span class="comment">//增加一个full</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        wait(full, mutex);<span class="comment">//消耗一个full，当full&lt;=0时等待</span></span><br><span class="line">        nextconsumer = buffer[out];</span><br><span class="line">        out = (out+<span class="number">1</span>) % n;</span><br><span class="line">        signal(full, mutex);<span class="comment">//增加一个empty</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        produce();consumer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>利用管程解决问题</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Monitor monitor&#123;</span><br><span class="line">    item buffer[n];</span><br><span class="line">    <span class="keyword">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">    condition notfull, notempty;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">put</span><span class="params">(item x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= n)</span><br><span class="line">            cwait(notfull);<span class="comment">//阻塞在队列满的条件下</span></span><br><span class="line">            buffer[in] = x;</span><br><span class="line">            in = (in+<span class="number">1</span>) % n;</span><br><span class="line">            count++;</span><br><span class="line">            csignal(notempty);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">get</span><span class="params">(item &amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count &lt;= <span class="number">0</span>)</span><br><span class="line">                cwait(notempty);<span class="comment">//阻塞在队列空的条件下</span></span><br><span class="line">            x = buffer[out];</span><br><span class="line">            out = (out+<span class="number">1</span>) % n;</span><br><span class="line">            count--;</span><br><span class="line">            csignal(notfull);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    item x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">        produce an item in nextproducer;</span><br><span class="line">        monitor.put(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    item x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        monitor.get(x);</span><br><span class="line">        consume the item in nextconsumer;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        produce();consumer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br></p><h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><p><strong>问题描述</strong><br>五个哲学家坐在圆桌前，每人一份饭，每个哲学家两侧各有一支筷子,只有拿到左右两只筷子才能进餐，哲学家处于吃饭和思考两种状态。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/61be3b33-61a2-4e94-b617-a00e297a83aa"></div><p><strong>分析</strong></p><ul><li>同一时刻一只筷子只能有一个哲学家拿起。</li><li>只有获得两个筷子后才能进餐。</li><li>如果每个哲学家都拿起一只筷子，都饿死。</li><li>并行程度：五只筷子允许两人同时进餐。</li></ul><p><strong>利用AND型信号量解决问题</strong><br>每次必须拿到两只筷子才能拿起，否则不拿起筷子。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Swait(chopstick[i], chopstick[(i+<span class="number">1</span>) % <span class="number">5</span>]);</span><br><span class="line">    ...</span><br><span class="line">    Ssignal(chopstick[i], chopstick[(i+<span class="number">1</span>) % <span class="number">5</span>]);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br></p><h3 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h3><p><strong>问题描述</strong></p><ul><li>写者向共享数据区放数据，读者从共享数据区读数据。</li><li>多个读者可同时读取数据，多个写者不能同时写数据。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/b63a44fd-5493-49d5-9586-30d2cd091a55"></div></li></ul><p><strong>分析</strong></p><ul><li>读者进入共享数据区，写者必须等待。</li><li>读者进入共享数据区，读者可以进入。</li><li>写者进入共享数据区，读者必须等待。</li></ul><p><strong>利用记录型信号量解决问题</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">semaphore readmutex = <span class="number">1</span>, writemutex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> readcount = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        wait(readmutex);</span><br><span class="line">        <span class="keyword">if</span>(readcount == <span class="number">0</span>)</span><br><span class="line">            wait(writemutex);</span><br><span class="line">        readcount++;</span><br><span class="line">        signal(readmutex);</span><br><span class="line">        ...<span class="comment">//read opreation</span></span><br><span class="line">        wait(readmutex);</span><br><span class="line">        readcount--;</span><br><span class="line">        <span class="keyword">if</span>(readcount == <span class="number">0</span>)</span><br><span class="line">            signal(writemutex);</span><br><span class="line">        signal(readmutex);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        wait(writemutex);<span class="comment">//当写者进入共享数据区，reader会阻塞在</span></span><br><span class="line">        ... <span class="comment">//write operation</span></span><br><span class="line">        signal(writemutex);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        reader();writer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>代码分析</strong><br>最开始并发的时候：</p><ul><li>假如读者先抢到资源，<code>readcount == 0</code>，<code>P(writemutex)</code>，<code>writer()</code>会阻塞在第20行，但其他<code>reader()</code>仍可以运行，只是不会再<code>P(writemutex)</code>。同时每个<code>reader()</code>都<code>readcount++</code>，直到<code>readcount == 0</code>时<code>V(writemutex)</code>，然后<code>writer()</code>才有可能能进入。此时读者进程和写者进程进入共享数据区的个数都为0，即又是重新开始。</li><li>假如写者先抢到资源，<code>P(writemutex)</code>，此时<code>readcount == 0</code>，所有<code>reader()</code>阻塞在第7行。此时读者进程和写者进程进入共享数据区的个数都为0，即又是重新开始。<br>综上，完成了要求。</li></ul><p><br></p><h3 id="读者-写者问题拓展"><a href="#读者-写者问题拓展" class="headerlink" title="读者-写者问题拓展"></a>读者-写者问题拓展</h3><p><strong>问题描述</strong></p><ul><li>拓展就是又增加一个条件，最多只允许RN个读者同时读。</li></ul><p><strong>利用信号量集解决问题</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">semaphore L = RN, mx = <span class="number">1</span>;<span class="comment">//L用来控制访问数，mx控制写者访问时所有读者阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        Swait(L, <span class="number">1</span>, <span class="number">1</span>);<span class="comment">//第RN+1个读者进入时会阻塞</span></span><br><span class="line">        Swait(mx, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//mx &gt;= 1时才可以进入</span></span><br><span class="line">        ...<span class="comment">//read operation</span></span><br><span class="line">        Ssignal(L, <span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        Swait(mx, <span class="number">1</span>, <span class="number">1</span>; L, RN, <span class="number">0</span>);<span class="comment">//mx &gt;= 1 &amp;&amp; L &gt;= RN时进入</span></span><br><span class="line">        ...<span class="comment">//write operation</span></span><br><span class="line">        Ssignal(mx, <span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        reader();writer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>代码分析</strong><br>最开始并发的时候：</p><ul><li>假如读者先抢到资源，<code>L = L - 1</code>，写者阻塞在第12行，但其他<code>reader()</code>仍可以运行，直至没有读者进程在访问共享数据区。当所有的读者进程都退出时，共享数据区中停留的个进程数都为0，即重新开始。</li><li>假如写者先抢到资源，<code>mx = mx - 1</code>，所有读者进程和其他写者进程都要被阻塞，写者进程退出时，共享数据区中停留的个进程数都为0，即重新开始。</li></ul><p><br></p><h3 id="理发师问题"><a href="#理发师问题" class="headerlink" title="理发师问题"></a>理发师问题</h3><p><strong>问题描述</strong><br>一把理发椅，N把等待座位。理发师为理发椅上的顾客理发，没有顾客就在理发椅上睡觉，有一个顾客时需要叫醒理发师，多个顾客时需要在等待座位上等候。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/2b2ae3cd-36cf-4a84-a300-a0854dc51275"></div><p><strong>分析</strong></p><ul><li>理发椅上只能有一位顾客。</li><li>等待座位是有限缓冲区。</li><li>只要存在顾客，理发师就不能睡觉。</li></ul><p><strong>利用记录型信号量解决问题</strong><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">semaphore customer = <span class="number">0</span>, barber = <span class="number">0</span>, mutex = <span class="number">1</span>; <span class="comment">//barber使理发师只能为一个顾客服务</span></span><br><span class="line"><span class="keyword">int</span> waiting = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">barber</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        wait(customer);<span class="comment">//没有顾客的时候理发师睡觉</span></span><br><span class="line">        wait(mutex);</span><br><span class="line">        waiting –= <span class="number">1</span>;<span class="comment">//等待的人少一个</span></span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(barber);</span><br><span class="line">        ...<span class="comment">//获得被激活进程的信息并给相应的顾客剪发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wait(mutex);</span><br><span class="line">    <span class="keyword">if</span>(waiting &lt; CHAIRS)&#123;<span class="comment">//顾客到来的时候，还有座位就进去等待</span></span><br><span class="line">        waiting += <span class="number">1</span>;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(customer);</span><br><span class="line">        wait(barber);</span><br><span class="line">        ...  <span class="comment">//将被激活进程的信息发送给barber()</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        signal(mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>代码分析</strong><br>在最开始并发的时候<code>barber()</code>会等待到有顾客时才醒来。顾客一来就需要访问<code>waiting</code>，所以获得<code>mutex</code>。</p><ul><li>如果位置不够就立即释放<code>mutex</code>。</li><li>如果位置够，就让等待的人加1，再释放<code>mutex</code>。然后顾客人数<code>customer += 1</code>来激活理发师进程。理发师进程激活后会<code>V(barber)</code>，然后等待着的<code>customer()</code>进程争夺资源，争夺到<code>P(barber)</code>的进程将被激活进程的信息发送给<code>barber()</code>，<code>barber()</code>获得被激活进程的信息并给相应的顾客剪发。</li></ul><p><br></p><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>进程之间合作完成工作不仅仅需要有时序关系，还需要进程信息交互，比如刚才的理发师问题中就设计到了信息交互。从概念上说进程通信是指进程之间的信息交换，所以信号量机制本身就涉及到了信息交换，不过我们把这种信息交换叫做低级进程通信，因为其效率低且需要用户大量的干预。真正的进程通信需要满足使用方便且能高效传输大量数据的需求。</p><p><br></p><h3 id="共享存储器系统"><a href="#共享存储器系统" class="headerlink" title="共享存储器系统"></a>共享存储器系统</h3><ul><li>基于共享数据结构的通信方式：诸进程公用某些数据结构来实现进行通信 ，如生产者—消费者问题中的有界缓冲区，属于低级通信方式。</li><li>基于共享存储区的通信方式：在存储器中划出一块共享存储区，诸进程通过对共享存储区中数据的读或写实现通信，此时数据的形式、位置和访问控制仍是进程实现。适用于传输大量数据，属于高级通信。</li></ul><p><br></p><h3 id="管道通信系统"><a href="#管道通信系统" class="headerlink" title="管道通信系统"></a>管道通信系统</h3><p>所谓“管道”，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又名pipe文件。向管道提供输入的发送进程（即写进程）以字符流形式将大量的数据送入管道，而接收进程（即读进程），可从管道中接收数据。管道通信系统必须满足以下三个要求：</p><ul><li>互斥：管道的使用必须互斥。因为存数据和取数据可归于写文件的添加和删除。</li><li>同步：写进程把一定数量的数据写入管道后去睡眠，读进程读完后将其唤醒。读进程读空的管道时需要睡眠。</li><li>确定对方存在：如果写进程不存在，读进程就会一直等待。如果读进程不存在，写进程写完数据后也会一直等待，所以通信双方必须同时存在。</li></ul><p><br></p><h3 id="消息传递系统"><a href="#消息传递系统" class="headerlink" title="消息传递系统"></a>消息传递系统</h3><p>指进程可以利用一组通信命令（原语）把数据封装在消息中传送，不需要显示的指定共享存储区或数据结构等。它隐藏了通信的细节，也是目前使用最广泛的进程间通信机制。通常有两种实现方式：</p><ul><li>直接通信方式：OS提供原语给进程使用。</li><li>间接通信方式：借助共享中间实体（称为邮箱）完成进程间的通信。<ul><li>和共享存储器系统的区别是进程不再需要指定数据的形式、位置和访问控制等，信箱内部自有实现。</li></ul></li></ul><p><br></p><h3 id="客户机-服务器系统"><a href="#客户机-服务器系统" class="headerlink" title="客户机-服务器系统"></a>客户机-服务器系统</h3><p>前三种都是单机下的通信机制，这种是网络环境中的通信机制。主要有套接字和RPC两种方式。</p><ul><li>套接字：一个套接字是一个通信标识类型的数据结构，包含了通信目的地址、通信端口号、通信的网络协议、进程自身的地址以及对外提供的系统调用等。使用套接字可以在不同主机上的进程建立连接进而进行通信。</li><li>RPC：Remote Procedure Call，它是一个通信协议，可以使本地进程调用其他主机的进程对程序员表现为常规方法调用。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/44d61e32-6054-4fdd-9bb2-6c911e4720c6"></div></li></ul><p><br></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程的由来"><a href="#线程的由来" class="headerlink" title="线程的由来"></a>线程的由来</h3><p>进程解决了程序不能并发执行的问题，但是由于进程是拥有资源的基本单位，所以在创建、撤销和切换时所需的时空开销很大，因为处理机势必要付出更大的代价来保存现场。所以把拥有资源和独立运行两项功能分开，让线程作为独立运行的基本单位，进程作为拥有资源的基本单位。不过线程也拥有一些能保证其独立运行的资源，如TCB。</p><p><br></p><h3 id="TCB（Thread-Control-Block）"><a href="#TCB（Thread-Control-Block）" class="headerlink" title="TCB（Thread Control Block）"></a>TCB（Thread Control Block）</h3><p>所有用于控制和管理线程的信息都会被记录在线程控制块中，通常包含：</p><ul><li>线程标识符：每个线程都有唯一的线程标识符。</li><li>处理机信息：包括程序计数器、状态寄存器、通用寄存器的内容。</li><li>线程运行状态：线程和进程一样也有多种运行状态，就绪、阻塞、运行等。详见<code>103-网络编程</code>。</li><li>优先级：和调度算法有关，优先级越高，得到处理机的机会越大。</li><li>线程专有存储区：用于在线程切换时保存现场状态和保存线程的统计信息。</li><li>信号屏蔽：屏蔽某些发送给线程的信号。</li><li>堆栈指针：线程调用别的过程时需要保存局部变量和返回地址等来供返回时能继续执行。</li></ul><p><br></p><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><p>线程是为了解决进程调度时过于笨重的问题，所以在不同的环境中实现线程的方式不同。根据内核能否感知到线程的存在可分为内核支持线程（Kernel Supported Threads，KST）和用户级线程（User Level Threads，ULT）。它俩的区别是能否直接调用系统服务，前者可以而后者需要借助中间系统。</p><p><br></p><h3 id="内核支持线程"><a href="#内核支持线程" class="headerlink" title="内核支持线程"></a>内核支持线程</h3><p>若线程是由内核直接调度，线程资源也是保存在内核空间，就可以说此类线程为内核支持线程。此类线程的创建、撤销和切换等操作都是在内核空间完成的，此时线程可以直接调用系统服务。一种可能的实现方式是在创建进程时分配一个任务数据区（Per Task Data Area，PTDA），各个线程的TCB保存在其中即可。不过仅实现内核支持线程的系统对用户进程创建的线程很不友好，每次线程调度处理机都要从用户态转换到核心态。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/cc3840cb-d3dd-4d60-a36d-d3663b3510ae"></div><p><br></p><h3 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h3><p>用户级线程是指线程虽客观存在但对内核来说是透明的，此时不能再直接调用系统服务，间接调用系统服务需要有中间系统的支持，通常的中间系统有运行时系统和内核控制线程。</p><ul><li>运行时系统：把创建线程、撤销线程和线程同步等只能由OS内核完成的操作封装起来作为运行时系统，而运行时系统停留在用户空间供其他进程调用来实现线程调度。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/c1c7f79c-7ac9-4638-8b4c-ec81b238378f"></div></li><li>内核控制线程：这种线程又被称作轻量进程（Light Weight Process，LWP），它既可以共享进程的资源，又可以使用内核提供的服务。虽然下图中LWP和用户线程是1对1关系，但实际上多个用户级线程可以复用一个LWP，但每个轻型线程都要连接到一个内核线程中。所以此种方式系统需要同时实现内核支持线程。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/1ef49c0f-824d-47e5-8511-67b5b12a0bae" width="80%"></div></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;进程概念&quot;&gt;&lt;a href=&quot;#进程概念&quot; class=&quot;headerlink&quot; title=&quot;进程概念&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="操作系统" scheme="https://isjinhao.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://isjinhao.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>UML基础</title>
    <link href="https://isjinhao.github.io/posts/2276.html/"/>
    <id>https://isjinhao.github.io/posts/2276.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:26.983Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>An object is an entity with a well-defined boundary and identity that encapsulates state and behavior.<br>State is represented by attributes and relationships.<br>Behavior is represented by operations, methods, and state machines.</p><blockquote><p>An Object Has State<br>The state of an object is one of the possible conditions in which an object may exist.<br>The state of an object normally changes over time.<br>An Object Has Behavior<br>Behavior determines how an object acts and reacts.<br>The visible behavior [bɪ’heɪvjə] of an object is modeled by the set of messages it can respond to (operations the object can perform).<br>An Object Has Identity<br>Each object has a unique identity, even if the state is identical to that of another object.</p></blockquote><p><br></p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>A class is a description of a set of objects that share the same properties and behavior. An object is an instance of a class.</p><blockquote><p>The Relationship Between Classes and Objects<br>A class is an abstract definition of an object. It defines the structure and behavior of each object in the class. It serves as a template for creating objects.<br>Objects are grouped into classes.<br>An object is an instance of a class.</p></blockquote><p><br></p><h2 id="What-Is-an-Operation"><a href="#What-Is-an-Operation" class="headerlink" title="What Is an Operation?"></a>What Is an Operation?</h2><p>An operation is the implementation of a service that can be requested from any object of the class to affect behavior.<br>A class may have any number of operations or none at all.</p><blockquote><p>Objects Need to Collaborate<br>Objects are useless unless they can collaborate [kəˈlæbəreɪt] together to solve a problem.</p><ul><li>Each object is responsible for its own behavior and status.</li><li>No one object can carry out every responsibility on its own.<br>How do objects interact with each other?</li><li>They interact through messages.</li></ul></blockquote><p><br></p><h2 id="What-is-a-message"><a href="#What-is-a-message" class="headerlink" title="What is a message?"></a>What is a message?</h2><p>A specification of a communication between objects that conveys information with the expectation that activity will ensue(跟着发生)<br>One object asks another object to perform an operation.</p><p><br></p><h3 id="What-Is-Abstraction"><a href="#What-Is-Abstraction" class="headerlink" title="What Is Abstraction?"></a>What Is Abstraction?</h3><p>Abstraction can be defined as: Process allowing to focus on most important aspects while ignoring less important details<br>Allows us to manage complexity by concentrating on essential aspects making an entity different from others</p><blockquote><p>Abstraction<br>Emphasizes relevant characteristics.<br>Suppresses（抑制） other characteristics.</p></blockquote><p><br></p><h3 id="What-Is-Encapsulation"><a href="#What-Is-Encapsulation" class="headerlink" title="What Is Encapsulation?"></a>What Is Encapsulation?</h3><p>Encapsulation means to design, produce, and describe software so that it can be easily used without knowing the details of how it works.<br>Also known as information hiding<br>An analogy:<br>When you drive a car, you don’t have know the details of how many cylinders(汽缸) the engine has or how the gasoline and air are mixed and ignited(点火).<br>Instead you only have to know how to use the controls.</p><ul><li>Encapsulation allows objects to be viewed as ‘black boxes’</li><li>It protects an object’s internal state from being corrupted by other objects.</li><li>Also, other objects are protected from changes in the object implementation.</li><li>隔离复杂度</li></ul><p><br></p><h3 id="What-Is-Inheritance"><a href="#What-Is-Inheritance" class="headerlink" title="What Is Inheritance ?"></a>What Is Inheritance ?</h3><ul><li>Inheritance [ɪnˈherɪtəns]—a way of organizing classes</li><li>Classes with properties in common can be grouped so that their common properties are only defined once.</li><li>增加了软件重用的机会</li></ul><p><br></p><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>Polymorphism—the same word or phrase can be mean different things in different contexts<br>Analogy（类比）: in English, bank can mean side of a river or a place to put money<br>In Java, two or more classes could each have a method called output<br>Each output method would do the right thing for the class that it was in.</p><ul><li>One output might display a number where as a different one might display a name.<br>What Is Polymorphism?</li><li>消息发送方不需要知道消息接收方属于那个子类</li><li>同一类族的接收者可以按自己的方式处理消息</li><li>同一类族的接收者可以按自己的方式处理同一个消息</li><li>有多种对象可以按自己的方式处理相同的数据</li></ul><p><br></p><h3 id="What-is-an-Interface"><a href="#What-is-an-Interface" class="headerlink" title="What is an Interface?"></a>What is an Interface?</h3><p>An interface is a collection of operations that specify a service of a class or component.<br>Interfaces formalize（正式化） polymorphism<br>Interfaces support “plug-and-play(即插即用)” architectures</p><p><br></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>类<br>定义了对象群体的逻辑结构，包括属性和操作。系统运行时，类作为产生对象的模板，在物理层面是不存在的<br>对象<br>系统运行时必须为每一个需要的对象分配内存、保存数据对象存在于物理层面，每个对象都有自己的数据空间。所有的对象共享同一块代码空间<br>属性Attribute ==状态state == 信息information<br>操作operation == 方法method ==行为behaviour = = 职责responsibility</p></blockquote><p><br></p><h2 id="Procedural-Programming"><a href="#Procedural-Programming" class="headerlink" title="Procedural Programming"></a>Procedural Programming</h2><p>This programming paradigm（范式） is essentially an abstraction of machine /assembly language.<br>Program is organized around procedures.<br>Focus on data structures, algorithms and sequencing of steps</p><blockquote><p>Programs = Algorithm + Data Structure</p><ul><li>An algorithm is a set of instructions for solving a problem</li><li>A data structure is a construct used to organize data in a specific way.</li><li>Most computer languages, from early examples like FORTRAN and ALGOL to more recent languages like C and Ada have been imperative or procedural.</li></ul></blockquote><p><br></p><h2 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object-Oriented Programming"></a>Object-Oriented Programming</h2><p>A design and programming technique<br>Some terminology:</p><ul><li>object - usually a person, place or thing (a noun)</li><li>method - an action performed by an object (a verb)</li><li>type or class - a category of similar objects (such as automobiles)<br>Objects have both data and methods<br>Objects of the same class have the same data elements and methods<br>Objects send and receive messages to invoke actions<br>C语言是一种面向过程的思维方式<br>程序的运行“一切尽在掌握中”：从main()函数的逐条语句开始执行、调用了子程序就必须一层层返回，最终又返回main函数<br>系统需要完成的功能，分配到各个子函数，由main函数统一调度<br>比较<br>面向过程侧重于考虑方法的编写（哪个方法做什么事，不考虑所涉及的数据在哪里）<br>面向对象则致力于将数据和方法先做一个封装（分配一个对象做事，先考虑所需要的数据是否和它在一起）</li></ul><p><br></p><h2 id="What-is-modeling"><a href="#What-is-modeling" class="headerlink" title="What is modeling?"></a>What is modeling?</h2><p>A model is an abstraction of things.<br>Emphasizes relevant characteristics.<br>Suppresses other characteristics.</p><blockquote><p>建模目的<br>We build models to better understand the system we are developing.<br>Modeling achieves four aims.</p><ul><li>模型帮助我们按照实际情况或按照我们所需要的样式对系统进行可视化</li><li>模型允许我们详细说明系统的结构或行为</li><li>模型给出了一个指导我们构造系统的模板</li><li>模型对我们作出的决策进行文档化<br>We build models of complex systems because we cannot comprehend such a system in its entirety.</li></ul></blockquote><p><br></p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>Unified Modeling Language 统一建模语言</p><ol><li>作用：建立软件模型，可以用UML对软件密集型系统的制品（artifact：软件开发过程中产生的各种各样的产物）进行可视化、详述、构造和文档化。</li><li>建模语言：提供统一的交流词汇和规则</li><li>可视化: 通过标准图符构成图形来描述模型</li><li>通用标准: 成为软件建模的标准语言,并且在其他领域也得到应用。</li></ol><p><br></p><h3 id="UML的构成"><a href="#UML的构成" class="headerlink" title="UML的构成"></a>UML的构成</h3><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/8ebb2748-86bb-43d6-b9e2-8eab49cb8c02"></div><p><br></p><h2 id="Building-Blocks-of-the-UML"><a href="#Building-Blocks-of-the-UML" class="headerlink" title="Building Blocks of the UML"></a>Building Blocks of the UML</h2><p>The vocabulary of the UML encompasses three kinds of building blocks:</p><ul><li>Things: the abstractions that are first-class citizens in a model;</li><li>Relationships: relationships tie these things together;</li><li>Diagrams: diagrams group interesting collections of things.</li></ul><p><br></p><h3 id="Things-in-the-UML"><a href="#Things-in-the-UML" class="headerlink" title="Things in the UML"></a>Things in the UML</h3><p>There are four kinds of things in the UML:</p><ul><li>Structural things: class, interface, collaboration, use case, active class, component, node</li><li>Behavioral things: interaction, state machine, activity</li><li>Grouping things: package</li><li>Annotational(注释) things: note<br>These things are the basic object-oriented building blocks of the UML.</li></ul><h4 id="Structural-things-in-the-UML"><a href="#Structural-things-in-the-UML" class="headerlink" title="Structural things in the UML"></a>Structural things in the UML</h4><p>the nouns of UML models.<br>the mostly static parts of a model, either conceptual or physical<br>Collectively, the structural things are called classifiers</p><h5 id="Structural-things-Class"><a href="#Structural-things-Class" class="headerlink" title="Structural things - Class"></a>Structural things - Class</h5><p>A class is a description of a set of objects that share the same attributes, operations, relationships, and semantics(语义).<br>A class is represented using a compartmented(间隔间) rectangle</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/a963a7e1-de48-417b-a44b-17df881f9172"></div>A class is comprised of three sections - The first section contains the class name - The second section shows the structure (attributes) - The third section shows the behavior (operations) Representing Objects An object is represented as rectangles with underlined names<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/b29e28c4-f5da-4db3-b2cf-911dfc4dc7d1"></div><h5 id="Structural-things-Interface"><a href="#Structural-things-Interface" class="headerlink" title="Structural things - Interface"></a>Structural things - Interface</h5><p>An interface is a collection of operations that specify a service of a class or component.<br>Interfaces support “plug-and-play” architectures</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/b5f0b757-10d8-40db-973c-69eeadcc526a"></div><h5 id="Structural-things-–-Use-Case"><a href="#Structural-things-–-Use-Case" class="headerlink" title="Structural things – Use Case"></a>Structural things – Use Case</h5><p>a use case is a description of set of sequence of actions that a system performs that yields an observable result of value to a particular actor.<br>A use case is used to structure(组织) the behavioral things in a model.<br>A use case is realized by a collaboration.<br>Graphically, a use case is rendered as an ellipse [ɪˈlɪps] with solid lines, usually including only its name.</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/75816d6e-05f5-4663-bbd3-23689efe13db"></div><h5 id="Structural-things-Collaboration"><a href="#Structural-things-Collaboration" class="headerlink" title="Structural things - Collaboration"></a>Structural things - Collaboration</h5><p>In the context of a system‘s architecture, a collaboration allows you to name a conceptual chunk(大块) that encompasses both static and dynamic aspects.<br>A collaboration names a society of classes, interfaces, and other elements that work together to provide some cooperative [kəʊ’ɒpərətɪv] behavior that’s bigger than the sum of all its parts.<br>You use collaborations to specify the realization of use cases and operations, and to model the architecturally significant mechanisms of your system.<br>A collaboration is also the specification of how an element, such as a classifier (including a class, interface, component, node, or use case) or an operation, is realized by a set of classifiers and associations playing specific roles used in a specific way.<br>Graphically, a collaboration is rendered as an ellipse(椭圆) with dashed lines.</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/908feae7-f7b3-4657-90e4-2a58c77d0af3"></div><h5 id="Structural-things-–-Active-Class"><a href="#Structural-things-–-Active-Class" class="headerlink" title="Structural things – Active Class"></a>Structural things – Active Class</h5><p>an active class is a class whose objects own one or more processes or threads and therefore can initiate control activity.<br>Graphically, an active class is rendered as a class with double lines on the left and right; it usually includes its name, attributes, and operations.</p><div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/569f63a6-6537-474d-9966-046f1799aff4"></div><h5 id="Structural-things-–-Component"><a href="#Structural-things-–-Component" class="headerlink" title="Structural things – Component"></a>Structural things – Component</h5><p>A component is a modular part of the system design that hides its implementation behind a set of external interfaces.<br>系统中遵从一组接口且提供其实现的物理的、可替换的部分。<br>构件是物理抽象，可以替换的文件。类是逻辑抽象，包含属性和方法。逻辑抽象出来的东西用文件写出来，这些源文件就是构件。</p><div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/fde57d23-7808-4edc-a456-bac2b2dc68a4"></div>eg：<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/a8a1314b-c59c-403c-8ee7-60b31aa9554b"></div><h5 id="Structural-things-–-Node"><a href="#Structural-things-–-Node" class="headerlink" title="Structural things – Node"></a>Structural things – Node</h5><p>a node is a physical element that exists at run time and represents a computational resource, generally having at least some memory and, often, processing capability.<br>A set of components may reside（安置、居住） on a node and may also migrate from node to node.<br>Graphically, a node is rendered as a cube, usually including only its name.</p><div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/e3bf766e-b763-4652-a18c-52d4249a27bb"></div><h4 id="Behavioral-things-in-the-UML"><a href="#Behavioral-things-in-the-UML" class="headerlink" title="Behavioral things in the UML"></a>Behavioral things in the UML</h4><p>the verbs of UML models.<br>the mostly dynamic parts of a model<br>three primary kinds</p><ul><li>Among a set of objects: interaction</li><li>For an object: state machine</li><li>The sequence of steps: activity</li></ul><h5 id="Behavioral-things-Interaction"><a href="#Behavioral-things-Interaction" class="headerlink" title="Behavioral things -  Interaction"></a>Behavioral things - Interaction</h5><p>an interaction is a behavior that comprises（包括） a set of messages exchanged among a set of objects within a particular context to accomplish a specific purpose.<br>An interaction involves（包含、涉及） a number of other elements, including messages, action sequences (the behavior invoked by a message), and links (the connection between objects).<br>Graphically, a message is rendered as a directed line, almost always including the name of its operation.</p><div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/595fa10e-e518-442b-b2e2-fdcf477ae1bd"></div>> What Is an Interaction Diagram? An interaction diagram shows an interaction, consisting of a set of objects and their relationships, including the messages that may be dispatched（派遣，分发） among them. It models the dynamic aspects of a system.<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/22884ee0-e79d-4a99-9857-45a317f03a86"></div>> What Is a Sequence Diagram? A sequence diagram is an interaction diagram that emphasizes the time ordering of messages. The diagram shows - The objects participating in the interaction. - The sequence of messages exchanged.<div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/bd6aa477-b8f4-40b2-9a64-7bc859d759dc"></div>> What Is a Communication Diagram? A communication diagram emphasizes the organization of the objects that participate in an interaction. The communication diagram shows - The objects participating in the interaction. - Links( physical or conceptual connection among objects) between the objects. - Messages passed between the objects.<div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/83101a2c-a677-4e00-9deb-6bf887c3d785"></div><h5 id="Behavioral-things-State-machine"><a href="#Behavioral-things-State-machine" class="headerlink" title="Behavioral things -  State machine"></a>Behavioral things - State machine</h5><p>a state machine is a behavior that specifies the sequences of states an object or an interaction goes through during its lifetime in response to events, together with its responses to those events.<br>A state machine involves a number of other elements, including states, transitions, events, and activities.<br>Graphically, a state is rendered as a rounded rectangle, usually including its name and its substates（子状态）, if any（如果有）.</p><div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/a810eadf-7cc5-4186-b733-6adf6350815c"></div><div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/80070e36-e6c5-4465-b985-9fc15befa3b6"></div>Behavioral things - Activity an activity is a behavior that specifies the sequence of steps a computational process performs In an activity, the focus is on the flows among steps without regard to which object performs each step. A step of an activity is called an action. Graphically, an action is rendered as a rounded rectangle with a name indicating its purpose. States and actions are distinguished by their different contexts.<div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/de074a2b-1b6b-4aad-996d-7f5e9e353467"></div><h4 id="Grouping-things-in-the-UML"><a href="#Grouping-things-in-the-UML" class="headerlink" title="Grouping things in the UML"></a>Grouping things in the UML</h4><h5 id="Grouping-things-Package"><a href="#Grouping-things-Package" class="headerlink" title="Grouping things - Package"></a>Grouping things - Package</h5><ul><li>Grouping things are the organizational parts of UML models.</li><li>Structural things, behavioral things, and even other grouping things may be placed in a package.</li><li>Unlike components (which exist at run time), a package is purely conceptual (meaning that it exists only at development time).</li><li>Graphically, a package is rendered as a tabbed folder, usually including only its name and, sometimes, its contents.<div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/8200ecef-fa8e-467d-9eb2-6c0977c4b54f"></div></li></ul><h4 id="Annotational-things-in-the-UML"><a href="#Annotational-things-in-the-UML" class="headerlink" title="Annotational things in the UML"></a>Annotational things in the UML</h4><h5 id="Annotational-things-Note"><a href="#Annotational-things-Note" class="headerlink" title="Annotational things - Note"></a>Annotational things - Note</h5><p>Annotational things are the explanatory(解释性的) parts of UML models.<br>These are the comments（解释） you may apply to describe, illuminate（阐释）, and remark about any element in a model.<br>There is one primary kind of annotational thing, called a note.<br>A note is simply a symbol for rendering constraints and comments attached to an element or a collection of elements.<br>Graphically, a note is rendered as a rectangle with a dog-eared corner, together with a textual or graphical comment.</p><div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/77a95757-3439-40c8-b910-da3a7c413194"></div><p><br></p><h3 id="Relationships-in-the-UML"><a href="#Relationships-in-the-UML" class="headerlink" title="Relationships in the UML"></a>Relationships in the UML</h3><p>There are four kinds of relationships in the UML:</p><ul><li>Association</li><li>Dependency</li><li>Generalization</li><li>Realization<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/6a5f957b-7e3a-4eca-98ba-7e949fa39dd4"></div></li></ul><h4 id="What-Is-an-Association"><a href="#What-Is-an-Association" class="headerlink" title="What Is an Association"></a>What Is an Association</h4><p>The semantic relationship between two or more classes that specifies connections among their instances</p><ul><li>A structural relationship, specifying that objects of one thing are connected to objects of another<div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/fcb18b0a-1918-4198-a85b-b0b293241141"></div><div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/8b7ef480-dcc7-47c6-9862-cc01f3a6cf18"></div></li></ul><h4 id="Relationships-Dependency"><a href="#Relationships-Dependency" class="headerlink" title="Relationships: Dependency"></a>Relationships: Dependency</h4><p>A relationship between two model elements where a change in one may cause a change in the other.<br>Non-structural, “using” relationship.</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/7555a04a-9223-46a9-bd06-ad822eb1aedc"></div><h4 id="Relationships-Generalization"><a href="#Relationships-Generalization" class="headerlink" title="Relationships: Generalization"></a>Relationships: Generalization</h4><p>A relationship among classes where one class shares the structure and/or behavior of one or more classes<br>Defines a hierarchy of abstractions in which a subclass inherits from one or more superclasses</p><ul><li>Single inheritance</li><li>Multiple inheritance<br>an “is-a-kind of” relationship</li></ul><h4 id="Relationships-Realization"><a href="#Relationships-Realization" class="headerlink" title="Relationships: Realization"></a>Relationships: Realization</h4><p>One classifier serves as the contract that the other classifier agrees to carry out</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/b810a805-21b4-4d36-a18c-9858c7ac19a0"></div><p><br></p><h3 id="Diagrams-in-the-UML"><a href="#Diagrams-in-the-UML" class="headerlink" title="Diagrams in the UML"></a>Diagrams in the UML</h3><p>The UML1.x includes nine such diagrams:</p><ul><li>Use-case diagrams: to illustrate requirement.</li><li>Class diagrams: to illustrate logical structure.</li><li>Object diagrams: to illustrate objects and links.</li><li>State diagrams: to illustrate behavior.</li><li>Component diagrams: to illustrate physical structure of the software.</li><li>Deployment diagrams: to show the mapping of software to hardware configurations.</li><li>Interaction diagrams (i.e., collaboration and sequence diagrams): to illustrate behavior.</li><li>Activity diagrams: to illustrate the flow of events in a use-case.<br>A diagram is a view into a model<br>A model is a complete description of a system from a particular perspective<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/34e5879e-8931-4cc5-9dbe-ed9ad5d7d27b"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/1ea73044-06b6-4048-b548-33c06fffbea8"></div></li></ul><p><br></p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>命名<br>规定对要素(事物)、关系、图命名。例如：student为一个类的名字<br>范围<br>UML成员所定义的内容起作用的上下文环境。<br>可视性<br>UML成员能被其他成员引用的方式。三种：</p><ul><li>public（+）：公共</li><li>protected（#）：保护</li><li>private（-）：私有<br>完整性<br>保证事物正确、一致地相互联系。<br>执行<br>运行或模拟动态模型的含义是什么</li></ul><p><br></p><h2 id="UML的公共机制"><a href="#UML的公共机制" class="headerlink" title="UML的公共机制"></a>UML的公共机制</h2><p>UML的公共机制有：</p><ul><li>规范说明</li><li>修饰</li><li>通用划分</li><li>扩展机制</li></ul><p><br></p><h3 id="规格说明，pecification"><a href="#规格说明，pecification" class="headerlink" title="规格说明，pecification"></a>规格说明，pecification</h3><p>UML对每一个元素都有确定的图形表示符号，但对该图形符号还有语法、语义的文字说明。例如，Actor：参与者，UML表示为：</p><div align="center"><img width="15%" src="http://blogfileqiniu.isjinhao.site/5cd0a8bf-a875-49d8-a3e4-dc563cb6a5c8"></div><p><br></p><h3 id="修饰，adornment"><a href="#修饰，adornment" class="headerlink" title="修饰，adornment"></a>修饰，adornment</h3><p>图形符号表示一个元素的主要特征，此外，可以加上修饰，表示该元素的其它特征。例如：矩形框表示一个类，有类名，属性，操作等。但也可增加“可视性” 等修饰。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/7ffc2c1a-7592-4309-a2b3-182c70364380"></div><p><br></p><h3 id="通用划分（common-division）"><a href="#通用划分（common-division）" class="headerlink" title="通用划分（common division）"></a>通用划分（common division）</h3><p>一种保证不同抽象概念层次的机制。有两种通用划分的形式：<br>抽象-实例：例如，类-对象，用例-具体用例<br>接口-实现：接口表示约定，实现表示对约定的实施</p><p><br></p><h2 id="Extension-mechanism-of-the-UML"><a href="#Extension-mechanism-of-the-UML" class="headerlink" title="Extension mechanism of the UML"></a>Extension mechanism of the UML</h2><ul><li>Stereotype</li><li>Tagged value</li><li>Constraint<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/e8950b18-1b34-4a38-beb2-12404906c21c"></div></li></ul><p><br></p><h3 id="Extension-mechanism-Stereotypes"><a href="#Extension-mechanism-Stereotypes" class="headerlink" title="Extension mechanism  - Stereotypes"></a>Extension mechanism - Stereotypes</h3><p>A stereotype is an extension of the vocabulary of the UML, allowing you to create new kinds of building blocks similar to existing ones but specific to your problem.<br>Stereotypes must be based on certain existing types or classes in the metamodel. Stereotypes may extend the semantics, but not the structure of pre-existing types and classes. Certain stereotypes are predefined in the UML, others may be user defined.</p><p><br></p><h3 id="Extension-mechanism-Tagged-Values"><a href="#Extension-mechanism-Tagged-Values" class="headerlink" title="Extension mechanism  - Tagged Values"></a>Extension mechanism - Tagged Values</h3><p>Many kinds of elements have detailed properties that do not have a visual notation. In addition, users can define new element properties using the tagged value mechanism.<br>A tagged value is an extension of the properties of a UML element, allowing you to create new information in that element’s specification.<br>A tagged value is a keyword-value pair that may be attached to any kind of model element. The keyword is called a tag.<br>Common examples of tagged values are：</p><ul><li>{Author = (Dave,Ron)}</li><li>{Version Number = 3}</li><li>{Location = d:\java\uml\examples}</li><li>{Location = Node: Middle Tier}</li></ul><p><br></p><h3 id="Extension-mechanism-Constraint"><a href="#Extension-mechanism-Constraint" class="headerlink" title="Extension mechanism  - Constraint"></a>Extension mechanism - Constraint</h3><p>A constraint is an extension of the semantics of a UML elements, allowing you to add new rules or to modify existing ones.<br>Constraints may be written as free-form text. If you want to specify your semantics more precisely, you can use the UML’s Object Constraint Language (OCL).</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/4d7acebb-a5db-4a08-a7a0-9d7ab99e6627"></div><p><br></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>Modeling Comments - use notes</li><li>Modeling New Building Blocks - use stereotype.</li><li>Modeling New Properties - use tagged values.</li><li>Modeling New Semantics - use constraint</li></ul><p><br></p><h2 id="UML的4-1视图"><a href="#UML的4-1视图" class="headerlink" title="UML的4+1视图"></a>UML的4+1视图</h2><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/e5aa3cc8-2e3a-4768-ad69-0f32beb8d989"></div><p><br></p><h2 id="UML可以用在系统开发的各个阶段"><a href="#UML可以用在系统开发的各个阶段" class="headerlink" title="UML可以用在系统开发的各个阶段"></a>UML可以用在系统开发的各个阶段</h2><ul><li>业务模型：业务用例图，活动图，状态图，实体图；</li><li>需求模型：用例图，活动图，状态图等</li><li>逻辑模型：类图，交互图，活动图，状态图等</li><li>设计模型：类图，交互图，活动图，状态图等</li><li>实现模型：构件图等</li><li>测试模型：用例图，类图，交互图等</li></ul><p><br></p><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><p>A sequence of actions a system performs that yields an observable result of value to a particular actor<br>UML中用例用椭圆表示，使用动宾结构或主谓结构命名。</p><p><br></p><h3 id="用例的特点"><a href="#用例的特点" class="headerlink" title="用例的特点"></a>用例的特点</h3><ul><li>用例从使用系统的角度描述系统中的信息，即站在系统外部查看系统功能，不反映功能的实现方式。<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/e23291f8-4d01-4345-9523-70ce24980426"></div></li><li>用例描述用户提出的一些可见需求，对应一个具体的用户目标。<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/2115da0d-9931-46c3-856c-c211a8e87abd"></div></li><li>用例反映系统与用户的一次交互过程，应该具有交互的信息的传递。<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/0e44f599-5ffd-41eb-8395-bcbf31768d47"></div></li><li>用例是对系统行为的描述，属于UML的动态建模部分。<ul><li>通过读卡机，储户插入ATM卡</li><li>ATM系统从卡上读取银行ID、帐号、并验证帐号。</li><li>储户键入密码，系统检验密码。</li><li>储户按确认键，输入取款金额。</li><li>ATM把帐号和取款金额传递给银行系统，取回帐户余额。</li><li>ATM输出现金，并显示帐户余额。</li><li>ATM记录事务到日志文件。</li></ul></li></ul><p><br></p><h2 id="What-Is-an-Actor"><a href="#What-Is-an-Actor" class="headerlink" title="What Is an Actor"></a>What Is an Actor</h2><ul><li>Actors are not part of the system.</li><li>Actors represent roles a user of the system can play(扮演).</li><li>They can represent a human, a machine, or another system.</li><li>They can actively interchange（交换） information with the system.</li><li>They can be a giver of information.</li><li>They can be a passive recipient of information.<br>Actors are EXTERNAL.</li></ul><p><br></p><h3 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h3><p>参与者(actor)是指系统以外的、需要使用系统或与系统交互的事物，包括: 人、设备、外部系统等。其它译名有: 活动者、执行者、行动者等。例，一个银行业务系统中的参与者：</p><ol><li>客户：从系统获取信息并执行金融交易</li><li>管理人员：创建系统的用户，获取并更新信息</li><li>厂商：接受作为转账支付结果的资金</li><li>Mail系统：与系统交互，发送或接收邮件<br>An actor represents a role that a human, hardware device, or another system can play.<br>UML中的Actor实际上是一个版型化的类, 可以有三种表示形式：<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/3c8badc3-3254-48d1-a192-da65f056447f"></div>由于Actor实际上是一个类, 因此它们之间可以存在一定的关系,如：<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/7b67b70e-b9ac-478e-bce8-5ca942102594"></div></li></ol><p><br></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本(scenario)在UML中指贯穿用例的一条单一路径，用来显示用例中的正常和特殊情况。<br>系统在某个特定的执行期内所发生的一系列事件。其它译名：情景、场景、情节、剧本。<br>每个用例有一系列脚本，包括一个主要脚本，以及几个次要脚本。相对于主要脚本，次要脚本描述了执行路径中的异常或可选择的情况。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/73ca19a4-26aa-499c-b939-a5d8bef599c1"></div><p><br></p><h2 id="用例之间的关系"><a href="#用例之间的关系" class="headerlink" title="用例之间的关系"></a>用例之间的关系</h2><p>用例与参与者之间：关联(association)关系。<br>用例之间的关系有：泛化(generalization)、包含(include)、扩展(extend)等。</p><p><br></p><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>参与者与用例之间是关联关系，表示参与者与用例之间具有使用，交互信息的关联。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/c8dff12c-a02d-4d1c-8fb4-4eb7383e3867"></div><p><br></p><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><p>泛化关系代表一般与特殊的关系，与继承类似。在泛化关系中，子用例继承了父用例的行为和含义，子用例也可以增加新的行为和含义或覆盖父用例中的行为和含义。</p><div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/2255407b-d31d-4950-9da2-33b0ac3f07b7"></div><div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/0073fca6-db58-42a0-827d-30442a6566b5"></div><p><br></p><h3 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h3><p>包含关系是指一个用例（基本用例）的行为包含了另一个用例（包含用例）的行为。包含关系是依赖关系的版型。</p><div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/6f6882a7-bc06-4261-ad01-0c2c808e4da9"></div><div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/54bee7cb-7411-4929-9606-1e2f8c61b3d4"></div><p><br></p><h3 id="扩展关系"><a href="#扩展关系" class="headerlink" title="扩展关系"></a>扩展关系</h3><p>扩展关系的基本含义与泛化关系类似，但对扩展用例有更多限制, 即基本用例必须声明若干“扩展点”，扩展用例只能在扩展点上增加行为和含义，以扩展到新用例。扩展关系是依赖关系版型。</p><div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/0f581755-4936-4700-9fbc-ed321fe091a4"></div><p><br></p><h3 id="关系比较"><a href="#关系比较" class="headerlink" title="关系比较"></a>关系比较</h3><ul><li>扩展关系的基本用例是 well formed 的。一个基本用例执行时，可以执行或不执行扩展用例。</li><li>包含关系的基本用例可以不是或是 well formed 的。执行基本用例时，一定会执行包含用例。</li><li>需要重复处理两个或多个用例时吗，可以考虑包含关系。</li><li>处理正常行为的变型且只是偶而描述时，可以考虑只使用泛化关系。</li><li>处理正常行为的变型且希望采用更多控制方式时，可以在基本用例中设置扩展点，使用扩展关系。<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/1bdd49a8-af3a-4bc9-a406-0a458137e348"></div></li></ul><p><br></p><h2 id="用例的描述"><a href="#用例的描述" class="headerlink" title="用例的描述"></a>用例的描述</h2><ul><li>用例描述是指对一个用例的功能进行的文字描述，是参与者与系统交互动作序列的说明。</li><li>用例描述才是用例的主要部分，是后续的交互图分析和类图分析必不可少的部分。</li><li>用例采用自然语言描述参与者与系统的交互行为，要易于理解，其读者是开发人员、用户、项目经理、测试人员等。</li></ul><p><br></p><h3 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h3><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/1d4118ee-24fe-495e-be57-ba42bfee333c"></div><p><br></p><h3 id="正确描述"><a href="#正确描述" class="headerlink" title="正确描述"></a>正确描述</h3><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/731ef287-2eea-429a-96ae-e7714045596e"></div><p><br></p><h3 id="用例规约的主要组成"><a href="#用例规约的主要组成" class="headerlink" title="用例规约的主要组成"></a>用例规约的主要组成</h3><ul><li>用例名称</li><li>用例标识</li><li>涉及的参与者</li><li>描述</li><li>用例的规格说明<ul><li>前置条件 PreConditions</li><li>后置条件 PostConditions</li><li>正常事件流 Flow of events</li><li>备选事件流 Alternate flow</li></ul></li><li>其它<ul><li>非功能需求、设计约束、尚存在的问题</li></ul></li></ul><h4 id="前置、后置条件-1"><a href="#前置、后置条件-1" class="headerlink" title="前置、后置条件-1"></a>前置、后置条件-1</h4><ul><li>前置条件约束在用例开始前系统的状态<ul><li>把它们看做是看门人，它阻止参与者触发该用例直到满足所有条件</li><li>说明在用例触发之前什么必须为真</li></ul></li><li>后置条件约束用例执行后系统的状态<ul><li>用例执行后什么必须为真</li><li>对于有多个事件流的用例，则应该有多个后置条件<div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/08d12559-08a0-4f56-866c-6a6ab6278ef5"></div></li></ul></li></ul><h4 id="事件流描述要点"><a href="#事件流描述要点" class="headerlink" title="事件流描述要点"></a>事件流描述要点</h4><ul><li>只书写“可观测”的语句、<ul><li>系统通过ADO建立数据库连接，传送SQL查询语句，从“商品表”查询商品的详细信息……</li><li>系统按照查询条件搜索商品的详细信息</li></ul></li><li>使用主动语句</li><li>句子必须以参与者或系统作为主语<ul><li>出纳员接收顾客的付款—顾客的付款数可能高于商品总额</li><li>出纳员录入顾客所付的现金总额</li><li>系统显示出应找还给顾客的余额，打印付款收据</li></ul></li><li>不要涉及界面细节<ul><li>会员从下拉框中选择类别</li><li>会员在相应文本框中输入查询条件</li><li>会员点击“确定”按钮</li></ul></li><li>分支和循环<ul><li>分支：参与者的选择</li><li>分支：另一条成功线路</li><li>分支：系统进行验证</li><li>循环：直接描述</li></ul></li></ul><p><br></p><h2 id="寻找用例的方法"><a href="#寻找用例的方法" class="headerlink" title="寻找用例的方法"></a>寻找用例的方法</h2><ul><li>start with actors, then identify what they want to do What functions will the actor want from the system</li><li>系统是否存储和检索信息</li><li>Are any actors notified when the system changes ?</li><li>Are there external events that notify the system ?</li><li>哪个参与者触发了活动？Which actors trigger activity ?</li></ul><p><br></p><h2 id="用例的常见问题分析"><a href="#用例的常见问题分析" class="headerlink" title="用例的常见问题分析"></a>用例的常见问题分析</h2><h3 id="用例的粒度问题"><a href="#用例的粒度问题" class="headerlink" title="用例的粒度问题"></a>用例的粒度问题</h3><p>对于一个目标系统进行用例分析后得到的用例数目有多少比较合适?</p><ul><li>用例要有路径，路径要有步骤；而这一切都是可观测的</li><li>最常犯错误：粒度过细，陷入功能分解。过细的粒度，一般都会导致技术语言的描述，而不再是业务语言。如把步骤当用例，或者把系统活动当用例。<div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/ab95b61c-b4ab-4e07-b634-8fea84cc3752"></div><div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/d507413b-a24c-4560-9263-486418238db8"></div></li></ul><p><br></p><h2 id="用例模型"><a href="#用例模型" class="headerlink" title="用例模型"></a>用例模型</h2><ul><li>用例模型包括：<ul><li>系统边界</li><li>参与者</li><li>用例</li><li>用例图</li><li>用例描述</li></ul></li><li>是面向对象设计的输入</li><li>是开发部门与顾客之间的合同</li><li>是软件设计部门与软件工程师之间的合同</li><li>是开发部门领导、非直接开发人员，了解系统的主要信息来源</li></ul><p><br></p><h2 id="交互图的概念"><a href="#交互图的概念" class="headerlink" title="交互图的概念"></a>交互图的概念</h2><ul><li>交互图(interaction)：用来描述对象之间及对象与参与者之间的动态协作关系，以及协作过程中行为次序的图形文档。</li><li>交互图的类型：顺序图，协作图</li><li>交互图的作用：用于描述用例的行为，显示该用例中所涉及的对象和这些对象之间的消息传递情况。</li></ul><p><br></p><h2 id="顺序图的概念"><a href="#顺序图的概念" class="headerlink" title="顺序图的概念"></a>顺序图的概念</h2><p>顺序图(sequence diagram)：用来描述为了完成确定事务，对象之间按照时间进行消息交互的顺序关系。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/44fd133c-cf82-4e50-b4c1-2d4126130e57"></div><p><br></p><h3 id="对象及命名"><a href="#对象及命名" class="headerlink" title="对象及命名"></a>对象及命名</h3><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/dcebec81-338a-4b84-bc86-286028a69934"></div><p><br></p><h3 id="生命线"><a href="#生命线" class="headerlink" title="生命线"></a>生命线</h3><p>表示对象存在的时间，对象下面一条虚线表示。</p><div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/1218c18c-a33d-4931-9bb6-3dc3881a6ee1"></div><p><br></p><h3 id="控制焦点-Focus-of-Control-FOC"><a href="#控制焦点-Focus-of-Control-FOC" class="headerlink" title="控制焦点(Focus of Control, FOC)"></a>控制焦点(Focus of Control, FOC)</h3><p>小矩形，表示这个时间段内对象将执行操作。</p><div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/e3608001-2c7a-4d3d-8547-76ebaf4cac39"></div><h4 id="激活期"><a href="#激活期" class="headerlink" title="激活期"></a>激活期</h4><ul><li>休眠的对象收到一个消息时，开始活动，称为激活</li><li>激活的对象要么执行自己的代码，要么在等待另一个对象的返回</li><li>激活期外，对象处在休眠期，什么事都不做，但它仍然存在，等待消息的激活</li></ul><p><br></p><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>带箭头的连线，表示对象之间传输的信息。</p><div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/03e77649-5a65-485d-9736-8efcf04fc28b"></div><h4 id="消息解释"><a href="#消息解释" class="headerlink" title="消息解释"></a>消息解释</h4><p>对象之间传输的信息。消息有以下类型：</p><h5 id="调用消息（procedure-call）"><a href="#调用消息（procedure-call）" class="headerlink" title="调用消息（procedure call）"></a>调用消息（procedure call）</h5><ul><li>调用消息(也称为同步消息)的发送者把控制传递给接收者，然后停止活动，等到消息接收者放弃或返回控制。</li><li>调用消息必有一个与之配对的返回消息, 但是可以不用画出.<div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/b18ffe27-959b-4536-a77a-a822ed62c894"></div></li></ul><h4 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h4><p>异步消息的发送者通过消息把信号传递给接收者，然后继续自己活动，不等待接收者返回消息或控制。</p><div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/d8cae7ba-5bc8-44b9-9184-c15cff472bbf"></div><h4 id="返回消息"><a href="#返回消息" class="headerlink" title="返回消息"></a>返回消息</h4><p>返回消息表示从过程调用返回。如果是从过程调用返回，则返回消息是隐含的，可以不画出来。对于非过程调用，如果有返回消息，必须画出来。</p><div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/7a017d92-d130-4e08-838c-3fd1480d50dd"></div><h4 id="消息的语法格式"><a href="#消息的语法格式" class="headerlink" title="消息的语法格式"></a>消息的语法格式</h4><ul><li>display (x,y) 简单消息</li><li>p:= find (specs) 嵌套消息，消息带返回值、</li><li>[x&lt;0]5: invert (x,color) 条件消息</li><li>[i:=1..n]: update() 循环消息</li></ul><p><br></p><h3 id="建立顺序图"><a href="#建立顺序图" class="headerlink" title="建立顺序图"></a>建立顺序图</h3><ol><li>从用例中识别交互过程;</li><li>识别参与交互过程的对象;</li><li>为每一个对象设置生命线,并确定对象的存在期限;哪些对象存在于整个交互过程，哪些对象在交互过程中被创建和销毁。</li><li>从引发交互的初始消息开始,在对象生命线上依次画出交互的消息;</li></ol><p><br></p><h3 id="Use-Case：Register-New-Member"><a href="#Use-Case：Register-New-Member" class="headerlink" title="Use Case：Register New Member"></a>Use Case：Register New Member</h3><ol><li>The customer fills out an application form containing the customer’s name, address and phone number and gives this to the clerk.</li><li>The clerk issues a request to add a new member.</li><li>The system asks for data about the new member.</li><li>The clerk enters the data into the system.</li><li>Reads in data, and if the member can be added, generates an identification number for the member and remembers information about the member. Informs the clerk if the member was added and outputs the member’s name, address, phone and id.</li><li>The clerk gives the user his identification number.<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/f1dd2de3-4a28-4906-9519-18cc5cfb2a93"></div></li></ol><p><br></p><h3 id="Use-Case：Adding-New-Book"><a href="#Use-Case：Adding-New-Book" class="headerlink" title="Use Case：Adding New Book"></a>Use Case：Adding New Book</h3><ol><li>The library receives a shipment of books from the publisher</li><li>The clerk issues a request to add a new book.</li><li>The system asks for the identifier, title, and author name of the book.</li><li>The clerk generates the unique identifier, enters the identifier, title, and author name of a book.</li><li>The system attempts to enter the information in the catalog and informs the clerk about the result. It then asks if the clerk wants to enter information about another book.</li><li>The clerk answers in the affirmative or in the negative.</li><li>If the answer is in the affirmative, the system goes to Step 3. Otherwise, it exits.<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/de8f1a03-3d89-4561-ac11-2dc8c7cc99a5"></div></li></ol><p><br></p><h2 id="用例：借书"><a href="#用例：借书" class="headerlink" title="用例：借书"></a>用例：借书</h2><ul><li>参与者：图书管理员</li><li>事件流：<ol><li>管理员进入图书借阅界面，用例开始。</li><li>管理员输入借书证上的读者编号。</li><li>系统检验借书证合法性吗，如果正确,则显示借阅者(姓名、学院、年级等信息)及其以前所借图书的信息。<ul><li>A1：借书证编码有错。</li><li>A2: 如果该借阅者所借图书已经超期，则提示，本次拒借。</li></ul></li></ol></li></ul><ol><li>管理员输入图书条码。</li><li>系统显示所借图书的信息。</li><li>管理员确认借书，系统保存借书信息（包括时间，读者号，图书编号等）。</li><li>用例结束。<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/3dfa838f-e2f1-4d78-a647-7b4383c979db"></div></li></ol><p><br></p><h2 id="协作图"><a href="#协作图" class="headerlink" title="协作图"></a>协作图</h2><ul><li>协作图的概念：用来描述系统的行为是如何由系统的成分协作实现的图，各对象之间消息联系的结构关系。</li><li>协作图样式和元素：<div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/2dad903a-42b6-4e77-bc95-9cc096dad3ce"></div></li></ul><p><br></p><h3 id="建立协作图"><a href="#建立协作图" class="headerlink" title="建立协作图"></a>建立协作图</h3><ol><li>从用例中识别交互过程;</li><li>识别参与交互过程的对象;</li><li>确定对象之间的链，以及链上的消息;</li><li>从引发交互的初始消息开始,将随后每个消息附在相应的链上;</li></ol><p><br></p><h3 id="顺序图与协作图的异同"><a href="#顺序图与协作图的异同" class="headerlink" title="顺序图与协作图的异同"></a>顺序图与协作图的异同</h3><ul><li>顺序图和协作图都属于交互图,用来描述对象之间的动态关系。</li><li>顺序图强调消息的时间顺序，协作图强调参与交互的对象的组织关系。</li><li>顺序图和协作图在语义上是等价的，两者可以相互转换。</li></ul><h4 id="写出Class-A伪代码"><a href="#写出Class-A伪代码" class="headerlink" title="写出Class A伪代码"></a>写出Class A伪代码</h4><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/d7374209-4128-42e9-8c8b-7880722c6c2d"></div><div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/aec953e5-e6be-4ffd-be4b-118aab630af9"></div><p><br></p><h2 id="图书馆还书处理的交互图"><a href="#图书馆还书处理的交互图" class="headerlink" title="图书馆还书处理的交互图"></a>图书馆还书处理的交互图</h2><p>用例：还书<br>参与者：图书管理员<br>事件流：</p><ul><li>管理员进入图书借阅界面，用例开始。</li><li>系统要求输入读者编号及所还图书的条码。管理员输入相应信息。</li><li>系统显示所还图书的图书、读者信息、借书记录信息。</li><li>图书管理员确认还书（登记还书时间）。</li><li>用例结束。</li></ul><p><br></p><h3 id="识别交互过程"><a href="#识别交互过程" class="headerlink" title="识别交互过程"></a>识别交互过程</h3><p>读者在还书时，先由管理员把借书证上的读者编号及所借图书的图书编号扫描给系统，系统接收到这个信息，则显示这个该读者信息,以及这本书的信息、借书记录信息。<br>管理员确认还书,则系统登记还书信息，并返回还书成功信息，还书过程完成。</p><p><br></p><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/1079a5bf-215b-47c9-9a9e-9e297b4bf90d"></div><p><br></p><h2 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a>类的概念</h2><p>类的定义：类(class): 具有相似结构、行为和关系的一组对象。</p><div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/b2602ec5-4c04-4100-8ae9-0bf789e34844"></div>缩略表示：<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/9d44c341-252f-4ea1-8e90-852c39e90aee"></div><p><br></p><h2 id="类的版型"><a href="#类的版型" class="headerlink" title="类的版型"></a>类的版型</h2><h3 id="边界类"><a href="#边界类" class="headerlink" title="边界类"></a>边界类</h3><p>边界类位于系统与外界的交界处,承担系统与外界的信息交互功能。</p><div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/a1369b18-ae65-46e5-8e72-072d3e4b8d65"></div>边界类处在用例图中，参与者与用例的关联处，可以根据用例图发现边界类。<br>### 实体类 实体类对应着现实中的客观实物，用来保存信息，一般对应着数据表、文件等。实体类可以从现实中存在的客观事物，以及需要持久存放的信息两方面来发现。<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/6d49f898-0ca2-4b4c-a27f-1dcc0868c92e"></div><p><br></p><h3 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h3><p>控制类负责其他类工作的类，控制调控的作用。一个用例中最少会有一个控制类，用来控制用例中的事件顺序，也可以在多个用例之间共用。控制类较少接收消息，发出较多(控制)消息。</p><div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/82ea75bf-e3b7-4fde-9073-013e926578d3"></div><p><br></p><h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>模型元素之间的一种语义联系,它是对具有共同的结构特性、行为特性、关系和语义的链接（link，对象之间物理上或概念上的连接）的描述。<br>关联可以分为单向关联，双向关联。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/3d4e63b7-8cf4-4eb8-9faf-b6036d61e173"></div><h4 id="关联的特性"><a href="#关联的特性" class="headerlink" title="关联的特性"></a>关联的特性</h4><ul><li>关联名：用来描述关联的作用。<div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/3f6f6cce-5f8e-43c3-9da4-6369d7b34cb2"></div></li><li>关联的角色：关联的两端可以以某种角色参与关联。<div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/a7501ee8-ad29-468b-bdd0-e03939ddc937"></div></li><li>关联的多重性：表示可以有多少个对象参与该关联。<div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/ec5e269a-0070-4ec2-89e3-517f7b5e8dfd"></div></li><li>关联类：通过关联类描述关联的属性，操作，及其它信息。<ul><li>增加关联类的准则<ul><li>有某个属性与关联相关</li><li>关联类的实例具有依赖于关联的生命期</li><li>两个概念之间有多对多关联，并且存在与关联自身相关的信息<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/2cce2738-13ee-4bd1-b485-d0e02d1f514e"></div></li></ul></li></ul></li><li><h5 id="关联的约束"><a href="#关联的约束" class="headerlink" title="关联的约束"></a>关联的约束</h5>通过约束加强关联的含义。例如，“帐户”不能同时与“人”和“公司”有关联。<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/710c8603-c691-468d-897f-997cca232edf"></div></li><li>限定关联<br>通过限定符(qualifier)来规定关联的限定关系。<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/990e3feb-52ee-4237-b6c6-2504bc61b6fa"></div></li></ul><h4 id="关联的种类"><a href="#关联的种类" class="headerlink" title="关联的种类"></a>关联的种类</h4><ul><li>一元(自返)关联<div align="center"><img width="30%" src="http://blogfileqiniu.isjinhao.site/00a7f095-d2ed-40c9-a0f9-b6cb05026ddc"></div></li><li>二元关联<div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/b5bee245-2214-41fe-9436-8c692127ad61"></div></li><li>三元关联<br>三元关联是功能齐全的关联，可以有关联类。<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/981184d1-9ec5-4af3-b582-9840b8323744"></div></li><li>多元关联<br>编程语言不能表示多元关联，需要提升为一个类<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/cfd9b735-33e2-45f6-a7b4-a2895670d7ef"></div></li></ul><p><br></p><h3 id="聚集和组合"><a href="#聚集和组合" class="headerlink" title="聚集和组合"></a>聚集和组合</h3><h4 id="聚集"><a href="#聚集" class="headerlink" title="聚集"></a>聚集</h4><p>聚集(aggregation): 表示类之间一种松散的整体与部分的组成关系，是一种特殊的关联。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/52b676c6-d822-451d-a3a8-3d3910bf9667"></div><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>组合(composition)：表示类之间一种紧密的整体与部分的组成关系，也是一种特殊的关联。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/c8e753d1-6ff7-4623-8da7-86fe2b99b505"></div><h4 id="聚集与组合的区别"><a href="#聚集与组合的区别" class="headerlink" title="聚集与组合的区别"></a>聚集与组合的区别</h4><ul><li>聚集松散，组合紧密</li><li>一个部分事物对象可以属于多个聚集对象,但一个部分事物对象仅能属于一个组合对象</li><li>聚集的对象生命周期可以不同,但组合对象则是同存同亡。</li></ul><p><br></p><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>泛化(generalization)：表示事物之间的一般与特殊的关系；也可以称为继承关系。泛化关系除了表示类与类之间的关系之外，还可以表示参与者、用例、包、构件、接口等建模元素之间的关系。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/d2bb5d99-056d-4f22-962d-ea81f27ae88e"></div><p><br></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>依赖(dependency): 表示两个元素X、Y，如果X的变化必然导致Y的变化，则称Y依赖X。依赖关系不仅限于类，用例、包、构件之间都可以存在依赖关系。 如果类A和类B有关联关系，那么就有依赖关系。只表示出关联关系，不用表示出依赖关系。依赖关系本身不生成专门的实现代码。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/cb5630cf-1168-4638-99bf-def7445c6489"></div><p><br></p><h3 id="派生属性和派生关联"><a href="#派生属性和派生关联" class="headerlink" title="派生属性和派生关联"></a>派生属性和派生关联</h3><p>派生属性和派生关联的概念：可以从其它属性或关联计算推演得到的属性和关联。在派生的名字前面加/，以示区别。派生容易产生不一致，应注意。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/9d6cfebe-5b01-4d41-b4d8-b478bd728f84"></div><h4 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h4><p>抽象类：只有声明，没有具体实现，不能实例化；</p><div align="center"><img width="30%" src="http://blogfileqiniu.isjinhao.site/a47297b1-90c9-4653-a575-4f5e9263e978"></div>接口：不包含属性，只有方法声明<div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/974699e3-aebc-4d27-bed1-00e47e025d41"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/193d4968-ced5-40fa-8d22-09870301b816"></div><p><br></p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>类图(Class Diagram): 是由类，相关建模元素（接口、包），及其关系构成的图，用来描述类之间的静态关系。类图在系统中处在核心位置。也是UML中最为重要的一种图。<br>售票系统的类图：顾客可多次订票，但每一次订票只能由一个顾客来执行。有两种订票方式：个人票或套票；前者只是一张票，后者包括多张票。每一张票不是个人票就是套票中的一张，但是不能又是个人票又是套票中的一张。每场演出都有多张票可供预定，每张票对应一个唯一的座位号。每次演出用剧目名、日期和时间来标识。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/99113d71-c199-4db1-8a89-ec020dbfbbf1"></div><p><br></p><h3 id="类图的抽象层次"><a href="#类图的抽象层次" class="headerlink" title="类图的抽象层次"></a>类图的抽象层次</h3><p>在系统的不同开发阶段，类图可以具有不同的抽象程度。随着开发的深入，类图应该越来越详细、具体。可以分为：概念层，说明层，实现层。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/f02073a2-5a8a-4a7b-a6de-96f65bd8fde3"></div><p><br></p><h3 id="构造类图"><a href="#构造类图" class="headerlink" title="构造类图"></a>构造类图</h3><h4 id="寻找类的方法"><a href="#寻找类的方法" class="headerlink" title="寻找类的方法"></a>寻找类的方法</h4><ul><li>根据用例描述中的名词确定候选类。</li><li>根据边界类、控制类和实体类的划分来帮助发现类。</li><li>参考设计模式来确定类。</li><li>根据软件开发过程的指导寻找类。</li></ul><h4 id="构造类图时注意"><a href="#构造类图时注意" class="headerlink" title="构造类图时注意"></a>构造类图时注意</h4><ul><li>不要试图使用所有的符号，20％的建模元素能满足80％的建模需求。</li><li>不要过早陷入细节, 根据不同阶段，采用不同层次类图，逐步细化。</li><li>构造完成要将模型与目标问题对照验证其是否合理，是否反应了应用领域的实际情况。</li></ul><p><br></p><h2 id="对象图"><a href="#对象图" class="headerlink" title="对象图"></a>对象图</h2><blockquote><p>对象图的概念<br>对象图表示一组对象及其它们之间的联系。对象是系统的详细状态在某一时刻的快照，通常用来表示复杂类图的一个实例。<br>说明</p><ul><li>对象图并不在任何时间都是必须的；</li><li>Rose2003不支持对象图。</li></ul></blockquote><p><br></p><h2 id="类的关系具有四种"><a href="#类的关系具有四种" class="headerlink" title="类的关系具有四种"></a>类的关系具有四种</h2><ul><li>关联：表示类中对象之间的链接关系</li><li>组成：表示事物之间的整体和部分关系，（聚合，组合）</li><li>泛化：表示事物的一般和特殊关系</li><li>依赖：事物之间的因果关系</li></ul><p><br></p><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><p>状态图(state chart diagram)：用来描述一个特定的对象所有可能的状态，以及由于各种事件的发生而引起的状态之间的转移和变化。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/0f504ee2-c443-40c0-9e63-13a5b5a037d8"></div><p><br></p><h2 id="状态图的要素——-状态"><a href="#状态图的要素——-状态" class="headerlink" title="状态图的要素——-状态"></a>状态图的要素——-状态</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>是指对象在其生命周期中，满足某些条件、执行某些活动、或等待某些事件时的一个状况（时间段）。</p><p><br></p><h3 id="状态的表示和要素"><a href="#状态的表示和要素" class="headerlink" title="状态的表示和要素"></a>状态的表示和要素</h3><ul><li>状态的表示：用圆角的矩形框表示状态。</li><li>状态的要素：包括状态名，进入/退出动作、内部转移，子状态等。<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/5c19ac38-944d-476c-9e5e-0634b16741f4"></div>eg:<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/a83656f7-5983-4461-a15d-031bea1554c7"></div></li></ul><p><br></p><h3 id="状态的类型"><a href="#状态的类型" class="headerlink" title="状态的类型"></a>状态的类型</h3><p>初态、终态、中间状态、组合状态、历史状态等。一个状态图只能有一个初态，但是结束状态可能有多个，也可以没有终态。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/6b587e8c-3e5e-4677-9135-8f8bc929f38d"></div><h4 id="组合状态和子状态"><a href="#组合状态和子状态" class="headerlink" title="组合状态和子状态"></a>组合状态和子状态</h4><p>嵌套在另一个状态中的状态称为子状态;包含子状态的状态称为组合状态.</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/f49b43a5-d39e-4b5b-bbd0-900b95dfc4cd"></div><h4 id="历史状态"><a href="#历史状态" class="headerlink" title="历史状态"></a>历史状态</h4><p>历史状态是伪状态, 其目的是记住从组合状态中退出时所处的子状态, 当再次进入组合状态时, 可以直接进入这个子状态, 而不是再从组合状态的初态开始.</p><ul><li>浅(shallow)历史状态，只记住最外层组合状态的历史<div align="center"><img width="5%" src="http://blogfileqiniu.isjinhao.site/a8e2e949-d6cc-4f20-8280-372ccc61948b"></div></li><li>深(deep)历史状态, 可以记住任意深度的组合状态的历史.<div align="center"><img width="5%" src="http://blogfileqiniu.isjinhao.site/b6a3f76a-fd72-421b-8efb-fcd736a0da99"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/55d2e9e0-e58f-4ccd-a858-39379e088e65"></div></li></ul><p><br></p><h2 id="状态图的要素——-转移"><a href="#状态图的要素——-转移" class="headerlink" title="状态图的要素——-转移"></a>状态图的要素——-转移</h2><p>转移(transition): 是一个状态向另外一个状态的转换（瞬时变化）。转移是两种状态之间的一种关系，表示对象将在第一个状态执行一定的动作，并在某个特定事件发生且满足某个特定的警戒条件时进入第二个状态。<br>转移的格式：<code>event-name [‘(‘parameters’)’] [‘[’guard-condition’]’] [’/’action]</code></p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/7d7a1b70-977a-45bb-96f9-7c1621e5e624"></div>对于一个给定的状态，最终只能产生一个转移，因此从一个状态出发的几个转移之间应该是互斥的，包括：事件不同；事件相同但警戒条件互斥。<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/d4694010-f4b8-42c5-9027-0aec5d1694e6"></div><p><br></p><h2 id="状态图的要素——-事-件"><a href="#状态图的要素——-事-件" class="headerlink" title="状态图的要素——-事 件"></a>状态图的要素——-事 件</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>事件(event)：是指在确定的时间和位置所发生的对于对象起作用的事情。事件的发生将引起一些动作，使对象发生状态的转移。<br>动作（action）：动作是对象类中一个操作的执行，动作具有原子性和不可中断特性。</p><p><br></p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>事件名称[参数表]</p><ul><li>字符串，常为接收对象类中的一个操作。</li><li>事件的形式参数，可以省略</li></ul><p><br></p><h3 id="事件的类型"><a href="#事件的类型" class="headerlink" title="事件的类型"></a>事件的类型</h3><ul><li>调用事件(call event)：是表示对操作的调用<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/35b252fb-9359-4062-913a-f20683b4ec6b"></div></li><li>变化事件(change event)：因满足某种条件（参量变化）而引起的事件，变化条件用when表示。(由满足布尔表达式而引起的事件，不断测试表达式，直到表达式为真)<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/41353616-2dc5-496f-a588-45a3076dc6f5"></div></li><li>时间事件：满足某一时间表达式而引起的事件,时间事件用after,when表示。<div align="center"><img width="70%" src="http://blogfileqiniu.isjinhao.site/c35be1af-34cc-4e83-99b9-2551ba3ad55d"></div></li></ul><p><br></p><h2 id="状态图的作用"><a href="#状态图的作用" class="headerlink" title="状态图的作用"></a>状态图的作用</h2><p>用来描述一个对象在其生命周期中所表现出来的状态和行为。当在系统建模过程中需要描述某个事物或对象的不同状态，以及状态之间转移的事件和动作时，用状态图。 但状态图并不是对每一个对象都需要的。</p><p><br></p><h2 id="如何绘制状态图"><a href="#如何绘制状态图" class="headerlink" title="如何绘制状态图"></a>如何绘制状态图</h2><ol><li>选择对象与视点</li><li>寻找主要的状态</li><li>确定状态之间的转移（换）</li><li>细化状态内的活动与转换</li><li>用组合状态来展开细节</li></ol><p><br></p><h2 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h2><p>活动图(activity diagram)是UML的动态视图之一，用来描述系统的工作流程和并发行为。活动图是状态图的一个变体，活动图中一个活动结束后将立即进入下一个活动（不需要事件的触发）。</p><p><br></p><h3 id="使用活动图"><a href="#使用活动图" class="headerlink" title="使用活动图"></a>使用活动图</h3><ul><li>活动图的用途是对人类组织的现实世界中的工作流程建模。</li><li>也可以对具体操作建模，用于描述计算过程的细节。</li><li>活动图有助于理解系统高层活动的执行行为，而不涉及建立交互图所必须的消息传送细节。</li><li>软件公司可以用活动图对一个软件的开发过程建模；</li><li>会计师事务所可以用活动图对任意数目的财务往来进行建模；</li><li>贸易公司可以用活动图对订单批准过程进行建模；</li><li>科研人员还可以对诸如求Fibonacci数列第n个数的数值之类的操作进行建模。</li></ul><p><br></p><h2 id="活动图的要素"><a href="#活动图的要素" class="headerlink" title="活动图的要素"></a>活动图的要素</h2><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h3><p>是活动图主要结点,用两边为弧的条形框表示,中间填活动名 。</p><div align="center"><img width="40%" src="http://blogfileqiniu.isjinhao.site/20e2529a-987a-4c93-aea2-c71d9c0226a8"></div><p><br></p><h3 id="活动流（控制流）"><a href="#活动流（控制流）" class="headerlink" title="活动流（控制流）"></a>活动流（控制流）</h3><p>描述活动之间的有向关系，反映一个活动向另外一个活动之间的转移。用带箭头的实线表示。</p><div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/865bf7eb-340a-487f-a653-94d3a103b30e"></div><p><br></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>表示从一个活动按照某种条件转移到几个不同的活动。</p><div align="center"><img width="60%" src="http://blogfileqiniu.isjinhao.site/a6f08d0b-8038-4ed7-9048-6cfbc46d4c8a"></div><p><br></p><h3 id="分叉和汇合"><a href="#分叉和汇合" class="headerlink" title="分叉和汇合"></a>分叉和汇合</h3><p>表示并发的同步行为，用同步杆表示。分叉表示一个控制流被多个控制流替代，替代后的控制流是并发的。汇合与分叉含义相反。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/2b9dd6df-9fda-4438-b74a-448bc145d6c9"></div><p><br></p><h3 id="泳道"><a href="#泳道" class="headerlink" title="泳道"></a>泳道</h3><p>是活动图中的区域划分，每一个泳道代表一个责任区域。一个泳道中包括一组相关活动。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/aa7c4738-43bb-40e2-93a3-adf1f13cd0b1"></div><p><br></p><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>反映活动与对象之间的依赖关系，表示对象对活动的作用或活动对对象的影响，用依赖关系表示。</p><div align="center"><img width="90%" src="http://blogfileqiniu.isjinhao.site/52d09a2e-5552-4125-b467-4a561d2a8974"></div><p><br></p><h2 id="活动图的用途"><a href="#活动图的用途" class="headerlink" title="活动图的用途"></a>活动图的用途</h2><p>活动图具有广泛地用途,在软件建模中,活动图可以用来：</p><ul><li>描述工作流：也被称为业务流程，通常对于涉及众多参与者的非常复杂的业务流程建模，简单的业务流程，用例文本就够用了。总之，分析理解用例。<ul><li>用户下订单后，填写收货信息，选择支付方式，如果用户想要取消订单或订单超过了时限则该订单取消，否则系统处理付款，生成送货单，然后由供应商发货，修改订单项状态，然后等所有的订单项全都送货完毕，这样一笔订单就完成了。</li><li><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/18a6b5c5-6111-4c9c-8af6-80844441cc0b"></div></li></ul></li><li>描述算法流程<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/88127b3a-2655-4520-9063-a9aed47f02bd"></div></li></ul><p><br></p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>绘制一张活动图，描述登录电子邮件系统的细节。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/5248d04e-6a83-45dc-963e-f0ed07cde208"></div><p><br></p><h2 id="状态图与活动图的比较"><a href="#状态图与活动图的比较" class="headerlink" title="状态图与活动图的比较"></a>状态图与活动图的比较</h2><ul><li>都是对系统的动态行为建模</li><li>描述对象不同<ul><li>状态图：描述对象状态及状态之间的转移；</li><li>活动图：描述从活动到活动的控制流。</li></ul></li><li>使用场合不同<ul><li>状态图：描述对象在其生命期中的行为状态变化；状态图中的动作和事件对应类模型中对象上的操作。</li><li>活动图：描述工作流程的过程变化。分析用例、理解涉及多个用例的工作流程等。</li></ul></li></ul><p><br></p><h2 id="OOAD"><a href="#OOAD" class="headerlink" title="OOAD"></a>OOAD</h2><h3 id="What-is-Analysis"><a href="#What-is-Analysis" class="headerlink" title="What is Analysis ?"></a>What is Analysis ?</h3><p>Analysis is investigation of the problem and requirements, rather than a solution.</p><ul><li>For example, if a new online trading system is desired,<ul><li>how will it be used? What are its functions?</li></ul></li><li>requirements analysis ：an investigation of the requirements</li></ul><p><br></p><h3 id="What-is-design"><a href="#What-is-design" class="headerlink" title="What is design?"></a>What is design?</h3><p>Design is a conceptual solution that fulfills the requirements 概念性的、满足 需求的解决方案</p><blockquote><p>Design is a conceptual solution that fulfills the requirements。</p></blockquote><p><br></p><h3 id="What-is-OOA"><a href="#What-is-OOA" class="headerlink" title="What is OOA"></a>What is OOA</h3><p>finding and describing the objects or concepts in the problem domain</p><p><br></p><h3 id="What-is-OOD"><a href="#What-is-OOD" class="headerlink" title="What is OOD"></a>What is OOD</h3><p>defining software objects and how they collaborate to fulfill the requirements<br>For example, Airplane example of object and class discovery</p><blockquote><p>OOA<br>in the case of the flight information system, some of the concepts include：Plane, Flight, and Pilot.<br>OOD<br>a Plane software object may have a tailNumber attribute and a getFlightHistory() method.</p></blockquote><p><br></p><h2 id="OOAD-Simple-Example"><a href="#OOAD-Simple-Example" class="headerlink" title="OOAD Simple Example"></a>OOAD Simple Example</h2><h3 id="Rudimentary（最基本的过程）-process"><a href="#Rudimentary（最基本的过程）-process" class="headerlink" title="Rudimentary（最基本的过程） process"></a>Rudimentary（最基本的过程） process</h3><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/9ff79ec8-cb8c-476b-8319-fa9add23b245"></div><p><br></p><h3 id="Dice-game-example"><a href="#Dice-game-example" class="headerlink" title="Dice game example"></a>Dice game example</h3><h4 id="Step1-Use-Case"><a href="#Step1-Use-Case" class="headerlink" title="Step1: Use Case"></a>Step1: Use Case</h4><ul><li>Player is requested to roll the dice.</li><li>System presents results:</li><li>If the dice face value totals (&gt;=)seven, player wins; otherwise, player loses</li></ul><h4 id="Step2-Domain-Model"><a href="#Step2-Domain-Model" class="headerlink" title="Step2: Domain Model"></a>Step2: Domain Model</h4><ul><li>OOA的结果体现在领域模型中，显示重要的领域概念或者对象</li><li>What is domain model?<ul><li>a visual representation of conceptual classes or real-situation(真实) objects in a domain.</li><li>Domain models have also been called conceptual models , domain object models, and analysis object models.</li></ul></li><li>有哪些概念类呢？<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/944970fe-64e1-4648-b666-7981bd3d2f20"></div></li></ul><h4 id="Step3-Interactions"><a href="#Step3-Interactions" class="headerlink" title="Step3: Interactions"></a>Step3: Interactions</h4><ul><li>Assignment of responsibilities among objects</li><li>Sequence or Communication diagrams<br>在现实里，是Player扔的骰子。在软件设计中，由DiceGame 对 象 扔 骰 子dice (给Dice 对象发送一个消息)。 软件设计需要从真实世界的事物中获取一些灵感、启发，但是，不能完全模仿真实世界。<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/cf12bdf8-ad53-4dbf-bfa5-a74a598fdc55"></div></li></ul><h4 id="Step4-Design-Class-Diagrams-DCD"><a href="#Step4-Design-Class-Diagrams-DCD" class="headerlink" title="Step4: Design Class Diagrams (DCD)"></a>Step4: Design Class Diagrams (DCD)</h4><ul><li>Software classes（软件类） with methods according to responsibilities and attributes according to visibility<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/ab67046e-aefb-4996-9d05-a5824b63ad03"></div></li><li>the domain model showing real-world classes</li><li>this diagram shows software classes</li></ul><p><br></p><h2 id="Object-Oriented-Analysis"><a href="#Object-Oriented-Analysis" class="headerlink" title="Object Oriented Analysis"></a>Object Oriented Analysis</h2><ul><li>Identifying objects 识别对象</li><li>Organising the objects: 组织对象<ul><li>classifying the objects identified, so similar objects can later be defined in the same class.</li></ul></li><li>Identifying relationships between objects: 定义对象之间的关系<ul><li>this helps to determine inputs and outputs of an object.</li></ul></li><li>Defining operations of the objects: 定义对象的操作<ul><li>the way of processing data within an object.</li><li>Also known as ‘responsibility assignment’</li><li>这一步，主要在设计阶段完成</li></ul></li><li>Defining objects internally: 定义对象内部细节<ul><li>information held within the objects.</li></ul></li></ul><p><br></p><h2 id="名词法定义概念"><a href="#名词法定义概念" class="headerlink" title="名词法定义概念"></a>名词法定义概念</h2><h3 id="名词法定义概念类"><a href="#名词法定义概念类" class="headerlink" title="名词法定义概念类"></a>名词法定义概念类</h3><p>The system controls a recycling machine for returnable bottles, cans and crates. The machine can be used by several customers at the same time and each customer can return all three types of item on the same occasion. The system has to check, for each item, what type has been returned.<br>The system will register how many items each customer returns and when the customer asks for a receipt, the system will print out what was deposited , the value of the returned items and the total return sum that will be paid to the customer.</p><ul><li>recycling machine</li><li>bottles, cans, and crates</li><li>machine</li><li>customers, customer</li><li>types of item, item, type, returned items</li><li>system</li><li>receipt(收据)</li><li>return sum<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/44d90c1f-2517-48fa-a841-649285344e44"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/a11292e8-2164-4937-a6ba-d946dedc30bf"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/65917b79-3294-4ecd-836a-2c4024d0a6a6"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/9e6f74ad-8ac6-4dd1-b96a-df6085c9544a"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/d4fc5d70-081f-4cd3-87f0-2e91dcbcce05"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/8e803249-243b-4533-bfd4-f615c265bec0"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/c2863c1d-5a35-42a7-9e60-77e26ff00642"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/61fe5c2c-79ce-4f3a-847a-a8839af35eb7"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/dc1d5a03-db66-48d9-8b8b-5a01effd1d61"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/958e1b1b-6799-46d6-b7dc-ac4d3752df39"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/8b65f115-044d-4547-bdcf-a9f3bedf7680"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/34539b1b-1084-43fc-89f5-8ecd35218d7e"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/8e9e88e6-9cea-4336-8857-6a412cac9700"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/8ab9b4c5-5996-45ee-b204-fc073e78d755"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/aaa863d3-782c-43ea-ad7e-3ee33c6d0e28"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/de422330-ed3c-41e4-84e3-fad1c9e1e36f"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/52d9ddac-d34b-48ea-8b21-a0352a9da32e"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/330edc3e-665d-40bb-8007-bafc7cbe74b8"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/d1ccf2e9-2f9f-4734-a54a-df0a27441773"></div></li></ul><p><br></p><h2 id="分析模型法"><a href="#分析模型法" class="headerlink" title="分析模型法"></a>分析模型法</h2><ul><li>用于描述系统规格说明</li><li>一个健壮、稳定的模型，必须与实现环境无关</li><li>实现环境的任何变化，不会影响到系统的逻辑结构</li><li>分析模型能够关注到系统的信息、行为、展示（输入/出）等特性<br>特性：Behaviour - Information - Presentation<br>The model is defined in information - behaviour - presentationspace.</li></ul><p><br></p><h2 id="分析模型的语义"><a href="#分析模型的语义" class="headerlink" title="分析模型的语义"></a>分析模型的语义</h2><ul><li>An entity object models information that shows the state of a system. This information is often used to record the effects of operations and therefore is related to the behaviors of the system.</li><li>A boundary/interface object models inputs and outputs and operations that process them.</li><li>A control object models functionality/operations regarding to validate and decide whether to process and pass information from the interface object to the entity object or the way around.</li></ul><p><br></p><h2 id="分析模型的使用"><a href="#分析模型的使用" class="headerlink" title="分析模型的使用"></a>分析模型的使用</h2><h3 id="Identifying-interface-objects"><a href="#Identifying-interface-objects" class="headerlink" title="Identifying interface objects"></a>Identifying interface objects</h3><ul><li>functions directly related to actors</li></ul><p><br></p><h3 id="Identifying-entity-objects"><a href="#Identifying-entity-objects" class="headerlink" title="Identifying entity objects"></a>Identifying entity objects</h3><ul><li>information used in an use case and functions of processing the information</li></ul><p><br></p><h3 id="Identifying-control-objects"><a href="#Identifying-control-objects" class="headerlink" title="Identifying control objects"></a>Identifying control objects</h3><ul><li>functions that link interface objects and entity objects</li></ul><p><br></p><h2 id="1-4-分析模型案例：废品回收机"><a href="#1-4-分析模型案例：废品回收机" class="headerlink" title="1.4 分析模型案例：废品回收机"></a>1.4 分析模型案例：废品回收机</h2><ul><li>Identifying interface objects：Printer Customer Panel</li><li>Identifying entity objects<ul><li>Crate, Bottle, Can</li><li>Deposit item</li><li>Receipt basis</li></ul></li><li>Identifying control objects<ul><li>Deposit item receiver<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/771419d5-da9f-4aa4-b984-cd319c62a781"></div></li></ul></li></ul><p><br></p><h2 id="CRC"><a href="#CRC" class="headerlink" title="CRC"></a>CRC</h2><ul><li>Classes (of objects) 类</li><li>Responsibilities (of the objects in each class) 职责</li><li>Collaborations (with objects in other classes) 协作<ul><li>In UML, these will be examples of “associations”<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/92767174-0bfa-4f12-87fb-d450c6c250b0"></div></li></ul></li></ul><p><br></p><h2 id="Domain-Models"><a href="#Domain-Models" class="headerlink" title="Domain Models"></a>Domain Models</h2><p>A domain model is a representation of real-world conceptual classes</p><ul><li>not a representation of software components.</li><li>not a set of diagrams describing software classes,</li><li>not software objects with responsibilities.<br>A domain model is a visual representation of conceptual classes or real-world objects in a domain of interest</li><li>They have also been called conceptual models, domain object models, and analysis object models.</li></ul><p><br></p><h2 id="Domain-Modeling-Guidelines"><a href="#Domain-Modeling-Guidelines" class="headerlink" title="Domain Modeling Guidelines"></a>Domain Modeling Guidelines</h2><ul><li>A Common Mistake in Identifying Conceptual Classes<ul><li>Perhaps the most common mistake when creating a domain model is to represent something as an attribute when it should have been a concept.</li><li>A rule of thumb (经验法则)to help prevent this mistake is:<ul><li>If we do not think of some conceptual class X as a number or text in the real world, X is probably a conceptual class, not an attribute.</li></ul></li></ul></li><li>As an example, should store be an attribute of Sale, or a separate conceptual class Store?<ul><li>In the real world, a store is not considered a number or text - the term suggests a legal entity, an organization, and something occupies space. Therefore, Store should be a concept.</li></ul></li><li>As another example, consider the domain of airline reservations. Should destination be an attribute of Flight, or a separate conceptual class Airport?<ul><li>In the real world, a destination airport is not considered a number or text—it is a massive thing that occupies space. Therefore, Airport should be a concept.</li></ul></li></ul><p><br></p><h2 id="What-are-System-Sequence-Diagrams"><a href="#What-are-System-Sequence-Diagrams" class="headerlink" title="What are System Sequence Diagrams?"></a>What are System Sequence Diagrams?</h2><ul><li>A system sequence diagram (SSD) is a picture that shows, for a particular scenario of a use case, the events that external actors generate, their order and inter-system （与系统交互）events</li><li>All systems are treated as a black box; the emphasis of the diagram is events that cross the system boundary from actors to systems</li></ul><p><br></p><h3 id="Guideline"><a href="#Guideline" class="headerlink" title="Guideline"></a>Guideline</h3><ul><li>Draw an SSD for a main success scenario of each use case, and frequent or complex.</li><li>alternative scenarios</li></ul><p><br></p><h3 id="The-Relationship-between-SSDs-and-Use-Cases"><a href="#The-Relationship-between-SSDs-and-Use-Cases" class="headerlink" title="The Relationship between SSDs and Use Cases?"></a>The Relationship between SSDs and Use Cases?</h3><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/bd04dd42-154e-40c4-91f4-75d419b34dcb"></div><p><br></p><h2 id="Why-draw-SSD"><a href="#Why-draw-SSD" class="headerlink" title="Why draw SSD?"></a>Why draw SSD?</h2><ul><li>Basically, a software system reacts to three things:<ul><li>external events from actors (humans or computers),</li><li>timer events,</li><li>faults or exceptions (which are often from external sources).</li></ul></li><li>It is useful to know what, precisely, are the external input events—- the system events. They are an important part of analyzing system behavior</li><li>Before proceeding to a detailed design of how a software application will work, it is useful to investigate and define its behavior as a “black box.“</li><li>System behavior is a description of what a system does, without explaining how it does it.<ul><li>One part of that description is a system sequence diagram(SSD)</li><li>Other parts include the use cases and system operation contracts</li></ul></li></ul><p><br></p><h2 id="What-is-Contract-契约"><a href="#What-is-Contract-契约" class="headerlink" title="What is Contract?(契约)"></a>What is Contract?(契约)</h2><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/b9f69ffe-c924-485e-b36e-d63be7b36cc8"></div><p><br></p><h2 id="Example-enterItem"><a href="#Example-enterItem" class="headerlink" title="Example : enterItem"></a>Example : enterItem</h2><ul><li>Operation: enterItem(itemID:ItemID,quantity:integer)</li><li>Cross References: Process Sale</li><li>Preconditions: There is a sale underway</li><li>Postconditions:<ul><li>A SalesLineItem instance sli was created(instance creation)</li><li>sli was associated with current Sale(association formed)</li><li>sli.quantity became quantity(attribute modification)</li><li>Sli was associated with a ProductDescription, based on itemID match (association formed)</li></ul></li></ul><p><br></p><h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/a37bd89b-f94d-4496-915f-b9603277c61e"></div>- 可以做到关注分离（separation of concerns），减少耦合和依赖性，增强内聚性 - 封装和分解了相关的复杂性 - 某些层可以被替换（例如UI层） - 较低层可以被复用 - 通过逻辑划分，有助于团队开发<br>## Designing Objects(对象设计) - Static modeling (Design Class Diagram, Package) - Dynamic modeling (Sequence and Communication Diagram) - Principles of responsibility assignment - Design Pattern<br>## GRASP General Responsibility Assignment software patterns. - Doing responsibilities of an object include: - doing something itself, such as creating an object or doing a calculation - initiating action in other objects - controlling and coordinating activities in other objects - Knowing responsibilities of an object include: - knowing about private encapsulated data - knowing about related objects - knowing about things it can derive or calculate For example - "a Sale is responsible for creating SalesLineItems" (a doing), - "a Sale is responsible for knowing its total" (a knowing).<div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/e7e85f82-5112-4526-ac4b-fdc71f0e43f1"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/79592bd8-b6ff-4ab7-8e39-4b07c4ba405f"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/69b39c83-1423-4b93-ac37-fd7c74c94371"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/3947a146-ded9-4dc1-bd32-b18a3f6fdfdb"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/a05afc15-31c0-48c1-85c1-dc7f1180737e"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/9a81b31c-9c16-44de-bb8b-20941ea0bfd1"></div><p><br></p><h2 id="GRASP"><a href="#GRASP" class="headerlink" title="GRASP"></a>GRASP</h2><h3 id="GRASP-Creator"><a href="#GRASP-Creator" class="headerlink" title="GRASP  - Creator"></a>GRASP - Creator</h3><h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem:"></a>Problem:</h4><p>Who creates an A?</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Assign class B the responsibility to create an instance of class A if one of these is true (the more the better):</p><ul><li>B “contains” or compositely aggregates A.</li><li>B records A.</li><li>B closely uses A.</li><li>B has the initializing data for A.</li></ul><p><br></p><h3 id="GRASP-Information-Expert"><a href="#GRASP-Information-Expert" class="headerlink" title="GRASP  - Information Expert"></a>GRASP - Information Expert</h3><p><br></p><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem:"></a>Problem:</h3><p>What is a basic principle by which to assign responsibilities to objects?</p><p><br></p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Assign a responsibility to the class that has the information needed to fulfill it.</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/825aa3db-0b4e-4a21-ac0c-8b380d5a5de3"></div><p><br></p><h3 id="GRASP-Low-Coupling"><a href="#GRASP-Low-Coupling" class="headerlink" title="GRASP  - Low Coupling"></a>GRASP - Low Coupling</h3><h4 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem:"></a>Problem:</h4><p>How to reduce the impact of change?</p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ul><li>Assign responsibilities so that (unnecessary) coupling remains low.</li><li>Use this principle to evaluate alternatives.</li></ul><h4 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h4><ul><li>What is Coupling ？</li><li>面向对象语言中，TypeX到TypeY耦合的常见形式？</li></ul><p><br></p><h3 id="GRASP-Controller"><a href="#GRASP-Controller" class="headerlink" title="GRASP  - Controller"></a>GRASP - Controller</h3><p><br></p><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem:"></a>Problem:</h3><p>What first object beyond the UI layer receives and coordinates (“controls”) a system operation?</p><p><br></p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>Assign the responsibility to an object representing one of these choices:</p><ul><li>Represents the overall “system,” a “root object,” a device that the software is running within, or a major subsystem (these are all variations of a facade controller). 外观控制器</li><li>Represents a use case scenario within which the system operation occurs (a use case or session controller)，<usecasename>Handler. 会话控制器</usecasename></li></ul><p><br></p><h3 id="GRASP-High-Cohesion"><a href="#GRASP-High-Cohesion" class="headerlink" title="GRASP  - High Cohesion"></a>GRASP - High Cohesion</h3><h4 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem:"></a>Problem:</h4><p>How to keep objects focused, understandable, and manageable, and as a side effect, support Low Coupling?</p><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><p>Assign responsibilities so that cohesion remains high.<br>Use this to evaluate alternatives.</p><p><br></p><h2 id="OO设计的原则"><a href="#OO设计的原则" class="headerlink" title="OO设计的原则"></a>OO设计的原则</h2><ul><li>开闭原则(Open/Closed Principle, OCP)</li><li>Liskov替换原则(Liskov Substitution Principle, LSP)</li><li>依赖倒置原则(Dependency Inversion Principle, DSP)</li><li>接口分离原则(Interface Segregation Principle, ISP)</li></ul><p><br></p><h2 id="GoF设计模式的分类"><a href="#GoF设计模式的分类" class="headerlink" title="GoF设计模式的分类"></a>GoF设计模式的分类</h2><p>创建型：抽象了创建对象的过程，使得系统不依赖于系统中的对象是如何创建、组合和表示的。例如：Factory method, Singleton.<br>结构型：描述如何组合类和对象。例如：Adapter，Façade<br>行为型：描述算法和对象间职责的分配。主要考虑对象之间的通信方式。例如：Iterator, Visitor</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;object&quot;&gt;&lt;a href=&quot;#object&quot; class=&quot;headerlink&quot; title=&quot;obje
      
    
    </summary>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/categories/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="UML" scheme="https://isjinhao.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>软件工程和项目管理</title>
    <link href="https://isjinhao.github.io/posts/64809.html/"/>
    <id>https://isjinhao.github.io/posts/64809.html/</id>
    <published>2019-12-17T02:48:41.000Z</published>
    <updated>2019-12-17T15:07:27.031Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --><p><br></p><h2 id="软件危机"><a href="#软件危机" class="headerlink" title="软件危机"></a>软件危机</h2><p>软件危机指在计算机软件的开发和维护过程中，所遇到的一系列严重问题。软件危机主要包括的问题：</p><ul><li>如何开发软件</li><li>如何维护软件<br>软件危机的典型表现：</li><li>发费用和进度难以估算和控制，大大超过预期的资金和规定日期</li><li>软件需求分析不够充分，用户不满意“已经完成”的软件系统。</li><li>软件质量难于保证</li><li>软件维护困难<ul><li>难以改正程序中的错误</li><li>难以根据用户的需要在原有程序中增加一些新的功能。</li></ul></li><li>通常没有保留适当的文档资料。文档的作用：<ul><li>软件开发管理人员：用于管理和评价软件开发工程的进展状况</li><li>软件开发人员：用于开发人员对各个阶段的工作都进行周密思考、全盘权衡、从而减少返工。并且可在开发早期发现错误和不一致性，便于及时加以纠正</li><li>软件维护人员：软件维护的依据</li></ul></li><li>开发成本逐年上升，软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势。</li></ul><p><br></p><h3 id="产生软件危机的原因"><a href="#产生软件危机的原因" class="headerlink" title="产生软件危机的原因"></a>产生软件危机的原因</h3><h4 id="软件本身的特点"><a href="#软件本身的特点" class="headerlink" title="软件本身的特点"></a>软件本身的特点</h4><ul><li>软件与硬件不同<ul><li>抽象性。软件生产没有明显的制造过程，难以衡量开发进展，也难以控制软件质量。</li><li>问题的隐蔽性。没有硬件的磨损、老化问题，但存在开发早期在分析、设计阶段的错误，修改难度较大。</li></ul></li><li>软件与一般程序不同<ul><li>软件远比一般程序规模庞大，复杂性高。而复杂性包括实际问题的复杂性和程序逻辑结构的复杂性。</li><li>大型软件开发既有技术问题，还有社会问题。如：开发团队成员分工合作、技术与管理的矛盾、软件开发人员对软件应用的领域知识的了解。包括的社会因素有：组织机构、体制、管理方式、观念、人的心理素质等。</li></ul></li></ul><h4 id="软件开发与维护的方法不正确"><a href="#软件开发与维护的方法不正确" class="headerlink" title="软件开发与维护的方法不正确"></a>软件开发与维护的方法不正确</h4><ul><li>对用户需求的获取不正确<ul><li>用户的原因</li><li>分析人员的原因，对分析人员的要求：沟通能力、归纳总结能力、经验。</li></ul></li><li>软件开发不是编写程序。<ul><li>一个完整的软件产品由一整套完整的配置组成，程序只是其中的一个组成部分。</li><li>软件开发过程包括多个阶段，每个阶段的产品都是最终的完整的软件产品的一部分。</li></ul></li><li>软件开发只要依靠个别编程高手就能完成。</li><li>轻视软件维护。软件维护约占软件费用55%-75%，包括修改软件运行的错误；对软件进行改进和功能扩充。</li></ul><h4 id="其他产生软件危机的原因"><a href="#其他产生软件危机的原因" class="headerlink" title="其他产生软件危机的原因"></a>其他产生软件危机的原因</h4><ul><li>软件开发尚未完全摆脱手工艺的开发方式。</li><li>软件成本相当昂贵，主要依靠大量复杂的、高强度的脑力劳动。</li><li>软件的开发和运行常常受到计算机系统的限制，对计算机系统有着不同程度的依赖性。</li></ul><p><br></p><h2 id="软件的本质特性"><a href="#软件的本质特性" class="headerlink" title="软件的本质特性"></a>软件的本质特性</h2><ul><li>复杂性</li><li>一致性<ul><li>软件不能独立存在，需要依附于一定的环境（如硬件、网络以及其他软件）</li><li>软件必须遵从认为的惯例并适应已有的技术和系统</li><li>软件需要随接口不同而改变，随时间推移而变化，而这些变化是不同人设计的结果</li></ul></li><li>可变性：软件需要不断的进行调整来满足用户的需求</li><li>不可见性<ul><li>软件是一种“看不见，摸不着”的逻辑实体，不具有空间的形体特征。</li><li>开发人员可以直接看到程序代码，但是源代码并不是软件本身。</li><li>软件是以机器代码的形式运行，但是开发人员无法看到源代码是如何执行的。</li></ul></li></ul><p><br></p><h2 id="软件开发面临的挑战"><a href="#软件开发面临的挑战" class="headerlink" title="软件开发面临的挑战"></a>软件开发面临的挑战</h2><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/9b12ca2a-44eb-4e7f-bb9f-8986bf5787eb"></div><p><br></p><h2 id="消除软件危机的途径"><a href="#消除软件危机的途径" class="headerlink" title="消除软件危机的途径"></a>消除软件危机的途径</h2><ul><li>彻底消除“软件就是程序”的错误观念。</li><li>充分认识到软件开发是一种组织良好、管理严密、各类人员协同配合、共同完成的工程项目，不是个人独立的劳动。</li><li>推广和使用在实践中总结出来的软件开发的成功技术和方法。</li><li>开发和使用更好的软件工具<br>“软件工程”的方法理论是摆脱软件危机的一个主要出路。即按工程化的原则和方法组织软件开发工作是有效的，是摆脱软件危机的一个主要出路。</li></ul><p><br></p><h2 id="软件开发的误区"><a href="#软件开发的误区" class="headerlink" title="软件开发的误区"></a>软件开发的误区</h2><ul><li>只要是编程高手，即使是不懂软件工程，也能编出很好的软件。<ul><li>软件是服务于大众，却是由个性化的开发人员完成的。如果个性化太强，程序就无法阅读，其他人员也就无法维护。例：国内 80 年代涌现出来的众多汉字操作系统均是由编程高手完成的。</li></ul></li><li>只要拥有一套讲述如何开发软件的书籍，并了解了书中的标准与示例，就可以解决软件开发中遇到的任何问题。<ul><li>软件是用来解决现实问题的，现实问题的特殊性对规范提出了挑战（要进行适应）。</li><li>软件技术是发展的，没有祖传秘方。</li><li>就像拥有食谱并不能成为名厨一样，软件开发需要实践。</li></ul></li><li>只要拥有最好的开发工具、最好的计算机，一定能做出优秀的软件。<ul><li>硬件环境只是必要条件，人才是充分条件，软件是人在一定的约束条件下创造出来的。因人因事而异。</li></ul></li><li>软件开发时，如果进度慢，落后于计划，可以增加更多的程序员来解决。<ul><li>Brook法则：当人数增加后，项目所需的工作量将不成比例的增加。因为需要增加管理、协调、通信等工作。</li></ul></li></ul><p><br></p><h2 id="软件的定义"><a href="#软件的定义" class="headerlink" title="软件的定义"></a>软件的定义</h2><p>软件 = 程序 + 数据 + 文档</p><ul><li>软件：计算机可以接受的一系列指令，运行时可以提供所要求的功能和性能。</li><li>数据：使得程序能够适当地操作信息的数据结构</li><li>文档：描述程序的研制过程、方法和使用的图文资料。</li></ul><p><br></p><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><ul><li>1968 年，第一届NATO会议：为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用完善的工程原理。</li><li>1993 年，IEEE/CS：将系统化的、规范的、可度量的方法应用于软件的开发、运行和维护的过程，即将工程化应用于软件中。软件工程便是对上述提到的各种方法的研究。</li></ul><p><br></p><h2 id="另一个角度的看软件工程本质特性"><a href="#另一个角度的看软件工程本质特性" class="headerlink" title="另一个角度的看软件工程本质特性"></a>另一个角度的看软件工程本质特性</h2><ul><li>软件工程关注于大型程序的构造。<ul><li>软件工程的中心课题是控制复杂性</li><li>主要考虑：如何分解和集成。为什么要分解： G .Miller（美国认知心理学家乔治·米勒）, “7±2 ” 原则，即短时间内人的记忆广度大约为7±2个单位。比如在记忆圆周率的时候只能记忆7±2位，超过这个范围需要分组记忆。</li></ul></li><li>软件经常变化</li><li>开发软件的效率非常重要</li><li>和谐地合作是开发软件的关键</li><li>软件必须有效地支持它的用户</li><li>在软件工程领域中是由具有一种文化背景的人替具有另一种文化背景的人创造产品<br>扩展定义：软件 = 知识＋程序 + 数据 + 文档</li></ul><p><br></p><h2 id="软件工程的基本原理"><a href="#软件工程的基本原理" class="headerlink" title="软件工程的基本原理"></a>软件工程的基本原理</h2><ul><li>用分阶段的生命周期计划严格管理</li><li>坚持进行阶段评审</li><li>实行严格的产品控制基线：基线（baseline）控制</li><li>采用现代程序设计技术</li><li>结果应能清楚地审查</li><li>开发小组的人员应该少而精</li><li>承认不断改进软件工程实践的必要性</li></ul><p><br></p><h2 id="软件工程方法学"><a href="#软件工程方法学" class="headerlink" title="软件工程方法学"></a>软件工程方法学</h2><p>软件工程包括“管理”和“技术”两方面内容：</p><ul><li>管理：对人、财、物的合理使用和配置；</li><li>技术：指软件开发中采用的方法、工具和过程。<br>软件工程方法学：通常把在软件生命周期全过程中使用的一整套技术方法的集合称为方法学（methodology），也称为范型（paradigm）。</li></ul><p><br></p><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ul><li>软件工程过程：规定了完成各项任务的工作步骤。</li><li>软件工程方法：完成软件开发的各项任务的技术方法，为软件开发提供了“如何做”的技术。如项目计划与估算、软件系统需求分析、数据结构、系统总体结构的设计、算法过程的设计、编码、测试以及维护等。</li><li>软件工程工具：计算机辅助软件工程 CASE（computer Aided sottware Engineering），为软件工程方法提供自动或半自动的软件支撑环境。</li></ul><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/3527c895-7004-497e-bdf6-49009cfeb794"></div><h4 id="软件工程方法"><a href="#软件工程方法" class="headerlink" title="软件工程方法"></a>软件工程方法</h4><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/5e08847c-7558-4f96-a690-20257b79af50"></div><p><br></p><h3 id="软件工程方法学思想"><a href="#软件工程方法学思想" class="headerlink" title="软件工程方法学思想"></a>软件工程方法学思想</h3><h4 id="传统方法学"><a href="#传统方法学" class="headerlink" title="传统方法学"></a>传统方法学</h4><ul><li>采用结构化技术（结构化分析、结构化设计和结构化实现）来完成软件开发的各项任务；</li><li>把软件生命周期划分为若干个阶段，按顺序完成每个阶段的任务；</li><li>每个阶段开始和结束都有严格的标准，对任何两个相邻的阶段而言，前一个阶段的结束标准就是后一阶段的开始标准；</li><li>每一个阶段结束之前都必须进行正式严格的技术审查和管理复审</li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>分解任务，分工合作，降低整个软件开发工程的困难；</li><li>采用科学的管理技术和良好的技术方法对每个阶段成果都进行严格的审查。保证了软件的质量。</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>把数据和操作人为地分离成两个独立的部分，增加了软件开发与维护的难度。</p><h4 id="面向对象方法学"><a href="#面向对象方法学" class="headerlink" title="面向对象方法学"></a>面向对象方法学</h4><p>模拟人类习惯的思维方式，使开发软件的方法与过程尽可能接近人类认识世界解决问题的方法与过程，从而使描述问题的问题空间（也称为问题域）与实现解法的解空间（也称为求解域）在结构上尽可能一致。要点如下：</p><ul><li>把对象（object）作为融合了数据及在数据上的操作行为的统一的软件构件。</li><li>把所有对象都划分成类（class ）。</li><li>按照父类（或称为基类）与子类（或称为派生类）的关系，把若干个相关类组成一个层次结构的系统（也称为类等级）。</li><li>对象彼此间仅能通过发送消息互相联系。<br>和传统方法学的区别是：</li><li>传统方法学强调自顶向下顺序地完成软件开发的各阶段任务。</li><li>面向对象方法是主动地多次反复迭代的演化过程。</li></ul><p><br></p><h2 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h2><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/6f17b2e7-511f-4e58-b2ff-b1d0e7e016c9"></div><p><br></p><h3 id="软件定义时期"><a href="#软件定义时期" class="headerlink" title="软件定义时期"></a>软件定义时期</h3><ul><li>确定软件开发工程必须完成的总目标；</li><li>确定工程的可行性；</li><li>导出实现工程目标应该采用的策略及系统必须完成的功能；</li><li>估计完成该项工程需要的资源和成本，并且制定工程进度表。</li><li>通常分为问题定义、可行性研究和需求分析三个阶段。</li></ul><h4 id="问题定义阶段"><a href="#问题定义阶段" class="headerlink" title="问题定义阶段"></a>问题定义阶段</h4><p>要解决的问题是什么？</p><h4 id="可行性研究阶段"><a href="#可行性研究阶段" class="headerlink" title="可行性研究阶段"></a>可行性研究阶段</h4><p>对于上一个阶段所确定的问题有行得通的解决办法吗？</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>为了解决这个问题，目标系统必须做什么。用正式文档准确地记录对目标系统的需求，这份文档通常称为规格说明书（specification）。</p><p><br></p><h3 id="软件开发时期"><a href="#软件开发时期" class="headerlink" title="软件开发时期"></a>软件开发时期</h3><p>具体设计和实现前一个时期定义的软件，通常分为四个阶段。</p><h4 id="总体设计（概要设计）"><a href="#总体设计（概要设计）" class="headerlink" title="总体设计（概要设计）"></a>总体设计（概要设计）</h4><p>根据需求分析，设计软件的体系结构；定义结构中的组成模块。</p><h4 id="详细设计（模块设计）"><a href="#详细设计（模块设计）" class="headerlink" title="详细设计（模块设计）"></a>详细设计（模块设计）</h4><p>对每个模块要完成的工作进行具体的描述，为源程序编写打下基础。编写设计说明书，提交评审。与总体设计统称系统设计。</p><h4 id="程序编写（Coding-Programming）"><a href="#程序编写（Coding-Programming）" class="headerlink" title="程序编写（Coding, Programming）"></a>程序编写（Coding, Programming）</h4><p>把软件设计转换成计算机可以接受的程序代码。</p><h4 id="软件测试（Testing）"><a href="#软件测试（Testing）" class="headerlink" title="软件测试（Testing）"></a>软件测试（Testing）</h4><p>按规定的各项需求，逐项进行有效性测试，决定已开发的软件是否合格，能否交付用户使用，包括单元测试和组装测试。与程序编写统称系统实现。</p><p><br></p><h3 id="运行维护（软件维护）时期"><a href="#运行维护（软件维护）时期" class="headerlink" title="运行维护（软件维护）时期"></a>运行维护（软件维护）时期</h3><p>使软件持久的满足用户的需要，包括：</p><ul><li>改正性维护：运行中发现了软件中的错误需要修正。</li><li>适应性维护：为了适应变化了的软件工作环境，需做适当变更。</li><li>完善性维护：当用户有新的要求时，应该及时改进软件以满足用户的要求。</li><li>预防性维护: 即修改软件为将来的维护活动预先做准备。</li></ul><p><br></p><h2 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h2><p>软件过程是为了获得高质量软件所需要完成的一系列任务的框架，它规定了完成各项任务的工作步骤。软件过程描述为了开发出客户需要的软件，什么人（who）、在什么时候（when）、做什么事（what）以及怎样（how）做这些事以实现某一个特定的具体目标。通常用软件生命周期模型来描述。<br>ISO 9000的定义：使用资源将输入转化为输出的活动所构成的系统。 “系统”是相互关联或相互作用的一组要素。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/b8cc59bf-7b5f-491b-af57-165ab7e928cc"></div><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/e3ee209d-de52-473c-91e4-b2357bf4bcbb"></div><p><br></p><h2 id="软件生命周期模型"><a href="#软件生命周期模型" class="headerlink" title="软件生命周期模型"></a>软件生命周期模型</h2><p>指软件项目从需求定义直至软件经使用后废弃为止，跨越整个生存周期的系统开发、运作和维护所实施的全部过程、活动和任务的结构框架。</p><p><br></p><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><ul><li>从上一阶段接受本阶段的工作对象，作为输入；</li><li>利用输入，完成本阶段活动的内容。</li><li>本阶段的工作成果作为输出传入下一阶段。</li></ul><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/bd5f7dd7-60cc-4a10-970f-5d2557a8d7c3"></div>实际的瀑布模型增加了一个评审活动，评审每个阶段完成的活动，若得到确认，则进行下一阶段的活动；否则返回前一阶段，甚至更前阶段返工。 #### 特点 - 阶段间具有顺序性和依赖性。 - 推迟实现的观点。 - 质量保证的观点。 #### 优点 - 可强迫开发人员采用规范的方法； - 严格地规定了每个阶段必须提交的文档； - 要求每个阶段的所有产品都必须经过质量保证小组的仔细验证； #### 缺点 - 无法解决软件需求不明确或不准确的问题；可能导致最终开发的产品不能真正满足用户需要。 瀑布模型比较适合开发需求明确的软件。<br>### 快速原型模型 原型是快速实现和运行的早期版本，反映最终系统部分重要特性。常见的原型实例：人机界面；系统主要功能。快速原型就是快速开发一个能用的版本再后期修改。 - 获得用户的基本需求说明，据此快速建立一个小型软件系统。 - 用户试用，对其评价； - 开发人员按照用户的意见快速地修改原型系统，获得新的原型版本，再请用户试用，如此反复，直到满足用户的要求； - 用户确认原型系统之后，开发人员据此书写规格说明文档，进行下一步开发。<div align="center"><img width="50%" src="http://blogfileqiniu.isjinhao.site/f5b6755d-7833-49da-839d-1435f7a3515d"></div><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>通常能反映用户真实需求；</li><li>软件产品的开发基本上是线性顺序进行的。</li></ul><p><br></p><h3 id="增量（渐增）模型"><a href="#增量（渐增）模型" class="headerlink" title="增量（渐增）模型"></a>增量（渐增）模型</h3><p>把软件产品作为一系列的增量构件来设计、编码、集成和测试。每个构件由多个相互作用的模块构成，并且能够完成特定的功能。<br>使用增量模型时，第一个阶段的增量构件往往实现软件的基本需求，提供最核心的功能；后面的增量构架逐渐添加系统的功能。</p><div align="center"><img width="75%" src="http://blogfileqiniu.isjinhao.site/b6e5f004-6495-42bd-b195-7babf903eb31"></div><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>增量构件规模适中；</li><li>分解的约束条件是当把新构件集成到现有软件中时，所形成的产品必须是可测试的；</li><li>软件体系必须是开放的，即在对现有系统添加新增量构件时，不能破坏系统原有功能。</li></ul><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>能在较短的时间内，提供可完成部分工作的初步产品给用户；</li><li>用户有较为充裕的时间学习和适应新产品。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>对开发人员技术能力要求较高，要求能从系统整体出发正确划分增量构件，并进行分别开发，最后能很好地集成这些构件。</p><h4 id="一种风险更大的增量模型"><a href="#一种风险更大的增量模型" class="headerlink" title="一种风险更大的增量模型"></a>一种风险更大的增量模型</h4><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/8995b4fc-14a8-4308-9744-ff3c3aae5a5d"></div>有可能提高开发速度，但需要密切地监控整个开发过程，否则会有构件无法集成到一起的风险。<br>### 螺旋模型 大型软件开发面临的重要问题：软件风险，如： - 产品交付给用户之后，用户不满意； - 开发进度落后，开发成本超出预算； - 产品完成前关键的开发人员跳槽； - 在产品投人市场前，竞争对手发布了一个功能相近，价格更低的软件 ... 构建原型能使某些类型的风险降到最低。<div align="center"><img width="100%" src="http://blogfileqiniu.isjinhao.site/a6c09bbd-6e89-4e72-9831-a087e1aff84a"></div><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul><li>强调可选方案和约束条件，有利于已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标；</li><li>减少了过多测试（浪费资金）或测试不足（产品故障多）所带来的风险；</li><li>维护是一个周期，与开发并没有本质区别</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>需要开发人员具有相当丰富的风险评估经验和专门知识；</li><li>进行风险分析的费用可能较大。<br>适合大型软件开发。</li></ul><p><br></p><h3 id="各种模型的比较"><a href="#各种模型的比较" class="headerlink" title="各种模型的比较"></a>各种模型的比较</h3><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>模型</strong></th><th style="text-align:center"><strong>优点</strong></th><th style="text-align:center"><strong>缺点</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>瀑布模型</strong></td><td style="text-align:center">规范，文档驱动</td><td style="text-align:center">系统可能不满足客户真正的需求</td></tr><tr><td style="text-align:center"><strong>快速原型</strong></td><td style="text-align:center">克服了瀑布型的缺点</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>增量模型</strong></td><td style="text-align:center">开发早期回报明确，易于维护</td><td style="text-align:center">要求开放的软件体系结构</td></tr><tr><td style="text-align:center"><strong>螺旋模型</strong></td><td style="text-align:center">风险驱动，适用于大型项目开发</td><td style="text-align:center">风险分析人员需要有经验且经过充分训练</td></tr></tbody></table></div><p><br></p><h2 id="软件工程工具"><a href="#软件工程工具" class="headerlink" title="软件工程工具"></a>软件工程工具</h2><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/38cd2bd6-1cbd-4697-a870-e399bd040ffc"></div><p><br></p><h2 id="软件开发的基本策略"><a href="#软件开发的基本策略" class="headerlink" title="软件开发的基本策略"></a>软件开发的基本策略</h2><h3 id="软件复用"><a href="#软件复用" class="headerlink" title="软件复用"></a>软件复用</h3><p>利用已有的软件制品，直接组装或合理修改形成新的软件系统，从而提高开发效率和产品质量，降低维护成本。软件复用不仅仅是代码复用，函数库、类库、模板（文档、网页）、设计模式、组件、框架。</p><p><br></p><h3 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h3><p>软件工程是一项解决问题的工程活动，通过对问题进行研究分析，将一个复杂的问题分解成可以理解并能够处理的若干小问题，然后再逐个解决。</p><div align="center"><img width="100%" src="http://blogfileqiniu.isjinhao.site/c2bad972-a22a-43ba-8bb8-e4230003d4de"></div><p><br></p><h3 id="逐步演进"><a href="#逐步演进" class="headerlink" title="逐步演进"></a>逐步演进</h3><p>软件开发应该遵循软件的客观规律，不断进行迭代式增量开发，最终交付符合客户价值的产品。</p><p><br></p><h3 id="优化折中"><a href="#优化折中" class="headerlink" title="优化折中"></a>优化折中</h3><p>软件工程师应该把优化当成一种责任，不断改进和提升软件质量；但是优化是一个多目标的最优决策，在不可能使所有目标都得到优化时，需要进行折中实现整体最优。</p><p><br></p><h2 id="ISO9126-质量模型"><a href="#ISO9126-质量模型" class="headerlink" title="ISO9126 质量模型"></a>ISO9126 质量模型</h2><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/7a31d8a7-38b3-414b-84d4-65fa62f8760e"></div><p><br></p><h3 id="功能性"><a href="#功能性" class="headerlink" title="功能性"></a>功能性</h3><ul><li>适合性：当软件你在指定条件下使用，其满足明确和隐含要求功能的能力。</li><li>准确性：软件提供给用户功能的精准度能不能满足要求</li><li>互操作性：软件与其他系统进行交互的能力</li><li>安全性：软件保护信息和数据的安全能力</li></ul><p><br></p><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><ul><li>成熟性：软件产品避免因软件中错误开发而导致失效的能力</li><li>容错性：软件防止外部接口错误扩散而导致系统失效的能力</li><li>可恢复性：系统失效后，重新恢复原有功能和性能的能力</li></ul><p><br></p><h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><ul><li>易理解性：软件显示的信息要清晰、准确且易懂，使用户能够快速理解软件。</li><li>易学习性：软件使用户能学习其应用的能力</li><li>易操作性：软件产品使用户能易于操作和控制它的能力。</li><li>吸引性：软件具有的某些独特的、能让用户眼前一亮的属性。</li></ul><p><br></p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><ul><li>时间特性：在规定的条件下，软件产品执行其功能时能够提供适当的响应时间效和处理时间以及吞吐率的能力。</li><li>资源利用：软件系统在完成用户指定的业务请求所消耗的系统资源，诸如CPU占有率、内存占有率、网络带宽占有率等。</li></ul><p><br></p><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><ul><li>易分析性：软件提供辅助手段帮助开发人员定位缺陷原因并判断出修改之处。</li><li>易改变性：软件产品使得指定的修改容易实现的能力。</li><li>稳定性：软件产品避免由于软件修改而造成意外结果的能力。</li><li>易测试性：软件提供辅助性手段帮助测试人员实现其测试意图。</li></ul><p><br></p><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><ul><li>适应性：软件产品无需做任何相应变动就能适应不同运行环境的能力。</li><li>易安装性：在平台变化后成功安装软件的难易程度</li><li>共存性：软件产品在公共环境与其共享资源的其他系统共存的能力。</li><li>替换性：软件系统的升级能力，包括在线升级、打补丁升级等。</li></ul><p><br></p><h2 id="可行性研究的目的"><a href="#可行性研究的目的" class="headerlink" title="可行性研究的目的"></a>可行性研究的目的</h2><ul><li>说明该软件开发项目的实现在技术上、经济上和社会条件上的可行性；评述为合理地达到开发目标可能选择的各种方案。</li><li>用最小的代价在尽可能短的时间内确定问题是否能够并且值得解决。<br>可行性研究最根本任务是对以后的行动方针提出建议，一般占预期工程总成本的 5%-10%。</li></ul><p><br></p><h2 id="可行性研究的基本内容"><a href="#可行性研究的基本内容" class="headerlink" title="可行性研究的基本内容"></a>可行性研究的基本内容</h2><ul><li>技术可行性：使用现有的技术能实现这个系统吗？主要考虑：开发风险；资源；相关技术的发展</li><li>经济可行性：这个系统的经济效益能超过它的开发成本吗？<ul><li>系统经济效益 = 新系统增加的收入＋ 新系统节省的费用</li><li>考虑：成本——效益分析、长期的公司经营策略、对其他单位或产品的影响、开发所需的成本和资源、潜在的市场前景</li></ul></li><li>操作可行性：系统的操作方式在用户组织内行得通吗？</li><li>其他：法律可行性、社会效应、管理问题等</li></ul><p><br></p><h3 id="技术可行性"><a href="#技术可行性" class="headerlink" title="技术可行性"></a>技术可行性</h3><p>对系统的性能、可靠性、可维护性以及生产率等方面的信息进行评价。通过技术可行性的分析，将为新系统提交技术可行性评估。以指明为完成系统的功能和性能需要什么技术？需要哪些材料、方法、算法、或者过程等。<br>技术可行性分析方法：数学模型和优化技术、概率和统计、排队论、控制论等方法。</p><p><br></p><h3 id="经济可行性"><a href="#经济可行性" class="headerlink" title="经济可行性"></a>经济可行性</h3><p>进行成本效益分析，评估项目的开发成本。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/ef048ba0-aa14-41f9-adb1-57b22bacc1bf"></div><p><br></p><h3 id="操作可行性"><a href="#操作可行性" class="headerlink" title="操作可行性"></a>操作可行性</h3><ul><li>一个地区、一个行业乃至一个国家计算机应用发展的客观道路及规律</li><li>客观发展规律，各阶段是不能超越的</li><li>结合实际分析本单位、本部门、本行业的实际情况，参照国内外经验教训，实事求是地规划本企业信息系统的发展。</li></ul><p><br></p><h2 id="可行性研究的任务"><a href="#可行性研究的任务" class="headerlink" title="可行性研究的任务"></a>可行性研究的任务</h2><p>可行性研究的目的是建立目标系统的逻辑模型。通常软件软件开发项目是要实现目标系统的物理模型，即确定待开发软件系统的系统元素，并将功能和数据结构分配到这些系统元素中。它是软件实现的基础。但是目标系统的物理模型是由它的逻辑模型经实例化，即具体到某个业务领域而得到的。与物理模型不同，<strong>逻辑模型</strong>忽视机制和细节，<strong>只描述系统要完成的功能和要处理的数据</strong>。为此，该阶段的主要任务是，借助于当前系统的逻辑模型导出目标系统的逻辑模型，也就是解决目标系统<strong>“做什么”的问题</strong>。<br>其实系统的开发过程就是根据需要解决的问题，建立一个有信息技术支撑、与解决问题相关的、数据处理的、可运行的计算机模型。</p><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/7ba7e2cd-fc0c-4b68-9933-cbb81b8afa82"></div><p><br></p><h3 id="具体模型到逻辑模型举例"><a href="#具体模型到逻辑模型举例" class="headerlink" title="具体模型到逻辑模型举例"></a>具体模型到逻辑模型举例</h3><div align="center"><img width="80%" src="http://blogfileqiniu.isjinhao.site/7f14eb69-98a1-4162-b3bb-7355101efbbe"></div><p><br></p><h2 id="可行性研究的定义"><a href="#可行性研究的定义" class="headerlink" title="可行性研究的定义"></a>可行性研究的定义</h2><p>了解客户的要求及现实环境，从技术、经济和社会因素等三方面研究并论证本软件项目的可行性，编写可行性研究报告，制定初步项目开发计划。<br>可行性分析的描述手段：系统流程图、数据流图</p><p><br></p><h2 id="可行性研究报告功能"><a href="#可行性研究报告功能" class="headerlink" title="可行性研究报告功能"></a>可行性研究报告功能</h2><p>说明软件项目的实现在技术上、经济上和社会因素上的可行性，评述为合理地达到开发目标可供选择的各种可能的实现方案，说明并论证所选定实施方案的理由。</p><p><br></p><h2 id="成本／效益分析"><a href="#成本／效益分析" class="headerlink" title="成本／效益分析"></a>成本／效益分析</h2><p>从经济角度分析开发一个特定的新系统是否划算，帮助客户负责人作出是否投资的决定。主要包括成本估计和成本效益分析。</p><p><br></p><h3 id="成本估计"><a href="#成本估计" class="headerlink" title="成本估计"></a>成本估计</h3><p>包括开发成本和运行成本</p><h4 id="开发成本"><a href="#开发成本" class="headerlink" title="开发成本"></a>开发成本</h4><ul><li>代码行技术：根据经验和历史数据，估算实现一个功能需要多少源程序行数，用每行代码的平均成本乘以行数。</li><li>任务分解技术：将软件开发工程分解成若干个相对独立的任务，分别估算，然后累加得出总成本。<ul><li>按阶段分解</li><li>按功能分解</li></ul></li><li>自动估计成本技术：采用自动估计成本的软件工具，需要有长期搜集的大量历史数据为基础，并需要良好的数据库系统支持。</li></ul><h4 id="运行成本"><a href="#运行成本" class="headerlink" title="运行成本"></a>运行成本</h4><p>取决于系统的操作费用（操作人员数、工作时间、消耗的物资等）和维护费用。</p><p><br></p><h2 id="需求定义"><a href="#需求定义" class="headerlink" title="需求定义"></a>需求定义</h2><p>需求是人们要解决的问题某个问题或达到某种目的的需要。是系统或其组成部分为满足某种书面规定（合同、标准、规范等）所要具备的能力。需求将作为系统开发、测试、验收、提交的正式文档的依据。</p><p><br></p><h2 id="需求的内容"><a href="#需求的内容" class="headerlink" title="需求的内容"></a>需求的内容</h2><ul><li>需求是系统为满足客户期望的目标而完成的行为</li><li>需求要体现出对问题领域的清晰理解</li><li>给出系统的使用场景和上下文</li><li>需求定义涵盖如下内容<ul><li>为什么要设计此系统</li><li>系统由谁使用</li><li>系统要做什么</li><li>系统涉及哪些信息</li><li>对解决方案有什么额外补充</li><li>如何使用该系统</li><li>质量需要达到何种程度</li></ul></li></ul><p><br></p><h2 id="需求内容来源"><a href="#需求内容来源" class="headerlink" title="需求内容来源"></a>需求内容来源</h2><ul><li>干系人：<ul><li>干系人是任何和系统有关的人，如：资方、客户、系统用户、领域专家、项目研发团队。</li><li>识别干系人可以从以下几个方面来判别：产品谁来用、输入谁提供、输出谁要、谁监管、影响谁、奖励谁、惩罚谁。</li></ul></li><li>业务过程：对现有业务过程的分析有助于识别业务问题并改进<ul><li>找出并列举当前业务过程中的问题</li><li>分析问题的本质，可能是遗漏的，可能不好用，可能有新需求</li><li>分析改进的机会</li><li>分析改进的实质</li></ul></li><li>组织规章制度：分析规章制度有益于确定业务规则和约束条件<ul><li>业务规则：描述对业务过程的要求，如支撑系统的业务过程的结构、控制、行为效果</li><li>约束：对系统开发过程的管理限制，主要涉及经济、政治、技术和环境四个方面，具体包括项目资源、时间、目标环境级</li></ul></li><li>现有系统：分析现有系统有助于了解未来系统的工作数据</li></ul><p><br></p><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><p>软件需求指用户对所开发的软件在功能、性能、环境、可靠性等各方面的要求。需求分析主要回答待开发的系统必须“做什么”，并用 《 需求规格说明书 》 的形式准确、详细、规范地表达出来。</p><ul><li>需求分析阶段，系统分析员的主要关注点是“做什么（ what ) ” ，不是“怎样做（ how）”；</li><li>需求分析阶段，系统分析员应该给出软件需求规格书。</li></ul><p><br></p><h3 id="需求分析的任务"><a href="#需求分析的任务" class="headerlink" title="需求分析的任务"></a>需求分析的任务</h3><ol><li>确定对系统的综合要求</li><li>分析系统的数据要求</li><li>导出系统的逻辑模型</li><li>修正系统开发计划</li></ol><p><br></p><h3 id="确定对系统的综合要求"><a href="#确定对系统的综合要求" class="headerlink" title="确定对系统的综合要求"></a>确定对系统的综合要求</h3><ul><li>功能需求。指定系统必须提供的服务。</li><li>性能需求。指定系统必须满足的定时约束或容量约束等。</li><li>可靠性和可用性需求。应定量指定。</li><li>出错处理需求。指环境错误，非系统本身的错误。</li><li>接口需求。常见的接口需求：用户接口需求；硬件接口需求；软件接口需求；通信接口需求。</li><li>常见的约束：精度；工具和语言约束；设计约束；应该使用的标准；应该使用的硬件平台。</li><li>逆向需求。指定系统不应该做什么，</li><li>将来可能提出的要求。</li></ul><p><br></p><h2 id="分析建模"><a href="#分析建模" class="headerlink" title="分析建模"></a>分析建模</h2><p>结构化分析（Structured Analysis，SA）是面向数据流进行分析的方法，主要建立以下几种模型：</p><ul><li>实体关系图（Entity-Relationship Diagram，E-R图）来创建数据模型，描述系统中所有重要的数据对象；</li><li>数据流图（Data Flow Diagram，DFD）：用来创建功能模型，描述了信息流和数据转换；</li><li>状态转换图（State-Transition Diagram，STD）用来创建行为模型，描述系统状态如何响应外部事件，而进行转换。<br>面向对象分祈方法（OOA）所建立的摸型</li><li>对象模型（Object model）：定义实体，描述系统的静态结构，定义“对谁做”</li><li>动态模型（Dynamic model）：描述对象之间的交互过程，规定“何时做”</li><li>功能模型（Functional model） ：描述内部数据的处理，指明系统应“做什么”</li></ul><p><br></p><h2 id="数据词典"><a href="#数据词典" class="headerlink" title="数据词典"></a>数据词典</h2><p>DD 是对数据流图中包含的所有元素的定义的集合，使得每个图形元素的名字都有一个精确的、严格的定义。数据流图和词典结合在一起，能清楚地表达数据处理的要求，构成了“需求说明书”</p><p><br></p><h3 id="定义数据的方法"><a href="#定义数据的方法" class="headerlink" title="定义数据的方法"></a>定义数据的方法</h3><div align="center"><img src="http://blogfileqiniu.isjinhao.site/ac1426fb-0f0d-4933-8812-d5d5f870e071" width="60%"></div><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>北京某高校可用的电话号码有以下几类：校内电话号码由4位数字组成，第1位数字不是0；校外电话又分为本市电话和外地电话两类，拨校外电话需先拨0，若是本市电话则再接着拨8位数字(第1位不是0)，若是外地电话则拨3位区码再拨8位电话号码(第1位不是0)。请用定义数据字典的方法，定义上述的电话号码。</p><ul><li>电话号码 = [校内电话号码|校外电话号码]</li><li>校内电话号码 = 非零数字+ 3 位数字 //后面继续定义</li><li>校外电话号码 = [本市号码|外地号码]</li><li>本市号码 = 数字零+8位数字</li><li>外地号码 = 数字零+3位数字+8位数字</li><li>非零数字 = [1|2|3|4|5|6|7|8|9]</li><li>数字零＝0</li><li>3位数字＝3{数字}3 //3至3个数字</li><li>8位数字 = 非零数字+7位数字</li><li>7位数字 = 7{数字}7</li><li>数字＝[0|1|2|3|4|5|6|7|8|9]</li></ul><p><br></p><h3 id="DD定义数据流"><a href="#DD定义数据流" class="headerlink" title="DD定义数据流"></a>DD定义数据流</h3><ul><li>数据流名：</li><li>说明：简要介绍作用即它产生的原因和结果。</li><li>数据流来源：来自何方。</li><li>数据流去向：去向何处。</li><li>数据流组成：数据结构。</li><li>数据量流通量：数据量，流通量</li></ul><h4 id="数据流定义"><a href="#数据流定义" class="headerlink" title="数据流定义"></a>数据流定义</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/ee975289-25f6-4afc-9408-4f6bd2a7b2d0" width="60%"></div>- 数据流：购物单 - 别名：无 - 简述：学生购书时填写的项目 - 来源：学生 - 去向：审查并开发票 - 组成：学号+姓名+书号+数量 - 数据流量：1000次/周 - 高峰值：开学期间1000次/天<br>### DD定义数据元素 数据元素，又叫数据项，指数据处理中最小的，不可再分的单位。描述包括： - 数据元素名 - 类型：数字（离散值，连续值），文字（编码类型） - 长度 - 取值范围 - 相关的数据元素及数据结构 #### 举例 - 数据元素名：商品编号 - 别名： - 描述：唯一的描述库存库清单中一个特定商品的关键域 - 定义：商品编号 = 8 {字符} 8 - 位置： - 订货报表 - 订货信息 - 库存清单<br>### DD定义数据存储 - 数据文件名： - 简述：存放的是什么数据 - 输入数据： - 输出数据： - 数据文件组成：数据结构 - 存储方式：顺序，直接，关键码 - 存取频率： #### 举例 - 数据文件名：库存记录 - 别名：无 - 简述：存放库存所有可供货物的信息 - 组成：货物名称+编号+生产厂家+单价+库存量 - 组织方式：索引文件，以货物编号为关键字 - 查询要求：要求能立即查询<br>### DD定义数据处理 - 处理名 - 编号：DFD中的编号 - 激活条件 - 处理逻辑：此处理的子项 - 执行频率 #### 例子 - 数据处理名：登记报名单 - 编号：1 - 激活条件：收到报告单 - 数据处理组成： - 1.1：检查报告单 - 1.2：编准考证号 - 1.3：登记考生 - 执行频率：2000次/日<br>## 软件设计的目标 软件需求：解决“做什么”。软件设计：解决“怎么做”。 - 软件设计的任务：以软件需求规格说明书为依据，着手实现软件的需求，并将设计的结果反映在“设计规格说明书”文档中。 - 软件设计的重要性：是软件开发阶段的第一步，最终影响软件实现的成败和软件维护的难易程度。<br>### 软件设计的两个阶段 #### 第一阶段：概要设计（总体设计） 根据软件需求，设计软件系统结构和数据结构，确定程序的组成模块及模块之间的相互关系。回答“概括地说，系统应该如何实现？”。其重要性是：站在全局高度，从较抽象的层次上分析对比多种可能的系统实现方案和软件结构，从中选出最佳方案和最合理的软件结构，从而用较低成本开发出较高质量的软件系统。 #### 第二阶段：详细设计（过程设计） - 确定模块内部的算法和数据结构； - 选定某种过程的表达形式来描述各种算法； - 产生精确描述各模块程序过程的详细文档，并进行评审。<br>## SA和SD<div align="center"><img src="http://blogfileqiniu.isjinhao.site/f5b12def-94c9-47a6-9892-054100793ef4" width="60%"></div><p><br></p><h2 id="概要设计的任务"><a href="#概要设计的任务" class="headerlink" title="概要设计的任务"></a>概要设计的任务</h2><ul><li>制定规范：为软件开发小组制定在进行软件设计，应该共同遵守的标准，以便协调组内各员的工作。</li><li>设计软件系统结构（简称软件结构）<ul><li>将系统按功能划分成模块</li><li>确定每个模块的功能</li><li>确定模块之间的调用关系</li><li>确定模块之间的接口，即模块之间传递的信息</li><li>评价模块结构的质量</li></ul></li><li>处理方式设计<ul><li>功能设计：确定实现功能法，评估算法的性能．</li><li>性能设计：确定实现性能需求必须的算法和模块间的控制方式</li></ul></li><li>数据结构及数据库设计</li><li>可靠性设计</li><li>编写概要设计文档</li><li>概要设计评审</li></ul><p><br></p><h2 id="软件设计的过程"><a href="#软件设计的过程" class="headerlink" title="软件设计的过程"></a>软件设计的过程</h2><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a9c6bde7-66bc-48ae-b7cc-d26f7ca1aa21" width="80%"></div><p><br></p><h2 id="软件设计的原理"><a href="#软件设计的原理" class="headerlink" title="软件设计的原理"></a>软件设计的原理</h2><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>采取自顶向下的方式，逐层把软件系统划分成若干可单独命名和可编址的部分，即“ 模块” ，每个模块完成一个特定的子功能；所有模块按某种方法组成一个整体，完成整个系统所要求的功能。软件系统就是通过这些模块的组合来实现。<br>模块化是在逻辑和无理上将整个系统分解成多个更小的部分，其实质是“分而治之”，即将一个复杂问题分解成若干个简单问题，然后再逐个解决。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/ac334aad-69cd-42e6-bb61-864fbc1599e1"></div><p><br></p><h3 id="自顶向下，逐步求精的基本思想"><a href="#自顶向下，逐步求精的基本思想" class="headerlink" title="自顶向下，逐步求精的基本思想"></a>自顶向下，逐步求精的基本思想</h3><ul><li>将功能、信息的说明分为多个层次，最高层也最抽象 ― 仅仅只是概念性地描述功能或信息，不提供功能的内部工作情况或信息的内部结构；</li><li>设计者从最高层开始，仔细推敲，进行功能和信息的细化，给出下层实现的细节；</li><li>随着每个后续细化逐步的完成，提供越来越多的细节，最终得出用程序设计语言表达的程序。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/b3702fe3-2506-48d4-a7cd-c4f0ab80aa33" width="60%"></div><p><br></p><h2 id="模块独立"><a href="#模块独立" class="headerlink" title="模块独立"></a>模块独立</h2><p>系统分解的目标：高内聚、低耦合。<br>内聚性是一个模块或子系统内部的依赖程度。如果一个模块或子系统含有许多彼此相关的元素，并且它们执行类似任务，那么其内聚性比较高；如果一个模块或子系统含有许多彼此不相关的元素，其内聚性就比较低。<br>耦合性是两个模块或子系统之间依赖关系的强度。如果两个模块或 子系统是松散耦合的，二者相互独立，那么当其中一个发生变化时对另一个产生的影响就很小；如果两个模块或子系统是紧密耦合的，其中一个发生变化就可能对另一个产生较大影响。</p><p><br></p><h3 id="耦合性"><a href="#耦合性" class="headerlink" title="耦合性"></a>耦合性</h3><p>也称块间的联系。是对软件系统结构中，各模块间相互联系紧密程度的一种度量。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/46ee28c9-fbcc-4e52-bfd8-59018caddb00" width="80%"></div><h4 id="无直接藕合"><a href="#无直接藕合" class="headerlink" title="无直接藕合"></a>无直接藕合</h4><p>两个模块没有直接关系，模块独立性最强。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/19c6319b-4d98-4bd7-8711-0d5d65f2255a"></div><h4 id="数据耦合"><a href="#数据耦合" class="headerlink" title="数据耦合"></a>数据耦合</h4><p>属松散耦合。一模块访问另一模块时，通过数据参数交换输入、输出信息。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/8062c94e-cafe-4251-bbed-c35ff19d07ec"></div><h4 id="控制藕合"><a href="#控制藕合" class="headerlink" title="控制藕合"></a>控制藕合</h4><p>模块之间传递的是控制信息（如开关、标志、名字等），控制被调用模块的内部逻辑。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/c85c8e86-2bb5-4fae-9162-780de83c3860" width="60%"></div><h4 id="特征耦合"><a href="#特征耦合" class="headerlink" title="特征耦合"></a>特征耦合</h4><p>两个模块通过传递数据结构加以联系，或都与一个数据结构有关系，则称这两个模块间存在特征耦合。可能出现的情况：当把整个数据结构作为参数传递时，被调用的模块虽然只需要使用其中的一部分数据元素，但实际可以使用的数据多于它真正需要的数据，这将导致对数据访问失去控制。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/541d262b-7799-4981-97e5-e09cb7092a8e"></div>“住户情况”是一个数据结构，图中模块都与此数据结构有关。 “计算水费”和“计算电费”本无关，由于引用了此数据结构产生依赖关系。 #### 公共环境耦合 一组模块引用同一个公用数据区（也称全局数据区、公共数据环境）。公共数据区指： - 全局数据结构。 - 共享通讯区。 - 内存公共覆盖区等<div align="center"><img src="http://blogfileqiniu.isjinhao.site/177091fa-0068-463e-baab-7cc751361375"></div>公共耦合存在的问题： - 软件可理解性降低 - 诊断错误困难 - 软件可维护性差 - 软件可靠性差 #### 内容耦合 有下列情况之一的。是最不好的耦合形式！<div align="center"><img src="http://blogfileqiniu.isjinhao.site/0901239d-5cc7-4f41-aa61-70840a37a376" width="60%"></div><h4 id="控制耦合改为数据耦合"><a href="#控制耦合改为数据耦合" class="headerlink" title="控制耦合改为数据耦合"></a>控制耦合改为数据耦合</h4><ul><li>将被调用模块内的判定上移到调用模块中进行</li><li>被调用模块分解成若干单一功能模块</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/f01b4a9b-589a-428c-acbc-4a5cdd9f87a3" width="40%"></div><h4 id="特征耦合修改为数据耦合"><a href="#特征耦合修改为数据耦合" class="headerlink" title="特征耦合修改为数据耦合"></a>特征耦合修改为数据耦合</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/3200a2b6-5f98-4f2c-9fa3-19c27d40ad85" width="40%"></div><p><br></p><h3 id="内聚性"><a href="#内聚性" class="headerlink" title="内聚性"></a>内聚性</h3><h4 id="巧合内聚"><a href="#巧合内聚" class="headerlink" title="巧合内聚"></a>巧合内聚</h4><p>块内各组成成份在功能上是互不相关的。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/32464b38-b6c8-48e3-8fa2-a969f0de6f28" width="60%"></div><h4 id="逻辑内聚"><a href="#逻辑内聚" class="headerlink" title="逻辑内聚"></a>逻辑内聚</h4><p>把几种相关功能（逻辑上相似的功能）组合在一模块内，每次调用由传给模块的参数确定执行哪种功能。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/64dc8bd1-3a2b-49fb-9815-14266b84578d" width="70%"></div><h4 id="时间内聚"><a href="#时间内聚" class="headerlink" title="时间内聚"></a>时间内聚</h4><p>模块完成的功能必须在同一时间内执行，这些功能只因时间因素关联在一起。如：</p><ul><li>]初始化系统模块</li><li>系统结束模块、</li><li>紧急故障处理模块等</li></ul><h4 id="过程内聚"><a href="#过程内聚" class="headerlink" title="过程内聚"></a>过程内聚</h4><p>模块内各处理成分相关，且必须以特定次序执行。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/dfeb9ddc-5932-403e-83be-5f43d252a8b6" width="70%"></div><h4 id="通信内聚"><a href="#通信内聚" class="headerlink" title="通信内聚"></a>通信内聚</h4><p>模块内各部分使用相同的输入数据，或产生相同的输出结果。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/a825de2a-237c-4559-af37-692bac6b87f1" width="70%"></div><h4 id="顺序内聚"><a href="#顺序内聚" class="headerlink" title="顺序内聚"></a>顺序内聚</h4><p>模块完成多个功能，各功能都在同一数据结构上操作，每一功能有唯一入口。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/09a0a117-44c5-41e3-8b45-865642de9017"></div><h4 id="功能内聚"><a href="#功能内聚" class="headerlink" title="功能内聚"></a>功能内聚</h4><p>模块仅包括为完成某个功能所必须的所有成分。模块所有成分共同完成一个功能，缺一不可。</p><p><br></p><h3 id="启发规则"><a href="#启发规则" class="headerlink" title="启发规则"></a>启发规则</h3><ul><li>改进软件结构，提高模块独立性：通过模块分解或合并，降低耦合提高内聚</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/2d6d41ad-fb85-4099-a624-8dd58cea2ddb" width="60%"></div>- 模块规模适中：在考虑模块的独立性同时，为了增加可理解性，模块的大小最好在 50-150 条语句左右，可以用 1-2 页打印纸打印，便于人们阅读与研究。 - 模块过大：可理解程度下降 - 模块过小：开销大于有效操作系统接口复杂 - 深度、宽度、扇出和扇入适中<div align="center"><img src="http://blogfileqiniu.isjinhao.site/fbe61914-4f26-4877-8038-297c5a77bc22" width="70%"></div>- 将模块的影响限制在控制范围内：使任一模块的作用域在其控制域内 - 作用域是指受模块内一个判定影响的所有模块的集合 - 控制域是指这个模块本身及其所有的下属模块的集合<div align="center"><img src="http://blogfileqiniu.isjinhao.site/b4612e86-0275-4970-a2a0-1d2515f29fc3" width="40%"></div>模块 C 的控制范围： C 、 D 、 E 、 F 、 G 、 H 。如果模块 C 作出的决策影响了模块 L ，L超出了 C 的控制范围 - 降低模块接口的复杂性：接口传递信息应简单且和模块功能一致。模块的接口要简单、清晰、含义明确，便于理解，易于实现、测试与维护。 - 设计单入口单出口的模块：不要使模块间出现内容耦合。 - 模块功能可预测：如果一个模块可以当作一个黑盒子，相同输入产生相同输出，其功能为可预测的。若模块带有内部“存储器”，其功能可能是不可预测的，难理解、难测试、难维护。单一的模块具有高内聚。但模块功能过分局限，可使用范围将过分狭窄，缺乏灵活性和扩充性。<br>## 描绘软件结构的图形具 ### 层次图和 HIPO 图 描述软件的层次结构。层次图中，一个方框代表一个模块，方框间的连线表示调用关系。 HIPO图=层次图+ IPO 图<br>### 结构图 ...<br>## 结构程序设计 经典定义：如果一个程序的代码块仅仅通过顺序、选择和循环这 3 种基本控制结构进行连接，而且每个代码块只有一个入口和一个出口，则称这个程序是结构化的。 比较全面的定义：结构程序设计是尽可能少用 GOTO 语句的程序设计方法，最好仅仅在检测出错误时才使用 GOTO 语句，而且应该总是使用前向的 GOTO 语句。<br>### SP主要原则 - 使用语言中的顺序、选择、重复等有限的基本控制结构表示程序逻辑。 - 选用的控制结构只准许有一个入口和一个出口。 - 复杂结构应该用基本控制结构进行组合嵌套来实现。 - 严格控制 GOTO 语句，仅在下列情形才可使用。 - 用一个非结构化的程序设计语言去实现一个结构化的构造。 - 在某种可以改善而不是损害程序可读性的情况下。<br>### 五种基本的结构化控制结构<div align="center"><img src="http://blogfileqiniu.isjinhao.site/f3c63cd4-1490-4d39-abb1-70b39448d08d" width="70%"></div><p><br></p><h2 id="控制流图"><a href="#控制流图" class="headerlink" title="控制流图"></a>控制流图</h2><ul><li>符号“ O ”为程序图的结点，表示一个或多个无分支的语句；</li><li>箭头为边，表示控制流的方向。</li><li>边和结点圈定的封闭范围叫做区域。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/8c248a77-1692-490c-8c50-26d94b328a2c" width="60%"></div><p><br></p><h3 id="程序图的基本元素"><a href="#程序图的基本元素" class="headerlink" title="程序图的基本元素"></a>程序图的基本元素</h3><p>从图论的观点看，它是一个可以用 G = &lt; N , E ＞来表示的有向图。其中：</p><ul><li>N一结点；</li><li>E一有向边，指明程序的流程；</li><li>包含条件的结点称为判定结点；</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/3e0ec26b-a59e-450a-bd34-33c66ff70c71" width="60%"></div><p><br></p><h3 id="环路复杂性"><a href="#环路复杂性" class="headerlink" title="环路复杂性"></a>环路复杂性</h3><ul><li>V ( G ) ＝流图中区域数（包括图外区域）</li><li>V ( G ) ＝判定结点数＋ 1</li><li>V ( G )= E - N + 2</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/93570746-fd58-494b-a110-75e85b06197d" width="30%"></div><p><br></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="选择程序设计语言"><a href="#选择程序设计语言" class="headerlink" title="选择程序设计语言"></a>选择程序设计语言</h3><p>从软件工程的角度，根据程序设计语言发展的历程，大致分为 4 类：</p><ul><li>第一代语言：从属于机器的语言</li><li>第二代语言：汇编语言</li><li>第三代语言：高级程序设计语言</li><li>第四代语言（4GL）</li></ul><p><br></p><h3 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h3><p>编码风格是指一个人编制程序时所表现出来的特点、习惯、逻辑思路等。良好编码风格包括：</p><ul><li>程序内部应该有很好的文档：如标识符、注释良好，程序文档结构易读易理解。</li><li>数据说明应易于理解和维护</li><li>语句结构尽可能简单直观</li><li>输入输出风格遵守人机界面设计准则</li><li>效率满足用户需求即可</li></ul><p><br></p><h2 id="软件测试的基础"><a href="#软件测试的基础" class="headerlink" title="软件测试的基础"></a>软件测试的基础</h2><ul><li>什么是软件测试？<ul><li>是为了发现错误而执行程序的过程。</li><li>发现错误是为了更正错误，最终得到一个高质量的软件系统。</li></ul></li><li>软件测试的对象：整个软件定义、开发周期的产品</li><li>测试用例：通常指测试数据和预期的输出结果</li></ul><p><br></p><h3 id="软件测试存在的矛盾"><a href="#软件测试存在的矛盾" class="headerlink" title="软件测试存在的矛盾"></a>软件测试存在的矛盾</h3><p>用户希望通过软件测试暴露软件中隐藏的错误和缺陷，以考虑是否可接受该产品。软件开发者希望通过软件测试表明软件产品中不存在错误，已正确地实现了用户的要求。</p><p><br></p><h3 id="软件测试目的"><a href="#软件测试目的" class="headerlink" title="软件测试目的"></a>软件测试目的</h3><ul><li>测试是为了发现错误而执行程序的过程</li><li>好的测试用例是极可能发现至今为止尚未发现的错误的测试方案；</li><li>成功的测试是发现了至今未发现的错误的测试<br>总之，测试的目的是以最少的时间和人力，系统地找出软件中潜在的各种错误和缺陷；测试附带的收获是它能证明软件的功能和性能与需求说明相符合。注意：测试不能表明软件中不存在错误，它只能说明软件中存在错误。</li></ul><p><br></p><h3 id="软件测试的准则"><a href="#软件测试的准则" class="headerlink" title="软件测试的准则"></a>软件测试的准则</h3><ul><li>所有测试都能追溯到用户需求</li><li>应该远在测试开始之前就制定出测试计划</li><li>应该把 Pareto原理应用到软件测试中<ul><li>群集现象： 80 ％的错误可能是由 20 ％的模块造成的</li></ul></li><li>从“小规模”测试开始，逐步过渡到“大规模”测试</li><li>穷举测试是不可能的<ul><li>测试只能证明程序有错，不能证明程序没有错误</li></ul></li><li>应由独立的第三方从事测试工作</li></ul><p><br></p><h3 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h3><ul><li>单元（模块）测试：检查各各程序模块是否有错误，能发现编码和详细设计的错误。</li><li>集成测试（子系统和系统测试）：测试模块（子系统）接口，发现软件设计和需求说明的错误。</li><li>确认（验收）测试：检查软件是否满足用户的需要以及文档资料是否完整、准确</li><li>平行运行：同时运行新、旧系统</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/13624a81-46de-4f96-b633-03ab6807b227" width="80%"></div><p><br></p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="模块接口测试"><a href="#模块接口测试" class="headerlink" title="模块接口测试"></a>模块接口测试</h3><p>在单元测试的开始，应对通过被测模块的数据流进行测试。测试项目：</p><ul><li>调用本模块的输入参数是否正确；</li><li>本模块调用子模块时，输入给子模块的参数是否正确；</li><li>输出给标准函数的参数是否正确；</li><li>全局量的定义和用法在各摸块中是否一致；</li><li>与外部设备的输入输出是否正确</li></ul><p><br></p><h3 id="局部数据结构测试"><a href="#局部数据结构测试" class="headerlink" title="局部数据结构测试"></a>局部数据结构测试</h3><p>测试项目：</p><ul><li>不正确或不一致的数据类型说明</li><li>使用尚未赋值或尚未初始化的变量</li><li>错误的初始值或错误的缺省值</li><li>变量名拼写错或书写错</li><li>不一致的数据类型</li><li>全局数据对模块的影响</li></ul><p><br></p><h3 id="重要的执行通路测试"><a href="#重要的执行通路测试" class="headerlink" title="重要的执行通路测试"></a>重要的执行通路测试</h3><p>白盒测试</p><p><br></p><h3 id="错误处理测试"><a href="#错误处理测试" class="headerlink" title="错误处理测试"></a>错误处理测试</h3><p>着重测试以下可能发生的错误：</p><ul><li>出错的措述是否难以理解</li><li>出错的描述是否能够对错误定位</li><li>显示的错误与实际的错误是否相符</li><li>对错误条件的处理正确与否</li><li>在对错误进行处理之前，错误条件是否已经引起系统的干预等</li></ul><p><br></p><h3 id="边界测试"><a href="#边界测试" class="headerlink" title="边界测试"></a>边界测试</h3><p>重点检查刚好等于、大于或小于边界值的数据;<br>对运行时间有要求的模块，还要专门进行关键路径测试，以确定最坏情况下和平均意义下影响模块运行时间的因素。</p><p><br></p><h3 id="代码审查"><a href="#代码审查" class="headerlink" title="代码审查"></a>代码审查</h3><p>人工测试源程序。</p><ul><li>参与者：程序的设计者、编写者、测试者没有直接参与系统开发，但有力的程序员。</li><li>方法：研究设计说明书，一起审查程序代码如何实现设计，从中发现问题。</li><li>注意：通常代码审查和机器测试结合使用。</li></ul><p><br></p><h3 id="计算机测试"><a href="#计算机测试" class="headerlink" title="计算机测试"></a>计算机测试</h3><p>单元测试通常在编码阶段进行。常用机器测试，即通过运行模块发现问题。两个重要概念：</p><ul><li>驱动程序（ driver ) ：相当于被测试模块的“主程序”，接收测试数据，把这些数据传送给被测试的模块，并且输出相关结果。</li><li>存根程序（stub）：代替被测试模块所调用的模块。不需要具有子模块所有功能，但不允许什么事情也不做。</li></ul><div align="center"><img src="http://blogfileqiniu.isjinhao.site/996d6109-4361-4697-b365-9eafb452bfa5" width="70%"></div><p><br></p><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><p>在单元测试之后，将模块组装成系统，为发现并排除模块在连接中可能出现的问题，而进行的测试。需要考虑：</p><ul><li>模块连接时穿越模块接口的数据是否会 丢失；</li><li>一个模块对另一个模块是否会产生不利的影响；</li><li>各子功能组合起来，能 否达到预期要求的父功能</li><li>全局数据结构是否有问题；</li><li>单个模块的误差累积起来，是 否会放大至不能接受的程度。</li></ul><p><br></p><h3 id="集成测试的两种方式"><a href="#集成测试的两种方式" class="headerlink" title="集成测试的两种方式"></a>集成测试的两种方式</h3><h4 id="非渐增式组装方式"><a href="#非渐增式组装方式" class="headerlink" title="非渐增式组装方式"></a>非渐增式组装方式</h4><p>对每个模块分别进行单元测试，再把所有模块组装成一个完整的系统进行的测试，从而得到要求的软件系统。</p><h4 id="渐增式组装方式"><a href="#渐增式组装方式" class="headerlink" title="渐增式组装方式"></a>渐增式组装方式</h4><p>先对模块进行单元测试，然后将测试后的模块逐步组装成较大的系统；在组装的过程中边连接边测试，以发现连接过程中产生的问题；最后组装成为要求的软件系统。</p><h5 id="自顶向下的渐增方式"><a href="#自顶向下的渐增方式" class="headerlink" title="自顶向下的渐增方式"></a>自顶向下的渐增方式</h5><p>将模块按系统程序结构，沿控制层次自顶向下进行组装。不需要驱动模块，需要存根模块</p><h5 id="自底向上结合的渐增方式"><a href="#自底向上结合的渐增方式" class="headerlink" title="自底向上结合的渐增方式"></a>自底向上结合的渐增方式</h5><p>从程序模块结构最底层的模块开始组装和测试。不再需要存根程序，需要驱动模块。组合策略：</p><ol><li>把低层模块组合成实现某个特定的软件子功能的族；</li><li>用驱动程序协调测试数据的输入和输出;</li><li>对由模块组成的子功能族进行测试;</li><li>去掉驱动程序，没软件结构自下向上移动，把子功能族组合起来形成更大的子功能族。</li></ol><h5 id="混合渐增测试"><a href="#混合渐增测试" class="headerlink" title="混合渐增测试"></a>混合渐增测试</h5><ul><li>衍变的自顶向下的增殖测试：<ul><li>先对输入／输出模块和引入新算法模块进行测试；</li><li>再自底向上组装成为功能相当完整且相对独立的子系统；</li><li>然后由主模块开始自顶向下进行增殖测试。</li></ul></li><li>自底向上 - 自顶向下的增殖测试：<ul><li>先对含读操作的子系统自底向上直至根结点模块进行组装和测试；</li><li>再对含写操作的子系统做自顶向下的组装与测试。</li></ul></li></ul><p><br></p><h2 id="确认测试"><a href="#确认测试" class="headerlink" title="确认测试"></a>确认测试</h2><p>又称有效性测试。验证软件的功能、性能及其它特性是否与用户的要求一致。</p><ul><li>确认测试的基础 ：软件需求规格说明书</li><li>确认测试的主要工作：有效性测试与软件配置审查</li><li>主要参与人员：以用户为主</li></ul><p><br></p><h3 id="确认测试范围"><a href="#确认测试范围" class="headerlink" title="确认测试范围"></a>确认测试范围</h3><p>通常采用黑盒测试，验证被测软件是否满足用户需求。</p><ul><li>测试计划：包括测试种类及进度安排；</li><li>测试步骤：描述具体的测试用例</li><li>测试目的：<ul><li>确定软件的特性是否与需求相符；</li><li>所有的文档都是正确且便于使用；</li><li>其它软件需求。</li></ul></li><li>测试结果：<ul><li>与预期的结果相符；</li><li>与预期的结果不符：要提交一份问题报告。</li></ul></li></ul><p><br></p><h3 id="软件配置复查"><a href="#软件配置复查" class="headerlink" title="软件配置复查"></a>软件配置复查</h3><p>目的：</p><ul><li>保证软件配置的所有成分都齐全；</li><li>各方面的质量都符合要求；</li><li>具有维护阶段所必需的细节；</li><li>而且已经编排好分类的目录。<br>应当严格遵守用户手册和操作手册中规定的使用步骤，以便检查这些文档资料的完整性和正确性。</li></ul><p><br></p><h3 id="α测试和β测试"><a href="#α测试和β测试" class="headerlink" title="α测试和β测试"></a>α测试和β测试</h3><ul><li>α测试：由用户在开发环境下进行的测试。主要评价软件产品的:FLURPS(即功能、局域化、可使用性、可靠性、性能和支持）</li><li>β测试：由最终用户在实际使用环境下进行的测试，这些用户定期返回有关错误信息给开发者。<br>注意：只有当α测试达到一定的可靠程度时，才开始β测试。</li></ul><p><br></p><h2 id="自盒测试技术"><a href="#自盒测试技术" class="headerlink" title="自盒测试技术"></a>自盒测试技术</h2><p>白盒测试执行的要求：</p><ul><li>对程序模块的所有独立的执行路径至少测试一次</li><li>对所有的逻辑判定，取“真”与取“假”的两种情况都至少测试一次；</li><li>在循环的边界和运行界限内执行循环体；</li><li>测试内部数据结构的有效性。</li></ul><p><br></p><h3 id="逻辑覆盖"><a href="#逻辑覆盖" class="headerlink" title="逻辑覆盖"></a>逻辑覆盖</h3><h4 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h4><p>使得每一可执行语句至少执行一次。</p><h4 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a>判定覆盖</h4><p>运行被测程序，使得程序中每个判断的取真分支和取假分支至少经历一次。</p><h4 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h4><p>使得程序中每个判断的每个条件的可能取值至少执行一次。</p><h4 id="判定一条件覆盖"><a href="#判定一条件覆盖" class="headerlink" title="判定一条件覆盖"></a>判定一条件覆盖</h4><p>使得判断中每个条件的所有可能取值至少执行一次，每个判断中的每个分支至少执行一次。即同时满足判断覆盖和条件覆盖。</p><h4 id="条件组合覆盖"><a href="#条件组合覆盖" class="headerlink" title="条件组合覆盖"></a>条件组合覆盖</h4><p>使得每个判断的所有可能的条件取值组合至少执行一次。</p><h4 id="点覆盖"><a href="#点覆盖" class="headerlink" title="点覆盖"></a>点覆盖</h4><p>如果连通图G的子图G′是连通的，而且包含G的所有结点，则称G′是G的点覆盖。点覆盖标准和语句覆盖标准是相同的。</p><h4 id="边覆盖"><a href="#边覆盖" class="headerlink" title="边覆盖"></a>边覆盖</h4><p>要求选取足够多测试数据，使得程序执行路径至少经过流图中每条边一次。通常边覆盖和判定覆盖是一致的。</p><h4 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h4><p>覆盖程序中所有可能的路径。</p><p><br></p><h3 id="控制结构测试"><a href="#控制结构测试" class="headerlink" title="控制结构测试"></a>控制结构测试</h3><h4 id="基本路径测试"><a href="#基本路径测试" class="headerlink" title="基本路径测试"></a>基本路径测试</h4><ul><li>以环形复杂度为基础，导出基本可执行路径集合，设计测试用例的方法。</li><li>测试用例要保证程序的每个可执行语句至少执行一次。</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>由程序流程图导出程序控制流图，并计算其环路复杂度：</li><li>确定程序的独立路径<ul><li>什么是独立路径？流图中，一条独立路径是至少包含一条在其它独立路径中从未有过的边的路径。独立路径条数是确保程序中，每个可执行语句至少能被执行一次所必需的测试用例数目的上界。独立路径条数＝程序环路复杂性 V ( G )</li></ul></li></ol><p><br></p><h2 id="黑盒测试技术"><a href="#黑盒测试技术" class="headerlink" title="黑盒测试技术"></a>黑盒测试技术</h2><p>黑盒测试主要是为了发现以下错误：</p><ul><li>是否有不正确或遗漏了的功能？</li><li>能否正确地接受输入？能否正确的输出结果？</li><li>是否有数据结构错误或外部数据库访问错误？</li><li>性能上是否能够满足要求？</li><li>是否有初始化或终止性错误？<br>几种黑盒测试技术：</li><li>等价类划分</li><li>边界值分析</li><li>错误推测法</li><li>因果图</li></ul><p><br></p><h2 id="等价划分"><a href="#等价划分" class="headerlink" title="等价划分"></a>等价划分</h2><p>把所有可能的输入数据（包括有效或无效的），划分成若干数据类（等价类），然后从每个数据类中选取少数有代表性的数据做为测试用例。这种方法完全不考虑程序的内部结构，只依据程序的规格说明来设计测试用例。</p><p><br></p><h3 id="步骤1：划分等价类"><a href="#步骤1：划分等价类" class="headerlink" title="步骤1：划分等价类"></a>步骤1：划分等价类</h3><p>等价类是指输入数据的子集合。在该子集合中，各输入数据对于发现程序中的错误都是等效的。根据程序功能说明，确定有效和无效的等价类</p><h4 id="等价类划分原则"><a href="#等价类划分原则" class="headerlink" title="等价类划分原则"></a>等价类划分原则</h4><ul><li>若规定了取值范围，或输入值的个数，则可以确立一个有效等价类和两个无效等价类。</li><li>如果规定了输入数据的一组值，而且程序要对每种输入数据分别处理，则可为每种输入值确立一个有效等价类，此外针对这组值确立一个无效等价类，它是所有不允许的输入值的集合。</li><li>若规定了输入值的集合，或者是规定了“必须如何”的条件，则可确立一个有效等价类和一个无效等价类。</li><li>如果规定输入数据为整型，则可划分出正整、零和负整数三个有效类，其他数据为无效类</li><li>如果程序处理对象是表格，则应使用空表、含一项和多项的表。</li><li>如果确知，已划分的等价类中各元素在程序中的处理方式不同，则应将此等价类进一步划分成更小的等价类。</li></ul><p><br></p><h3 id="步骤2：根据等价类设计测试用例"><a href="#步骤2：根据等价类设计测试用例" class="headerlink" title="步骤2：根据等价类设计测试用例"></a>步骤2：根据等价类设计测试用例</h3><p>在确立了等价类之后，建立等价类表，列出所有划分出的等价类。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/f777ca5c-2469-4016-a350-61b9cb9ef02a"></div><h4 id="测试用例的选择原则"><a href="#测试用例的选择原则" class="headerlink" title="测试用例的选择原则"></a>测试用例的选择原则</h4><ul><li>为每一个等价类规定一个唯一编号；</li><li>设计一个新的测试用例，使其<strong>尽可能多地覆盖</strong>尚未被覆盖的有效等价类，重复这一步，直到所有的有效等价类都被覆盖为止；</li><li>设计一个新的测试用例，使其<strong>仅覆盖一个尚未被覆盖</strong>的无效等价类，重复这一步，直到所有的无效等价类都被覆盖为止。</li></ul><p><br></p><h3 id="某报表处理系统"><a href="#某报表处理系统" class="headerlink" title="某报表处理系统"></a>某报表处理系统</h3><p>系统规定日期由年、月的 6 位数字字符组成，前 4 位代表年，后两位代表月。设日期限制在 1990 年 1 月至 1999 年 12 月，即系统只能对该段时期内的报表进行处理。如果用户输入的日期不在此范围内，则显示输入错误。现用等价类划分法设计测试用例，来测试程序的“日期检查功能”。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/9caf5819-be7f-4db1-a503-086049b2c72a" width="60%"></div><h4 id="为合理等价类设计测试用例"><a href="#为合理等价类设计测试用例" class="headerlink" title="为合理等价类设计测试用例"></a>为合理等价类设计测试用例</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/d968679e-2790-4b5e-bc0d-27e634f5fce0" width="70%"></div><h4 id="不合理等价类设计测试用例"><a href="#不合理等价类设计测试用例" class="headerlink" title="不合理等价类设计测试用例"></a>不合理等价类设计测试用例</h4><div align="center"><img src="http://blogfileqiniu.isjinhao.site/199edc0d-3add-4e3a-971a-3437f27f3934" width="50%"></div><p><br></p><h2 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h2><p>边界是指，对于输入和输出等价类而言，稍高和稍低于其边界值的一些特定情况。经验得知，大量的错误是发生在输入或输出范围的边界上，而不是在输入范围的内部。边界值分析方法思想：确定边界之后，选取正好等于、刚刚大于或刚刚小于边界的值做为测试数据，而不是选取等价类中典型值或任意值做为测试数据。通常总是与等价划分技术联合使用，是等价划分方法的补充。<br>假设一个数据库产品规范要求该产品能够处理从1到1000中间的任何数量的记录。请首先为其划分等价类，并利用等价类划分和边界值分析技术为其设计测试用例，并说明每个测试用例属于某等价类成员还是属于边界值或是邻接边界值。</p><p><br></p><h3 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h3><ul><li>等价类1：少于1个记录</li><li>等价类2：1到1000个记录</li><li>等价类3：多于1000个记录</li></ul><p><br></p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><ul><li>测试用例1：0个记录 //等价类1成员且邻接边界值</li><li>测试用例2：1个记录 //边界值</li><li>测试用例3：2个记录 //邻接边界值</li><li>测试用例4：100个记录 //等价类2的成员</li><li>测试用例5：999个记录 //邻接边界值</li><li>测试用例6：1000个记录 //边界值</li><li>测试用例7：1001个记录 //等价类3成员且邻接边界值</li></ul><p><br></p><h2 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h2><p>因果图是借助图形来设计测试用例的一种系统方法。它适用于被测程序具有多种输入条件，程序的输出又依赖于输入条件的各种组合的情况。因果图是一种简化了的逻辑图，它能直观地表明程序输入条件（原因）和输出动作（结果）之间的相互关系。</p><p><br></p><h3 id="利用因果图产生测试用例的基本步骤"><a href="#利用因果图产生测试用例的基本步骤" class="headerlink" title="利用因果图产生测试用例的基本步骤"></a>利用因果图产生测试用例的基本步骤</h3><ol><li>分析软件规格说明书中，哪些是原因（即输入条件或输入条件的等价类），哪些是结果（即输出条件）并给每个原因和结果赋予一个标识。</li><li>分析软件规格说明书中所描述的语义，找出原因与结果之间、原因与原因之间对应的是什么关系？根据这些关系画出因果图。</li><li>由于语法或环境的限制，有些原因与原因之间、原因与结果之间的组合情况不可能出现。为表明这些特殊情况，在因果图上用一些记号标明约束或限制条件。</li><li>把因果图转换为判断表</li><li>把判断表的每一列拿出来作为依据，设计测试用例。</li></ol><p><br></p><h3 id="在因果图中出现的基本符号"><a href="#在因果图中出现的基本符号" class="headerlink" title="在因果图中出现的基本符号"></a>在因果图中出现的基本符号</h3><p>通常在因果图中用 Ci 来表示原因，用Ei表示结果其基本符号如下图所示。其中各结点表示状态，可取值为 “0”或“1”。“0”表示某状态不出现，“1”表示某状态出现。主要的原因和结果之间的关系如下:</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/41c9b6dc-2732-4e96-a415-ee578d5fb157"></div>- 恒等：表示原因与结果之间是一对一的对应关系。若原因出现，则结果出现。若原因不出现，则结果也不出现。 - 非：表示原因与结果之间的一种否定关系。若原因出现，则结果不出现。若原因不出现，反而结果出现。<div align="center"><img src="http://blogfileqiniu.isjinhao.site/f20ff596-ebde-4b2e-a0fa-bf5cf899f490"></div>- 或：表示若几个原因中有一个出现，则结果出现，而当这几个原因都不出现时，结果才不出现。 - 与：表示若几个原因都出现，则结果才出现若几个原因中有一个不出现，结果就不出现。<br>### 例 设有一个处理单价为5角钱饮料自动售货机其规格说明为，若投入5角钱或1元钱的硬币 ，再按下橙汁或啤酒按钮，则相应的饮料就送出来；若售货机 没有零钱找，则一个显示零钱已找完的红灯亮，这时在投入1元硬币并按下按钮后，饮料不送出来而且1元硬币也退出来;若有零钱找，则应显示零钱找完的红灯灭， 在送出饮料的同时退还5角硬币。 | 序号 | 原因 | **序号** | 结果 | | :--: | :------------: | :------: | :----------------: | | 1 | 售货机有零钱找 | 2.1 | 售货机零钱找完灯亮 | | 2 | 投入1元硬币 | 2.2 | 退还1元硬币 | | 3 | 投入5角硬币 | 2.3 | 退还5角硬币 | | 4 | 按下橙汁按钮 | 2.4 | 送出橙汁饮料 | | 5 | 按下啤酒按钮 | 2.5 | 送出啤酒饮料 | | 序号 | 中间结点 | | :--: | :-----------------------------: | | 11 | 投入1元硬币且按下饮料按钮 | | 12 | 按下橙汁或啤酒的按钮 | | 13 | 应当找5角零钱并且售货机有零钱找 | | 14 | 钱已付请 |<div align="center"><img src="http://blogfileqiniu.isjinhao.site/144fa029-1b01-4b5a-a979-acc4973ed327"></div><p><br></p><h2 id="软件维护的定义"><a href="#软件维护的定义" class="headerlink" title="软件维护的定义"></a>软件维护的定义</h2><p>软件维护是指在软件运行或维护阶段对软件产品所进行的修改。分为四类：</p><p><br></p><h3 id="改正性维护"><a href="#改正性维护" class="headerlink" title="改正性维护"></a>改正性维护</h3><p>在软件交付使用后，由于开发时测试得不彻底或不完全，在运行阶段会暴露一些开发时未能测试出来的错误。为了识别和纠正软件错误，改正软件性能上的缺陷，避免实施中的错误使用，应当进行的诊断和改正错误的过程，这就是改正性维护。</p><p><br></p><h3 id="适应性维护"><a href="#适应性维护" class="headerlink" title="适应性维护"></a>适应性维护</h3><p>随着计算机技术的飞速发展和更新换代，软件系统所需的外部环境或数据环境可能会更新和升级。为了使软件系统适应这种变化，需要对软件进行相应的修改，这种维护活动称为适应性维护。</p><p><br></p><h3 id="扩充与完善性维护"><a href="#扩充与完善性维护" class="headerlink" title="扩充与完善性维护"></a>扩充与完善性维护</h3><p>在软件的使用过程中，用户往往会对软件提出新的功能与性能要求。为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性。这种情况下进行的维护活动叫做完善性维护。</p><p><br></p><h3 id="预防性维护"><a href="#预防性维护" class="headerlink" title="预防性维护"></a>预防性维护</h3><p>采用先进的软件工程方法，对需要维护的软件或软件中的某一部分重新进行设计、编制和测试。</p><div align="center"><img src="http://blogfileqiniu.isjinhao.site/b9d2a6b0-06b6-41ac-852e-5435c7b7b3bc" width="70%"></div><p><br></p><h2 id="软件的可维护性"><a href="#软件的可维护性" class="headerlink" title="软件的可维护性"></a>软件的可维护性</h2><p>指纠正软件系统出现的错误和缺陷，以及为满足新的要求进行修改、扩充或压缩的容易程度。<br>衡量软件质量的几个主要质量特性：</p><ul><li>可理解性：人们通过阅读源代码和相关文档，了解程序功能及其如何运行的容易程度。</li><li>可靠性：表明一个程序按照用户的要求和设计目标，在给定的一段时间内正确执行的概率。</li><li>可测试性：表明诊断和测试的容易程度。</li><li>可修改性：表明程序容易修改的程度。</li><li>可移植性：表明把程序从一种计算环境转移到另一种计算环境的难易程度。</li><li>可重用性：指同一个软件（或软件成份）不做修改或稍加改动，就可以在不同环境中多次重复使用。</li></ul><p><br></p><h2 id="软件再工程过程"><a href="#软件再工程过程" class="headerlink" title="软件再工程过程"></a>软件再工程过程</h2><p>预防性维护也称为软件再工程</p><p><br></p><h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p>软件的逆向工程是分析程序，力图在比源代码更高的抽象层次上建立程序表示的过程，是一个设计恢复的过程，逆向工程工具可以从已有的程序中抽取数据结构、体系结构和程序设计信息。</p><p><br></p><h3 id="正向工程"><a href="#正向工程" class="headerlink" title="正向工程"></a>正向工程</h3><p>应用现代软件工程的概念、原理、技术和方法，重新开发现有的某个应用系统。</p><p><br></p><h3 id="软件再工程"><a href="#软件再工程" class="headerlink" title="软件再工程"></a>软件再工程</h3><p>软件再工程是一个工程过程，它将逆向工程、重构和正向工程组合起来，旨在对现存的大量软件系统进行挖掘、整理，重新获得设计信息，用这些信息改建或重构现有的系统，以改进它的综合质量；或者得到有用的软件构件，对已有软件构件进行维护以延长其生存期。再工程的基础是系统理解，包括对运行系统、源代码、设计、分析、文档等的全面理解。但在很多情况下，由于各类文档的丢失，只能对源代码进行理解，即程序理解。<br>典型的软件再工程过程模型定义了库存目录分析、文档重构、逆向工程、代码重构、数据重构和正向工程6类活动。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 17 2019 23:08:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2 id=&quot;软件危机&quot;&gt;&lt;a href=&quot;#软件危机&quot; class=&quot;headerlink&quot; title=&quot;软件危机&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="课内学习" scheme="https://isjinhao.github.io/categories/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="课内学习" scheme="https://isjinhao.github.io/tags/%E8%AF%BE%E5%86%85%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="软件工程" scheme="https://isjinhao.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
</feed>
