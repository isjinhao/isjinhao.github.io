<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ISJINHAO</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://isjinhao.github.io/"/>
  <updated>2019-08-06T06:31:07.691Z</updated>
  <id>https://isjinhao.github.io/</id>
  
  <author>
    <name>ISJINHAO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kettle花式设置参数</title>
    <link href="https://isjinhao.github.io/2019/kettle%E8%8A%B1%E5%BC%8F%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0/"/>
    <id>https://isjinhao.github.io/2019/kettle花式设置参数/</id>
    <published>2019-08-06T02:17:50.000Z</published>
    <updated>2019-08-06T06:31:07.691Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://isjinhao.github.io/2019/01-Java%E5%9F%BA%E7%A1%80%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://isjinhao.github.io/2019/01-Java基础 - 副本/</id>
    <published>2019-08-04T07:45:00.322Z</published>
    <updated>2019-08-06T06:31:51.786Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --><h2 id="集合概览"><a href="#集合概览" class="headerlink" title="集合概览"></a>集合概览</h2><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/01-Java基础 - 副本/2019-08-04_154726.jpg"></div><p></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li><strong>Arraylist：</strong> Object数组</li><li><strong>Vector：</strong> Object数组，线程安全。</li><li><strong>LinkedList：</strong> 双向链表</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li><strong>HashSet（无序，唯一）:</strong> 基于 HashMap 实现的，底层采用 HashMap 来保存元素</li><li><strong>LinkedHashSet：</strong> LinkedHashSet 继承与 HashSet，并且其内部是通过 LinkedHashMap 来实现的。有点类似于我们之前说的LinkedHashMap 其内部是基于 Hashmap 实现一样，不过还是有一点点区别的。</li><li><strong>TreeSet（有序，唯一）：</strong> 红黑树(自平衡的排序二叉树。)</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li><strong>HashMap：</strong> JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间</li><li><strong>LinkedHashMap：</strong> LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看：《LinkedHashMap 源码详细分析（JDK1.8）》</li><li><strong>TreeMap：</strong> 红黑树</li></ul><h2 id="ArrayList分析"><a href="#ArrayList分析" class="headerlink" title="ArrayList分析"></a>ArrayList分析</h2><p><strong>ArrayList有三种方式来初始化，构造方法源码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认初始容量大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *默认构造函数，使用初始容量10构造一个空列表(无参数构造)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带初始容量参数的构造函数。（用户自己指定容量）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;<span class="comment">//初始容量大于0</span></span><br><span class="line">        <span class="comment">//创建initialCapacity大小的数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;<span class="comment">//初始容量等于0</span></span><br><span class="line">        <span class="comment">//创建空数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//初始容量小于0，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回</span></span><br><span class="line"><span class="comment">*如果指定的集合为null，throws NullPointerException。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细心的同学一定会发现 ：<strong>以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为10。</strong> 下面在我们分析 ArrayList 扩容时会讲到这一点内容！</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a><code>add</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将指定的元素追加到此列表的末尾。 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//添加元素之前，先调用ensureCapacityInternal方法</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//这里看到ArrayList添加元素的实质就相当于为数组赋值</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ensureCapacityInternal"><a href="#ensureCapacityInternal" class="headerlink" title="ensureCapacityInternal()"></a><code>ensureCapacityInternal()</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当我们要 add 进第1个元素到 ArrayList 时，minCapacity为1，在Math.max()方法比较后，minCapacity 为10。elementData.length 为0 （因为还是一个空的 list），因为执行了 <code>ensureCapacityInternal()</code> 方法 ，所以 minCapacity 此时为10。此时，<code>minCapacity - elementData.length &gt; 0</code>成立，所以会进入 <code>grow(minCapacity)</code> 方法。</li><li>当add第2个元素时，minCapacity 为2，此时e lementData.length(容量)在添加第一个元素后扩容成 10 了。此时，<code>minCapacity - elementData.length &gt; 0</code>不成立，所以不会进入 （执行）<code>grow(minCapacity)</code> 方法。</li><li>添加第3、4···到第10个元素时，依然不会执行grow方法，数组容量都为10。</li></ul><p>直到添加第11个元素，minCapacity(为11)比elementData.length（为10）要大。进入grow方法进行扩容。</p><h3 id="grow"><a href="#grow" class="headerlink" title="grow()"></a><code>grow()</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">    <span class="comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//若新容量大于MAX_ARRAY_SIZE，执行hugeCapacity()方法来比较minCapacity和MAX_ARRAY_SIZE，</span></span><br><span class="line">    <span class="comment">//若minCapacity大于最大容量，则新容量则为Integer.MAX_VALUE，否则，新容量大小则为 </span></span><br><span class="line">    <span class="comment">//MAX_ARRAY_SIZE 即为Integer.MAX_VALUE - 8。</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍！</p><blockquote><p>“&gt;&gt;”（移位运算符）：&gt;&gt;1 右移一位相当于除2，右移n位相当于除以 2 的 n 次方。这里 oldCapacity 明显右移了1位所以相当于oldCapacity /2。对于大数据的2进制运算,位移运算符比那些普通运算符的运算要快很多,因为程序仅仅移动一下而已,不去计算,这样提高了效率,节省了资源</p></blockquote><p><strong>我们再来通过例子探究一下grow() 方法 ：</strong></p><ul><li>当add第1个元素时，oldCapacity 为0，经比较后第一个if判断成立，newCapacity = minCapacity(为10)。但是第二个if判断不会成立，即newCapacity 不比 MAX_ARRAY_SIZE大，则不会进入 <code>hugeCapacity</code> 方法。数组容量为10，add方法中 return true,size增为1。</li><li>当add第11个元素进入grow方法时，newCapacity为15，比minCapacity（为11）大，第一个if判断不成立。新容量没有大于数组最大size，不会进入hugeCapacity方法。数组容量扩为15，add方法中return true，size增为11。</li><li>以此类推······</li></ul><p>如果新容量大于 MAX_ARRAY_SIZE,进入(执行) <code>hugeCapacity()</code> 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，如果minCapacity大于最大容量，则新容量则为<code>Integer.MAX_VALUE</code>，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 <code>Integer.MAX_VALUE - 8</code>。</p><p><strong>这里补充一点比较重要，但是容易被忽视掉的知识点：</strong></p><ul><li>java 中的 <code>length</code>属性是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度则用到了 length 这个属性.</li><li>java 中的 <code>length()</code> 方法是针对字符串说的,如果想看这个字符串的长度则用到 <code>length()</code> 这个方法.</li><li>java 中的 <code>size()</code> 方法是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!</li></ul><h3 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy()"></a><code>System.arraycopy()</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在此列表中的指定位置插入指定的元素。 </span></span><br><span class="line"><span class="comment"> *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；</span></span><br><span class="line"><span class="comment"> *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//arraycopy()方法实现数组自己复制自己</span></span><br><span class="line">    <span class="comment">//elementData:源数组;index:源数组中的起始位置;elementData：目标数组；index + 1：目标数组中的起始位置； size - index：要复制的数组元素的数量；</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arrays-copyOf"><a href="#Arrays-copyOf" class="headerlink" title="Arrays.copyOf()"></a><code>Arrays.copyOf()</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, </span><br><span class="line">                               <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">        ? (T[]) <span class="keyword">new</span> Object[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人觉得使用 <code>Arrays.copyOf()</code>方法主要是为了给原有数组扩容。</p><h3 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity"></a><code>ensureCapacity</code></h3><p>ArrayList 源码中有一个 <code>ensureCapacity</code> 方法不知道大家注意到没有，这个方法 ArrayList 内部没有被调用过，所以很显然是提供给用户调用的，那么这个方法有什么作用呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">如有必要，增加此 ArrayList 实例的容量，以确保它至少可以容纳由minimum capacity参数指定的元素数。</span><br><span class="line"> *</span><br><span class="line"> * @param   minCapacity   所需的最小容量</span><br><span class="line"> */</span><br><span class="line">public void ensureCapacity(int minCapacity) &#123;</span><br><span class="line">    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">        // any size if not default element table</span><br><span class="line">        ? 0</span><br><span class="line">        // larger than default for default empty table. It&apos;s already</span><br><span class="line">        // supposed to be at default size.</span><br><span class="line">        : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">    if (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最好在 add 大量元素之前用 ensureCapacity 方法，以减少增量重新分配的次数</strong></p><p>我们通过下面的代码实际测试以下这个方法的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnsureCapacityTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> N = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"使用ensureCapacity方法前："</span>+(endTime - startTime));</span><br><span class="line"></span><br><span class="line">list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"><span class="keyword">long</span> startTime1 = System.currentTimeMillis();</span><br><span class="line">list.ensureCapacity(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endTime1 = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"使用ensureCapacity方法后："</span>+(endTime1 - startTime1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用ensureCapacity方法前：4637</span><br><span class="line">使用ensureCapacity方法后：241</span><br></pre></td></tr></table></figure><p>通过运行结果，我们可以很明显的看出向 ArrayList 添加大量元素之前最好先使用<code>ensureCapacity</code> 方法，以减少增量重新分配的次数。</p><h2 id="LinkedList分析"><a href="#LinkedList分析" class="headerlink" title="LinkedList分析"></a>LinkedList分析</h2><p>LinkedList是一个实现了List接口和Deque接口的双端链表。 LinkedList底层的链表结构使它支持高效的插入和删除操作，另外它实现了Deque接口，使得LinkedList类也具有队列的特性；LinkedList不是线程安全的，如果想使LinkedList变成线程安全的，可以调用静态类Collections类中的synchronizedList方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list=Collections.synchronizedList(new LinkedList(...));</span><br></pre></td></tr></table></figure><h3 id="内部结构分析"><a href="#内部结构分析" class="headerlink" title="内部结构分析"></a>内部结构分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">E item;<span class="comment">//节点值</span></span><br><span class="line">    Node&lt;E&gt; next;<span class="comment">//后继节点</span></span><br><span class="line">    Node&lt;E&gt; prev;<span class="comment">//前驱节点</span></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类就代表双端链表的节点Node。这个类有三个属性，分别是前驱节点，本节点的值，后继结点。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>空构造方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用已有的集合创建链表的构造方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h3><p><strong>add(E e)</strong> 方法：将元素添加到链表尾部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);<span class="comment">//这里就只调用了这一个方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 链接使e作为最后一个元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;<span class="comment">//新建节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    l.next = newNode;<span class="comment">//指向后继元素也就是指向下一个元素</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>add(int index,E e)</strong>：在指定位置添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index); <span class="comment">//检查索引是否处于[0-size]之间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)<span class="comment">//添加在链表尾部</span></span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//添加在链表中间</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>linkBefore方法需要给定两个参数，一个插入节点的值，一个指定的node，所以我们又调用了Node(index)去找到index对应的node</p><p><strong>addAll(Collection c )：将集合插入到链表尾部</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>addAll(int index, Collection c)：</strong> 将集合从指定位置开始插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1:检查index范围是否在size之内</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2:toArray()方法把集合的数据存到对象数组中</span></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3：得到插入位置的前驱节点和后继节点</span></span><br><span class="line">    Node&lt;E&gt; pred, succ;</span><br><span class="line">    <span class="comment">//如果插入位置为尾部，前驱节点为last，后继节点为null</span></span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">        succ = <span class="keyword">null</span>;</span><br><span class="line">        pred = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则，调用node()方法得到后继节点，再得到前驱节点</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        succ = node(index);</span><br><span class="line">        pred = succ.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4：遍历数据将数据插入</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</span><br><span class="line">        <span class="comment">//创建新节点</span></span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//如果插入位置在链表头部</span></span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pred.next = newNode;</span><br><span class="line">        pred = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果插入位置在尾部，重置last节点</span></span><br><span class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = pred;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则，将插入的链表与先前链表连接起来</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pred.next = succ;</span><br><span class="line">        succ.prev = pred;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size += numNew;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面可以看出addAll方法通常包括下面四个步骤：</p><ol><li>检查index范围是否在size之内</li><li>toArray()方法把集合的数据存到对象数组中</li><li>得到插入位置的前驱和后继节点</li><li>遍历数据，将数据插入到指定位置</li></ol><p><strong>addFirst(E e)：</strong> 将元素添加到链表头部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);<span class="comment">//新建节点，以头节点为后继节点</span></span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="comment">//如果链表为空，last节点也指向该节点</span></span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="comment">//否则，将头节点的前驱指针指向新节点，也就是指向前一个元素</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>addLast(E e)：</strong> 将元素添加到链表尾部，与 <strong>add(E e)</strong> 方法一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据位置取数据的方法"><a href="#根据位置取数据的方法" class="headerlink" title="根据位置取数据的方法"></a>根据位置取数据的方法</h3><p><strong>get(int index)：</strong> 根据指定索引返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查index范围是否在size之内</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="comment">//调用Node(index)去找到index对应的node然后返回它的值</span></span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取头节点（index=0）数据方法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> f.item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区别：</strong> getFirst()，element()，peek()，peekFirst() 这四个获取头结点方法的区别在于对链表为空时的处理，是抛出异常还是返回null，其中<strong>getFirst()</strong> 和<strong>element()</strong> 方法将会在链表为空时，抛出异常</p><p>element()方法的内部就是使用getFirst()实现的。它们会在链表为空时，抛出NoSuchElementException<br><strong>获取尾节点（index=-1）数据方法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> l.item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : l.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>两者区别：</strong> <strong>getLast()</strong> 方法在链表为空时，会抛出<strong>NoSuchElementException</strong>，而<strong>peekLast()</strong> 则不会，只是会返回 <strong>null</strong>。</p><h3 id="根据对象得到索引的方法"><a href="#根据对象得到索引的方法" class="headerlink" title="根据对象得到索引的方法"></a>根据对象得到索引的方法</h3><p><strong>int indexOf(Object o)：</strong> 从头遍历找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从头遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//从头遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>int lastIndexOf(Object o)：</strong> 从尾遍历找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = size;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从尾遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">            index--;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//从尾遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">            index--;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查链表是否包含某对象的方法："><a href="#检查链表是否包含某对象的方法：" class="headerlink" title="检查链表是否包含某对象的方法："></a>检查链表是否包含某对象的方法：</h3><p><strong>contains(Object o)：</strong> 检查对象o是否存在于链表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h3><p><strong>remove()</strong> ,<strong>removeFirst(),pop():</strong> 删除头节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>removeLast(),pollLast():</strong> 删除尾节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区别：</strong> removeLast()在链表为空时将抛出NoSuchElementException，而pollLast()方法返回null。</p><p><strong>remove(Object o):</strong> 删除指定元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果删除对象为null</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从头开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="comment">//找到元素</span></span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//从链表中移除找到的元素</span></span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//从头开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="comment">//找到元素</span></span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                <span class="comment">//从链表中移除找到的元素</span></span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当删除指定对象时，只需调用remove(Object o)即可，不过该方法一次只会删除一个匹配的对象，如果删除了匹配对象，返回true，否则false。</p><p>unlink(Node x) 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;<span class="comment">//得到后继节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;<span class="comment">//得到前驱节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除前驱指针</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;<span class="comment">//如果删除的节点是头节点,令头节点指向该节点的后继节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;<span class="comment">//将前驱节点的后继节点指向后继节点</span></span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除后继指针</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;<span class="comment">//如果删除的节点是尾节点,令尾节点指向该节点的前驱节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>remove(int index)</strong>：删除指定位置的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查index范围</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="comment">//将节点删除</span></span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList类常用方法测试"><a href="#LinkedList类常用方法测试" class="headerlink" title="LinkedList类常用方法测试"></a>LinkedList类常用方法测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] srgs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建存放int类型的linkedList</span></span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">/************************** linkedList的基本操作 ************************/</span></span><br><span class="line">        linkedList.addFirst(<span class="number">0</span>); <span class="comment">// 添加元素到列表开头</span></span><br><span class="line">        linkedList.add(<span class="number">1</span>); <span class="comment">// 在列表结尾添加元素</span></span><br><span class="line">        linkedList.add(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 在指定位置添加元素</span></span><br><span class="line">        linkedList.addLast(<span class="number">3</span>); <span class="comment">// 添加元素到列表结尾</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"LinkedList（直接输出的）: "</span> + linkedList);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"getFirst()获得第一个元素: "</span> + linkedList.getFirst()); <span class="comment">// 返回此列表的第一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"getLast()获得第最后一个元素: "</span> + linkedList.getLast()); <span class="comment">// 返回此列表的最后一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"removeFirst()删除第一个元素并返回: "</span> + linkedList.removeFirst()); <span class="comment">// 移除并返回此列表的第一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"removeLast()删除最后一个元素并返回: "</span> + linkedList.removeLast()); <span class="comment">// 移除并返回此列表的最后一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"After remove:"</span> + linkedList);</span><br><span class="line">        System.out.println(<span class="string">"contains()方法判断列表是否包含1这个元素:"</span> + linkedList.contains(<span class="number">1</span>)); <span class="comment">// 判断此列表包含指定元素，如果是，则返回true</span></span><br><span class="line">        System.out.println(<span class="string">"该linkedList的大小 : "</span> + linkedList.size()); <span class="comment">// 返回此列表的元素个数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************************** 位置访问操作 ************************/</span></span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">        linkedList.set(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 将此列表中指定位置的元素替换为指定的元素</span></span><br><span class="line">        System.out.println(<span class="string">"After set(1, 3):"</span> + linkedList);</span><br><span class="line">        System.out.println(<span class="string">"get(1)获得指定位置（这里为1）的元素: "</span> + linkedList.get(<span class="number">1</span>)); <span class="comment">// 返回此列表中指定位置处的元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************************** Search操作 ************************/</span></span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">        linkedList.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"indexOf(3): "</span> + linkedList.indexOf(<span class="number">3</span>)); <span class="comment">// 返回此列表中首次出现的指定元素的索引</span></span><br><span class="line">        System.out.println(<span class="string">"lastIndexOf(3): "</span> + linkedList.lastIndexOf(<span class="number">3</span>));<span class="comment">// 返回此列表中最后出现的指定元素的索引</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************************** Queue操作 ************************/</span></span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"peek(): "</span> + linkedList.peek()); <span class="comment">// 获取但不移除此列表的头</span></span><br><span class="line">        System.out.println(<span class="string">"element(): "</span> + linkedList.element()); <span class="comment">// 获取但不移除此列表的头</span></span><br><span class="line">        linkedList.poll(); <span class="comment">// 获取并移除此列表的头</span></span><br><span class="line">        System.out.println(<span class="string">"After poll():"</span> + linkedList);</span><br><span class="line">        linkedList.remove();</span><br><span class="line">        System.out.println(<span class="string">"After remove():"</span> + linkedList); <span class="comment">// 获取并移除此列表的头</span></span><br><span class="line">        linkedList.offer(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"After offer(4):"</span> + linkedList); <span class="comment">// 将指定元素添加到此列表的末尾</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************************** Deque操作 ************************/</span></span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">        linkedList.offerFirst(<span class="number">2</span>); <span class="comment">// 在此列表的开头插入指定的元素</span></span><br><span class="line">        System.out.println(<span class="string">"After offerFirst(2):"</span> + linkedList);</span><br><span class="line">        linkedList.offerLast(<span class="number">5</span>); <span class="comment">// 在此列表末尾插入指定的元素</span></span><br><span class="line">        System.out.println(<span class="string">"After offerLast(5):"</span> + linkedList);</span><br><span class="line">        System.out.println(<span class="string">"peekFirst(): "</span> + linkedList.peekFirst()); <span class="comment">// 获取但不移除此列表的第一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"peekLast(): "</span> + linkedList.peekLast()); <span class="comment">// 获取但不移除此列表的第一个元素</span></span><br><span class="line">        linkedList.pollFirst(); <span class="comment">// 获取并移除此列表的第一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"After pollFirst():"</span> + linkedList);</span><br><span class="line">        linkedList.pollLast(); <span class="comment">// 获取并移除此列表的最后一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"After pollLast():"</span> + linkedList);</span><br><span class="line">        linkedList.push(<span class="number">2</span>); <span class="comment">// 将元素推入此列表所表示的堆栈（插入到列表的头）</span></span><br><span class="line">        System.out.println(<span class="string">"After push(2):"</span> + linkedList);</span><br><span class="line">        linkedList.pop(); <span class="comment">// 从此列表所表示的堆栈处弹出一个元素（获取并移除列表第一个元素）</span></span><br><span class="line">        System.out.println(<span class="string">"After pop():"</span> + linkedList);</span><br><span class="line">        linkedList.add(<span class="number">3</span>);</span><br><span class="line">        linkedList.removeFirstOccurrence(<span class="number">3</span>); <span class="comment">// 从此列表中移除第一次出现的指定元素（从头部到尾部遍历列表）</span></span><br><span class="line">        System.out.println(<span class="string">"After removeFirstOccurrence(3):"</span> + linkedList);</span><br><span class="line">        linkedList.removeLastOccurrence(<span class="number">3</span>); <span class="comment">// 从此列表中移除最后一次出现的指定元素（从尾部到头部遍历列表）</span></span><br><span class="line">        System.out.println(<span class="string">"After removeFirstOccurrence(3):"</span> + linkedList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************************** 遍历操作 ************************/</span></span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">        linkedList.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            linkedList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 迭代器遍历</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = linkedList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            iterator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Iterator："</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顺序遍历(随机遍历)</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; linkedList.size(); i++) &#123;</span><br><span class="line">            linkedList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"for："</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另一种for循环遍历</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer i : linkedList)</span><br><span class="line">            ;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"for2："</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过pollFirst()或pollLast()来遍历LinkedList</span></span><br><span class="line">        LinkedList&lt;Integer&gt; temp1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        temp1.addAll(linkedList);</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (temp1.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            temp1.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"pollFirst()或pollLast()："</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过removeFirst()或removeLast()来遍历LinkedList</span></span><br><span class="line">        LinkedList&lt;Integer&gt; temp2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        temp2.addAll(linkedList);</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (temp2.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            temp2.removeFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"removeFirst()或removeLast()："</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap分析"><a href="#HashMap分析" class="headerlink" title="HashMap分析"></a>HashMap分析</h2><p>HashMap 主要用来存放键值对，它基于哈希表的Map接口实现，是常用的Java集合之一。</p><p>JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树，以减少搜索时间。</p><h3 id="底层数据结构分析"><a href="#底层数据结构分析" class="headerlink" title="底层数据结构分析"></a>底层数据结构分析</h3><h4 id="JDK1-8之前"><a href="#JDK1-8之前" class="headerlink" title="JDK1.8之前"></a>JDK1.8之前</h4><p>JDK1.8 之前 HashMap 底层是 <strong>数组和链表</strong> 结合在一起使用也就是 <strong>链表散列</strong>。<strong>HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 (n - 1) &amp; hash 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。</strong></p><p><strong>所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。</strong></p><p><strong>JDK 1.8 HashMap 的 hash 方法源码:</strong></p><p>JDK 1.8 的 hash方法 相比于 JDK 1.7 hash 方法更加简化，但是原理不变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedListDemo &#123;</span><br><span class="line">    static final int hash(Object key) &#123;</span><br><span class="line">      int h;</span><br><span class="line">      // key.hashCode()：返回散列值也就是hashcode</span><br><span class="line">      // ^ ：按位异或</span><br><span class="line">      // &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span><br><span class="line">      return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对比一下 JDK1.7的 HashMap 的 hash 方法源码.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line"></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比于 JDK1.8 的 hash 方法 ，JDK 1.7 的 hash 方法的性能会稍差一点点，因为毕竟扰动了 4 次。</p><p>所谓 <strong>“拉链法”</strong> 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p><h4 id="JDK1-8之后"><a href="#JDK1-8之后" class="headerlink" title="JDK1.8之后"></a>JDK1.8之后</h4><p>相比于之前的版本，jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</p><p><a href="https://camo.githubusercontent.com/20de7e465cac279842851258ec4d1ec1c4d3d7d1/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d382d32322f36373233333736342e6a7067" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/20de7e465cac279842851258ec4d1ec1c4d3d7d1/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d382d32322f36373233333736342e6a7067" alt="JDK1.8之后的HashMap底层数据结构"></a></p><p><strong>类的属性：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 序列号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;    </span><br><span class="line">    <span class="comment">// 默认的初始容量是16</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;   </span><br><span class="line">    <span class="comment">// 最大容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>; </span><br><span class="line">    <span class="comment">// 默认的填充因子</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>; </span><br><span class="line">    <span class="comment">// 当桶(bucket)上的结点数大于这个值时会转成红黑树</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>; </span><br><span class="line">    <span class="comment">// 当桶(bucket)上的结点数小于这个值时树转链表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>; </span><br><span class="line">    <span class="comment">// 桶中结构转化为红黑树对应的table的最小大小</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>; </span><br><span class="line">    <span class="comment">// 存储元素的数组，总是2的幂次倍</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;k,v&gt;[] table; </span><br><span class="line">    <span class="comment">// 存放具体元素的集</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;map.entry&lt;k,v&gt;&gt; entrySet;</span><br><span class="line">    <span class="comment">// 存放元素的个数，注意这个不等于数组的长度。</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">// 每次扩容和更改map结构的计数器</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;   </span><br><span class="line">    <span class="comment">// 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line">    <span class="comment">// 加载因子</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>loadFactor加载因子</strong></p><p>loadFactor加载因子是控制数组存放数据的疏密程度，loadFactor越趋近于1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor越小，也就是趋近于0，数组中存放的数据(entry)也就越少，也就越稀疏。</p><p><strong>loadFactor太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor的默认值为0.75f是官方给出的一个比较好的临界值</strong>。</p><p>给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</p></li><li><p><strong>threshold</strong></p><p><strong>threshold = capacity * loadFactor</strong>，<strong>当Size&gt;=threshold</strong>的时候，那么就要考虑对数组的扩增了，也就是说，这个的意思就是 <strong>衡量数组是否需要扩增的一个标准</strong>。</p></li></ul><p><strong>Node节点类源码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承自 Map.Entry&lt;K,V&gt;</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> hash;<span class="comment">// 哈希值，存放元素到hashmap中时用来与其他元素hash值比较</span></span><br><span class="line">       <span class="keyword">final</span> K key;<span class="comment">//键</span></span><br><span class="line">       V value;<span class="comment">//值</span></span><br><span class="line">       <span class="comment">// 指向下一个节点</span></span><br><span class="line">       Node&lt;K,V&gt; next;</span><br><span class="line">       Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line">        <span class="comment">// 重写hashCode()方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重写 equals() 方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>树节点类源码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// 父</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;    <span class="comment">// 左</span></span><br><span class="line">        TreeNode&lt;K,V&gt; right;   <span class="comment">// 右</span></span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="keyword">boolean</span> red;           <span class="comment">// 判断颜色</span></span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回根节点</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="keyword">this</span>, p;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                r = p;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a>HashMap源码分析</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all   other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含另一个“Map”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);<span class="comment">//下面会分析到这个方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> + loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>putMapEntries方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断table是否已经初始化</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="comment">// 未初始化，s为m的实际元素个数</span></span><br><span class="line">            <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                    (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="comment">// 计算得到的t大于阈值，则初始化阈值</span></span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已初始化，并且m元素个数大于阈值，进行扩容处理</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 将m中的所有元素添加至HashMap中</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h4><p>HashMap只提供了put用于添加元素，putVal方法只是给put方法调用的一个方法，并没有提供给用户使用。</p><p><strong>对putVal方法添加元素的分析如下：</strong></p><ul><li>①如果定位到的数组位置没有元素 就直接插入。</li><li>②如果定位到的数组位置有元素就和要插入的key比较，如果key相同就直接覆盖，如果key不相同，就判断p是否是一个树节点，如果是就调用<code>e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value)</code>将元素添加进入。如果不是就遍历链表插入(插入的是链表尾部)。</li></ul><p><a href="https://camo.githubusercontent.com/725bb9953df54438fadb74a1bea180ed817b9e27/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f392f322f313635393862663735386337343765363f773d39393926683d36373926663d706e6726733d3534343836" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/725bb9953df54438fadb74a1bea180ed817b9e27/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f392f322f313635393862663735386337343765363f773d39393926683d36373926663d706e6726733d3534343836" alt="put方法"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 桶中已经存在元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 比较桶中第一个元素(数组中的结点)的hash值相等，key相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">// 将第一个元素赋值给e，用e来记录</span></span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">// hash值不相等，即key不相等；为红黑树结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 为链表结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 到达链表的尾部</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在尾部插入新结点</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 结点数量达到阈值，转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断链表中结点的key值与插入的元素的key值是否相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结构性修改</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 实际大小大于阈值则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 数组元素相等</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 桶中不止一个节点</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 在树中get</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 在链表中get</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; </span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h4><p>进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素，是非常耗时的。在编写程序中，要尽量避免resize。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没超过最大值，就扩充为原来的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算新的resize上限</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ? (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 把每个bucket都移动到新的buckets中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; </span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 原索引</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 原索引+oldCap</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 原索引放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 原索引+oldCap放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap常用方法测试"><a href="#HashMap常用方法测试" class="headerlink" title="HashMap常用方法测试"></a>HashMap常用方法测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="comment">// 键不能重复，值可以重复</span></span><br><span class="line">        map.put(<span class="string">"san"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        map.put(<span class="string">"si"</span>, <span class="string">"李四"</span>);</span><br><span class="line">        map.put(<span class="string">"wu"</span>, <span class="string">"王五"</span>);</span><br><span class="line">        map.put(<span class="string">"wang"</span>, <span class="string">"老王"</span>);</span><br><span class="line">        map.put(<span class="string">"wang"</span>, <span class="string">"老王2"</span>);<span class="comment">// 老王被覆盖</span></span><br><span class="line">        map.put(<span class="string">"lao"</span>, <span class="string">"老王"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-------直接输出hashmap:-------"</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 遍历HashMap</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 1.获取Map中的所有键</span></span><br><span class="line">        System.out.println(<span class="string">"-------foreach获取Map中所有的键:------"</span>);</span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.print(key+<span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();<span class="comment">//换行</span></span><br><span class="line">        <span class="comment">// 2.获取Map中所有值</span></span><br><span class="line">        System.out.println(<span class="string">"-------foreach获取Map中所有的值:------"</span>);</span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        <span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">            System.out.print(value+<span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();<span class="comment">//换行</span></span><br><span class="line">        <span class="comment">// 3.得到key的值的同时得到key所对应的值</span></span><br><span class="line">        System.out.println(<span class="string">"-------得到key的值的同时得到key所对应的值:-------"</span>);</span><br><span class="line">        Set&lt;String&gt; keys2 = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys2) &#123;</span><br><span class="line">            System.out.print(key + <span class="string">"："</span> + map.get(key)+<span class="string">"   "</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 另外一种不常用的遍历方式</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 当我调用put(key,value)方法的时候，首先会把key和value封装到</span></span><br><span class="line">        <span class="comment">// Entry这个静态内部类对象中，把Entry对象再添加到数组中，所以我们想获取</span></span><br><span class="line">        <span class="comment">// map中的所有键值对，我们只要获取数组中的所有Entry对象，接下来</span></span><br><span class="line">        <span class="comment">// 调用Entry对象中的getKey()和getValue()方法就能获取键值对了</span></span><br><span class="line">        Set&lt;java.util.Map.Entry&lt;String, String&gt;&gt; entrys = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (java.util.Map.Entry&lt;String, String&gt; entry : entrys) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"--"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * HashMap其他常用方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"after map.size()："</span>+map.size());</span><br><span class="line">        System.out.println(<span class="string">"after map.isEmpty()："</span>+map.isEmpty());</span><br><span class="line">        System.out.println(map.remove(<span class="string">"san"</span>));</span><br><span class="line">        System.out.println(<span class="string">"after map.remove()："</span>+map);</span><br><span class="line">        System.out.println(<span class="string">"after map.get(si)："</span>+map.get(<span class="string">"si"</span>));</span><br><span class="line">        System.out.println(<span class="string">"after map.containsKey(si)："</span>+map.containsKey(<span class="string">"si"</span>));</span><br><span class="line">        System.out.println(<span class="string">"after containsValue(李四)："</span>+map.containsValue(<span class="string">"李四"</span>));</span><br><span class="line">        System.out.println(map.replace(<span class="string">"si"</span>, <span class="string">"李四2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"after map.replace(si, 李四2):"</span>+map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap分析"><a href="#TreeMap分析" class="headerlink" title="TreeMap分析"></a>TreeMap分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>AbstractMap是一个实现Map接口的抽象类，它实现了一个Map的骨架，但是</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;集合概览&quot;&gt;&lt;a href=&quot;#集合概览&quot; class=&quot;headerlink&quot; title=&quot;集合概览&quot;&gt;&lt;/a&gt;集合概览&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-面试题</title>
    <link href="https://isjinhao.github.io/2019/11-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://isjinhao.github.io/2019/11-面试题/</id>
    <published>2019-07-28T13:48:12.000Z</published>
    <updated>2019-08-06T06:31:07.686Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>10-项目准备</title>
    <link href="https://isjinhao.github.io/2019/10-%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/"/>
    <id>https://isjinhao.github.io/2019/10-项目准备/</id>
    <published>2019-07-28T13:48:06.000Z</published>
    <updated>2019-08-06T06:31:07.685Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>09-数据结构和编程能力</title>
    <link href="https://isjinhao.github.io/2019/09-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/"/>
    <id>https://isjinhao.github.io/2019/09-数据结构和编程能力/</id>
    <published>2019-07-28T13:48:00.000Z</published>
    <updated>2019-08-06T06:31:07.683Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>08-并发</title>
    <link href="https://isjinhao.github.io/2019/08-%E5%B9%B6%E5%8F%91/"/>
    <id>https://isjinhao.github.io/2019/08-并发/</id>
    <published>2019-07-28T13:47:55.000Z</published>
    <updated>2019-08-06T06:31:07.681Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>07-RabbitMQ和Redis</title>
    <link href="https://isjinhao.github.io/2019/07-RabbitMQ%E5%92%8CRedis/"/>
    <id>https://isjinhao.github.io/2019/07-RabbitMQ和Redis/</id>
    <published>2019-07-28T13:47:46.000Z</published>
    <updated>2019-08-06T06:31:07.680Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>06-SpringCloud和SpringBoot</title>
    <link href="https://isjinhao.github.io/2019/06-SpringCloud%E5%92%8CSpringBoot/"/>
    <id>https://isjinhao.github.io/2019/06-SpringCloud和SpringBoot/</id>
    <published>2019-07-28T13:47:40.000Z</published>
    <updated>2019-08-06T06:31:07.679Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>05-JavaWeb和SSM</title>
    <link href="https://isjinhao.github.io/2019/05-JavaWeb%E5%92%8CSSM/"/>
    <id>https://isjinhao.github.io/2019/05-JavaWeb和SSM/</id>
    <published>2019-07-28T13:47:33.000Z</published>
    <updated>2019-08-06T06:31:07.696Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --><h2 id="Tomcat的结构"><a href="#Tomcat的结构" class="headerlink" title="Tomcat的结构"></a>Tomcat的结构</h2><div align="center"><img width="100%" src="//isjinhao.github.io/2019/05-JavaWeb和SSM/tomcat结构.png"></div><br>## HTTP请求<br><br>HTTP请求共有DELETE、HEAD、GET、OPTIONS、POST、PUT、TRACE和CONNECT八种请求方式。<br><br><div align="center"><img width="100%" src="05-JavaWeb和SSM/http请求.png"></div><br>## HTTP响应<br><br><div align="center"><img width="100%" src="05-JavaWeb和SSM/http响应.png"></div><br>## Servlet<br><br>Servlet是指任何实现了Servlet接口的类。一般情况下Servlet用来扩展基于HTTP协议的Web服务器，它可以接受和响应通过HTTP协议从客户端发过来的信息。<br><br>Servlet是一个类，但Servlet类的对象是由Web服务器创建的，不是由开发者创建的。并且多个客户端访问同一个Servlet时只会创建一个Servlet对象。<br><br><br><br>### Servlet的方法<br><br>Servlet有5个方法：<br><br>1. void init(ServletConfig config)：在服务器创建 Servlet对象时执行。<br>2. void destroy() ：在服务器关闭时调用。<br>3. ServletConfig getServletConfig() ：返回一个ServletConfig对象。<br>4. String getServletInfo() ：得到Servlet的信息。如作者、版本等。<br>5. void service(ServletRequest req, ServletResponse res) ：被服务器调用去获得和响应从服务器发来的请求。<br><br><br><br>### Servlet对象的生命周期<br><br>1. Servlet何时创建：默认第一次访问Servlet时创建该对象。<br>2. Servlet何时销毁：服务器关闭Servlet就销毁了。<br>3. 每次访问必然执行的方法：<code>service(ServletRequest req, ServletResponse res)</code>方法<br><br><br><br>### Servlet访问过程<br><br>浏览器中输入的URL会被浏览器封装成HTTP请求发送给服务器。Tomcat收到从客户端发来的时候解析HTTP请求中的资源地址，然后创建代表请求的requset和代表响应的response对象，再把这两个对象作为参数去调用service()方法。<br><br><br><br>## ServletConfig<br><br>代表当前Servlet在web.xml中的配置信息。当Servlet配置了初始化参数后，web容器在创建Servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用Servlet的init方法时，将ServletConfig对象传递给Servlet。进而，程序员通过ServletConfig对象就可以得到当前Servlet的初始化参数信息。这样做的好处是：如果将数据库信息、编码方式等配置信息放在web.xml中，如果以后数据库的用户名、密码改变了，则直接很方便地修改web.xml就行了，避免了直接修改源代码的麻烦。<strong>最大的用处是获得ServletContext对象。</strong><br><br><br><br>## HttpServlet开发<br><br>在开发的时候一般不直接实现Servlet来获取和响应从客户端发来的信息，而是继承Servlet接口的实现类HttpServlet。因为从客户端发来的请求和响应都是基于HTTP协议的，HttpServlet就是用于HTTP协议请求和响应的实现类，继承httpServlet后再覆盖某些方法进行开发即可。<br><br><br><br>### 继承HttpServlet进行开发<br><br>服务器会调用Servlet接口的service()方法，由于多态原则，真正被调用的方法是HttpServlet类的service()方法。HttpServlet类为每种请求方式都设置单独的处理方法，但我们使用的一般使用的是GET和POST请求方式，所以我们只需要覆盖doGet()和doPost()方法即可。这是因为HttpServlet()的service()方法中可以调用每种请求方式的方法，我们覆盖doGet()和doPost()就可以达到功能性需求。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### web.xml配置<br><br><strong>必须配置的参数</strong><br><br>有Servlet还不行，Web服务器不能直接通过类名访问Servlet，必须通过一个虚拟路径来访问这个Servlet，所以要对Servlet进行配置。配置在web.xml文件中进行。举例说明：<br><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Begin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.begin.Begin<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Begin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/begin<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>当浏览器中地址输入为：<code>…/begin</code>，然后Tomcat去找此项目下虚拟路径为<code>/begin</code>对应的<code>servlet-name</code>，找到<code>servlet-name</code>后映射到servlet配置中找到它所对应的类<code>com.servlet.begin.Begin</code>。mapping在集合里指的是映射，在此指的也是映射。servlet-mapping里的Begin相当于Key。servlet里的servlet-class相当于Value。<br><br>总结来说，<code>servlet</code>和<code>servlet-mapping</code>里的<code>servlet-name</code>必须一致，<code>url-pattern</code>是浏览器输入的地址，<code>servlet-class</code>是对访问做出处理的类。<br><br><strong>可选配置的参数</strong><br><br>1. <code>load-on-startup</code>：<code>&lt;load-on-startup&gt;x&lt;/load-on-startup&gt;</code>，x大于等于1的时候表示在服务器启动的时候就创建Servlet对象。<br>2. 缺省Servlet：可以将url-pattern配置为’/’，代表该servlet是缺省的servlet，也就是当访问资源地址与所有的Servlet都不匹配时，有缺省的servlet负责处理，就是传说中的404界面。<br><br><br><br>### url-pattern的三种匹配<br><br>1. 完全匹配：访问的资源与配置的资源完全相同才能访问到。<br>2. 目录匹配：格式：<code>/虚拟的目录../*</code>。如：<code>…/abc/*</code>表示当输入路径<code>…/abc/xxx</code>的xxx为任意的时候都可以访问的到。<br>3. 拓展名匹配：格式：<code>*.扩展名</code>。如：<code>*.abcd</code>表示输入路径为<code>…/xxx.abcd</code>的xxx为任意的时候都能访问。在某路径下进行拓展名匹配是错误的，如：<code>/aaa/bbb/*.abcd</code>（错误的）<br><br><br><br>## HttpServletResponse<br><br>HttpServletResponse是一个接口，封装了向客户端输出信息的方法，部分方法如下：<br><br>1. void setStatus(int sc)：设置响应状态码；<br><br>2. void setHeader(String name, String data)：设置响应头；<br><br>3. ServletOutputStream getOutputStream()：返回一个输出流对象；<br><br>4. PrintWriter getWriter()：返回一个打印流对象。<br><br><br><br>### HttpServletResponse的执行过程<br><br>HttpServletResponse是向客户端输出信息的接口，但它的对象（设为response）不是直接把信息输出给浏览器，也不是直接输出给服务器。response会把要输出的信息输出到response的缓冲区，然后服务器拿到缓冲区的数据后再添加一些数据组成HTTP响应发送给客户端。<br><br><br><br>### 重定向<br><br>重定向的过程需要两次访问Servlet。当浏览器访问到重定向的Servlet时此Servlet会返回一个302的状态码和重定向的地址。代码会有两句：<br><br>1. <code>response.setStatus(int sc);</code><br>2. <code>response.setHeader(“location”, “要跳转的地址”);</code><br><br>但Java把这两步进行了封装，<code>response.sendRedirect(“要跳转的地址”);</code>。<br><br><br><br>### 定时刷新<br><br>使用setHeader()。response.setHeader(“refresh”, “3”);表示这个页面3秒后会被刷新。<br><br>还可以指定URL跳转到其他页面（URL可以带数据，所以是GET方式跳转）：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(“refresh”, “3;url=https:www.baidu.com”)</span><br></pre></td></tr></table></figure><br><br>### 输出乱码的解决<br><br>1. 设置response缓冲区：response缓冲区的默认编码是iso8859-1，设置为UTF-8编码需要使用：<code>response.setCharacterEncoding(String charset);</code><br>2. 设置浏览器编码：浏览器默认使用GBK编码，但缓冲区设置的是UTF-8编码，仍然有乱码问题存在：<code>response.setContentType(&quot;text/html;charset=UTF-8&quot;);</code><br>3. 一键解决缓冲区和浏览器问题：仍然是<code>response.setContentType(&quot;text/html;charset=UTF-8&quot;);</code>此方法默认包含了<code>response.setCharacterEncoding(String charset);</code>。<br><br><br><br>## ServletContext域对象<br><br>ServletContext类的对象（后续servletContext特指ServletContext类对象）是域对象，就是说这个对象可以进行数据的存取操作，它的作用范围是所有的Servlet。方法如下：<br><br>1. void setAttribute(String name, Object o)<br><br>2. String getAttribute(String name)<br><br>3. void removeAttribute(String name)<br><br><br><br><br>## HttpServletRequest<br><br>HttpServletRequest是一个接口，封装了获取浏览器发来的信息的方法。部分方法如下：<br><br>1. String getMethod()：获得请求方式；<br><br>2. String getHeader(String name)：获取某请求头的Value；<br><br>3. String getParameter(String name)：获得提交时的某参数的Value；<br><br>4. String getRemoteAddr()：获得客户端的IP地址；<br><br>5. String getContextPath()：获得web应用的名称；<br><br><br><br>### 提交乱码解决<br><br>1. POST方式：<code>request.setCharacterEncoding(&quot;UTF-8&quot;);</code><br><br>2. GET方式：<br><br>- 假设接收到的参数为param，在使用之前加上：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param = new String(param.getBytes(&quot;iso8859-1&quot;),&quot;utf-8&quot;);</span><br></pre></td></tr></table></figure><br><br>- 修改server.xml文件：补上此句<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/05-JavaWeb和SSM/20180816152344395.png"></div><h3 id="HttpServletRequest域对象"><a href="#HttpServletRequest域对象" class="headerlink" title="HttpServletRequest域对象"></a>HttpServletRequest域对象</h3><p>HttpServletRequest接口的对象引用（request特指HttpServletRequest接口的对象引用）同时也是域对象，就是说这个对象可以进行数据的存取操作，它的作用范围是一次http请求，当此次请求结束（返回一个response时）。方法如下：</p><ol><li><code>void setAttribute(String name, Object o)</code></li><li><code>String getAttribute(String name)</code></li><li><code>void removeAttribute(String name)</code></li></ol><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><p>当客户端请求某个Servlet的时候，此Servlet交给别的Servlet解决叫做请求转发。请求转发分为两步：</p><ol><li>获得转发器：<code>RequestDispatcher rd = request.getRequestDispatcher(String path)</code></li><li>转发的时候携带请求和响应：<code>rd.forward(ServletRequest request, ServletResponse response)</code></li></ol><h3 id="辨析重定向和请求转发"><a href="#辨析重定向和请求转发" class="headerlink" title="辨析重定向和请求转发"></a>辨析重定向和请求转发</h3><p>重定向是两次请求服务器，请求转发只有一次请求服务器。重定向可以访问外部资源，转发只能访问内部资源。图解：</p><p><img src="file:///C:/Users/ISJINHAO/AppData/Local/Temp/msohtmlclip1/02/clip_image009.jpg" alt="img"></p><ol><li>转发的路径：项目中的<code>url-pattern</code></li><li>重定向的路径：项目名+项目中的<code>url-pattern</code></li></ol><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><p>客户端访问服务器的时候，服务器并不知道客户端是谁，因为HTTP协议是无状态的。也就是说A把商品a加入购物车后关闭浏览器之后再来访问服务器时服务器分不出来是不是A访问了服务器。而会话技术就是帮助服务器区分客户端的。用户打开浏览器，访问Web服务器上多个资源，然后关闭浏览器，整个过程称之为一次会话。会话技术分为：Cookie和Session。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie技术是将用户状态的数据存储到客户端的技术。主要方法如下：</p><ul><li>创建Cookie（不能保存中文信息）：<code>Cookie c = new Cookie(String name, String value);</code></li><li><p>设置Cookie在客户端的持久化时间，无持久化时间Cookie在关闭浏览器时信息会销毁： <code>c.setMaxAge(int seconds);</code>，时间秒。</p></li><li><p>设置Cookie的携带路径，如果不设置携带路径，那么该Cookie信息会在访问产生该Cookie的 web资源所在的路径都携带Cookie信息，如：</p><ul><li><code>cookie.setPath(&quot;/WEB&quot;);</code> 代表访问WEB应用中的任何资源都携带该Cookie</li><li><code>cookie.setPath(&quot;/WEB/cookieServlet&quot;);</code> 代表访问WEB中的cookieServlet时才携带Cookie信息</li></ul></li><li><p>向客户端发送Cookie：<code>response.addCookie(Cookie cookie);</code></p></li><li><p>删除客户端的Cookie：使用<strong>同名同路径且持久化时间为0</strong>的Cookie覆盖。</p></li><li><p>服务器获得客户端携带的Cookie：满足条件的Cookie会被自动以请求头的方式发送到服务器端。获得某一Cookie的内容需要两步：</p><ul><li><p>通过request获得所有的Cookie：<code>Cookie[] cookies = request.getCookies();</code></p></li><li><p>遍历Cookie数组，通过Cookie的名称获得我们想要的Cookie：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line"><span class="keyword">if</span>(cookie.getName().equal(cookieName))&#123;</span><br><span class="line">String cookieValue = cookie.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session技术是将用户状态的数据存储到服务器端的技术。服务器会为每个客户端都创建一块内存空间 存储客户的数据，但客户端需要每次都携带一个标识ID（通过Cookie储存在客户端，在Tomcat中叫做JSESSIONID）去服务器中寻找属于自己的内 存空间。同时由于Session具有存储数据的功能，也是一个域对象。主要方法如下：</p><ol><li>获得Session对象：<code>HttpSession session = request.getSession();</code>。此方法会获得专属于当前会话的Session对象，如果服务器端没有该会话的Session对象会创建一个新的Session返回，如果已经有了属于该会话的Session直接将已有的Session返回（实质就是根据JSESSIONID判断该客户端是否在服务器上已经存在session了）</li><li>向Session中存储数据：<code>session.setAttribute(String name, Object obj);</code></li><li>从Session中获得数据：<code>session.getAttribute(String name);</code></li><li>移除Session中某名称的值：<code>session.removeAttribute(String name);</code></li></ol><h3 id="Session域的声明周期"><a href="#Session域的声明周期" class="headerlink" title="Session域的声明周期"></a>Session域的声明周期</h3><ul><li><p>创建：第一次执行request.getSession()时创建。</p></li><li><p>销毁：默认情况下在客户端不再操作服务器端资源时30分钟后session过期。</p><ol><li><p>手动销毁session： <code>session.invalidate();</code></p></li><li><p>也可以在工程的web.xml中进行配置来修改默认过期时间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>作用范围：一次会话中任何资源公用一个session对象。</p></li></ul><h2 id="获得各种路径"><a href="#获得各种路径" class="headerlink" title="获得各种路径"></a>获得各种路径</h2><div align="center"><img width="80%" src="//isjinhao.github.io/2019/05-JavaWeb和SSM/路径.png"></div><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/api/*"</span>, filterName = <span class="string">"loginFilter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器加载的时候调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"init loginFilter"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求被拦截的时候进行调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, </span></span></span><br><span class="line"><span class="function"><span class="params">         ServletResponse servletResponse, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"doFilter loginFilter"</span>);</span><br><span class="line"></span><br><span class="line">HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">HttpServletResponse resp = (HttpServletResponse) servletResponse;</span><br><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"xdclass"</span>.equals(username)) &#123;</span><br><span class="line">filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">resp.sendRedirect(<span class="string">"/index.html"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器被销毁的时候被调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"destroy loginFilter"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个过滤器的执行顺序是按照filterName按字典排序执行。</p><table><thead><tr><th><strong>属性名</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>filterName</td><td>String</td><td>指定过滤器的 name 属性，等价于<code>&lt;filter-name&gt;</code></td></tr><tr><td>value</td><td>String[]</td><td>该属性等价于 urlPatterns 属性。但是两者不应该同时使用。</td></tr><tr><td>urlPatterns</td><td>String[]</td><td>指定一组过滤器的 URL 匹配模式。等价于<code>&lt;url-pattern&gt;</code>标签。</td></tr><tr><td>servletNames</td><td>String[]</td><td>指定过滤器将应用于哪些 Servlet。取值是 @WebServlet 中的 name 属性的取值，或者是 web.xml 中<code>&lt;servlet-name&gt;</code>的取值。</td></tr><tr><td>dispatcherTypes</td><td>DispatcherType</td><td>指定过滤器的转发模式。具体取值包括： ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。</td></tr><tr><td>initParams</td><td>WebInitParam[]</td><td>指定一组过滤器初始化参数，等价于<code>&lt;init-param&gt;</code>标签。</td></tr><tr><td>asyncSupported</td><td>boolean</td><td>声明过滤器是否支持异步操作模式，等价于<code>&lt;async-supported&gt;</code> 标签。</td></tr><tr><td>description</td><td>String</td><td>该过滤器的描述信息，等价于<code>&lt;description&gt;</code>标签。</td></tr><tr><td>displayName</td><td>String</td><td>该过滤器的显示名，通常配合工具使用，等价于<code>&lt;display-name&gt;</code>标签。</td></tr></tbody></table><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>常用的监听器 servletContextListener、httpSessionListener、servletRequestListener。都是接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"======requestDestroyed========"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"======requestInitialized========"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>Java Database Connectivity，Java数据库连接。是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序，所以说，JDBC对Java程序员而言是API，对实现与数据库连接的服务提供商而言是接口模型。作为API，JDBC为程序开发提供标准的接口，并为数据库厂商及第三方中间件厂商实现与数据库的连接提供了标准方法。</p><p>数据库并不是Java提供的，所以在Java中如果想连接数据库，肯定需要使用第三方jar包，这些jar包是数据库厂商根据JDBC接口模型开发的自己数据库的连接包。文章里使用的数据库是mysql，所以使用mysql-connector。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>使用JDBC需要六步：注册驱动、建立连接、创建Statement、执行查询、获得结果集、处理结果集、释放资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet query = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1、注册驱动：在使用JDBC连接连接数据库的时候，Java程序并不知道自己是否连接上了相应的</span></span><br><span class="line"><span class="comment">             *            数据库，所以在第一步需要注册驱动，如果连接正常则可以进行接下来的操作。也</span></span><br><span class="line"><span class="comment">             *            就是说注册驱动这一步是通过我们导入的jar包测试能否正常连接数据库。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line">    </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 2、获得连接：数据库服务器中可能存在多个数据库，我们需要连接上我们即将使用的数据库。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            con = DriverManager.getConnection</span><br><span class="line">                (<span class="string">"jdbc:mysql://localhost/jdbc-study"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 3、创建Statement：如果想和数据库进行交互，一定需要使用这个类。JDK对他的解释是：</span></span><br><span class="line"><span class="comment">             *    The object used for executing a static SQL statement and </span></span><br><span class="line"><span class="comment">             *    returning the results it produces. </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            statement = con.createStatement();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 4、执行查询，获得结果集：想数据库中注入SQL语句，是我们能够进行操作</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String sql = <span class="string">"select * from students"</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 5、处理结果集：query是数据库中的元组集合，可以通过循环获得每个元组</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            query = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(query.next())&#123;</span><br><span class="line">                String id = query.getString(<span class="string">"id"</span>);</span><br><span class="line">                String name = query.getString(<span class="string">"name"</span>);</span><br><span class="line">                String clazz = query.getString(<span class="string">"clazz"</span>);</span><br><span class="line">                System.out.println(id + <span class="string">"  "</span> + name + <span class="string">"  "</span> + clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 6、释放资源：操作结束后进行操作</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span>(query != <span class="keyword">null</span>)</span><br><span class="line">                query.close();</span><br><span class="line">            <span class="keyword">if</span>(statement != <span class="keyword">null</span>)</span><br><span class="line">                statement.close();</span><br><span class="line">            <span class="keyword">if</span>(con != <span class="keyword">null</span>)</span><br><span class="line">                con.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String driverClass = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> String name = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> String password= <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1. 创建一个属性配置对象</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类加载器，去读取src底下的资源文件。 后面在servlet</span></span><br><span class="line"><span class="comment">// InputStream is = JDBCUtil.class.getClassLoader().</span></span><br><span class="line">            <span class="comment">//getResourceAsStream("jdbc.properties");</span></span><br><span class="line"><span class="comment">//导入输入流。</span></span><br><span class="line">properties.load(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取属性</span></span><br><span class="line">driverClass = properties.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line">url = properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">name = properties.getProperty(<span class="string">"name"</span>);</span><br><span class="line">password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; </span><br><span class="line">        connectionHolder = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;() &#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    conn = DriverManager.getConnection(url, name, password);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(driverClass);</span><br><span class="line">conn = connectionHolder.get();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn , Statement st , ResultSet rs)</span></span>&#123;</span><br><span class="line">closeRs(rs);</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Connection conn =  connectionHolder.get();</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回滚事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Connection conn =  connectionHolder.get();</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Connection conn =  connectionHolder.get();</span><br><span class="line"><span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">conn.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeRs</span><span class="params">(ResultSet rs)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">rs = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSt</span><span class="params">(Statement st)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(st != <span class="keyword">null</span>)&#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">st = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConn</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">conn = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClass=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost/jdbc-study</span><br><span class="line">name=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure><h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CRUD</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Connection con;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        con = JDBCUtil.getConn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        String sql = <span class="string">"select * from students"</span>;</span><br><span class="line">        ResultSet query = statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span>(query.next())&#123;</span><br><span class="line">            String id = query.getString(<span class="string">"id"</span>);</span><br><span class="line">            String name = query.getString(<span class="string">"name"</span>);</span><br><span class="line">            String clazz = query.getString(<span class="string">"clazz"</span>);</span><br><span class="line">            System.out.println(id + <span class="string">"  "</span> + name + <span class="string">"  "</span> + clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        String sql = <span class="string">"insert into students(id, name, clazz) values ('160341238', '赵承阳', '160341B')"</span>;</span><br><span class="line">        <span class="keyword">int</span> row = statement.executeUpdate(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        String sql = <span class="string">"update students set id = 'helloworld' where id = '160341237'"</span>;</span><br><span class="line">        <span class="keyword">int</span> row = statement.executeUpdate(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Statement statement = con.createStatement();</span><br><span class="line">        String sql = <span class="string">"delete from students where id = '160341238'"</span>;</span><br><span class="line">        <span class="comment">//返回处理的行数</span></span><br><span class="line">        <span class="keyword">int</span> row = statement.executeUpdate(sql); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PrepareStatement"><a href="#PrepareStatement" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Statement statement = con.createStatement();</span><br><span class="line">    String qid = <span class="string">"160341238 or 1 = 1"</span>;</span><br><span class="line">    String sql = <span class="string">"select * from students where id = "</span> + qid;</span><br><span class="line">    ResultSet query = statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span>(query.next())&#123;</span><br><span class="line">    String id = query.getString(<span class="string">"id"</span>);</span><br><span class="line">    String name = query.getString(<span class="string">"name"</span>);</span><br><span class="line">    String clazz = query.getString(<span class="string">"clazz"</span>);</span><br><span class="line">    System.out.println(id + <span class="string">"  "</span> + name + <span class="string">"  "</span> + clazz);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**Console:</span></span><br><span class="line"><span class="comment">    *      160341238  赵承阳  160341B</span></span><br><span class="line"><span class="comment">       aaa  詹金浩  160341B            */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这段代码中，查询的qid后面添加上了or 1 = 1就可以把表中所有信息都查询出来，因为or 1 = 1这句话是一定为真，而我们刚才使用的Statement又使用的是拼接字符串的方式，在字符串中or会被认为是关键字，所以sql语句的条件永远为真。可以采用PrepareStatement类来解决这个问题。</p><h3 id="PrepareStatement-1"><a href="#PrepareStatement-1" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String sql = <span class="string">"select * from students where id=?"</span>;</span><br><span class="line">    PreparedStatement ps = con.prepareStatement(sql);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 从1开始，把字符串填到匹配的?里。关键字也被认为是是字符串</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ps.setString(<span class="number">1</span>, <span class="string">"160341238 or 1 = 1"</span>);</span><br><span class="line">    ResultSet query = ps.executeQuery();</span><br><span class="line">    <span class="keyword">while</span>(query.next())&#123;</span><br><span class="line">    String id = query.getString(<span class="string">"id"</span>);</span><br><span class="line">    String name = query.getString(<span class="string">"name"</span>);</span><br><span class="line">    String clazz = query.getString(<span class="string">"clazz"</span>);</span><br><span class="line">    System.out.println(id + <span class="string">"  "</span> + name + <span class="string">"  "</span> + clazz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无结果</span></span><br></pre></td></tr></table></figure><h3 id="改进的CURD"><a href="#改进的CURD" class="headerlink" title="改进的CURD"></a>改进的CURD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvancedCURD</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Connection con;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        con = JDBCUtil.getConn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from students where id=?"</span>;</span><br><span class="line">        PreparedStatement ps = con.prepareStatement(sql);</span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">"160341238"</span>);</span><br><span class="line">        ResultSet query = ps.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(query.next())&#123;</span><br><span class="line">            String id = query.getString(<span class="string">"id"</span>);</span><br><span class="line">            String name = query.getString(<span class="string">"name"</span>);</span><br><span class="line">            String clazz = query.getString(<span class="string">"clazz"</span>);</span><br><span class="line">            System.out.println(id + <span class="string">"  "</span> + name + <span class="string">"  "</span> + clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into students(id, name, clazz) values (?, ?, ?)"</span>;</span><br><span class="line">        PreparedStatement ps = con.prepareStatement(sql);</span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">"160341244"</span>);</span><br><span class="line">        ps.setString(<span class="number">2</span>, <span class="string">"qwe"</span>);</span><br><span class="line">        ps.setString(<span class="number">3</span>, <span class="string">"160341B"</span>);</span><br><span class="line">        <span class="keyword">int</span> row = ps.executeUpdate();</span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update students set id = ? where id = ?"</span>;</span><br><span class="line">        PreparedStatement ps = con.prepareStatement(sql);</span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">"helloworld"</span>);</span><br><span class="line">        ps.setString(<span class="number">2</span>, <span class="string">"160341243"</span>);</span><br><span class="line">        <span class="keyword">int</span> row = ps.executeUpdate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from students where id = ?"</span>;</span><br><span class="line">        PreparedStatement ps = con.prepareStatement(sql);</span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">"160341238"</span>);</span><br><span class="line">        <span class="keyword">int</span> row = ps.executeUpdate();</span><br><span class="line">        <span class="comment">//返回处理的行数</span></span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="自定义数据库连接池"><a href="#自定义数据库连接池" class="headerlink" title="自定义数据库连接池"></a>自定义数据库连接池</h3><p>数据库连接池的概念本来就是sun公司提出来的额，所以sun公司针对数据库连接池也提供了一套规范，一个简单的数据库连接池如下，只有获取连接和归还连接的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSource</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List &lt;Connection&gt; list = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">MyDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Connection conn = JDBCUtil.getConn();</span><br><span class="line">            list.add(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  该连接池对外公布的获取连接的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//来拿连接的时候，先看看，池子里面还有没有。</span></span><br><span class="line">        <span class="keyword">if</span>(list.size() == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                Connection conn = JDBCUtil.getConn();</span><br><span class="line">                list.add(conn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//remove(0) ---&gt; 移除第一个。 移除的是集合中的第一个。  移除的是开始的那个元素</span></span><br><span class="line">        Connection conn = list.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用完之后，记得归还。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBack</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">        list.add(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------</span></span><br><span class="line"><span class="comment">// other method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li>AddBack()：这个方法不是接口中的方法，不能使用面向接口的编程。</li><li>连接池不是单例：在一个程序中，连接池应该只存在一个，每new一个都会产生一个连接池和n个连接。</li><li>扩容：当连接数大于我们设置的数量时需要对连接池中的连接扩容，否则就会产生问题。</li></ol><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ol><li>使用装饰者模式装饰Connection；</li><li>把连接池设为单例；</li><li>连接池空时自动增加机制。</li></ol><h3 id="改进的数据库连接池"><a href="#改进的数据库连接池" class="headerlink" title="改进的数据库连接池"></a>改进的数据库连接池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSource</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyDataSource</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyDataSource mds = <span class="keyword">new</span> MyDataSource();</span><br><span class="line">    <span class="keyword">static</span> List &lt;Connection&gt; list = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Connection conn = JDBCUtil.getConn();</span><br><span class="line">            list.add(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyDataSource <span class="title">getMyDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  该连接池对外公布的获取连接的方法，扩容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//来拿连接的时候，先看看，池子里面还有没有。</span></span><br><span class="line">        <span class="keyword">if</span>(list.size() == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                Connection conn = JDBCUtil.getConn();</span><br><span class="line">                list.add(conn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Connection conn = list.remove(<span class="number">0</span>);</span><br><span class="line">        Connection connection = <span class="keyword">new</span> ConnectionWrap(conn, list);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用完之后，记得归还。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBack</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">        list.add(conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------</span></span><br><span class="line"><span class="comment">// other method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionWrap</span> <span class="keyword">implements</span> <span class="title">Connection</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> List &lt;Connection&gt; list ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionWrap</span><span class="params">(Connection connection, List &lt;Connection&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connection = connection;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        list.add(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connection.prepareStatement(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//====================================================================</span></span><br><span class="line">    <span class="comment">//之后的方法没有被装饰，需要使用时再装饰</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">MyDataSource myDataSource = MyDataSource.getMyDataSource();</span><br><span class="line"></span><br><span class="line">Connection connection = <span class="keyword">new</span> ConnectionWrap(myDataSource.getConnection(), myDataSource.list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- default-config 默认的配置，  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost/jdbc-study<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- This app is massive! --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"oracle"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- intergalactoApp adopts a different approach to configuring statement caching --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- he's important, but there's only one of him --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user-overrides</span> <span class="attr">user</span>=<span class="string">"master-of-the-universe"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user-overrides</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、构建数据源</span></span><br><span class="line">            ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2、得到连接对象</span></span><br><span class="line">            connection = cpds.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、执行sql语句</span></span><br><span class="line">            String sql = <span class="string">"select * from students"</span>;</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、获得结果、处理结果</span></span><br><span class="line">            ResultSet query = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(query.next()) &#123;</span><br><span class="line">                String id = query.getString(<span class="string">"id"</span>);</span><br><span class="line">                String name = query.getString(<span class="string">"name"</span>);</span><br><span class="line">                String clazz = query.getString(<span class="string">"clazz"</span>);</span><br><span class="line">                System.out.println(id + <span class="string">" "</span> + name + <span class="string">" "</span> + clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dbutils"><a href="#Dbutils" class="headerlink" title="Dbutils"></a>Dbutils</h2><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、指定数据库连接池</span></span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、增删改都使用update方法</span></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">        String insert = <span class="string">"insert into students(id, name, clazz) values(?, ?, ?)"</span>;</span><br><span class="line">        qr.update(insert, <span class="string">"123"</span>, <span class="string">"123"</span>, <span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">        String update = <span class="string">"update students set name = ? where id = ?"</span>;</span><br><span class="line">        qr.update(update, <span class="string">"789"</span>, <span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">        String delete = <span class="string">"delete from students where id = ?"</span>;</span><br><span class="line">        qr.update(delete, <span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="自定义封装-返回值类型是单个对象"><a href="#自定义封装-返回值类型是单个对象" class="headerlink" title="自定义封装-返回值类型是单个对象"></a>自定义封装-返回值类型是单个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String query = <span class="string">"select * from students where id = ?"</span>;</span><br><span class="line"></span><br><span class="line">Student student = qr.query(query, <span class="keyword">new</span> ResultSetHandler&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">            String id = rs.getString(<span class="string">"id"</span>);</span><br><span class="line">            String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">            String clazz = rs.getString(<span class="string">"clazz"</span>);</span><br><span class="line">            s.setId(id);</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setClazz(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"helloworld"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><h4 id="自定义封装-返回值类型是集合"><a href="#自定义封装-返回值类型是集合" class="headerlink" title="自定义封装-返回值类型是集合"></a>自定义封装-返回值类型是集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String query = <span class="string">"select * from students"</span>;</span><br><span class="line">List&lt;Student&gt; list = qr.query(query, <span class="keyword">new</span> ResultSetHandler&lt;List&lt;Student&gt;&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        List&lt;Student&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">            s.setId(rs.getString(<span class="string">"id"</span>));</span><br><span class="line">            s.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">            s.setClazz(rs.getString(<span class="string">"clazz"</span>));</span><br><span class="line">            l.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h4 id="快速封装-返回值类型是单个对象"><a href="#快速封装-返回值类型是单个对象" class="headerlink" title="快速封装-返回值类型是单个对象"></a>快速封装-返回值类型是单个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String query = <span class="string">"select * from students where id = ?"</span>;</span><br><span class="line">Student q = qr.query(query, <span class="keyword">new</span> BeanHandler&lt;&gt;(Student.class), <span class="string">"helloworld"</span>);</span><br><span class="line">System.out.println(q);</span><br><span class="line"><span class="comment">/**Console:</span></span><br><span class="line"><span class="comment">*   Student [id=helloworld, name=qwe, clazz=160341B]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="快速封装-返回值类型是多个对象"><a href="#快速封装-返回值类型是多个对象" class="headerlink" title="快速封装-返回值类型是多个对象"></a>快速封装-返回值类型是多个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String query = <span class="string">"select * from students"</span>;</span><br><span class="line">List&lt;Student&gt; l = qr.query(query, <span class="keyword">new</span> BeanListHandler&lt;&gt;(Student.class));</span><br><span class="line">System.out.println(l);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [Student [id=160341240, name=qwe, clazz=160341B], </span></span><br><span class="line"><span class="comment"> *      Student [id=160341244, name=qwe, clazz=160341B], </span></span><br><span class="line"><span class="comment"> *          Student [id=aaa, name=詹金浩, clazz=160341B], </span></span><br><span class="line"><span class="comment"> *              Student [id=helloworld, name=qwe, clazz=160341B]]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="跨域问题和CORS"><a href="#跨域问题和CORS" class="headerlink" title="跨域问题和CORS"></a>跨域问题和CORS</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>如果两个页面的<strong>协议</strong>，<strong>端口（如果有指定）</strong>和<strong>主机</strong>都相同，则两个页面具有相同的<strong>源</strong>。下表给出了同源检测的示例，相对：<code>http://store.company.com/dir/page.html</code>:</p><table><thead><tr><th style="text-align:left">URL</th><th style="text-align:left">结果</th><th style="text-align:center">原因</th></tr></thead><tbody><tr><td style="text-align:left"><code>http://store.company.com/dir2/other.html</code></td><td style="text-align:left">成功</td><td style="text-align:center">只有路径不同</td></tr><tr><td style="text-align:left"><code>http://store.company.com/dir/inner/another.html</code></td><td style="text-align:left">成功</td><td style="text-align:center">只有路径不同</td></tr><tr><td style="text-align:left"><code>https://store.company.com/secure.html</code></td><td style="text-align:left">失败</td><td style="text-align:center">不同协议 ( https和http )</td></tr><tr><td style="text-align:left"><code>http://store.company.com:81/dir/etc.html</code></td><td style="text-align:left">失败</td><td style="text-align:center">不同端口 ( http:// 80是默认的)</td></tr><tr><td style="text-align:left"><code>http://news.company.com/dir/other.html</code></td><td style="text-align:left">失败</td><td style="text-align:center">不同域名 ( news和store )</td></tr></tbody></table><h3 id="没有同源策略限制的两个危险场景"><a href="#没有同源策略限制的两个危险场景" class="headerlink" title="没有同源策略限制的两个危险场景"></a>没有同源策略限制的两个危险场景</h3><h4 id="没有同源策略限制的接口请求"><a href="#没有同源策略限制的接口请求" class="headerlink" title="没有同源策略限制的接口请求"></a>没有同源策略限制的接口请求</h4><p>有一个小小的东西叫cookie大家应该知道，一般用来处理登录等场景，目的是让服务端知道谁发出的这次请求。如果你请求了接口进行登录，服务端验证通过后会在响应头加入Set-Cookie字段，然后下次再发请求的时候，浏览器会自动将cookie附加在HTTP请求的头字段Cookie中，服务端就能知道这个用户已经登录过了。知道这个之后，我们来看场景：</p><ul><li>你准备去清空你的购物车，于是打开了买买买网站<code>www.maimaimai.com</code>，然后登录成功，一看，购物车东西这么少，不行，还得买多点。</li><li>你在看有什么东西买的过程中，你的好基友发给你一个链接<code>www.nidongde.com</code>，一脸yin笑地跟你说：“你懂的”，你毫不犹豫打开了。</li><li>你饶有兴致地浏览着<code>www.nidongde.com</code>，谁知这个网站暗地里做了些不可描述的事情！由于没有同源策略的限制，它向<code>www.maimaimai.com</code>发起了请求！聪明的你一定想到一句话“服务端验证通过后会在响应头加入Set-Cookie字段，然后下次再发请求的时候，浏览器会自动将cookie附加在HTTP请求的头字段Cookie中”，这样一来，这个不法网站就相当于登录了你的账号，可以为所欲为了！当然，这只是对cookie的一方面限制，想完整的保证cookie的安全性还必须信息安全同学的头发。</li></ul><h4 id="没有同源策略限制的Dom查询"><a href="#没有同源策略限制的Dom查询" class="headerlink" title="没有同源策略限制的Dom查询"></a>没有同源策略限制的Dom查询</h4><ul><li>有一天你刚睡醒，收到一封邮件，说是你的银行账号有风险，赶紧点进<code>www.yinghang.com</code>改密码。你吓尿了，赶紧点进去，还是熟悉的银行登录界面，你果断输入你的账号密码，登录进去看看钱有没有少了。</li><li>睡眼朦胧的你没看清楚，平时访问的银行网站是<code>www.yinhang.com</code>，而现在访问的是<code>www.yinghang.com</code>，这个钓鱼网站做了什么呢？</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML</span></span><br><span class="line">&lt;iframe name=<span class="string">"yinhang"</span> src=<span class="string">"www.yinhang.com"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="comment">// JS</span></span><br><span class="line"><span class="comment">// 由于没有同源策略的限制，钓鱼网站可以直接拿到别的网站的Dom</span></span><br><span class="line"><span class="keyword">const</span> iframe = <span class="built_in">window</span>.frames[<span class="string">'yinhang'</span>]</span><br><span class="line"><span class="keyword">const</span> node = iframe.document.getElementById(<span class="string">'你输入账号密码的Input'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`拿到了这个<span class="subst">$&#123;node&#125;</span>，我还拿不到你刚刚输入的账号密码吗`</span>)</span><br></pre></td></tr></table></figure><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/05-JavaWeb和SSM/2019-07-11_154252.jpg"></div><br>但是对于如下的请求，会被同源策略放行：<p></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//static.store.com/jquery.js &gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>这样的话可以保证一些插件能从指定的地址下载放到我们自己的页面中。其实这种“嵌入式”的跨域加载资源的方式还有<code>&lt;img&gt;</code>、<code>&lt;link&gt;</code>等，相当于我们浏览器发起了一次GET请求，取到相关资源，然后放到本地而已。</p><h3 id="CORS解决跨域问题"><a href="#CORS解决跨域问题" class="headerlink" title="CORS解决跨域问题"></a>CORS解决跨域问题</h3><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。看名字就知道这是处理跨域问题的标准做法。CORS有两种请求，简单请求和非简单请求。</p><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求。</p><ol><li>请求方法是以下三种方法之一：<ol><li>HEAD</li><li>GET</li><li>POST</li></ol></li><li>HTTP的头信息不超出以下几种字段：<ol><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ol></li></ol><p>当浏览器发现发起的ajax请求是简单请求时，会在请求头中携带一个字段：<code>Origin</code>。</p><p></p><div align="center"><img width="100%" src="//isjinhao.github.io/2019/05-JavaWeb和SSM/1530460311064.png"></div><br>Origin中会指出当前请求属于哪个域（协议+域名+端口）。服务会根据这个值决定是否允许其跨域。如果服务器允许跨域，需要在返回的响应头中携带下面信息：<p></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><ul><li>Access-Control-Allow-Origin：可接受的域，是一个具体域名或者*（代表任意域名）</li><li>Access-Control-Allow-Credentials：是否允许携带cookie，默认情况下，cors不会携带cookie，除非这个值是true。</li></ul><p>服务器想要操作当前页面的cookie，需要满足3个条件：</p><ul><li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。</li><li>浏览器发起ajax请求需要指定字段withCredentials 为true</li><li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名</li></ul><h4 id="特殊请求"><a href="#特殊请求" class="headerlink" title="特殊请求"></a>特殊请求</h4><p>特殊请求会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span>: PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Host</span>: api.leyou.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure><p>与简单请求相比，除了Origin以外，多了两个头：</p><ul><li>Access-Control-Request-Method：接下来会用到的请求方式，比如PUT</li><li>Access-Control-Request-Headers：会额外用到的头信息</li></ul><p>服务的收到预检请求，如果许可跨域，会发出响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 1728000</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure><p>除了<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Credentials</code>以外，这里又额外多出3个头：</p><ul><li>Access-Control-Allow-Methods：允许访问的方式</li><li>Access-Control-Allow-Headers：允许携带的头</li><li>Access-Control-Max-Age：本次许可的有效时长，单位是秒，**过期之前的ajax请求就无需再次进行预检了</li></ul><h3 id="SpringMVC实现"><a href="#SpringMVC实现" class="headerlink" title="SpringMVC实现"></a>SpringMVC实现</h3><p>实现比较简单：</p><ul><li>浏览器端都有浏览器自动完成，我们无需操心</li><li>服务端可以通过拦截器统一实现，不必每次都去进行跨域判定的编写。</li></ul><p>事实上，SpringMVC已经帮我们写好了CORS的跨域过滤器：CorsFilter，内部已经实现了刚才所讲的判定逻辑，我们直接用就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://manage.leyou.com"</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"HEAD"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"GET"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PUT"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PATCH"</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Tomcat的结构&quot;&gt;&lt;a href=&quot;#Tomcat的结构&quot; class=&quot;headerlink&quot; title=&quot;Tomcat的结构
      
    
    </summary>
    
      <category term="应届求职复习" scheme="https://isjinhao.github.io/categories/%E5%BA%94%E5%B1%8A%E6%B1%82%E8%81%8C%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="应届求职复习" scheme="https://isjinhao.github.io/tags/%E5%BA%94%E5%B1%8A%E6%B1%82%E8%81%8C%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="面试" scheme="https://isjinhao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>04-操作系统和Linux</title>
    <link href="https://isjinhao.github.io/2019/04-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%92%8CLinux/"/>
    <id>https://isjinhao.github.io/2019/04-操作系统和Linux/</id>
    <published>2019-07-28T13:47:27.000Z</published>
    <updated>2019-08-06T06:31:07.675Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>03-IO流和网络</title>
    <link href="https://isjinhao.github.io/2019/03-IO%E6%B5%81%E5%92%8C%E7%BD%91%E7%BB%9C/"/>
    <id>https://isjinhao.github.io/2019/03-IO流和网络/</id>
    <published>2019-07-28T13:47:20.000Z</published>
    <updated>2019-08-06T06:31:07.694Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><div align="center"><img width="90%" src="//isjinhao.github.io/2019/03-IO流和网络/2019-07-15_000310.jpg"></div><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">ByteArrayInputStream(<span class="keyword">byte</span>[] buf) </span><br><span class="line"><span class="comment">// 创建一个 ByteArrayInputStream，使用 buf 作为其缓冲区数组。 </span></span><br><span class="line">    </span><br><span class="line">ByteArrayInputStream(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> offset, <span class="keyword">int</span> length) </span><br><span class="line"><span class="comment">// 创建 ByteArrayInputStream，使用 buf 作为其缓冲区数组。 </span></span><br><span class="line"></span><br><span class="line">FileInputStream(File file) </span><br><span class="line"><span class="comment">// 通过打开一个到实际文件的连接来创建一个 FileInputStream，</span></span><br><span class="line"><span class="comment">// 该文件通过文件系统中的 File 对象 file 指定。 </span></span><br><span class="line"></span><br><span class="line">FileInputStream(String name) </span><br><span class="line"><span class="comment">// 通过打开一个到实际文件的连接来创建一个 FileInputStream，</span></span><br><span class="line"><span class="comment">// 该文件通过文件系统中的路径名 name 指定。 </span></span><br><span class="line"></span><br><span class="line">ObjectInputStream(InputStream in) </span><br><span class="line"><span class="comment">// 创建从指定 InputStream 读取的 ObjectInputStream。</span></span><br><span class="line">    </span><br><span class="line">BufferedInputStream(InputStream in) </span><br><span class="line"><span class="comment">// 创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。 </span></span><br><span class="line">    </span><br><span class="line">BufferedInputStream(InputStream in, <span class="keyword">int</span> size) </span><br><span class="line"><span class="comment">// 创建具有指定缓冲区大小的 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。 </span></span><br><span class="line"></span><br><span class="line">BufferedReader(Reader in) </span><br><span class="line"><span class="comment">// 创建一个使用默认大小输入缓冲区的缓冲字符输入流。 </span></span><br><span class="line"></span><br><span class="line">BufferedReader(Reader in, <span class="keyword">int</span> sz)</span><br><span class="line"><span class="comment">// 创建一个使用指定大小输入缓冲区的缓冲字符输入流。 </span></span><br><span class="line"></span><br><span class="line">CharArrayReader(<span class="keyword">char</span>[] buf) </span><br><span class="line"><span class="comment">// 根据指定的 char 数组创建一个 CharArrayReader。 </span></span><br><span class="line"></span><br><span class="line">CharArrayReader(<span class="keyword">char</span>[] buf, <span class="keyword">int</span> offset, <span class="keyword">int</span> length) </span><br><span class="line"><span class="comment">// 根据指定的 char 数组创建一个 CharArrayReader。 </span></span><br><span class="line"></span><br><span class="line">StringReader(String s) </span><br><span class="line"><span class="comment">// 创建一个新字符串 reader。</span></span><br><span class="line"></span><br><span class="line">FileReader(File file) </span><br><span class="line"><span class="comment">// 在给定从中读取数据的 File 的情况下创建一个新 FileReader。 </span></span><br><span class="line"></span><br><span class="line">FileReader(String fileName) </span><br><span class="line"><span class="comment">// 在给定从中读取数据的文件名的情况下创建一个新 FileReader。 </span></span><br><span class="line"></span><br><span class="line">ByteArrayOutputStream() </span><br><span class="line"><span class="comment">// 创建一个新的 byte 数组输出流。 </span></span><br><span class="line"></span><br><span class="line">ByteArrayOutputStream(<span class="keyword">int</span> size) </span><br><span class="line"><span class="comment">// 创建一个新的 byte 数组输出流，它具有指定大小的缓冲区容量（以字节为单位）。 </span></span><br><span class="line"></span><br><span class="line">FileOutputStream(File file) </span><br><span class="line"><span class="comment">// 创建一个向指定 File 对象表示的文件中写入数据的文件输出流。 </span></span><br><span class="line"></span><br><span class="line">FileOutputStream(File file, <span class="keyword">boolean</span> append) </span><br><span class="line"><span class="comment">// 创建一个向指定 File 对象表示的文件中写入数据的文件输出流。 </span></span><br><span class="line"></span><br><span class="line">FileOutputStream(String name) </span><br><span class="line"><span class="comment">// 创建一个向具有指定名称的文件中写入数据的输出文件流。 </span></span><br><span class="line"></span><br><span class="line">FileOutputStream(String name, <span class="keyword">boolean</span> append) </span><br><span class="line"><span class="comment">// 创建一个向具有指定 name 的文件中写入数据的输出文件流。 </span></span><br><span class="line"></span><br><span class="line">ObjectOutputStream(OutputStream out) </span><br><span class="line"><span class="comment">// 创建写入指定 OutputStream 的 ObjectOutputStream。</span></span><br><span class="line">    </span><br><span class="line">BufferedOutputStream(OutputStream out) </span><br><span class="line"><span class="comment">// 创建一个新的缓冲输出流，以将数据写入指定的底层输出流。 </span></span><br><span class="line"></span><br><span class="line">BufferedOutputStream(OutputStream out, <span class="keyword">int</span> size) </span><br><span class="line"><span class="comment">// 创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 </span></span><br><span class="line"></span><br><span class="line">PrintStream(File file) </span><br><span class="line"><span class="comment">// 创建具有指定文件且不带自动行刷新的新打印流。 </span></span><br><span class="line"></span><br><span class="line">PrintStream(File file, String csn) </span><br><span class="line"><span class="comment">// 创建具有指定文件名称和字符集且不带自动行刷新的新打印流。 </span></span><br><span class="line"></span><br><span class="line">PrintStream(OutputStream out) </span><br><span class="line"><span class="comment">// 创建新的打印流。 </span></span><br><span class="line"></span><br><span class="line">PrintStream(OutputStream out, <span class="keyword">boolean</span> autoFlush) </span><br><span class="line"><span class="comment">// 创建新的打印流。 </span></span><br><span class="line"></span><br><span class="line">PrintStream(OutputStream out, <span class="keyword">boolean</span> autoFlush, String encoding) </span><br><span class="line"><span class="comment">// 创建新的打印流。 </span></span><br><span class="line"></span><br><span class="line">PrintStream(String fileName) </span><br><span class="line"><span class="comment">// 创建具有指定文件名称且不带自动行刷新的新打印流。 </span></span><br><span class="line"></span><br><span class="line">PrintStream(String fileName, String csn) </span><br><span class="line"><span class="comment">// 创建具有指定文件名称和字符集且不带自动行刷新的新打印流。 </span></span><br><span class="line"></span><br><span class="line">BufferedWriter(Writer out) </span><br><span class="line"><span class="comment">// 创建一个使用默认大小输出缓冲区的缓冲字符输出流。 </span></span><br><span class="line"></span><br><span class="line">BufferedWriter(Writer out, <span class="keyword">int</span> sz) </span><br><span class="line"><span class="comment">// 创建一个使用给定大小输出缓冲区的新缓冲字符输出流。 </span></span><br><span class="line"></span><br><span class="line">CharArrayWriter() </span><br><span class="line"><span class="comment">// 创建一个新的 CharArrayWriter。 </span></span><br><span class="line"></span><br><span class="line">CharArrayWriter(<span class="keyword">int</span> initialSize) </span><br><span class="line"><span class="comment">// 创建一个具有指定初始大小的新 CharArrayWriter。 </span></span><br><span class="line"></span><br><span class="line">StringWriter() </span><br><span class="line"><span class="comment">// 使用默认初始字符串缓冲区大小创建一个新字符串 writer。 </span></span><br><span class="line"></span><br><span class="line">StringWriter(<span class="keyword">int</span> initialSize) </span><br><span class="line"><span class="comment">// 使用指定初始字符串缓冲区大小创建一个新字符串 writer。 </span></span><br><span class="line"></span><br><span class="line">FileWriter(File file) </span><br><span class="line"><span class="comment">// 根据给定的 File 对象构造一个 FileWriter 对象。 </span></span><br><span class="line"></span><br><span class="line">FileWriter(File file, <span class="keyword">boolean</span> append) </span><br><span class="line"><span class="comment">// 根据给定的 File 对象构造一个 FileWriter 对象。 </span></span><br><span class="line"></span><br><span class="line">FileWriter(String fileName) </span><br><span class="line"><span class="comment">// 根据给定的文件名构造一个 FileWriter 对象。 </span></span><br><span class="line"></span><br><span class="line">FileWriter(String fileName, <span class="keyword">boolean</span> append) </span><br><span class="line"><span class="comment">// 根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。 </span></span><br><span class="line"></span><br><span class="line">PrintWriter(File file) </span><br><span class="line"><span class="comment">// 使用指定文件创建不具有自动行刷新的新 PrintWriter。 </span></span><br><span class="line"></span><br><span class="line">PrintWriter(File file, String csn) </span><br><span class="line"><span class="comment">// 创建具有指定文件和字符集且不带自动刷行新的新 PrintWriter。 </span></span><br><span class="line"></span><br><span class="line">PrintWriter(OutputStream out) </span><br><span class="line"><span class="comment">// 根据现有的 OutputStream 创建不带自动行刷新的新 PrintWriter。 </span></span><br><span class="line"></span><br><span class="line">PrintWriter(OutputStream out, <span class="keyword">boolean</span> autoFlush) </span><br><span class="line"><span class="comment">// 通过现有的 OutputStream 创建新的 PrintWriter。 </span></span><br><span class="line"></span><br><span class="line">PrintWriter(String fileName) </span><br><span class="line"><span class="comment">// 创建具有指定文件名称且不带自动行刷新的新 PrintWriter。 </span></span><br><span class="line"></span><br><span class="line">PrintWriter(String fileName, String csn) </span><br><span class="line"><span class="comment">// 创建具有指定文件名称和字符集且不带自动行刷新的新 PrintWriter。 </span></span><br><span class="line"></span><br><span class="line">PrintWriter(Writer out) </span><br><span class="line"><span class="comment">// 创建不带自动行刷新的新 PrintWriter。 </span></span><br><span class="line"></span><br><span class="line">PrintWriter(Writer out, <span class="keyword">boolean</span> autoFlush) </span><br><span class="line"><span class="comment">// 创建新 PrintWriter。</span></span><br></pre></td></tr></table></figure><h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><blockquote><p>This class represents an Internet Protocol (IP) address.</p></blockquote><h4 id="获得本机IP地址"><a href="#获得本机IP地址" class="headerlink" title="获得本机IP地址"></a>获得本机IP地址</h4><ul><li>获得本地IP地址</li></ul><p><code>InetAddress iaddress = InetAddress.getLocalHost();</code></p><p>但是这个函数有问题，因为这个函数的原理是通过获取本机的<code>hostname</code>，然后对此<code>hostname</code>做解析，从而获取<code>IP</code>地址的。那么问题来了，如果在本机的<code>/etc/hosts</code>文件里对这个主机名指向了一个错误的<code>IP</code>地址，那么<code>InetAddress.getLocalHost</code>就会返回这个错误的<code>IP</code>地址。当然如果你的<code>hostname</code>是到<code>DNS</code>去解析的，碰巧<code>DNS</code>上的信息也是错的，也同样是悲惨结局。</p><p><code>InetAddress</code>是由两部分组成的，一部分是getHostName()，一部分是getHostAddress()。</p><ul><li>获得本机所有的IP地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取机器所有网卡的IP（ipv4）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getLocalIP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; ipList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">InetAddress ip = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;NetworkInterface&gt; netInterfaces = (Enumeration&lt;NetworkInterface&gt;) NetworkInterface.getNetworkInterfaces();</span><br><span class="line"><span class="keyword">while</span> (netInterfaces.hasMoreElements()) &#123;</span><br><span class="line">NetworkInterface ni = (NetworkInterface) netInterfaces.nextElement();</span><br><span class="line"><span class="comment">// 遍历所有ip</span></span><br><span class="line">Enumeration&lt;InetAddress&gt; ips = ni.getInetAddresses();</span><br><span class="line"><span class="keyword">while</span> (ips.hasMoreElements()) &#123;</span><br><span class="line">ip = (InetAddress) ips.nextElement();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == ip || <span class="string">""</span>.equals(ip)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String sIP = ip.getHostAddress();</span><br><span class="line"><span class="keyword">if</span>(sIP == <span class="keyword">null</span> || sIP.indexOf(<span class="string">":"</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ipList.add(sIP);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ipList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取其他主机的IP地址对象</li></ul><p><code>InetAddress otherInetAddress = InetAddress.getByName(&quot;www.baidu.com&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line"><span class="comment">//1.获取本地主机</span></span><br><span class="line">InetAddress iaddress = InetAddress.getLocalHost();</span><br><span class="line">System.out.println(iaddress); <span class="comment">//打印 InetAddress对象 默认格式: 用户名/IP地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取主机名</span></span><br><span class="line">String hostName = iaddress.getHostName();</span><br><span class="line"><span class="comment">//3.获取主机IP地址</span></span><br><span class="line">String ip = iaddress.getHostAddress();</span><br><span class="line">System.out.println(hostName);</span><br><span class="line">System.out.println(ip);</span><br><span class="line"><span class="comment">//3.获取其他主机的IP地址对象</span></span><br><span class="line">InetAddress otherInetAddress = InetAddress.getByName(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">System.out.println(otherInetAddress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP通信需要两个类的支持：</p><ul><li>数据的发送接收器：DatagramSocket</li><li>数据包类：DatagramPacket</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建DatagramSocket对象,</span></span><br><span class="line"><span class="comment">//强调:接收端必须指定一个端口号</span></span><br><span class="line">DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.直接创建一个DatagramPacket对象</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bs, bs.length);</span><br><span class="line"><span class="comment">//3.接收</span></span><br><span class="line">System.out.println(<span class="string">"等待发送端发送数据...."</span>);</span><br><span class="line">ds.receive(dp);<span class="comment">//这个方法具有等待功能,等待发送端发送过来的数据</span></span><br><span class="line">System.out.println(<span class="string">"接收数据成功!!"</span>);</span><br><span class="line"><span class="comment">//获取发送端的地址</span></span><br><span class="line">InetAddress sendAddress = dp.getAddress();</span><br><span class="line">System.out.println(<span class="string">"发送端是:"</span>+sendAddress.getHostAddress());</span><br><span class="line"><span class="comment">//获取真正的数据</span></span><br><span class="line"><span class="keyword">byte</span>[] data = dp.getData();</span><br><span class="line"><span class="comment">//获取发送端 发来了多少字节</span></span><br><span class="line"><span class="keyword">int</span> len = dp.getLength();</span><br><span class="line"><span class="comment">//打印数据</span></span><br><span class="line">String receiveMsg = <span class="keyword">new</span> String(data, <span class="number">0</span>, len);</span><br><span class="line">System.out.println(<span class="string">"发送端说:"</span>+receiveMsg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.关闭资源（程序运行结束之后是需要关闭资源的，但是我们的程序是一个死循环，此句永不会执行，所以不能加关闭）</span></span><br><span class="line"><span class="comment">//ds.close();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSender</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//1.创建DatagramSocket对象</span></span><br><span class="line">DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.创建DatagramPacket对象</span></span><br><span class="line"><span class="comment">//存储 发送的数据,对方的IP,端口号</span></span><br><span class="line">System.out.println(<span class="string">"请输入您要发送的数据:"</span>);</span><br><span class="line">String sendMsg = sc.nextLine();</span><br><span class="line"><span class="keyword">byte</span>[] bs = sendMsg.getBytes();</span><br><span class="line"><span class="comment">//IP地址:127.0.0.1  代表本机,本地回环地址</span></span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bs,bs.length,InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">12345</span>);</span><br><span class="line"><span class="comment">//3.发送</span></span><br><span class="line">ds.send(dp);</span><br><span class="line">System.out.println(<span class="string">"发送数据成功!!!"</span>);<span class="comment">//192.168.146.72</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.关闭资源（程序运行结束之后是需要关闭资源的，但是我们的程序是一个死循环，此句永不会执行，所以不能加关闭）</span></span><br><span class="line"><span class="comment">//ds.close();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP服务器:(ServerSocket) 步骤:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.创建一个ServerSocket对象,必须绑定一个端口,这个端口必须和客户端连接的端口一致</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.调用server的accept()方法,获取到底哪一个客户端连接的服务器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.通过刚刚获取到的客户端对象 调用getInputStream()方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.通过输入流调用read方法,读取客户端写过来的数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5.关闭资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建一个ServerSocket对象,必须绑定一个端口,这个端口必须和客户端连接的端口一致</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="comment">// 2.获取到 哪一个 客户端连接的我</span></span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line">Socket client = server.accept();<span class="comment">// 此方法也具有等待功能,等待某一个客户端连接</span></span><br><span class="line"><span class="comment">// 打印一些和客户端有关信息</span></span><br><span class="line">String ip = client.getInetAddress().getHostAddress();</span><br><span class="line">System.out.println(<span class="string">"小样,抓到你了:"</span> + ip);</span><br><span class="line"><span class="comment">// 3.获取输入流,实际上是客户端写数据时的输出流</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="comment">// 4.读取数据</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = in.read(bs);</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">System.out.println(<span class="string">"客户端说:"</span> + <span class="keyword">new</span> String(bs, <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 5.要向客户端 回写数据,告诉客户端您的信息我已经收到了</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line">out.write(<span class="string">"您的消息已经收到..."</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"给客户端反馈的信息发送成功!!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">server.close();</span><br><span class="line">client.close();</span><br><span class="line">in.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用TCP协议的客户端(Socket类) 步骤: 1.创建一个客户端对象(注意:指定这个Socket要连接的服务器的IP和端口)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.从客户端对象中获取 输出流:getOutputStream()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.调用输出流的Write方法写数据到服务器即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.关闭资源</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建一个客户端对象(注意:指定这个Socket要连接的服务器的IP和端口)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这个构造方法干了很多事情: a.自动去连接服务器 b.自动进行三次握手,建立连接 c.自动为连接中创建两个流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.从客户端对象中获取 输出流:getOutputStream()</span></span><br><span class="line"><span class="comment">// OutputStream out = client.getOutputStream();</span></span><br><span class="line"><span class="comment">// 3.调用输出流的Write方法写数据到服务器即可</span></span><br><span class="line"><span class="comment">// out.write("How are you".getBytes());</span></span><br><span class="line">client.getOutputStream().write(<span class="string">"How are you"</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"给服务器发送数据成功!!"</span>);</span><br><span class="line"><span class="comment">// 4.读取服务器 发送过来的反馈信息</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = in.read(bs);</span><br><span class="line">System.out.println(<span class="string">"服务器响应:"</span> + <span class="keyword">new</span> String(bs, <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件传输案例"><a href="#文件传输案例" class="headerlink" title="文件传输案例"></a>文件传输案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建ServerSocket对象,绑定一个端口</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.获取哪一个客户端连接的服务器</span></span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line"><span class="keyword">final</span> Socket client = server.accept();</span><br><span class="line"><span class="comment">//开启一个线程,和clinet进行交互</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"小样:"</span>+client.getInetAddress().getHostAddress());</span><br><span class="line"><span class="comment">//3.获取输入流,读取客户端发来数据</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="comment">//4.创建文件的输出流,把数据写到文件中</span></span><br><span class="line">String picName = <span class="string">"D:\\"</span>+System.currentTimeMillis()+<span class="string">".png"</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(picName);</span><br><span class="line"><span class="comment">//5.循环 从输入流读取客户端数据, 写入到文件中</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=in.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">fos.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;<span class="comment">//1小时</span></span><br><span class="line">System.out.println(<span class="string">"客户端的文件已经保存完毕,可以查看了"</span>+picName);</span><br><span class="line"><span class="comment">//6.告知客户端,文件真的真的真的上传成功</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line">out.write(<span class="string">"您的文件真的真的真的上传成功"</span>.getBytes());</span><br><span class="line">client.close();</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.关闭</span></span><br><span class="line"><span class="comment">//server.close();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.创建Socket对象,连接服务器</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line">System.out.println(<span class="string">"连接服务器成功.."</span>);</span><br><span class="line"><span class="comment">//2.获取输出流,把数据写向服务器</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line"><span class="comment">//3.创建文件的输入流,读取本地的文件数据</span></span><br><span class="line">FileInputStream fis = </span><br><span class="line">            <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\ISJINHAO\\Desktop\\我.jpg"</span>);</span><br><span class="line"><span class="comment">//4.循环,读取本地文件,写到服务器</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=fis.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">out.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭输出流</span></span><br><span class="line">client.shutdownOutput();</span><br><span class="line"><span class="comment">//5.获取服务器反馈的信息</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len1 = in.read(bs1);</span><br><span class="line">System.out.println(<span class="string">"服务器说:"</span>+<span class="keyword">new</span> String(bs1,<span class="number">0</span>,len1));</span><br><span class="line"><span class="comment">//6关闭</span></span><br><span class="line">client.close();</span><br><span class="line">out.close();</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Socket属性"><a href="#Socket属性" class="headerlink" title="Socket属性"></a>Socket属性</h3><ul><li>TCP_NODELAY：是否采用nagle算法。</li><li>SO_REUSEADDR：表示是否允许重用Socket所绑定的本地地址。</li><li>SO_TIMEOUT：表示接收数据时的等待超时时间。</li><li>SO_SNFBUF：表示发送数据的缓冲区的大小。</li><li>SO_RCVBUF：表示接收数据的缓冲区的大小。</li><li>SO_KEEPALIVE：表示对于长时间处于空闲状态的Socket，是否要自动把它关闭。</li><li>SO_LINGER：表示当执行Socket的close()方法时，是否立即关闭底层的Socket。默认第一种。</li></ul><table><thead><tr><th>on</th><th style="text-align:center">linger</th><th style="text-align:center">closesocket行为</th><th style="text-align:center">发送队列</th><th style="text-align:center">底层行为</th></tr></thead><tbody><tr><td>true</td><td style="text-align:center">忽略</td><td style="text-align:center">立即返回。</td><td style="text-align:center">保持直至发送完成。</td><td style="text-align:center">系统接管套接字并保证将数据发送至对端。</td></tr><tr><td>false</td><td style="text-align:center">零</td><td style="text-align:center">立即返回。</td><td style="text-align:center">立即放弃。</td><td style="text-align:center">直接发送RST包，自身立即复位，不用经过2MSL状态。对端收到复位错误号。</td></tr><tr><td>false</td><td style="text-align:center">非零</td><td style="text-align:center">阻塞直到linger时间超时或数据发送完成。(套接字必须设置为阻塞状态)</td><td style="text-align:center">在超时时间段内保持尝试发送，若超时则立即放弃。</td><td style="text-align:center">超时则同第二种情况，若发送完成则皆大欢喜。</td></tr></tbody></table><ul><li><p>OOBINLINE：Enable/disable SO_OOBINLINE(receipt of TCP urgent data)By default, this option is disabled and TCP urgent data received on a socket is silently discarded. If the user wishes to receive urgent data, then this option must be enabled. When enabled, urgent data is received inline with normal data.</p><p>Note, only limited support is provided for handling incoming urgent data. In particular, no notification of incoming urgent data is provided and there is no capability to distinguish between normal data and urgentdata unless provided by a higher level protocol.</p></li><li></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;IO流&quot;&gt;&lt;a href=&quot;#IO流&quot; class=&quot;headerlink&quot; title=&quot;IO流&quot;&gt;&lt;/a&gt;IO流&lt;/h2&gt;&lt;div
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>02-MySQL</title>
    <link href="https://isjinhao.github.io/2019/02-MySQL/"/>
    <id>https://isjinhao.github.io/2019/02-MySQL/</id>
    <published>2019-07-28T13:47:14.000Z</published>
    <updated>2019-08-06T06:31:07.692Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><h3 id="磁盘访问时间"><a href="#磁盘访问时间" class="headerlink" title="磁盘访问时间"></a>磁盘访问时间</h3><h4 id="磁盘构造"><a href="#磁盘构造" class="headerlink" title="磁盘构造"></a>磁盘构造</h4><p></p><div align="center"><img width="30%" src="//isjinhao.github.io/2019/02-MySQL/磁盘.jpg"></div><br>当磁盘驱动器执行读/写功能时。盘片装在一个主轴上，并绕主轴高速旋转，当磁道在读/写头（又叫磁头）下通过，就可以进行数据的读/写了。<p></p><p>一般磁盘分为固定头盘（磁头固定）和活动头盘。固定头盘的每一个磁道上都有独立的磁头，它是固定不动的，专门负责这一磁道上数据的读/写。</p><p>活动头盘 （如上图）的磁头是可移动的。每一个盘面上只有一个磁头（磁头是双向的，因此正反盘面都能读写）。它可以从该面的一个磁道移动到另一个磁道。所有磁头都装在同一个动臂上，因此不同盘面上的所有磁头都是同时移动的（行动整齐划一）。当盘片绕主轴旋转的时候，磁头与旋转的盘片形成一个圆柱体。各个盘面上半径相同的磁道组成了一个圆柱面，我们称为柱面 。因此，柱面的个数也就是盘面上的磁道数。</p><h4 id="访问时间"><a href="#访问时间" class="headerlink" title="访问时间"></a>访问时间</h4><p>典型的磁盘访问时间包括以下三个部分：寻道时间、旋转延迟时间、磁盘访问时间。这其中，时间开销最大的是$s$，台式机的旋转速度一般是7200转/分钟（RPM），即旋转一周需要8.33ms，所以式子中的$s$平均为4.165ms，而且磁臂的移动也需要时间，而硅存储的常见存取时间是50ns，即$s$约为一次存取时间100000倍。通常一页的长度为$2^{11}-2^{14}$，即使磁盘一般是一次读取连续的几个页面，定位到信息的时间也比存取信息的时间多（通常磁盘的平均存储时间是$8-11ms$）。所以当大量数据存储在外存磁盘中时，需要一种合理高效的数据结构来降低访问外存的时间：B树。需要说一下，B树的英文名是<code>B-tree</code>，所以有时候有人会把<code>B树</code>叫做<code>B-树</code>，这两个名词是同一个意思。</p><p>B树的典型执行过程中，B树算法的运行时间取决于<code>DISK-READ</code>和<code>DISK-WRITE</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = a pointer to some object</span><br><span class="line">DISK-READ(x)</span><br><span class="line">operations of x</span><br><span class="line">DISK-WRITE(x)</span><br></pre></td></tr></table></figure><p>通常一个B树的结点和磁盘的一页一样大，这样一次读写操作能获取更多的信息。而每页能存储多少个数据和关键字大小有关。下图中的B树每个结点有1000个数据（B树中结点的度数为结点数据个数+1，见后面的定义），高度为2。所以它可以存储超过十亿个关键字，查找某个关键字至多进行两次磁盘访问。</p><h3 id="B树的定义"><a href="#B树的定义" class="headerlink" title="B树的定义"></a>B树的定义</h3><h4 id="B树的定义-1"><a href="#B树的定义-1" class="headerlink" title="B树的定义"></a>B树的定义</h4><ul><li>每个结点有如下属性：<ol><li>$x.n$：表示当前存储在结点$x$中的关键字个数。</li><li>每个结点中的关键字以非降序方式存放：$x.key_1 \leq x.key_2 \leq \cdots \leq x.key_n$。</li><li>$x.leaf$：一个布尔值，如果$x$是叶结点，则为$true$，否则为$false$。</li></ol></li><li>每个内部结点还包含包含$x.n+1$个指向其孩子的指针：$x.c_1, x.c_2, \cdots , x.c_n $，叶结点的$c_i$属性没有定义。</li><li>关键字$x.key_i$对存储在各子树中的关键字范围加以分割：如果$k_i$为任意一个存储在以$x.c_i$为根的子树中的关键字，满足：$k_i \leq x.key_1 \leq k_2 \leq x.key_2 \leq \cdots \leq x.key_{x.n} \leq k_{x.n+1}$。</li><li>每个叶结点具有相同的深度，即树的高度h。</li><li>每个结点关键字所包含的关键字个数有上界和下界。用一个被称为B树的最小度数的固定整数$t$来表示这些界，$t \geq 2$。<ol><li>除了根结点外的每个结点都至少有$t-1$个关键字，因此，除了根结点以外的每个内部结点至少有$t$个孩子。如果树非空，根结点至少有一个关键字。</li><li>每个结点至多可包含$2t-1$个关键字，因此一个内部结点至多可有$2t$个孩子，当一个结点恰好有$2t-1$个关键字时，该结点是满的。</li><li>$t=2$的树是最简单的，每个内部结点有2个、3个或4个孩子。</li></ol></li></ul><p>那么为什么最小度数不能取1呢？因为最小度数取1之后，内部结点（设指向其的指针为p）可以包含0个关键字，此时包含0个关键字的结点只有一个孩子（设为c），这个结点就被浪费了，我们其实可以直接让p指向c。</p><h3 id="B树的高度"><a href="#B树的高度" class="headerlink" title="B树的高度"></a>B树的高度</h3><p>对任意一棵包含n（$n \geq 1$）个关键字、最小度数为t的B树来说，有：$h \leq log_t{\frac{n+1}{2}}$。证明：</p><p>假设根所在的层高度为0，则高度为h的B树在高度为1的层至少包含2个结点，在高度为2的层至少包含$2t$个结点，在高度为3的层至少包含$2t^2$个结点…直到高度为h的层至少包含$2t^{h-1}$个结点。可得关键字个数n满足不等式：$n \geq 1+(t-1)\sum_{i=1}^h2t^{i-1} = 1+2(t-1)(\frac{t^h-1}{t-1})=2t^h-1$</p><p>$\Longrightarrow t^h \leq (n+1)/2$</p><p>$\Longrightarrow h \leq log_t{\frac{n+1}{2}}$</p><p>（t-1）指的是每个结点至少包含t-1个关键字。</p><h3 id="B树的阶"><a href="#B树的阶" class="headerlink" title="B树的阶"></a>B树的阶</h3><p>我们经常会遇到一个B数的术语：阶，假如树中的结点最多含有m个孩子，此B树的阶为m。当阶为偶数的时候，我们可以把定义中的$t$替换成$m/2$，但是当阶为奇数的时候就要考虑一个问题了，除根结点外的每个内部结点至少含有<code>ceil(m/2)</code>个结点还是<code>floor(m/2)</code>个结点？应该是<code>ceil(m/2)</code>，因为除了根结点每个结点的孩子个数满足：$t \leq keyNum \leq 2t$，如果取<code>floor(m/2)</code>会发现无法满足上式，所以<strong>一棵含有n个总关键字数的m阶的B树的最大高度是</strong>：$log_{ceil(m/2)}(n+1)/2$。（ceil向上取整，floor向下取整）</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>设$x$是根结点，被搜索的关键字是$k$。</p><p></p><div align="left"><img src="//isjinhao.github.io/2019/02-MySQL/搜索.jpg"></div><br>需要说明一下，伪代码中$key$和$c$的起始下标都为1。NIL代表空。<p></p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入的时候会遇到两种情况：</p><ol><li>将新的关键字插在一个已经存在但<strong>未满</strong>的结点上：直接插入；</li><li>将新的关键字插在一个已经存在但<strong>已满</strong>的结点上：分裂后插入；</li></ol><h4 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h4><p>将一个满的结点$y$（有$2t-1$个关键字）按照中间关键字分裂成两个各含有$t-1$个关键字的结点，中间关键字被升到$y$的父结点。如果$y$的父结点也是满的，也需要分裂，最终满结点的分裂会向上传播。如果向上传播时全程都是满结点会把根结点分裂，使B树的高度增1。分裂是使B树增高的唯一办法。</p><p>但是在实际操作中不是等到找出插入过程中实际要分裂的结点才做分裂，而是在沿着树向下查找时分裂所有遇到的满结点，这样就能保证在插入的时候节点一定非满。</p><p></p><div align="left"><img src="//isjinhao.github.io/2019/02-MySQL/分裂.jpg"></div><br>$x$是被分裂的结点的父节点，$y$是$x$的第$i$个孩子。<p></p><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/分裂举例.jpg"></div><p></p><h4 id="非满结点插入"><a href="#非满结点插入" class="headerlink" title="非满结点插入"></a>非满结点插入</h4><p></p><div align="left"><img src="//isjinhao.github.io/2019/02-MySQL/非满结点插入.jpg"></div><br>$x$是被插入的节点，$k$是插入的键。解释几行代码：<p></p><ul><li>12行：被操作的节点从磁盘中读入到内存中，然后在内存中进行操作。</li><li>7行+17行：每次插入的都是叶节点。</li></ul><h4 id="完整插入过程"><a href="#完整插入过程" class="headerlink" title="完整插入过程"></a>完整插入过程</h4><p></p><div align="left"><img src="//isjinhao.github.io/2019/02-MySQL/完整插入过程.jpg"></div><br>此时对根的分裂需要创建两个节点，而且对根的分裂是B树长高的唯一办法。而且在分裂之后我们会发现根节点必然会有一个关键字，这也对应了定义中的B树的根至少有两个孩子。<p></p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>分配空节点：</p><p></p><div align="left"><img src="//isjinhao.github.io/2019/02-MySQL/创建.jpg"></div><br>分配之后循环调用插入即可。<p></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>在删除时需要注意两个部分：</p><ol><li>除根节点外，被删除关键字的节点在删除后仍然要满足$keyNum \geq t-1$。</li><li>删除后需要重新安排这个结点的孩子。</li></ol><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li>如果关键字$k$在结点$x$中，并且$x$是叶节点，从$x$中删除$k$</li><li>如果关键字$k$在结点$x$中，但$x$是内部非根节点：上移孩子结点中的某相近元素（“左孩子最右边的节点”或“右孩子最左边的节点”）到父节点中，并且递归被上移的孩子。删除元素，移动相应元素之后，如果某结点中元素数目（即关键字数）小于$ceil(m/2)-1$，则需要看其某相邻兄弟结点是否贫困（结点中元素个数等于$ceil(m/2)-1$）如果非贫困，则父节点下降一个元素来此节点，兄弟结点上升一个元素。如果其相邻兄弟都贫困，则该结点与其相邻的某一兄弟结点进行“合并“成一个结点。</li></ol><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/B树删除.jpg"></div><p></p><ul><li>刪除H：直接删除</li><li>删除T：W上升到T的位置，4上升到W的位置</li><li>删除R：删除导致只有1个元素，已经小于最小元素数目$ceil(5/2)-1=2$，由于右相邻兄弟结点不贫困，所以先向父节点借一个元素T下移到该叶子结点中，代替原来S的位置，S前移；然后W上移到父结点中，X、Y、Z依次前移。</li></ul><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/删除2.jpg"></div><p></p><ul><li>删除E：因为E所在的结点和相邻的兄弟结点的关键字都刚好达标，删除后不能再向父节点借元素，所以需要该节点与某相邻兄弟结点进行合并操作；首先移动父结点中的元素（该元素在两个需要合并的两个结点元素之间）下移到其子结点中，然后将这两个结点进行合并成一个结点。所以在该实例中，咱们首先将父节点中的元素D下移到已经删除E而只有F的结点中，然后将含有D和F的结点与含有A和C的相邻兄弟结点进行合并成一个结点。但是此时还没有结束，此时的情况如下图第一幅，此时父节点只包含一个元素G，没达标。如果这个问题结点的相邻兄弟比较丰满，则可以向父结点借一个元素。假设这时右兄弟结点（含有Q,X）含有的元素个数大于2，咱们可以将M下移到元素很少的子结点中，将Q上移到M的位置，但此时咱们没有办法去借一个元素，只能与兄弟结点进行合并成一个结点，而根结点中的唯一元素M下移到子结点，即树的高度减少一层。</li></ul><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/删除3.jpg"></div><p></p><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/删除4.jpg"></div><p></p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>在B树中，我们做操作的时候都默认了关键字和其对应的数据都存在一个页面中，但是实际上可以只存储关键字，而且仅存关键字可以让每页能存储更多的数据。基于此点和为了更好的在文件系统中存取数据，诞生了B+树。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><code>B+树</code>可以被视为每个节点仅包含键（不是键值对），并且链接了各叶节点叶的B树。和B树的区别如下：</p><ul><li>所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接。 （而B树的叶子节点并没有包括全部需要查找的信息）。</li><li>所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 （而B树的非终节点也包含需要查找的有效信息）</li></ul><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/B+树.jpg"></div><p></p><h4 id="为什么数据库使用B-树作为索引"><a href="#为什么数据库使用B-树作为索引" class="headerlink" title="为什么数据库使用B+树作为索引"></a>为什么数据库使用B+树作为索引</h4><ul><li><p>B+树的磁盘读写代价更低。B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</p></li><li><p>B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。而B+树只要遍历叶子节点就可以实现整棵树的遍历。</p></li><li><code>B+树</code>对<code>range-query</code>的支持很强大。比如要查<code>5-10</code>之间的，<code>B+树</code>一把到5这个标记，再一把到10，然后串起来就行了，B树就非常麻烦。</li></ul><h4 id="分裂-1"><a href="#分裂-1" class="headerlink" title="分裂"></a>分裂</h4><p>B+树的分裂和B树没有太大区别，只是分裂后注意叶子结点需要有链接到下个结点的指针。</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>B*树是B+树的变体，在B+树的基础上（所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针）:</p><ul><li>B*树中非根和非叶子结点再增加指向兄弟的指针；</li><li>B*树定义了非叶子结点关键字个数至少为$ceil((2/3) \ast m)$，即块的最低使用率为2/3（代替B+树的1/2）。</li></ul><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/Bast.jpg"></div><p></p><h4 id="分裂-2"><a href="#分裂-2" class="headerlink" title="分裂"></a>分裂</h4><p>当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>B树及其变形可以非常好的处理一维空间存储的问题。它的思想就是把一维直线分为若干段线段，当我们查找满足某个要求的点的时候，只要去查找它所属的线段即可。也可以说要查找某一满足条件的点，先去找到满足条件的线段，然后遍历所在线段上的点，即可找到答案。</p><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/B树.jpg"></div><p></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul><li><code>B树</code>：有序数组+平衡多叉树；</li><li><code>B+树</code>：有序数组链表+平衡多叉树；</li><li><code>B*树</code>：一棵丰满的B+树。</li></ul><h2 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h2><p>假如有如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> People(</span><br><span class="line">last_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">first_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">dob <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">gender enum(<span class="string">'m'</span>, <span class="string">'f'</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">key</span>(last_name, first_name, dob)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>对应的<code>B树</code>如下（Mysql中实际上应该是B+树，但是在高性能mysql这本书里使用的是B树）：</p><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/举例B树.jpg"></div><p></p><h3 id="匹配原则"><a href="#匹配原则" class="headerlink" title="匹配原则"></a>匹配原则</h3><p>多列索引的特点就和英语一样，比如查找mysql这个单词，对于第一个单词是有序的，所以先按顺序找到m，再m范围下的单词也是有序的，再找到y，以此类推。所以建立的索引对如下类型的查询有效：</p><h4 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h4><p>和索引中定义的所有列进行匹配，如查找姓名为<code>Cuba Allen</code>，出生于<code>1996-01-01</code>的人。</p><h4 id="匹配最左前缀"><a href="#匹配最左前缀" class="headerlink" title="匹配最左前缀"></a>匹配最左前缀</h4><p>前面提到的索引可用于查找所有姓为<code>Allen</code>的人，即只使用索引的第一列。</p><h4 id="匹配列前缀"><a href="#匹配列前缀" class="headerlink" title="匹配列前缀"></a>匹配列前缀</h4><p>也可以只匹配某一列的值的开头部分，例如前面提到的索引可用于查找所有以<code>J</code>开头的姓的人。这里使用了索引的第一列。</p><h4 id="匹配范围值"><a href="#匹配范围值" class="headerlink" title="匹配范围值"></a>匹配范围值</h4><p>例如前面提到的索引可用于查找姓在<code>Allen</code>和<code>Barrymore</code>之间的人。这里也只用了索引的第一列。</p><h4 id="精确匹配某一列并范围匹配另外一列"><a href="#精确匹配某一列并范围匹配另外一列" class="headerlink" title="精确匹配某一列并范围匹配另外一列"></a>精确匹配某一列并范围匹配另外一列</h4><p>前面提到的索引也可用于查找所有姓为<code>Allen</code>，并且名字是<code>K</code>开头的人。</p><h3 id="多列索引在代码中的使用"><a href="#多列索引在代码中的使用" class="headerlink" title="多列索引在代码中的使用"></a>多列索引在代码中的使用</h3><p>假设建立的索引是<code>(a,b,c)</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> a=<span class="number">3</span> <span class="keyword">and</span> b=<span class="number">5</span> <span class="keyword">and</span> c=<span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 三个索引都在where条件里面用到了，而且都发挥了作用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> c=<span class="number">4</span> <span class="keyword">and</span> b=<span class="number">6</span> <span class="keyword">and</span> a=<span class="number">3</span>; </span><br><span class="line"><span class="comment">-- where里面的条件顺序在查询之前会被mysql自动优化，效果跟上一句一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> a=<span class="number">3</span> <span class="keyword">and</span> c=<span class="number">7</span>; </span><br><span class="line"><span class="comment">-- a用到索引，b没有用，所以c是没有用到索引效果的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> a=<span class="number">3</span> <span class="keyword">and</span> b&gt;<span class="number">7</span> <span class="keyword">and</span> c=<span class="number">3</span>;</span><br><span class="line"><span class="comment">-- a用到了，b也用到了，c没有用到，这个地方b是范围值，也算断点，只不过自身用到了索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> b=<span class="number">3</span> <span class="keyword">and</span> c=<span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 因为a索引没有使用，所以这里 bc都没有用上索引效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> a&gt;<span class="number">4</span> <span class="keyword">and</span> b=<span class="number">7</span> <span class="keyword">and</span> c=<span class="number">9</span>;</span><br><span class="line"><span class="comment">-- a用到了 b没有使用，c没有使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> a&gt;<span class="number">4</span> <span class="keyword">and</span> b <span class="keyword">like</span> <span class="string">'%xxx%'</span> <span class="keyword">and</span> c=<span class="number">9</span>;</span><br><span class="line"><span class="comment">-- a用到了 b没有使用，c没有使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> a=<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> b;</span><br><span class="line"><span class="comment">-- a用到了索引，b在结果排序中也用到了索引的效果，前面说了，a下面任意一段的b是排好序的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> a=<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> c;</span><br><span class="line"><span class="comment">-- a用到了索引，但是这个地方c没有发挥排序效果，因为中间断点了</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">where</span> b=<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> a;</span><br><span class="line"><span class="comment">-- b没有用到索引，排序中a也没有发挥索引效果</span></span><br></pre></td></tr></table></figure><h2 id="索引分类和创建"><a href="#索引分类和创建" class="headerlink" title="索引分类和创建"></a>索引分类和创建</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><p>MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。</p><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>索引列中的值必须是唯一的，但是允许为空值，</p><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>是一种特殊的唯一索引，不允许有空值。后面会有介绍，在INNODB中，主键索引是聚簇索引。</p><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><h4 id="建表时创建"><a href="#建表时创建" class="headerlink" title="建表时创建"></a>建表时创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name </span><br><span class="line">(</span><br><span class="line">    [col_name data_type],</span><br><span class="line">    ...,</span><br><span class="line">[<span class="keyword">UNIQUE</span>] [<span class="keyword">INDEX</span> | <span class="keyword">KEY</span>] [index_name] (col_name[<span class="keyword">length</span>], ...) [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="后期添加"><a href="#后期添加" class="headerlink" title="后期添加"></a>后期添加</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span>] [<span class="keyword">INDEX</span> | <span class="keyword">KEY</span>] [index_name]</span><br><span class="line">(col_name[<span class="keyword">length</span>], ...) [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [<span class="keyword">INDEX</span> | <span class="keyword">KEY</span>] index_name <span class="keyword">ON</span> table_name</span><br><span class="line">(col_name[<span class="keyword">length</span>], ...) [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><p><code>INDEX</code>和<code>KEY</code>具有相同的效果。<code>length</code>是指该列在<code>B+树</code>中的关键字所占的长度。</p><h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>聚簇的意思是键值和数据行紧凑地存储在一起，因为无法把数据行放在两个不同的地方，所以一个表只有一个聚簇索引。而主键会被默认添加上聚簇索引，如果没有主键，<code>INNODB</code>会选择一个非空索引来替代，如果没有这样的索引，<code>INNODB</code>会隐式定义一个主键来作为聚簇索引。</p><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/聚簇索引.jpg"></div><p></p><h4 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h4><p>非聚簇索引的叶子节点仍然是索引节点，只不过有指向对应数据块的指针。又被称为二级索引。INNODB的二级索引其叶子结点上保存的是<code>KEY+PRIMARY COL</code>。</p><h3 id="INNODB索引"><a href="#INNODB索引" class="headerlink" title="INNODB索引"></a>INNODB索引</h3><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/聚簇索引INNODB.jpg"></div><br>注意：INNODB中主键索引就是聚簇索引。<p></p><h3 id="MyISAM索引"><a href="#MyISAM索引" class="headerlink" title="MyISAM索引"></a>MyISAM索引</h3><p></p><div align="center"><img src="//isjinhao.github.io/2019/02-MySQL/非聚簇索引MYISAM.jpg"></div><p></p><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;B树&quot;&gt;&lt;a href=&quot;#B树&quot; class=&quot;headerlink&quot; title=&quot;B树&quot;&gt;&lt;/a&gt;B树&lt;/h2&gt;&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="应届求职复习" scheme="https://isjinhao.github.io/categories/%E5%BA%94%E5%B1%8A%E6%B1%82%E8%81%8C%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="应届求职复习" scheme="https://isjinhao.github.io/tags/%E5%BA%94%E5%B1%8A%E6%B1%82%E8%81%8C%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="面试" scheme="https://isjinhao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>01-Java基础</title>
    <link href="https://isjinhao.github.io/2019/01-Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://isjinhao.github.io/2019/01-Java基础/</id>
    <published>2019-07-28T08:38:28.000Z</published>
    <updated>2019-08-06T06:31:07.702Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --><h2 id="JVM-amp-JDK-amp-JRE"><a href="#JVM-amp-JDK-amp-JRE" class="headerlink" title="JVM&amp;JDK&amp;JRE"></a>JVM&amp;JDK&amp;JRE</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p><strong>什么是字节码?采用字节码的好处是什么?</strong></p><blockquote><p>在 Java 中，JVM可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><p><strong>Java 程序从源代码到运行一般有下面3步：</strong></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/01-Java基础/Java 程序运行过程.png"></div><br>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的（也就是所谓的热点代码），所以后面引进了 JIT 编译器，而JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。<br><br>&gt; HotSpot采用了惰性评估（Lazy Evaluation）的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是JIT所需要编译的部分。JVM会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9引入了一种新的编译模式AOT（Ahead of Time Compilation），它是直接将字节码编译成机器码，这样就避免了JIT预热等各方面的开销。JDK支持分层编译和AOT协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。<br><br><strong>总结：</strong><br><br>Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。<br><br><br><br>### JDK 和 JRE<br><br>JDK是Java Development Kit，它是功能齐全的Java SDK。它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。<br><br>JRE 是 Java运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。<br><br>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装JDK了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何Java开发，仍然需要安装JDK。例如，如果要使用JSP部署Web应用程序，那么从技术上讲，您只是在应用程序服务器中运行Java程序。那你为什么需要JDK呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。<br><br><br><br>## Java和C++的区别<br><br>- 都是面向对象的语言，都支持封装、继承和多态<br>- Java 不提供指针来直接访问内存，程序内存更加安全<br>- Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。<br>- Java 有自动内存管理机制，不需要程序员手动释放无用内存<br><br><br><br>## 异常<br><br>异常是程序在运行时出现的会导致程序运行终止的错误。这种错误是不能通过编译系统检查出来的。常见的异常的发生原因为系统资源错误和用户操所错误两种。<br><br>Java把异常信息封装成一个类。当发生某种异常时将某种对应的类作为异常信息抛出。异常的根类时Throwable，其有两个直接子类 Error和Exception。Error是描述系统资源错误的类。Exception是描述用户操作错误的类。<br><br>发生了Error就是必须修改代码或调整外部环境问题，程序肯定会终止。比如需要开辟一个内存大小为99999999个int的数组。一般来说Error很少发生。发生了Exception就要进行处理，使程序运行下去，如数组越界异常。而Exception又可以分为两种，一种是程序本身存在的问题引发的异常（健壮性不够），即：RuntimeException；一种是程序本身可能没有问题，但遇到诸如文件不存在所导致的错误，Excption中除了RuntimeException外都是此种异常。而RuntimeException是不允许存在的，遇到RuntimeException就说明程序有问题，需要修改代码。<br><br><div align="center"><img width="65%" src="//isjinhao.github.io/2019/01-Java基础/受查非受查异常.png"></div><br>### 受查异常、非受查异常<br><br>Java语言规范规定派生于Error类或RuntimeException类的异常都称为非受查异常，其余异常都被成为受查异常。受查异常就是必须告诉它的调用者可能会出现异常，让其调用者抛出或者捕获处理，这类异常如果没有在程序中进行异常处理，编译不通过。非受查异常则不需要。<br><br><br><br>### 声明受查异常（throws）<br><br>除了Error和RuntimeException的异常都是受查异常，这些异常如：IOException、SQLException等，在可能发生的方法中需要被声明。同时非受查异常最好不要被声明。需要使用throws声明异常后的情况如下：<br><br>- 调用一个抛出受查异常的方法：<code>public int read() throws IOException</code><br>- 方法中使用throw语句抛出了受查异常。<br><br><br><br>### 抛出异常（throw）<br><br>throw可以用于抛出异常对象，一般是受查异常对象。格式如下例：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;    </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"出现异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### return和finally的决斗<br><br>一旦进入<code>try … catch …</code>的异常捕获结构，无论try和catch的语句块有没有return语句，finally一定会被执行，但是如果finally中还有return语句，return之后的不会被执行。同时后来的return值会覆盖之前的return值。但若未进入异常捕获结构则return后不允许有语句，因为即使有也一定不会被执行。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterviewReview</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(test());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Integer <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"111"</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"222"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//System.out.println("333");// 报错</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"---"</span>);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"```"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//System.out.println("...");// 报错</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"aaa"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">//System.out.println("bbb");// 报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">111</span></span><br><span class="line"><span class="comment">    ---</span></span><br><span class="line"><span class="comment">    aaa</span></span><br><span class="line"><span class="comment">    100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><br>## final<br><br>### 修饰类<br><br>当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。<br><br><br><br>### 修饰方法<br><br>只有在想明确禁止该方法在子类中被覆盖的情况下才将方法设置为final的。即父类的final方法是不能被子类所覆盖的。<br><br>重写的前提是子类可以从父类中继承此方法，如果父类中final修饰的方法同时访问控制权限为private，将会导致子类中不能直接继承到此方法，因此，此时可以在子类中定义方法签名相同的方法，此时不再产生重写与final的矛盾，而是在子类中重新定义了新的方法。（注：类的private方法会隐式地被指定为final方法。）<br><br><br><br>### 修饰变量<br><br>final成员变量表示常量，只能被赋值一次，赋值后值不再改变。<br><br>- 当final修饰一个基本数据类型时，表示该基本数据类型的值一旦在初始化后便不能发生变化；<br>- 如果final修饰一个引用类型时，则在对其初始化之后便不能再让其指向其他对象了，但该引用所指向的对象的内容是可以发生变化的。本质上是一回事，因为引用的值是一个地址，final要求值，即地址的值不发生变化。<br><br>final修饰一个成员变量，必须要显示初始化。这里有两种初始化方式，一种是在变量声明的时候初始化；第二种方法是在声明变量的时候不赋初值，但是要在这个变量所在的类的所有的构造函数中对这个变量赋初值。<br><br><br><br>### finalize<br><br>Object 类的一个方法，在垃圾回收器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。该方法更像是一个对象生命周期的临终方法，当该方法被系统调用则代表该对象即将“死亡”，但是需要注意的是，我们主动行为上去调用该方法并不会导致该对象“死亡”，这是一个被动的方法（其实就是回调方法），不需要我们调用。<br><br><br><br>## static<br><br>### 修饰方法<br><br>- 在静态方法中不能访问类的非静态成员变量和非静态成员方法。<br><br>- 在非静态成员方法中是可以访问静态成员方法/变量的。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterviewReview</span> <span class="keyword">extends</span> <span class="title">Dad</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;<span class="comment">// static方法可以被重新定义</span></span><br><span class="line">System.out.println(<span class="string">"son"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"dad"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 面试题<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"base static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"base constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">父类先于子类、静态先于普通</span></span><br><span class="line"><span class="comment">base static</span></span><br><span class="line"><span class="comment">    test static</span></span><br><span class="line"><span class="comment">    base constructor</span></span><br><span class="line"><span class="comment">    test constructor</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">"Test"</span>);</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">"MyClass"</span>);</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"myclass static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"myclass constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">test static</span></span><br><span class="line"><span class="comment">    myclass static</span></span><br><span class="line"><span class="comment">    person static</span></span><br><span class="line"><span class="comment">    person Test</span></span><br><span class="line"><span class="comment">    test constructor</span></span><br><span class="line"><span class="comment">    person MyClass</span></span><br><span class="line"><span class="comment">    myclass constructor</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><br>首先加载Test类，因此会执行Test类中的static块。接着执行new MyClass()，而MyClass类还没有被加载，因此需要加载MyClass类。在加载MyClass类的时候，发现MyClass类继承自Test类，但是由于Test类已经被加载了，所以只需要加载MyClass类，那么就会执行MyClass类的中的static块。在加载完之后，就通过构造器来生成对象。<strong>而在生成对象的时候，必须先初始化父类的成员变量</strong>，因此会执行Test中的Person person = new Person()，而Person类还没有被加载过，因此会先加载Person类并执行Person类中的static块，接着执行父类的构造器，完成了父类的初始化，然后就来初始化自身了，因此会接着执行MyClass中的Person person = new Person()，最后执行MyClass的构造器。<br><br><br><br>## 重载和重写<br><br>### 重写<br><br>- 参数列表必须完全与被重写方法的相同；<br>- 返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类<br>- 访问权限不能比父类中被重写的方法的访问权限更低。<br>- 父类的成员方法只能被它的子类重写。<br>- 声明为final的方法不能被重写。<br>- 声明为static的方法<strong>不能被重写</strong>，但是能够被再次声明。<br>- 子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。<br>- 子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。<br>- 重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常。<br>- 构造方法不能被重写。<br>- 如果不能继承一个方法，则不能重写这个方法。<br><br><br><br>### 重载<br><br>- 被重载的方法必须改变参数列表（参数个数或类型不一样）；<br>- 被重载的方法可以改变返回类型；<br>- 被重载的方法可以改变访问修饰符；<br>- 被重载的方法可以声明新的或更广的检查异常；<br>- 方法能够在同一个类中或者在一个子类中被重载。<br>- 无法以返回值类型作为重载函数的区分标准。<br><br><br><br>### 区别<br><br>| 区别点 | 重载方法 | 重写方法 |<br>| :——: | :——: | :——————————————–: |<br>| 参数列表 | 必须修改 | 一定不能修改 |<br>| 返回类型 | 可以修改 | 一定不能修改 |<br>| 异常 | 可以修改 | 可以减少或删除，一定不能抛出新的或者更广的异常 |<br>| 访问 | 可以修改 | 一定不能做更严格的限制（可以降低限制） |<br><br><br><br>## 抽象类<br><br>- 抽象类中可以定义构造器<br>- 可以有抽象方法和具体方法<br>- 抽象类中可以定义成员变量<br>- 有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法<br>- 抽象一个类只能继承一个抽象类<br>- 抽象类可以包含静态方法<br><br>抽象方法不可同时是静态的、不能同时是本地的、也不能同时被synchronized修饰。<br><br>- 抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。<br>- 本地方法是由本地代码（如 C 代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。<br>- synchronized 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。<br><br><br><br>## 接口<br><br>- 接口中不能定义构造器<br>- 方法全部都是抽象方法<br>- 抽象类中的成员可以是 private、默认、protected、public<br>- 接口中定义的成员变量实际上都是常量<br>- 接口中不能有静态方法<br>- 一个类可以实现多个接口<br><br><br><br>### 接口和抽象类的区别是什么<br><br>1. 接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。<br>2. 接口中除了static、final变量，不能有其他变量，而抽象类中则不一定。<br>3. 一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口。<br>4. 接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰！）。<br>5. 从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。<br><br>备注：在JDK8中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。<br><br><br><br>## 基本类型和包装类型<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">200</span>);</span><br><span class="line">Integer b = <span class="keyword">new</span> Integer(<span class="number">200</span>);</span><br><span class="line">Integer c = <span class="number">200</span>;</span><br><span class="line">Integer e = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">200</span>;</span><br><span class="line">Object o = <span class="number">200</span>;</span><br><span class="line">System.out.println(<span class="string">"基本类型和数字常量    ==判断"</span> + (o == c));</span><br><span class="line">System.out.println(<span class="string">"基本类型和数字常量    equal判断"</span> + c.equals(o));</span><br><span class="line">System.out.println(<span class="string">"两个new出来的对象    ==判断"</span> + (a == b));</span><br><span class="line">System.out.println(<span class="string">"两个new出来的对象    equal判断"</span> + a.equals(b));</span><br><span class="line">System.out.println(<span class="string">"new出的对象和用int赋值的Integer   ==判断"</span> + (a == c));</span><br><span class="line">System.out.println(<span class="string">"new出的对象和用int赋值的Integer   equal判断"</span> + (a.equals(c)));</span><br><span class="line">System.out.println(<span class="string">"两个用int赋值的Integer    ==判断"</span> + (c == e));</span><br><span class="line">System.out.println(<span class="string">"两个用int赋值的Integer    equal判断"</span> + (c.equals(e)));</span><br><span class="line">System.out.println(<span class="string">"基本类型和new出的对象   ==判断"</span> + (d == a));</span><br><span class="line">System.out.println(<span class="string">"基本类型和new出的对象   equal判断"</span> + (a.equals(d)));</span><br><span class="line">System.out.println(<span class="string">"基本类型和自动装箱的对象   ==判断"</span> + (d == c));</span><br><span class="line">System.out.println(<span class="string">"基本类型和自动装箱的对象   equal判断"</span> + (c.equals(d)));</span><br><span class="line"></span><br><span class="line">Integer f = <span class="number">100</span>;</span><br><span class="line">Integer g = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 如果在-128到127之间相等的话，它们会共用一块内存</span></span><br><span class="line">System.out.println(f == g);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>自动装箱发生的过程是：基本类型转换为包装类型。自动拆箱发生的过程是：包装类型转换为基本类型。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="number">40</span>;</span><br><span class="line">Integer i3 = <span class="number">0</span>;</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i6 = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"i1=i2   "</span> + (i1 == i2));</span><br><span class="line">System.out.println(<span class="string">"i1=i2+i3   "</span> + (i1 == i2 + i3));</span><br><span class="line">System.out.println(<span class="string">"i1=i4   "</span> + (i1 == i4));</span><br><span class="line">System.out.println(<span class="string">"i4=i5   "</span> + (i4 == i5));</span><br><span class="line">System.out.println(<span class="string">"i4=i5+i6   "</span> + (i4 == i5 + i6));   </span><br><span class="line">System.out.println(<span class="string">"40=i5+i6   "</span> + (<span class="number">40</span> == i5 + i6));  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i1=i2   true</span></span><br><span class="line"><span class="comment">    i1=i2+i3   true</span></span><br><span class="line"><span class="comment">    i1=i4   false</span></span><br><span class="line"><span class="comment">    i4=i5   false</span></span><br><span class="line"><span class="comment">    语句i4 == i5 + i6，因为+这个操作符不适用于Integer对象，首先i5和i6进行自动拆箱操作，进行数</span></span><br><span class="line"><span class="comment">    值相加，即i4 == 40。然后Integer对象无法与数值进行直接比较，所以i4自动拆箱转为int值40，最终</span></span><br><span class="line"><span class="comment">    这条语句转为40 == 40进行数值比较。</span></span><br><span class="line"><span class="comment">    i4=i5+i6   true</span></span><br><span class="line"><span class="comment">    40=i5+i6   true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><br>Java 基本类型的包装类中：Byte，Short，Integer，Long，Character，Boolean实现了常量池技术；Float，Double 并没有实现常量池技术。<br><br>Character缓存了[0,127]之间的数据，Boolean缓存了true和false，其他4种包装类默认创建了数值[-128,127]的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象。<br><br><br><br>### int的范围<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 补码会进行循环</span></span><br><span class="line">System.out.println(Integer.MAX_VALUE);<span class="comment">// 2147483647</span></span><br><span class="line">System.out.println(Integer.MAX_VALUE + <span class="number">1</span>);<span class="comment">// -2147483648</span></span><br><span class="line">System.out.println(Integer.MAX_VALUE + <span class="number">2</span>);<span class="comment">// -2147483647</span></span><br><span class="line"></span><br><span class="line">System.out.println(Integer.MIN_VALUE);<span class="comment">// -2147483648</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE - <span class="number">1</span>);<span class="comment">// 2147483647</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE - <span class="number">2</span>);<span class="comment">// 2147483646</span></span><br></pre></td></tr></table></figure><br><br>### 基本类型之间的转换<br><br>- byte、short、int、long：小范围向大范围的可以自动转，大范围向小范围需要强制转。<br>- char可以自动转换为int、long，可以强制转换为short、byte。byte、short、int、long都需要强制转换才能转为char。<br>- float自动转换为double，double强制转换为float。<br>- byte、short、int、long可以自动float和double。反之需要强制转换。<br>- <code>+=</code>和<code>-=</code>包含自动转换，即<code>short s1 = 1; s1 += 1;</code>不会报错。<br><br><br><br>## 对象克隆<br><br>### 多层浅拷贝<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Body body = <span class="keyword">new</span> Body(<span class="keyword">new</span> Head(<span class="keyword">new</span> Face(<span class="keyword">new</span> String(<span class="string">"丑"</span>))));</span><br><span class="line">Body body1 = (Body) body.clone();</span><br><span class="line">System.out.println(<span class="string">"body == body1 : "</span> + (body == body1));</span><br><span class="line">System.out.println(<span class="string">"body.head == body1.head : "</span> + (body.head == body1.head));</span><br><span class="line">System.out.println(body.head.face == body1.head.face);</span><br><span class="line">System.out.println(body.head.face.name == body1.head.face.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Body</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Head head;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Body</span><span class="params">(Head head)</span> </span>&#123; <span class="keyword">this</span>.head = head; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Body newBody = (Body) <span class="keyword">super</span>.clone();</span><br><span class="line">newBody.head = (Head) head.clone();</span><br><span class="line"><span class="keyword">return</span> newBody;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Face face;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Head</span><span class="params">(Face face)</span> </span>&#123; <span class="keyword">this</span>.face = face; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Head newHead = (Head)<span class="keyword">super</span>.clone();</span><br><span class="line">newHead.face = (Face) face.clone();</span><br><span class="line"><span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Face</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Face</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Face newFace = (Face)<span class="keyword">super</span>.clone();</span><br><span class="line">newFace.name = <span class="keyword">new</span> String(<span class="keyword">this</span>.name);</span><br><span class="line"><span class="keyword">return</span> newFace;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 序列化<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"Hao LUO"</span>, <span class="number">33</span>, <span class="keyword">new</span> Car(<span class="string">"Benz"</span>, <span class="number">300</span>));</span><br><span class="line">Person p2 = CloneUtils.clone(p1); <span class="comment">// 深度克隆</span></span><br><span class="line">p2.getCar().setBrand(<span class="string">"BYD"</span>);</span><br><span class="line">System.out.println(p1);</span><br><span class="line">System.out.println(p2);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneUtils</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CloneUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Serializable&gt; <span class="function">T <span class="title">clone</span><span class="params">(T obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ByteArrayOutputStream bout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bout);</span><br><span class="line">oos.writeObject(obj);</span><br><span class="line">ByteArrayInputStream bin = <span class="keyword">new</span> ByteArrayInputStream(bout.toByteArray());</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bin);</span><br><span class="line"><span class="keyword">return</span> (T) ois.readObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">9102017020286042305L</span>;</span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line"><span class="keyword">private</span> Car car; <span class="comment">// 座驾</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, Car car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// ... getter方法和setter方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", car="</span> + car + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5713945027627603702L</span>;</span><br><span class="line"><span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSpeed; <span class="comment">// 最高时速</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand, <span class="keyword">int</span> maxSpeed)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line"><span class="keyword">this</span>.maxSpeed = maxSpeed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... getter和setter方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Car [brand="</span> + brand + <span class="string">", maxSpeed="</span> + maxSpeed + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>## 泛型<br><br>### 泛型类<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//key这个成员变量的类型为T,T的类型由外部指定  </span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型构造方法形参key的类型也为T，T的类型由外部指定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; <span class="keyword">this</span>.key = key; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型方法getKey的返回值类型为T，T的类型由外部指定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span></span><br><span class="line">    <span class="comment">//传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span></span><br><span class="line">    Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123456</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入的实参类型需与泛型的类型参数类型相同，即为String.</span></span><br><span class="line">    Generic&lt;String&gt; genericString = <span class="keyword">new</span> Generic&lt;String&gt;(<span class="string">"key_vlaue"</span>);</span><br><span class="line">    System.out.println(<span class="string">"key is "</span> + genericInteger.getKey().getClass());</span><br><span class="line">    System.out.println(<span class="string">"key is "</span> + genericString.getKey().getClass());</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 泛型接口的实现<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>&gt; 当实现泛型接口的类，未传入泛型实参时：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中</span></span><br><span class="line"><span class="comment"> * 即：class FruitGenerator&lt;T&gt; implements Generator&lt;T&gt;&#123;</span></span><br><span class="line"><span class="comment"> * 如果不声明泛型，如：class FruitGenerator implements Generator&lt;T&gt;，编译器会报错："Unknown class"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>&gt; 当实现泛型接口的类，传入泛型实参时：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入泛型实参时：</span></span><br><span class="line"><span class="comment"> * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。</span></span><br><span class="line"><span class="comment"> * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型</span></span><br><span class="line"><span class="comment"> * 即：Generator&lt;T&gt;，public T next();中的的T都要替换成传入的String类型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] fruits = <span class="keyword">new</span> String[]&#123;<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Pear"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> fruits[rand.nextInt(<span class="number">3</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 泛型通配符<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//key这个成员变量的类型为T,T的类型由外部指定  </span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型构造方法形参key的类型也为T，T的类型由外部指定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; <span class="keyword">this</span>.key = key; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型方法getKey的返回值类型为T，T的类型由外部指定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showKeyValue</span><span class="params">(Generic&lt;Number&gt; obj)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"key value is "</span> + obj.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;?&gt; obj)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"key value is "</span> + obj.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Generic&lt;Integer&gt; gInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123</span>);</span><br><span class="line">    Generic&lt;Number&gt; gNumber = <span class="keyword">new</span> Generic&lt;Number&gt;(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">    showKeyValue(gNumber);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// showKeyValue这个方法编译器会为我们报错：</span></span><br><span class="line">        <span class="comment">// Generic&lt;java.lang.Integer&gt; cannot be applied to Generic&lt;java.lang.Number&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// showKeyValue(gInteger);</span></span><br><span class="line">        </span><br><span class="line">        showKeyValue1(gNumber);<span class="comment">// 正常 </span></span><br><span class="line">    showKeyValue1(gInteger);<span class="comment">// 正常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><code>Generic&lt;Integer&gt;</code>不能被看作为<code>Generic&lt;Number&gt;</code>的子类。由此可以看出:同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。<br><br>类型通配符一般是使用<code>？</code>代替具体的类型实参，注意了，此处<code>？</code>是类型实参，而不是类型形参 。再直白点的意思就是，此处的<code>？</code>和Number、String、Integer一样都是一种实际的类型，可以把<code>？</code>看成所有类型的父类。是一种真实的类型。可以解决当具体类型不确定的时候，这个通配符就是 ? ；当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。那么可以用 ? 通配符来表未知类型。<br><br><br><br>### 泛型方法<br><br>泛型类，是在实例化类的时候指明泛型的具体类型；<strong>泛型方法，是在调用方法的时候指明泛型的具体类型</strong> 。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型方法的基本介绍</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tClass 传入的泛型实参</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T 返回值为T类型</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> *     1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。</span></span><br><span class="line"><span class="comment"> *     2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</span></span><br><span class="line"><span class="comment"> *     3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</span></span><br><span class="line"><span class="comment"> *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">genericMethod</span><span class="params">(Class&lt;T&gt; tClass)</span><span class="keyword">throws</span> InstantiationException ,</span></span><br><span class="line"><span class="function">  IllegalAccessException</span>&#123;</span><br><span class="line">        T instance = tClass.newInstance();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>#### 泛型”方法”的详细举例<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">   <span class="comment">//这个类是个泛型类，在上面已经介绍过</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123;     </span><br><span class="line">        <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; <span class="keyword">this</span>.key = key; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我想说的其实是这个，虽然在方法中使用了泛型，但是这并不是一个泛型方法。</span></span><br><span class="line">        <span class="comment">//这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。</span></span><br><span class="line">        <span class="comment">//所以在这个方法中才可以继续使用 T 这个泛型。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个方法显然是有问题的，在编译器会给我们提示这样的错误信息"cannot reslove symbol E"</span></span><br><span class="line"><span class="comment">         * 因为在类的声明中并未声明泛型E，所以在使用E做形参和返回值类型时，编译器会无法识别。</span></span><br><span class="line"><span class="comment">            public E setKey(E key)&#123;</span></span><br><span class="line"><span class="comment">                 this.key = keu</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 这才是一个真正的泛型方法。</span></span><br><span class="line"><span class="comment">     * 首先在public与返回值之间的&lt;T&gt;必不可少，这表明这是一个泛型方法，并且声明了一个泛型T</span></span><br><span class="line"><span class="comment">     * 这个T可以出现在这个泛型方法的任意位置.</span></span><br><span class="line"><span class="comment">     * 泛型的数量也可以为任意多个 </span></span><br><span class="line"><span class="comment">     *    如：public &lt;T,K&gt; K showKeyName(Generic&lt;T&gt; container)&#123;</span></span><br><span class="line"><span class="comment">     *        ...</span></span><br><span class="line"><span class="comment">     *        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">showKeyName</span><span class="params">(Generic&lt;T&gt; container)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"container key :"</span> + container.getKey());</span><br><span class="line">        <span class="comment">//当然这个例子举的不太合适，只是为了说明泛型方法的特性。</span></span><br><span class="line">        T test = container.getKey();</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法是有问题的，编译器会为我们提示错误信息："UnKnown class 'E' "</span></span><br><span class="line"><span class="comment">     * 虽然我们声明了&lt;T&gt;,也表明了这是一个可以处理泛型的类型的泛型方法。</span></span><br><span class="line"><span class="comment">     * 但是只声明了泛型类型T，并未声明泛型类型E，因此编译器并不知道该如何处理E这个类型。</span></span><br><span class="line"><span class="comment">        public &lt;T&gt; T showKeyName(Generic&lt;E&gt; container)&#123;</span></span><br><span class="line"><span class="comment">            ...</span></span><br><span class="line"><span class="comment">        &#125;  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>#### 类中的泛型方法<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericFruit</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"fruit"</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"apple"</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"Person"</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GenerateTest</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//方法中的T和类上声明的T一致</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show_1</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。可以类型与T相同，也可以不同。</span></span><br><span class="line">        <span class="comment">//由于泛型方法在声明的时候会声明泛型&lt;E&gt;，因此即使在泛型类中并未声明泛型，编译器也能够正确识别泛型方法中识别的泛型。</span></span><br><span class="line">        <span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">show_3</span><span class="params">(E t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在泛型类中声明了一个泛型方法，使用泛型T，注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。</span></span><br><span class="line">        <span class="comment">//编译器会报警告：The type parameter T is hiding the type T</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show_2</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Apple apple = <span class="keyword">new</span> GenericFruit().new Apple();</span><br><span class="line">        Person person = <span class="keyword">new</span> GenericFruit().new Person();</span><br><span class="line"></span><br><span class="line">        GenerateTest&lt;Fruit&gt; generateTest = <span class="keyword">new</span> GenericFruit().new GenerateTest&lt;Fruit&gt;();</span><br><span class="line">        <span class="comment">//apple是Fruit的子类，所以这里可以</span></span><br><span class="line">        generateTest.show_1(apple);</span><br><span class="line">        <span class="comment">//编译器会报错，因为泛型类型实参指定的是Fruit，而传入的实参类是Person</span></span><br><span class="line">        <span class="comment">//generateTest.show_1(person);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用这两个方法都可以成功</span></span><br><span class="line">        generateTest.show_2(apple);</span><br><span class="line">        generateTest.show_2(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用这两个方法也都可以成功</span></span><br><span class="line">        generateTest.show_3(apple);</span><br><span class="line">        generateTest.show_3(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 静态方法与泛型<br><br>类中的静态方法使用泛型：<strong>静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。</strong>即：<strong>如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法</strong> 。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">StaticGenerator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span></span><br><span class="line"><span class="comment">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span></span><br><span class="line"><span class="comment">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span></span><br><span class="line"><span class="comment">          "StaticGenerator cannot be refrenced from static context"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 泛型上下边界<br><br>#### 上边界<br><br>为泛型添加上边界，即传入的类型实参必须是指定类型的子类型<br><br>&gt; 类<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; <span class="keyword">this</span>.key = key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>&gt; 类的成员方法<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue2</span><span class="params">(Generic&lt;? extends Number&gt; obj)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"key value is "</span> + obj.getKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>&gt; 泛型方法<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在泛型方法中添加上下边界限制的时候，必须在权限声明与返回值之间的&lt;T&gt;上添加上下边界，即在泛型声明的时候添加</span></span><br><span class="line"><span class="comment">//public &lt;T&gt; T showKeyName(Generic&lt;T extends Number&gt; container)，编译器会报错："Unexpected bound"</span></span><br><span class="line"><span class="keyword">public</span> &lt;T extends Number&gt; <span class="function">T <span class="title">showKeyName</span><span class="params">(Generic&lt;T&gt; container)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"container key :"</span> + container.getKey());</span><br><span class="line">    T test = container.getKey();</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>##### 限制<br><br>类C中方法：<code>void setC(T t)</code>。在传入<code>&lt;? extends Fruit&gt;</code>之后：<code>void setC(&lt;? extends Fruit&gt; t)</code>。这时编译器就不知道你传过来的是什么类型，编译不会通过。但是类中的方法可以返回T，因为已经知道了它的上限是A，在调用之后用A来接收一下返回的对象就可以了。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GenerateTest&lt;? extends Fruit&gt; generateTest2 = <span class="keyword">new</span> GenericFruit().new GenerateTest&lt;&gt;();</span><br><span class="line">generateTest2.setC(apple);  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><br><br>#### 下边界<br><br><code>&lt;? super A&gt;</code>表示传入的只能是A的超类或超接口。此时，类中的方法void setC(T t)可以传入A或A的子类作为参数。但返回时只能返回Object对象。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GenerateTest&lt;? <span class="keyword">super</span> Apple&gt; generateTest2 = <span class="keyword">new</span> GenericFruit().new GenerateTest&lt;&gt;();Object object = generateTest2.get();</span><br></pre></td></tr></table></figure><br><br>### 泛型数组<br><br>sun的说明文档，在java中是<strong>”不能创建一个确切的泛型类型的数组”</strong>的。也就是说下面的这个例子是不可以的：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] ls = <span class="keyword">new</span> ArrayList&lt;String&gt;[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><br><br>而使用通配符创建泛型数组是可以的，如下面这个例子：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt;[] ls = <span class="keyword">new</span> ArrayList&lt;?&gt;[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><br><br>这样也是可以的：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] ls = <span class="keyword">new</span> ArrayList[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><br><br>下面使用<a href="http://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html" target="_blank" rel="noopener">Sun</a><a href="http://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html" target="_blank" rel="noopener">的一篇文档</a>的一个例子来说明这个问题：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] lsa = <span class="keyword">new</span> List&lt;String&gt;[<span class="number">10</span>]; <span class="comment">// Not really allowed.    </span></span><br><span class="line">Object o = lsa;</span><br><span class="line">Object[] oa = (Object[]) o;    </span><br><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();    </span><br><span class="line">li.add(<span class="keyword">new</span> Integer(<span class="number">3</span>));    </span><br><span class="line">oa[<span class="number">1</span>] = li; <span class="comment">// Unsound, but passes run time store check    </span></span><br><span class="line">String s = lsa[<span class="number">1</span>].get(<span class="number">0</span>); <span class="comment">// Run-time error: ClassCastException.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这种情况下，由于JVM泛型的擦除机制，在运行时JVM是不知道泛型信息的，所以可以给oa[1]赋上一个ArrayList而不会出现异常，但是在取出数据的时候却要做一次类型转换，所以就会出现ClassCastException，如果可以进行泛型数组的声明，上面说的这种情况在编译期将不会出现任何的警告和错误，只有在运行时才会出错。而对泛型数组的声明进行限制，对于这样的情况，可以在编译期提示代码有类型安全问题，比没有任何提示要强很多。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><br>下面采用通配符的方式是被允许的:<strong>数组的类型不可以是类型变量，除非是采用通配符的方式</strong>，因为对于通配符的方式，最后取出数据是要做显式的类型转换的。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt;[] lsa = <span class="keyword">new</span> List&lt;?&gt;[<span class="number">10</span>]; <span class="comment">// OK, array of unbounded wildcard type.    </span></span><br><span class="line">Object o = lsa;    </span><br><span class="line">Object[] oa = (Object[]) o;    </span><br><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();    </span><br><span class="line">li.add(<span class="keyword">new</span> Integer(<span class="number">3</span>));    </span><br><span class="line">oa[<span class="number">1</span>] = li; <span class="comment">// Correct.    </span></span><br><span class="line">Integer i = (Integer) lsa[<span class="number">1</span>].get(<span class="number">0</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><br><br>## 内部类<br><br>### 成员内部类<br><br>成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123; <span class="keyword">this</span>.radius = radius; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"drawshape"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>这样看起来，类Draw像是类Circle的一个成员，Circle称为外部类。成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> test = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outer</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> test = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">            System.out.println(count);   <span class="comment">//外部类的静态成员</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.test);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Draw draw = <span class="keyword">new</span> Outer(<span class="number">20</span>).new Draw();</span><br><span class="line">    draw.drawSahpe();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>不过要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。如果要访问外部类的同名成员，需要以下面的形式进行访问：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类.this.成员变量</span><br><span class="line">外部类.this.成员方法</span><br></pre></td></tr></table></figure><br><br>虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        getDrawInstance().drawSahpe();   <span class="comment">//必须先创建成员内部类的对象，再进行访问</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Draw <span class="title">getDrawInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Draw();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象。创建成员内部类对象的一般方式如下：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方式：</span></span><br><span class="line">        Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">        Outter.Inner inner = outter.new Inner();  <span class="comment">//必须通过Outter对象来创建</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二种方式：</span></span><br><span class="line">        Outter.Inner inner1 = outter.getInnerInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Inner inner = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInnerInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="keyword">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。如上面的例子：<br><br>- private：则只能在外部类的内部访问；<br>- public：则任何地方都能访问；<br>- protected：只能在同一个包下或者继承外部类的情况下访问；<br>- 默认访问权限：则只能在同一个包下访问。<br><br>这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。我个人是这么理解的，由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。<br><br><br><br>### 局部内部类<br><br>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">getWoman</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;   <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> age =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Woman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 匿名内部类<br><br>匿名内部类应该是平时我们编写代码时用得最多的，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。下面这段代码是一段线程允许代码：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"thread run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为Outter$数字.class。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。<br><br><br><br>### 静态内部类<br><br>静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//静态内部类是不依赖于外部类的，也就说可以在不创建外部类对象的情况下创建内部类的对象。</span></span><br><span class="line">        Outter.Inner inner = <span class="keyword">new</span> Outter.Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 局部内部类和匿名内部类只能访问局部final变量<br><br>想必这个问题也曾经困扰过很多人，在讨论这个问题之前，先看下面这段代码：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;  &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                System.out.println(b);</span><br><span class="line">                <span class="comment">//a = 10;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>首先我们需要知道：内部类和外部类是处于同一个级别的，内部类不会因为定义在方法中就会随着方法的执行完毕就被销毁。这里就会产生问题：当外部类的方法结束时，局部变量就会被销毁了，但是内部类对象可能还存在（只有没有人再引用它时，才可能死亡）。这里就出现了一个矛盾：内部类对象访问了一个不存在的变量。为了解决这个问题，就将局部变量复制了一份作为内部类的成员变量，这样当局部变量死亡后，内部类仍可以访问它，实际访问的是局部变量的”copy”。这样就好像延长了局部变量的生命周期。<br><br>那么新问题又出现了：将局部变量复制为内部类的成员变量时，必须保证这两个变量是一样的，也就是如果我们在内部类中修改了成员变量，方法中的局部变量也得跟着改变，怎么解决问题呢？就将局部变量设置为<code>final</code>，对它初始化后，我就不让你再去修改这个变量，就保证了内部类的成员变量和方法的局部变量的一致性。这实际上也是一种妥协。<br><br><br><br>## 常见的运行时异常<br><br>- java.lang.NullPointerException ：空指针异常；<br>- 出现原因：调用了未经初始化的对象或者是不存在的对象。<br><br>- java.lang.ClassNotFoundException ：指定的类找不到；<br>- 出现原因：类的名称和路径加载错误；通常都是程序试图通过字符串来加载某个类时可能引发异常。<br><br>- java.lang.NumberFormatException ：字符串转换为数字异常；<br>- 出现原因：字符型数据中包含非数字型字符。<br><br>- java.lang.IndexOutOfBoundsException ：数组角标越界异常，常见于操作数组对象时发生。<br><br>- java.lang.ClassCastException ：数据类型转换异常<br><br>- SQLException ：SQL 异常，常见于操作数据库时的 SQL 语句错误。<br><br><br><br>## 枚举和switch<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(TestEnum.FRI.getClass()); <span class="comment">//class TestEnum</span></span><br><span class="line">System.out.println(TestEnum.FRI);<span class="comment">// FRI</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> TestEnum &#123;</span><br><span class="line"> MON, TUE, WED, THU, FRI, SAT, SUN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>switch中可以跟的类型有byte、short、char、int、String、枚举。<strong>没有long</strong>。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"200"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (str) &#123;</span><br><span class="line"><span class="keyword">default</span>:<span class="comment">// default 只能定义一次</span></span><br><span class="line">System.out.println(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">"100"</span>:</span><br><span class="line">System.out.println(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1000"</span>:</span><br><span class="line">System.out.println(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//str = 200;</span></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//100</span></span><br><span class="line"><span class="comment">//1000</span></span><br><span class="line"><span class="comment">//1000</span></span><br><span class="line"><span class="comment">//因为不能匹配100或1000，所以从defalut口进入。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//str = 100;</span></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//1000</span></span><br><span class="line"><span class="comment">//1000</span></span><br><span class="line"><span class="comment">//因为可以匹配100，从第二个口进入。</span></span><br></pre></td></tr></table></figure><br><br>## 随机数和round<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得随机数：greater than or equal to 0.0 and less than 1.0</span></span><br><span class="line"><span class="keyword">double</span> iRandom = Math.random();</span><br><span class="line">System.out.println(iRandom);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得区间在[0, n)之间的随机整数</span></span><br><span class="line">Random random2 = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> nextInt = random2.nextInt(<span class="number">10</span>);</span><br><span class="line">System.out.println(nextInt);</span><br></pre></td></tr></table></figure><br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 负数：加0.5之后向小的取整</span></span><br><span class="line">System.out.println(Math.round(-<span class="number">11.6</span>));</span><br><span class="line">System.out.println(Math.round(-<span class="number">11.5</span>));</span><br><span class="line"><span class="comment">// 正数：加0.5之后向大的取整</span></span><br><span class="line">System.out.println(Math.round(<span class="number">11.6</span>));</span><br><span class="line">System.out.println(Math.round(<span class="number">11.5</span>));</span><br></pre></td></tr></table></figure><br><br>## String和字符串常量池<br><br>字符串常量池只是常量池技术在字符串这个类上的实现，但是为了方便叙述，本条知识点使用常量池和字符串常量池等价。<br><br>### String对象的两种创建方式<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接使用双引号声明出来的 String 对象会直接存储在常量池中。</span></span><br><span class="line"><span class="comment">// 使用双引号声明时会调用ldc命令，所以其检查的是字符串常量池。</span></span><br><span class="line">String str1 = <span class="string">"abcd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于new String()则会在堆中创建一个String对象，并返回该对象的引用。</span></span><br><span class="line"><span class="comment">// Initializes a newly created String object so that it represents the same sequence </span></span><br><span class="line"><span class="comment">// of characters as the argument; in other words, the newly created string is a copy </span></span><br><span class="line"><span class="comment">// of the argument string. Unless an explicit copy of original is needed, use of this </span></span><br><span class="line"><span class="comment">// constructor is unnecessary since Strings are immutable.</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/2019-07-11_165800.jpg"></div><br>### intern()<br><br>String.intern() 是一个 Native 方法，JDK对它的解释是（水平有限，不再翻译）：<br><br>&gt; A pool of strings, initially empty, is maintained privately by the class String. When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.（笔者注：add的意思不是克隆一份，就是把这个对象的引用放在常量池中，JDK8中字符串常量池可以存放字符串对象，也可以存放字符串对象的引用，返回的引用是指向常量池中的字符串对象）<br>&gt; It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true.<br>&gt; All literal strings and string-valued constant expressions are interned.<br><br>大致意思是：如果字符串常量池中已经有了这个字符串，那么直接返回字符串常量池中的它的引用，如果没有，那就将它的引用保存一份到字符串常量池，然后直接返回这个引用。判断字符串是否相等使用<code>equals</code>方法。<br><br><br><br>### 题<br><br>#### 1<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"计算机"</span>);</span><br><span class="line">String s2 = s1.intern();</span><br><span class="line">String s3 = <span class="string">"计算机"</span>;</span><br><span class="line">System.out.println(s2);<span class="comment">//计算机</span></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//false，因为一个是堆内存中的String对象一个是常量池中的String对象</span></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//true，因为两个都是常量池中的String对象</span></span><br></pre></td></tr></table></figure><br><br>#### 2<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"Hollis"</span>;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"Hollis"</span>);</span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"Hollis"</span>).intern();</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2); <span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s3); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/01-Java基础/例2.jpg"></div><br>#### 3<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"1"</span>);</span><br><span class="line"><span class="comment">// 常量池中有"1"，堆中有字符串"1"，s是堆中中"1"的引用</span></span><br><span class="line"></span><br><span class="line">String s2 = <span class="string">"1"</span>;</span><br><span class="line"><span class="comment">// s2是常量池中"1"的引用</span></span><br><span class="line"></span><br><span class="line">s.intern();</span><br><span class="line"><span class="comment">// "1"已经存在常量池中，返回常量池中"1"的引用，但没有被接收</span></span><br><span class="line"></span><br><span class="line">System.out.println(s == s2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"1"</span>) + <span class="keyword">new</span> String(<span class="string">"2"</span>);</span><br><span class="line"><span class="comment">// 常量池中有"1"，"2"。new String("1") + new String("2");的底层是使用StringBuffer的append</span></span><br><span class="line"><span class="comment">// 方 法将"1"和"2"拼接在一块，然后调用toString方法new出"12"；所以此时的“12”字符串是创建在堆区的；</span></span><br><span class="line"></span><br><span class="line">s3.intern();</span><br><span class="line"><span class="comment">// 常量池中没有"12"，intern后常量池中存放堆中"12"的引用</span></span><br><span class="line"></span><br><span class="line">String s4 = <span class="string">"12"</span>;</span><br><span class="line"><span class="comment">// 从常量池中拿"12"，和堆中的"12"是同一个"12"</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br>#### 4<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"xy"</span>) + <span class="string">"z"</span>;</span><br><span class="line"><span class="comment">// 常量池中有"z"和"xy"，堆中有"xyz"</span></span><br><span class="line"></span><br><span class="line">String s2 = s1.intern();  </span><br><span class="line"><span class="comment">// 常量池中有一个指向堆中"xyz"的引用，s2和这个引用相等，即s2指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s1.intern());    <span class="comment">//true </span></span><br><span class="line"><span class="comment">// s1指向堆中"xyz"，s1.intern()也指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">System.out.println(s2 == s1.intern()); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// s2指向堆中"xyz"的引用</span></span><br></pre></td></tr></table></figure><br><br>#### 5<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"xy"</span>) + <span class="string">"z"</span>;</span><br><span class="line"><span class="comment">// 常量池中有"z"和"xy"，堆中有"xyz"，s1指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"xyz"</span>);</span><br><span class="line"><span class="comment">// 常量池中有"xyz"，s3指向堆中的第二个"xyz"</span></span><br><span class="line"></span><br><span class="line">String s2 = s1.intern();</span><br><span class="line"><span class="comment">// s2指向常量池中的"xyz"</span></span><br><span class="line"></span><br><span class="line">System.out.println(s2 == s3);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s1.intern());    <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">System.out.println(s2 == s1.intern());  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br>#### 6<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"xy"</span>) + <span class="string">"z"</span>;</span><br><span class="line"><span class="comment">// 常量池中有"z"和"xy"，堆中有"xyz"，s1指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">String s2 = s1.intern();</span><br><span class="line"><span class="comment">// 常量池中有一个指向堆中"xyz"的引用，s2和这个引用相等，即s2指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"xyz"</span>);</span><br><span class="line"><span class="comment">// 常量池中有一个指向堆中"xyz"的引用，不再在常量池中创建"xyz"，将常量池中的"xyz"复制一份到堆中</span></span><br><span class="line"></span><br><span class="line">System.out.println(s2 == s3);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s1.intern());    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(s2 == s1.intern());<span class="comment">// true</span></span><br></pre></td></tr></table></figure><br><br>#### 7<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"xy"</span>) + <span class="string">"z"</span>;</span><br><span class="line"><span class="comment">// 常量池中有"z"和"xy"，堆中有"xyz"，s1指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">String s2 = s1.intern();</span><br><span class="line"><span class="comment">// 常量池中有一个指向堆中"xyz"的引用，s2和这个引用相等，即s2指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">"xyz"</span>;</span><br><span class="line"><span class="comment">// 常量池中有一个指向堆中"xyz"的引用，不再在常量池中创建"xyz"，s3指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">System.out.println(s2 == s3);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s1.intern());    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(s2 == s1.intern());<span class="comment">// true</span></span><br></pre></td></tr></table></figure><br><br>#### 8<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"xy"</span> + <span class="string">"z"</span>;</span><br><span class="line"><span class="comment">// 常量池中存在 "xy"  "z"  "xyz"</span></span><br></pre></td></tr></table></figure><br><br>#### 9<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"xy"</span>) + <span class="string">"z"</span>;</span><br><span class="line"><span class="comment">// 常量池中有"z"和"xy"，堆中有"xyz"，s1指向堆中的"xyz"</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">"xyz"</span>;</span><br><span class="line"><span class="comment">// 常量池中有"xyz"，s3指向常量池中的"xyz"</span></span><br><span class="line"></span><br><span class="line">String s2 = s1.intern();</span><br><span class="line"><span class="comment">// s2指向常量池中的"xyz"</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//false</span></span><br><span class="line">System.out.println(s2 == s3);<span class="comment">//true</span></span><br><span class="line">System.out.println(s1 == s1.intern());<span class="comment">//false</span></span><br><span class="line">System.out.println(s2 == s1.intern()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><br>## String、StringBuilder &amp; StringBuffer<br><br>### <strong>可变性</strong><br><br>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private　final　char　value[]</code>，所以 String 对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，所以这两种对象都是可变的。<br><br>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的。<br><br>AbstractStringBuilder.java<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] value;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    AbstractStringBuilder() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><br>### 线程安全性<br><br>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。<br><br><br><br>### <strong>性能</strong><br><br>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。<br><br><br><br>### <strong>对于三者使用的总结：</strong><br><br>1. 操作少量的数据: 适用String<br>2. 单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder<br>3. 多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer<br><br>Java中字符串相加，编译的时候会创建StringBuilder类，然后利用StringBuilder的append()方法相加。所以不能在循环里使用<code>+</code>，需要在循环外面使用创建StringBuilder的对象，在循环内进行append()操作。<br><br><br><br>## 日期类<br><br>### LocalDate<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前日期</span></span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"Current Date="</span> + today);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据年、月、日创建日期</span></span><br><span class="line">LocalDate firstDay_2014 = LocalDate.of(<span class="number">2014</span>, Month.JANUARY, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"Specific Date="</span> + firstDay_2014);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不合法的参数会报 java.time.DateTimeException</span></span><br><span class="line"><span class="comment">// LocalDate feb29_2014 = LocalDate.of(2014, Month.FEBRUARY, 29);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Current date in "Asia/Kolkata", you can get it from ZoneId javadoc</span></span><br><span class="line">LocalDate todayKolkata = LocalDate.now(ZoneId.of(<span class="string">"Asia/Kolkata"</span>));</span><br><span class="line">System.out.println(<span class="string">"Current Date in IST="</span> + todayKolkata);</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line"><span class="comment">// LocalDate todayIST = LocalDate.now(ZoneId.of("IST"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Getting date from the base date: 01/01/1970</span></span><br><span class="line">LocalDate dateFromBase = LocalDate.ofEpochDay(<span class="number">365</span>);</span><br><span class="line">System.out.println(<span class="string">"365th day from base date= "</span> + dateFromBase);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到某年的多少天</span></span><br><span class="line">LocalDate hundredDay2014 = LocalDate.ofYearDay(<span class="number">2014</span>, <span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">"100th day of 2014="</span> + hundredDay2014);</span><br></pre></td></tr></table></figure><br><br>### LocalTime<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Current Time</span></span><br><span class="line">LocalTime time = LocalTime.now();</span><br><span class="line">System.out.println(<span class="string">"Current Time = "</span> + time);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating LocalTime by providing input arguments</span></span><br><span class="line">LocalTime specificTime = LocalTime.of(<span class="number">12</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">40</span>);</span><br><span class="line">System.out.println(<span class="string">"Specific Time of Day = "</span> + specificTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Try creating time by providing invalid inputs</span></span><br><span class="line"><span class="comment">// LocalTime invalidTime = LocalTime.of(25,20);</span></span><br><span class="line"><span class="comment">// Exception in thread "main" java.time.DateTimeException:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Invalid value for HourOfDay (valid values 0 - 23): 25</span></span><br><span class="line"><span class="comment">// Current date in "Asia/Kolkata", you can get it from ZoneId javadoc</span></span><br><span class="line">LocalTime timeKolkata = LocalTime.now(ZoneId.of(<span class="string">"Asia/Kolkata"</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Current Time in IST = "</span> + timeKolkata);</span><br><span class="line"><span class="comment">// java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line"><span class="comment">// LocalTime todayIST = LocalTime.now(ZoneId.of("IST"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Getting time from the base date: 00:00:00</span></span><br><span class="line">LocalTime specificSecondTime = LocalTime.ofSecondOfDay(<span class="number">10000</span>);</span><br><span class="line">System.out.println(<span class="string">"10000th second time = "</span> + specificSecondTime);</span><br></pre></td></tr></table></figure><br><br>### LocalDateTime<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Current Date</span></span><br><span class="line">LocalDateTime today = LocalDateTime.now();</span><br><span class="line">System.out.println(<span class="string">"Current DateTime1 = "</span> + today);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Current Date using LocalDate and LocalTime</span></span><br><span class="line">today = LocalDateTime.of(LocalDate.now(), LocalTime.now());</span><br><span class="line">System.out.println(<span class="string">"Current DateTime2 = "</span> + today);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating LocalDateTime by providing input arguments</span></span><br><span class="line">LocalDateTime specificDate = LocalDateTime.of(<span class="number">2014</span>, Month.JANUARY, <span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">System.out.println(<span class="string">"Specific Date = "</span> + specificDate);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Try creating date by providing invalid inputs</span></span><br><span class="line"><span class="comment">// LocalDateTime feb29_2014 = LocalDateTime.of(2014, Month.FEBRUARY, 28, 25, 1, 1);</span></span><br><span class="line"><span class="comment">// Exception in thread "main" java.time.DateTimeException:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Invalid value for HourOfDay (valid values 0 - 23): 25</span></span><br><span class="line"><span class="comment">// Current date in "Asia/Kolkata", you can get it from ZoneId javadoc</span></span><br><span class="line">LocalDateTime todayKolkata = LocalDateTime.now(ZoneId.of(<span class="string">"Asia/Kolkata"</span>));</span><br><span class="line">System.out.println(<span class="string">"Current Date in IST = "</span> + todayKolkata);</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line"><span class="comment">// LocalDateTime todayIST = LocalDateTime.now(ZoneId.of("IST"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Getting date from the base date: 01/01/1970</span></span><br><span class="line">LocalDateTime dateFromBase = LocalDateTime.ofEpochSecond(<span class="number">10000</span>, <span class="number">0</span>, ZoneOffset.UTC);</span><br><span class="line">System.out.println(<span class="string">"10000th second time from 01/01/1970= "</span> + dateFromBase);</span><br></pre></td></tr></table></figure><br><br>### Instant<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Current timestamp</span></span><br><span class="line">Instant timestamp = Instant.now();</span><br><span class="line">System.out.println(<span class="string">"Current Timestamp = "</span> + timestamp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为 milliseconds from 01/01/1970</span></span><br><span class="line"><span class="keyword">long</span> epochMilli = timestamp.toEpochMilli();</span><br><span class="line">System.out.println(epochMilli);</span><br></pre></td></tr></table></figure><br><br>### Date &amp; SimpleDateFormat<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat oldFormatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line">Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(oldFormatter.format(date1));</span><br></pre></td></tr></table></figure><br><br>### 相互转换<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Date now = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">LocalDateTime localDateTime = now.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();</span><br><span class="line">LocalTime localTime = now.toInstant().atZone(ZoneId.systemDefault()).toLocalTime();</span><br><span class="line">LocalDate localDate = now.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line"></span><br><span class="line">System.out.println(localDateTime);</span><br><span class="line">System.out.println(localTime);</span><br><span class="line">System.out.println(localDate);</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalTime 和 LocalDate 没有atZone方法</span></span><br><span class="line">Date oldLocalDateTime = </span><br><span class="line">Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());</span><br><span class="line">System.out.println(oldLocalDateTime);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> millis = </span><br><span class="line">localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line"><span class="keyword">long</span> time = now.getTime();</span><br><span class="line">System.out.println(millis);</span><br><span class="line">System.out.println(time);</span><br><span class="line"></span><br><span class="line">LocalDateTime parseLocalDateTime = </span><br><span class="line">Instant.ofEpochMilli(millis).atZone(ZoneId.systemDefault()).toLocalDateTime();</span><br><span class="line">LocalDate parseLocalDate = </span><br><span class="line">Instant.ofEpochMilli(millis).atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line"></span><br><span class="line">System.out.println(parseLocalDateTime);</span><br><span class="line">System.out.println(parseLocalDate);</span><br></pre></td></tr></table></figure><br><br>### 获取年月日时钟秒<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime dt = LocalDateTime.now();</span><br><span class="line">System.out.println(dt.getYear());</span><br><span class="line">System.out.println(dt.getMonthValue()); <span class="comment">// 1 - 12</span></span><br><span class="line">System.out.println(dt.getDayOfMonth());</span><br><span class="line">System.out.println(dt.getHour());</span><br><span class="line">System.out.println(dt.getMinute());</span><br><span class="line">System.out.println(dt.getSecond());</span><br></pre></td></tr></table></figure><br><br>### 获得某月第一天/最后一天<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line"><span class="comment">//本月的第一天</span></span><br><span class="line">LocalDate firstday = LocalDate.of(today.getYear(), today.getMonth(), <span class="number">1</span>);</span><br><span class="line"><span class="comment">//本月的最后一天</span></span><br><span class="line">LocalDate lastDay =today.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">System.out.println(<span class="string">"本月的第一天       "</span> + firstday);</span><br><span class="line">System.out.println(<span class="string">"本月的最后一天   "</span> + lastDay);</span><br></pre></td></tr></table></figure><br><br>### 格式化日期<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd  HH:mm:ss"</span>);</span><br><span class="line">DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line"></span><br><span class="line">LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">LocalDate ld = LocalDate.now();</span><br><span class="line"></span><br><span class="line">System.out.println(ldt);</span><br><span class="line">System.out.println(ld);</span><br><span class="line"></span><br><span class="line">String format1 = ldt.format(dtf1);<span class="comment">// 日期格式化为字符串</span></span><br><span class="line">String format2 = ld.format(dtf2);<span class="comment">// 日期格式化为字符串</span></span><br><span class="line">System.out.println(format1);</span><br><span class="line">System.out.println(format2);</span><br><span class="line"></span><br><span class="line">LocalDateTime parse1 = LocalDateTime.parse(format1, dtf1);</span><br><span class="line">LocalDate parse2 = LocalDate.parse(format2, dtf2);</span><br><span class="line"></span><br><span class="line">System.out.println(parse1);<span class="comment">// 字符串转化为日期</span></span><br><span class="line">System.out.println(parse2);<span class="comment">// 字符串转化为日期</span></span><br></pre></td></tr></table></figure><br><br>## equals()和hashCode()<br><br>Java 对于 eqauls 方法和 hashCode 方法是这样规定的：<br><br>- 如果两个对象相同（equals 方法返回 true），那么它们的 hashCode 值一定要相同；<br>- 如果两个对象的 hashCode 相同，它们并不一定相同。<br><br><br><br>### equals()需要满足的性质<br><br>- 自反性：x.equals(x)必须返回 true<br>- 对称性：x.equals(y)返回 true 时，y.equals(x)也必须返回 true<br>- 传递性：x.equals(y)和 y.equals(z)都返回 true 时，x.equals(z)也必须返回 true<br>- 一致性：当x 和 y 引用的对象信息没有被修改时，多次调用 x.equals(y)应该得到同样的返回值，<br>- 对于任何非 null 值的引用 x，x.equals(null)必须返回 false。<br><br><br><br>### 实现高质量的 equals ()<br><br>- 使用==操作符检查”参数是否为这个对象的引用”；<br>- 使用 instanceof 操作符检查”参数是否为正确的类型”；<br>- 对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；<br>- 编写完 equals 方法后，问自己它是否满足对称性、传递性、一致性和空值返回false；<br>- 重写 equals 时总是要重写 hashCode；<br>- 不要将 equals 方法参数中的 Object 对象替换为其他的类型，在重写时不要忘掉@Override注解。<br><br><br><br>### 正确使用equals方法<br><br>推荐使用：<code>Objects.equals(o1, o2)</code>，此方法的底层实现：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static boolean equals(Object a, Object b) &#123;</span><br><span class="line">    // 可以避免空指针异常。如果a==null的话此时a.equals(b)就不会得到执行，避免出现空指针异常。</span><br><span class="line">    return (a == b) || (a != null &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 两者的关系<br><br>在使用到哈希机制的集合时需要同时重写equles方法和hashCode方法。即重写对象的散列码是为了更好的支持基于哈希机制的Java集合类，例如 Hashtable, HashMap, HashSet 等，如果不重写hashCode()，在使用哈希机制的集合类时会出错。<br><br>当把对象加入HashSet时，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会与其他已经加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用equals（）方法来检查hashcode相等的对象是否真的相同。如果两者相同，HashSet就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。但不同对象的hashCode可能重复，所以哈希机制的集合会在判断hashCode之后再判断一次equals。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"eee"</span>, <span class="number">100</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"eee"</span>, <span class="number">100</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"aaa"</span>, <span class="number">200</span>);</span><br><span class="line">        Person p4 = <span class="keyword">new</span> Person(<span class="string">"EEE"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        set.add(p3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印set</span></span><br><span class="line">        System.out.printf(<span class="string">"set:%s\n"</span>, set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> name.hashCode() ^ age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;  </span><br><span class="line">            <span class="keyword">if</span>(obj == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果是同一个对象返回true，反之返回false  </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span> == obj) <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//判断是否类型相同  </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.getClass() != obj.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">              </span><br><span class="line">            Person person = (Person)obj;  </span><br><span class="line">            <span class="keyword">return</span> name.equals(person.name) &amp;&amp; age==person.age;  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>## 装饰者模式<br><br>### 准备工作<br><br>假设无人驾驶的标准是Oracle公司制定的，Google想使用Java语言来开发无人驾驶系统，那么首先它需要创建一个类实现Oracle公司提供的无人驾驶的接口（接口为AIDriving，类为GoogleAIDriving）。<br><br>- AIDriving<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;  <span class="comment">//无人驾驶汽车启动的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;   <span class="comment">//无人驾驶汽车停止的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>- GoogleAIDriving<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleAIDriving</span> <span class="keyword">implements</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Google汽车启动了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Google汽车停止了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 传统方法-继承<br><br>这个时候国内某汽车制造公司（设为A公司）想使用Google提供的无人驾驶系统。但是Google提供的系统不太适合我国国情，所以A公司的工程师就想在Google系统的基础上进行定制。他们选择的方式是继承GoogleAIDriving，创建一个自己的类：A1GoogleAIDriving。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A1GoogleAIDriving</span> <span class="keyword">extends</span> <span class="title">GoogleAIDriving</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国启动汽车"</span>);</span><br><span class="line"><span class="keyword">super</span>.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国停止汽车"</span>);</span><br><span class="line"><span class="keyword">super</span>.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>### 装饰者模式<br><br>但理想很美好，现实很残忍。GoogleAIDriving被定义为一个final类（不能被继承），这个是可以理解的，因为如果GoogleAIDriving不是一个final类，任何继承GoogleAIDriving的类都可以对其start()、stop()方法进行覆盖，如果覆盖时出现bug就可能会出现大问题。所以像启动、停止这种核心功能是不允许汽车制造商随意修改的。A公司的工程师就想到了使用装饰者模式来增强功能（设类为A2GoogleAIDriving）。<br><br>装饰者模式该怎么做呢？<br><br>1. 首先，装饰类得和被装饰类实现相同的接口，即AIDriving；<br>2. 第二，在装饰类中定义一个AIDriving类型的属性，即AIDriving car；<br>3. 第三，有一个参数为AIDriving类型的构造函数，即A2GoogleAIDriving(AIDriving car)；<br>4. 第四，装饰类的每个方法都要调用被装饰类相应的方法；<br>5. 第五，使用第三步中的构造函数创建装饰类；<br>6. 第六，在装饰类的方法中自定义功能。<br><br>#### 代码实现<br><br>- 创建装饰类<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A2GoogleAIDriving</span> <span class="keyword">implements</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> AIDriving car;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A2GoogleAIDriving</span><span class="params">(AIDriving car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国启动汽车..."</span>);</span><br><span class="line">car.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国停止汽车..."</span>);</span><br><span class="line">car.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>#### 调用装饰类<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">GoogleAIDriving car = <span class="keyword">new</span> GoogleAIDriving();</span><br><span class="line">A2GoogleAIDriving aCar = <span class="keyword">new</span> A2GoogleAIDriving(car);</span><br><span class="line">aCar.start();</span><br><span class="line"> <span class="comment">/* Console : </span></span><br><span class="line"><span class="comment">  在中国启动汽车...</span></span><br><span class="line"><span class="comment">Google汽车启动了... */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>## BigInteger&amp;BigDecimal<br><br>### BigInteger<br><br>理论上可以表示无限大的数字。常用方法：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BigInteger <span class="title">abs</span><span class="params">()</span>  返回大整数的绝对值</span></span><br><span class="line"><span class="function">BigInteger <span class="title">add</span><span class="params">(BigInteger val)</span> 返回两个大整数的和</span></span><br><span class="line"><span class="function">BigInteger <span class="title">and</span><span class="params">(BigInteger val)</span>  返回两个大整数的按位与的结果</span></span><br><span class="line"><span class="function">BigInteger <span class="title">andNot</span><span class="params">(BigInteger val)</span> 返回两个大整数与非的结果</span></span><br><span class="line"><span class="function">BigInteger <span class="title">divide</span><span class="params">(BigInteger val)</span>  返回两个大整数的商</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">doubleValue</span><span class="params">()</span>   返回大整数的<span class="keyword">double</span>类型的值</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">floatValue</span><span class="params">()</span>   返回大整数的<span class="keyword">float</span>类型的值</span></span><br><span class="line"><span class="function">BigInteger <span class="title">gcd</span><span class="params">(BigInteger val)</span>  返回大整数的最大公约数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> 返回大整数的整型值</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span> 返回大整数的<span class="keyword">long</span>型值</span></span><br><span class="line"><span class="function">BigInteger <span class="title">max</span><span class="params">(BigInteger val)</span> 返回两个大整数的最大者</span></span><br><span class="line"><span class="function">BigInteger <span class="title">min</span><span class="params">(BigInteger val)</span> 返回两个大整数的最小者</span></span><br><span class="line"><span class="function">BigInteger <span class="title">mod</span><span class="params">(BigInteger val)</span> 用当前大整数对val求模</span></span><br><span class="line"><span class="function">BigInteger <span class="title">multiply</span><span class="params">(BigInteger val)</span> 返回两个大整数的积</span></span><br><span class="line"><span class="function">BigInteger <span class="title">negate</span><span class="params">()</span> 返回当前大整数的相反数</span></span><br><span class="line"><span class="function">BigInteger <span class="title">not</span><span class="params">()</span> 返回当前大整数的非</span></span><br><span class="line"><span class="function">BigInteger <span class="title">or</span><span class="params">(BigInteger val)</span> 返回两个大整数的按位或</span></span><br><span class="line"><span class="function">BigInteger <span class="title">pow</span><span class="params">(<span class="keyword">int</span> exponent)</span> 返回当前大整数的exponent次方</span></span><br><span class="line"><span class="function">BigInteger <span class="title">remainder</span><span class="params">(BigInteger val)</span> 返回当前大整数除以val的余数</span></span><br><span class="line"><span class="function">BigInteger <span class="title">leftShift</span><span class="params">(<span class="keyword">int</span> n)</span> 将当前大整数左移n位后返回</span></span><br><span class="line"><span class="function">BigInteger <span class="title">rightShift</span><span class="params">(<span class="keyword">int</span> n)</span> 将当前大整数右移n位后返回</span></span><br><span class="line"><span class="function">BigInteger <span class="title">subtract</span><span class="params">(BigInteger val)</span>返回两个大整数相减的结果</span></span><br><span class="line"><span class="function"><span class="keyword">byte</span>[] <span class="title">toByteArray</span><span class="params">(BigInteger val)</span>将大整数转换成二进制反码保存在<span class="keyword">byte</span>数组中</span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span> 将当前大整数转换成十进制的字符串形式</span></span><br><span class="line"><span class="function">BigInteger <span class="title">xor</span><span class="params">(BigInteger val)</span> 返回两个大整数的异或</span></span><br></pre></td></tr></table></figure><br><br>### BigDecimal<br><br>浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals 来判断。具体原理和浮点数的编码方式有关。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">1.0f</span> - <span class="number">0.9f</span>;</span><br><span class="line"><span class="keyword">float</span> b = <span class="number">0.9f</span> - <span class="number">0.8f</span>;</span><br><span class="line">System.out.println(a);<span class="comment">// 0.100000024</span></span><br><span class="line">System.out.println(b);<span class="comment">// 0.099999964</span></span><br><span class="line">System.out.println(a == b);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><br><br>具有基本数学知识的我们很清楚的知道输出并不是我们想要的结果（<strong>精度丢失</strong>），我们如何解决这个问题呢？一种很常用的方法是：<strong>使用使用 BigDecimal 来定义浮点数的值，再进行浮点数的运算操作。</strong><br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"1.0"</span>);</span><br><span class="line">BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"0.9"</span>);</span><br><span class="line">BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">"0.8"</span>);</span><br><span class="line">BigDecimal x = a.subtract(b);<span class="comment">// 0.1</span></span><br><span class="line">BigDecimal y = b.subtract(c);<span class="comment">// 0.1</span></span><br><span class="line">System.out.println(x.equals(y));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><br><br>#### API<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal(<span class="keyword">int</span>)       创建一个具有参数所指定整数值的对象。      </span><br><span class="line">BigDecimal(<span class="keyword">double</span>)    创建一个具有参数所指定双精度值的对象。     </span><br><span class="line">BigDecimal(<span class="keyword">long</span>)      创建一个具有参数所指定长整数值的对象。     </span><br><span class="line">BigDecimal(String)    创建一个具有参数所指定以字符串表示的数值的对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(BigDecimal)       BigDecimal对象中的值相加，然后返回这个对象。</span><br><span class="line">subtract(BigDecimal)  BigDecimal对象中的值相减，然后返回这个对象。</span><br><span class="line">multiply(BigDecimal)  BigDecimal对象中的值相乘，然后返回这个对象。</span><br><span class="line">divide(BigDecimal)    BigDecimal对象中的值相除，然后返回这个对象。</span><br><span class="line">toString()            将BigDecimal对象的数值转换成字符串。    </span><br><span class="line">doubleValue()         将BigDecimal对象中的值以双精度数返回。   </span><br><span class="line">floatValue()          将BigDecimal对象中的值以单精度数返回。   </span><br><span class="line">longValue()           将BigDecimal对象中的值以长整数返回。    </span><br><span class="line">intValue()            将BigDecimal对象中的值以整数返回。</span><br></pre></td></tr></table></figure><br><br>我们在使用BigDecimal时，为了防止精度丢失，推荐使用它的 <strong>BigDecimal(String)</strong> 构造方法来创建对象。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">1.01</span>);</span><br><span class="line">BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="number">1.02</span>);</span><br><span class="line">BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">"1.01"</span>);</span><br><span class="line">BigDecimal d = <span class="keyword">new</span> BigDecimal(<span class="string">"1.02"</span>);</span><br><span class="line">System.out.println(a.add(b));</span><br><span class="line">System.out.println(c.add(d));</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">2.0300000000000000266453525910037569701671600341796875</span></span><br><span class="line"><span class="number">2.03</span></span><br></pre></td></tr></table></figure><br><br>### 整型包装类值的比较<br><br>所有整形包装类对象值得比较必须使用equals方法。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="number">3</span>;</span><br><span class="line">Integer y = <span class="number">3</span>;</span><br><span class="line">System.out.println(x == y);<span class="comment">// true</span></span><br><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">3</span>);</span><br><span class="line">Integer b = <span class="keyword">new</span> Integer(<span class="number">3</span>);</span><br><span class="line">System.out.println(a == b);<span class="comment">//false</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><br><br>## Arrays.asList<br><br><code>Arrays.asList()</code>将数组转换为集合后,底层其实还是数组。<strong>传递的数组必须是对象数组，而不是基本类型。</strong><code>Arrays.asList()</code>是泛型方法，传入的对象必须是对象数组。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List myList = Arrays.asList(myArray);</span><br><span class="line">System.out.println(myList.size());<span class="comment">//1</span></span><br><span class="line">System.out.println(myList.get(<span class="number">0</span>));<span class="comment">//数组地址值</span></span><br><span class="line">System.out.println(myList.get(<span class="number">1</span>));<span class="comment">//报错：ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="keyword">int</span> [] array=(<span class="keyword">int</span>[]) myList.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(array[<span class="number">0</span>]);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><br><br>当传入一个原生数据类型数组时，<code>Arrays.asList()</code> 的真正得到的参数就不是数组中的元素，而是数组对象本身！此时List 的唯一元素就是这个数组，这也就解释了上面的代码。我们使用包装类型数组就可以解决这个问题。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br></pre></td></tr></table></figure><br><br><strong>使用集合的修改方法:add()、remove()、clear()会抛出异常。</strong><code>Arrays.asList()</code> 方法返回的并不是 <code>java.util.ArrayList</code> ，而是 <code>java.util.Arrays</code> 的一个内部类,这个内部类并没有实现集合的修改方法或者说并没有重写这些方法。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> </span></span><br><span class="line"><span class="class"><span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>我们再看一下<code>java.util.AbstractList</code>的<code>remove()</code>方法，这样我们就明白为啥会抛出<code>UnsupportedOperationException</code>。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>正确的数组转集合的方法：<code>List list = new ArrayList&lt;&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</code><br><br><br><br><br><br><br><br>## List<br><br>ArrayList的扩容机制<br><br><br><br>## Comparable &amp; Comparator<br><br>### Comparable<br><br>&gt; This interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class’s natural ordering, and the class’s compareTo method is referred to as its natural comparison method.<br>&gt;<br>&gt; Lists (and arrays) of objects that implement this interface can be sorted automatically by Collections.sort (and Arrays.sort). Objects that implement this interface can be used as keys in a sorted map or as elements in a sorted set, without the need to specify a comparator.<br><br>compareTo 方法的返回值有三种情况：<br><br>- e1.compareTo(e2) &gt; 0 即 e1 &gt; e2<br>- e1.compareTo(e2) = 0 即 e1 = e2<br>- e1.compareTo(e2) &lt; 0 即 e1 &lt; e2<br><br>满足上述规则的是升序排序，与上诉规则相反则是降序排序。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">30</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">90</span>));</span><br><span class="line">    </span><br><span class="line">    Iterator&lt;Person&gt; iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line"><span class="keyword">if</span>(age &gt; o.age)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(age &lt; o.age)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">"]"</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>&gt; Note that null is not an instance of any class, and e.compareTo(null) should throw a NullPointerException even though e.equals(null) returns false.<br><br>&gt; The natural ordering for a class C is said to be consistent with equals if and only if e1.compareTo(e2) == 0 has the same boolean value as e1.equals(e2) for every e1 and e2 of class C. It is strongly recommended (though not required) that natural orderings be consistent with equals. This is so because sorted sets (and sorted maps)without explicit comparators behave “strangely” when they are used with elements (or keys) whose natural ordering is inconsistent with equals. In particular, such a sorted set (or sorted map) violates（违反） the general contract for set (or map), which is defined in terms of（依据） the equals method.<br>&gt;<br>&gt; For example, if one adds two keys a and b such that (!a.equals(b) &amp;&amp; a.compareTo(b) == 0) to a sorted set that does not use an explicit comparator, the second add operation returns false (and the size of the sorted set does not increase) because a and b are equivalent from the sorted set’s perspective.<br><br>这段话的意思是如果compareTo规则和equals规则不同就会发生奇怪的问题，即在<code>!a.equals(b) &amp;&amp; a.compareTo(b) == 0</code>这种情况下，不能插入集合中，因为从排序集合判断是否相等使用compareTo的规则。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">90</span>));</span><br><span class="line">    </span><br><span class="line">    Iterator&lt;Person&gt; iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line"><span class="keyword">if</span>(age == o.age)<span class="comment">// 模仿 a.compareTo(b) == 0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(age &gt; o.age)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">"]"</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span> || !(obj <span class="keyword">instanceof</span> Person))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Person p = (Person)obj;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.age == <span class="number">50</span> || p.age == <span class="number">50</span>) &#123;<span class="comment">// 模仿 !a.equals(b)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.age == p.age) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age.hashCode(); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person [age=50]</span></span><br><span class="line"><span class="comment">// Person [age=90]</span></span><br></pre></td></tr></table></figure><br><br>### Comparator<br><br>使用自然排序需要类实现 Comparable，并且在内部重写 comparaTo 方法。而 Comparator 则是在外部制定排序规则，然后作为排序策略参数传递给某些类，比如 Collections.sort(), Arrays.sort(), 或者一些内部有序的集合（比如 SortedSet，SortedMap 等）。<strong>同时存在时采用 Comparator（定制排序）的规则进行比较。</strong><br><br>使用方式主要分三步：<br><br>1. 创建一个 Comparator 接口的实现类，并赋值给一个对象。在 compare 方法中针对自定义类写排序规则。<br>2. 将 Comparator 对象作为参数传递给 排序类的某个方法<br>3. 向排序类中添加 compare 方法中使用的自定义类<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">    Comparator&lt;Person&gt; com = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o1.getAge() &gt; o2.getAge())</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(o1.getAge() &lt; o2.getAge())</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(com);</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">20</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">90</span>));</span><br><span class="line">    Iterator&lt;Person&gt; iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">"]"</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>## 红黑树<br><br>### 二叉搜索树<br><br>由于红黑树本质上就是一棵二叉查找树，所以在了解红黑树之前，咱们先来看下二叉查找树。<br><br>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree），是指一棵空树或者具有下列性质的二叉树：<br><br>- 若任意结点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>- 若任意结点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>- 任意结点的左、右子树也分别为二叉查找树。<br>- 没有键值相等的结点（no duplicate nodes）。<br><br>因为，一棵由n个结点，随机构造的二叉查找树的高度为lgn，一般操作的执行时间为O（lgn）。但二叉树若退化成了一棵具有n个结点的线性链后，则此些操作最坏情况运行时间为O（n）。<br><br><br><br>### 性质<br><br>红黑树是一颗平衡二叉树，平衡二叉树的概念：每课树的左右子树高度差都不超过1。<br><br>- 每个结点都有颜色，红色或者黑色<br>- 根结点是黑色的<br>- 每个叶结点是黑色的（设叶结点是NIL，NIL指的是空节点）<br>- 如果一个结点是红色的，则它的两个子结点都是黑色的<br>- 对每个结点，从该结点到其所有后代结点的简单路径上，均包含相同数目的黑色结点<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/01-Java基础/2019-07-12_181943.jpg"></div><br>图中的NIL其实可以用一个哨兵（T.nil）替代，但在画图时往往其实不画NIL结点。<br><br><br><br>### 旋转<br><br>对红黑树的增加和删除会破坏红黑树原本的性质，旋转是用来使其恢复到红黑树的手段。<br><br>#### 左旋<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/2.jpg"></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LEFT-ROTATE(T, x)    设x是图中的pivot</span></span><br><span class="line">y = x.right</span><br><span class="line">x.right = y.left</span><br><span class="line"><span class="keyword">if</span> y.left != T.nil</span><br><span class="line">y.left.p = x</span><br><span class="line">y.p = x.p</span><br><span class="line"><span class="keyword">if</span> x.p == T.nil</span><br><span class="line">T.root = y</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> x == x.p.left<span class="comment">// 判断应该放在P的左子树还是右子树上</span></span><br><span class="line">x.p.left = y</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    x.p.right = y</span><br><span class="line">y.left = x</span><br><span class="line">x.p = y</span><br></pre></td></tr></table></figure><br><br>#### 右旋<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/3.jpg"></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RIGHT-ROTATE(T, x)    设x是图中的pivot</span></span><br><span class="line">y = x.left</span><br><span class="line">x.left = y.right</span><br><span class="line"><span class="keyword">if</span> y.right != T.nil</span><br><span class="line">y.right.p = x</span><br><span class="line">y.p = x.p</span><br><span class="line"><span class="keyword">if</span> x.p == T.nil</span><br><span class="line">T.root = y</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> x == x.p.right<span class="comment">// 判断应该放在P的左子树还是右子树上</span></span><br><span class="line">x.p.right = y</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    x.p.lrft = y</span><br><span class="line">y.right = x</span><br><span class="line">x.p = y</span><br></pre></td></tr></table></figure><br><br>### 二叉查找树的插入<br><br>如果要在二叉查找树中插入一个结点，首先要查找到结点插入的位置，然后进行插入，假设插入的结点为z的话，插入的伪代码如下：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TREE-INSERT(T, z)</span></span><br><span class="line">y = T.nil</span><br><span class="line">x = T.root</span><br><span class="line"><span class="keyword">while</span> x != NIL</span><br><span class="line">y = x</span><br><span class="line"><span class="keyword">if</span> z.key &lt; x.key</span><br><span class="line">x = x.left</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        x = x.right</span><br><span class="line">z.p = y</span><br><span class="line"><span class="keyword">if</span> y == NIL</span><br><span class="line">T.root = z              <span class="comment">// Tree T was empty</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> z.key &lt; y.key</span><br><span class="line">y.left = z</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    y.right = z</span><br></pre></td></tr></table></figure><br><br>### 红黑树的插入<br><br>如果我们插入的是黑色节点，会违反了性质五，需要进行大规模调整，如果我们插入的是红色节点，那就只有在要插入节点的父节点也是红色的时候违反性质四或者是当插入的节点是根节点时，违反性质二，所以，我们把要插入的节点的颜色变成红色。仍然设被插入结点是z：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RB-INSERT(T, z)</span></span><br><span class="line">y = T.nil</span><br><span class="line">x = T.root</span><br><span class="line"><span class="keyword">while</span> x != T.nil</span><br><span class="line">y = x</span><br><span class="line"><span class="keyword">if</span> z.key &lt; x.key</span><br><span class="line">x = x.left</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x = x.right</span><br><span class="line">z.p = y</span><br><span class="line"><span class="keyword">if</span> y == T.nil</span><br><span class="line">T.root = z</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> z.key &lt; y.key</span><br><span class="line">y.left = z</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    y.right = z</span><br><span class="line">z.left = T.nil</span><br><span class="line">z.right = T.nil</span><br><span class="line">z.color = RED</span><br><span class="line">RB-INSERT-FIXUP(T, z)</span><br></pre></td></tr></table></figure><br><br>我们把上面这段红黑树的插入代码，跟我们之前看到的二叉查找树的插入代码，可以看出，RB-INSERT(T, z)前面的16行代码基本就是二叉查找树的插入代码，然后第17-18行代码把z的左孩子、右孩子都赋为叶结点nil，第19行再把z结点着为红色，最后为保证红黑性质在插入操作后依然保持，调用一个辅助程序RB-INSERT-FIXUP来对结点进行重新着色，并旋转。 <strong>换言之</strong>：<br><br>- 如果插入的是根结点，因为原树是空树，此情况只会违反性质2，所以直接把此结点涂为黑色。<br>- 如果插入的结点的父结点是黑色，由于此不会违反性质2和性质4，红黑树没有被破坏，所以此时也是什么也不做。<br><br>但当遇到下述3种情况时需要修复：<br><br>- 插入修复情况1：如果当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色<br>- 插入修复情况2：当前结点的父结点是红色，叔叔结点是黑色，当前结点是其父结点的右子<br>- 插入修复情况3：当前结点的父结点是红色，叔叔结点是黑色，当前结点是其父结点的左子<br><br><br><br>#### 修复<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">RB-INSERT-FIXUP(T, z)</span><br><span class="line"><span class="keyword">while</span> z.p.color == RED</span><br><span class="line"><span class="keyword">if</span> z.p == z.p.p.left</span><br><span class="line">y = z.p.p.right<span class="comment">// 指向叔叔结点</span></span><br><span class="line"><span class="keyword">if</span> y.color == RED</span><br><span class="line">z.p.color = BLACK</span><br><span class="line">y.color = BLACK</span><br><span class="line">z.p.p.color = RED</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> z == z.p.right</span><br><span class="line">z = z.p</span><br><span class="line">LEFT-ROTATE(T, z)</span><br><span class="line">        z.p.color = BLACK</span><br><span class="line">        z.p.p.color = RED</span><br><span class="line">        RIGHT-ROTATE(T, z.p.p)</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 与 if 对称，等下只分析if，不分析else</span></span><br><span class="line">y = z.p.p.left</span><br><span class="line"><span class="keyword">if</span> y.color == RED</span><br><span class="line">z.p.color = BLACK</span><br><span class="line">z.p.p.color = RED</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> z == z.p.left</span><br><span class="line">z = z.p</span><br><span class="line">RIGHT-ROTATE(T, z)</span><br><span class="line">        z.p.color = BLACK</span><br><span class="line">        z.p.p.color = RED</span><br><span class="line">        LEFT-ROTATE(T, z.p.p)</span><br><span class="line">T.root.color = BLACK</span><br></pre></td></tr></table></figure><br><br>下面，咱们来分别处理上述3种插入修复情况。<br><br><strong>插入修复情况1：当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色。</strong><br><br>上诉代码中第5行至第8行是处理这种情况：将父结点和叔叔结点涂黑，将爷爷结点涂红。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/4.png"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/5.png"></div><br><strong>插入修复情况2：当前结点的父结点是红色,叔叔结点是黑色，当前结点是其父结点的右子</strong><br><br>上诉代码中第9行至第11行是处理这种情况：当前结点的父结点做为新的当前结点，以新当前结点为支点左旋。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/6.png"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/7.png"></div><br><strong>插入修复情况3：当前结点的父结点是红色,叔叔结点是黑色，当前结点是其父结点的左子</strong><br><br>上述代码中的12-14行处理此种情况：父结点变为黑色，祖父结点变为红色，在祖父结点为支点右旋。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/8.png"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/9.png"></div><br>### 二叉查找树的后继<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TREE-SUCCESSOR(x)</span></span><br><span class="line"><span class="keyword">if</span> x.right != T.nil</span><br><span class="line"><span class="keyword">return</span> TREE-MINIMUM(x.right)</span><br><span class="line">y = x.p</span><br><span class="line"><span class="keyword">while</span> y != T.nil and x == y.right</span><br><span class="line">x = y</span><br><span class="line">y = y.p</span><br><span class="line"><span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><br><br>$x$是待查找结点，右子树不为空，右子树的最小值所在的节点是后继。解释第<code>4-8</code>行代码需要证明一个定理：<br><br>&gt; 对于一棵二叉搜索树T，其关键字各不相同，如果T中一个节点$x$的右子树为空，且$x$有一个后继$y$，那么$y$一定是$x$的最底层祖先，并且其左孩子也是$x$的祖先。（每个结点都是其自身的祖先）<br><br>#### 证明<br><br>对于给定结点$x$，若其后继$y$存在，则$y &gt; x$。<br><br>1. 考虑结点$x$，对于$x$的左子树，显然其中任意结点值都小于$x$，所以$y$必定不在其左子树中。<br>2. $x$的右子树，其中任意结点值都大于$x$,但是根据题设，其右子树为空。<br><br>所以，$y$必定为$x$的祖先或其祖先的右子树。<br><br>又因为$y$是其中大于$x$且最小的一个，则$y$不可能是其祖先的右子树，那么我们可以将范围缩小至$y$必定为$x$的某一祖先，又根据$y&gt;x$，则$x$必定在$y$的左子树中，即$y$的左孩子也是$x$的祖先（$x$也是$x$的祖先）<br><br>对于所有满足条件的，假设有$p_0,p_1 \dots p_n$共$n+1$个，且$p_0 &lt; p_1 &lt; p_2 &lt; \dots &lt; p_n$。显然，$x$的前驱结点$y$必定是其中的最小一个，即$y=p_0$。又因为$y$是$x$的祖先，则$y$必然是$x$的最底层祖先。<br><br>#### 结论<br><br>这个定理实际的意义是，对于二叉搜索树中的一个节点（$x$），如果其不存在右子树且还有后继（$y$），则$y$是$x$祖先节点中有左子树的最底层祖先。如下图中13的后继是15。<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/01-Java基础/后继图示.jpg"></div><br>### 二叉查找树的前驱<br><br>前驱的代码和后继对应。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TREE-PREDECESSOR(x)</span><br><span class="line"><span class="keyword">if</span> x.left != <span class="keyword">null</span></span><br><span class="line"><span class="keyword">return</span> TREE-MAXNUM(x.left);</span><br><span class="line">y = x.p</span><br><span class="line"><span class="keyword">while</span> y != <span class="keyword">null</span> and x == y.left</span><br><span class="line">x = y</span><br><span class="line">y = y.p</span><br><span class="line"><span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><br><br><code>3-7</code>行代码的意思是，对于二叉搜索树中的一个节点（$x$），如果其不存在左子树且还有前驱（$y$），则$y$是$x$祖先节点中有右子树的最底层祖先。如图中17的前驱是15。<br><br><br><br>### 二叉查找树的删除<br><br>讨论删除之前需要证明一个定理：<br><br>&gt; 如果一个二叉搜索树中的一个节点有两个孩子，那么它的后继没有左孩子，它的前驱没有右孩子。<br><br>#### 证明<br><br>如果一棵二叉搜索树中的一个结点有两个孩子，那么它的后继为它的右子树中的最小值，所以它的后继没有左孩子，它的前驱为它的左子树中的最大值，所以它的前驱没有右孩子。<br><br><br><br>删除时有三种情况：<br><br>1. 如果被删除节点（$z$）没有孩子节点，直接删除，修改父节点相应指针指向空。<br>2. 如果$z$只有一个孩子，把孩子提到树中$z$所在的位置，并修改$z$的父节点，用$z$的孩子来替换。<br>3. 如果$z$有两个孩子，那么找$z$的后继$y$（一定在$z$的右子树中）。<br>1. 如果$y$是$z$的右孩子，用$y$替换$z$，同时留下$y$的右孩子。<br>2. 如果$y$不是$z$的右孩子，有之上定理可知，$y$是没有左孩子的，此时用$y$的右孩子替换$y$，用$y$替换$z$，不留下$y$的右孩子。<br><br>#### TRANSPLANT<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TRANSPLANT(T, u, v)</span></span><br><span class="line"><span class="keyword">if</span> u.p == T.nil</span><br><span class="line">T.root = v</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> u == u.p.left</span><br><span class="line">u.p.left = v</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">u.p.right = v</span><br><span class="line"><span class="keyword">if</span> v != T.nil</span><br><span class="line">v.p = u.p</span><br></pre></td></tr></table></figure><br><br><code>TRANSPLANT</code>的功能是在树$T$中用一棵以$v$为根的子树来替换一棵以$u$为根的子树。<br><br>- <code>2-3</code>行：当$u$是树根的时候，直接让$T$的根指向$v$。<br>- <code>4-5</code>行：当$u$是一个左孩子的时候，将$v$放在$u$的左孩子的位置。<br>- <code>6</code>行：当$u$是一个右孩子的时候，将$v$放在$u$的右孩子的位置。<br>- <code>7-8</code>行：更新$v$的父节点。<br><br>#### TREE-DELETE<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TREE-DELETE(T, z)</span><br><span class="line"><span class="keyword">if</span> z.left == T.nil</span><br><span class="line">TRANSPLANT(T, z, z.right)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> z.right == T.nil</span><br><span class="line">TRANSPLANT(T, z, z.left)</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    y = TREE-MINIMUM(z.right)</span><br><span class="line"><span class="keyword">if</span> y.p != z</span><br><span class="line">TRANSPLANT(T, y, y.right)</span><br><span class="line">        y.right = z.right</span><br><span class="line">        y.right.p = y</span><br><span class="line">    TRANSPLANT(T, z, y)</span><br><span class="line">    y.left = z.left</span><br><span class="line">    y.left.p = y</span><br></pre></td></tr></table></figure><br><br>1. <code>2-5</code>行：如果$z$没有左孩子，那么用其右孩子替换$z$。如果$z$没有右孩子，那么用其左孩子替换$z$。<br>2. <code>12-14</code>行：如果$y$是$z$的右孩子，用$y$替换$z$，同时留下$z$的左孩子。<br>3. <code>7-11</code>行：如果如果$z$有两个孩子，且$y$不是$z$的右孩子，用$y$的右孩子替换$y$，用$y$替换$z$。<br><br><div align="center"><img width="100%" src="//isjinhao.github.io/2019/01-Java基础/删除图示.jpg"></div><br>### 红黑树的删除<br><br>红黑树的删除和二叉查找树的删除有类似的结构。<br><br>#### RB-TRANSPLANT<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RB-TRANSPLANT(T, u, v)</span></span><br><span class="line"><span class="keyword">if</span> u.p == T.nil</span><br><span class="line">T.root = v</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> u == u.p.left</span><br><span class="line">u.p.left = v</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">u.p.right = v</span><br><span class="line">v.p = u.p</span><br></pre></td></tr></table></figure><br><br>过程RB-TRANSPLANT与TRANSPLANT有一点不同，即第8行无条件赋值，因为红黑树中的哨兵不是空。<br><br>#### RB-DELETE<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RB-DELETE(T, z)</span></span><br><span class="line">y = z</span><br><span class="line">y-original-color = y.color<span class="comment">// 删除的额结点的颜色</span></span><br><span class="line"><span class="keyword">if</span> z.left == T.nil<span class="comment">// 左子树为空，右子树直接上去</span></span><br><span class="line">x = z.right<span class="comment">// x指向被删除结点的右孩子</span></span><br><span class="line">RB-TRANSPLANT(T, z, z.right)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> z.right == T.nil<span class="comment">// 右子树为空，右子树直接上去</span></span><br><span class="line">x = z.left</span><br><span class="line">RB-TRANSPLANT(T, z, z.left)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">y = TREE-MINIMUM(z.right)<span class="comment">// 右子树中最小的</span></span><br><span class="line">y-original-color = y.color<span class="comment">// 删除的节点的颜色</span></span><br><span class="line">x = y.right</span><br><span class="line"><span class="keyword">if</span> y.p == z</span><br><span class="line">x.p = y</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">RB-TRANSPLANT(T, y, y.right)<span class="comment">// 和二叉搜索树删除时第2、3点一致</span></span><br><span class="line">y.right = z.right</span><br><span class="line">y.right.p = y</span><br><span class="line">RB-TRANSPLANT(T, z, y)</span><br><span class="line">y.left = z.left</span><br><span class="line">y.left.p = y</span><br><span class="line">y.color = z.color</span><br><span class="line"><span class="keyword">if</span> y-original-color == BLACK<span class="comment">//当删除的是黑色时需要调整，红色不需要</span></span><br><span class="line">RB-DELETE-FIXUP(T, x)</span><br></pre></td></tr></table></figure><br><br>我们从被删结点后来顶替它的那个结点开始调整，并认为它有额外的一重黑色。这里额外一重黑色是什么意思呢，我们不是把红黑树的结点加上除红与黑的另一种颜色，这里只是一种假设，我们认为我们当前指向它，因此空有额外一种黑色，可以认为它的黑色是从它的父结点被删除后继承给它的，它现在可以容纳两种颜色，如果它原来是红色，那么现在是红+黑，如果原来是黑色，那么它现在的颜色是黑+黑。有了这重额外的黑色，原红黑树性质5就能保持不变。现在只要恢复其它性质就可以了，做法还是尽量向根移动和穷举所有可能性。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RB-DELETE-FIXUP(T, x)</span></span><br><span class="line"><span class="keyword">while</span> x != T.root and x.color == BLACK</span><br><span class="line"><span class="keyword">if</span> x == x.p.left</span><br><span class="line">w = x.p.right</span><br><span class="line"><span class="keyword">if</span> w.color == RED</span><br><span class="line">w.color = BLACK</span><br><span class="line">x.p.color = RED</span><br><span class="line">LEFT-ROTATE(T, x.p)</span><br><span class="line">            w = x.p.right</span><br><span class="line">        <span class="keyword">if</span> w.left.color == BLACK and w.right.color == BLACK</span><br><span class="line">        w.color = RED</span><br><span class="line">        x = x.p</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> w.right.color == BLACK</span><br><span class="line">        w.left.color = BLACK</span><br><span class="line">        w.color= RED</span><br><span class="line">        RIGHT-RATATE(T, w)</span><br><span class="line">            w = x.p.right</span><br><span class="line">        w.color = x.p.color</span><br><span class="line">        x.p.color = BLACK</span><br><span class="line">        w.right.color = BLACK</span><br><span class="line">        LEFT-ROTATE(T, x.p)</span><br><span class="line">        x = T.root</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">same as then clause with <span class="string">"right"</span> and <span class="string">"left"</span> exchanged</span><br><span class="line">x.color = BLACK</span><br></pre></td></tr></table></figure><br><br>如果y的颜色是RED，则y不可能为红黑树的根，所以不管x的颜色是什么，都不会影响到红黑树的性质。所以只考虑y的颜色为BLACK的情况。<br><br>在y的颜色是BLACK的情况下，如果x的颜色为RED的话，删除y之后，结点y所在的分支的黑高就会减1，所以，只需要将x的颜色变为BLACK，则该分支的黑高会加1，则会保持住红黑树的颜色性质。所以最终要考虑的情况就是，y颜色为BLACK，x的颜色为BLACK的情况。因把y删除后，x顶替y的位置，y所在分支的黑高减1，所以，假设x节点的颜色为BLACK-BLACK，简称BB，也就是原来y的BLACK增加到x上了，这样就保证了该分支的黑高不变，接下来要做的就是调整x所在的分支，使红黑树的性质保持不变，又分为下面的几种情况（只考虑x为左孩子的情况，右孩子的情况是对称的）<br><br><strong>删除修复情况1：当前结点是黑+黑且兄弟结点为红色(此时父结点和兄弟结点的子结点分为黑)。</strong><br><br>解法：把父结点染成红色，把兄弟结点染成黑色，之后重新进入算法。此变换后原红黑树性质5不变，而把问题转化为兄弟结点为黑色的情况(注：变化前，原本就未违反性质5，只是为了<strong>把问题转化为兄弟结点为黑色的情况</strong>)。 即第5行至第9行。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/10.jpg"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/11.jpg"></div><br><strong>删除修复情况2：当前结点是黑加黑且兄弟是黑色且兄弟结点的两个子结点全为黑色。</strong><br><br>解法：把当前结点和兄弟结点中抽取一重黑色追加到父结点上，把父结点当成新的当前结点，重新进入算法。（此变换后性质5不变），即第10-12行代码操作。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/12.jpg"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/13.jpg"></div><br><strong>删除修复情况3：当前结点颜色是黑+黑，兄弟结点是黑色，兄弟的左子是红色，右子是黑色。</strong><br><br>解法：把兄弟结点染红，兄弟左子结点染黑，之后再在兄弟结点为支点解右旋，之后重新进入算法。此是把当前的情况转化为情况4，而性质5得以保持，即第13-17行代码：<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/14.jpg"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/15.jpg"></div><br><strong>删除修复情况4：当前结点颜色是黑-黑色，它的兄弟结点是黑色，但是兄弟结点的右子是红色，兄弟结点左子的颜色任意。</strong><br><br>解法：把兄弟结点染成当前结点父结点的颜色，把当前结点父结点染成黑色，兄弟结点右子染成黑色，之后以当前结点的父结点为支点进行左旋，此时算法结束，红黑树所有性质调整正确，即第18-22行代码，如下所示：<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/16.jpg"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/01-Java基础/17.jpg"></div><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h2 id="Collections和Arrays常见方法"><a href="#Collections和Arrays常见方法" class="headerlink" title="Collections和Arrays常见方法"></a>Collections和Arrays常见方法</h2><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><h4 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List list)</span><span class="comment">//反转</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List list)</span><span class="comment">//随机排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list)</span><span class="comment">//按自然排序的升序排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list, Comparator c)</span><span class="comment">//定制排序，由Comparator控制排序逻辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List list, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span><span class="comment">//交换两个索引位置的元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(List list, <span class="keyword">int</span> distance)</span><span class="comment">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面。</span></span></span><br></pre></td></tr></table></figure><h4 id="查找-替换操作"><a href="#查找-替换操作" class="headerlink" title="查找,替换操作"></a>查找,替换操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List list, Object key)</span><span class="comment">//对List进行二分查找，返回索引，注意List必须是有序的</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll)</span><span class="comment">//根据元素的自然顺序，返回最大的元素。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(Collection coll)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll, Comparator c)</span><span class="comment">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(Collection coll, Comparator c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(List list, Object obj)</span><span class="comment">//用指定的元素代替指定list中的所有元素。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">frequency</span><span class="params">(Collection c, Object o)</span><span class="comment">//统计元素出现次数</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOfSubList</span><span class="params">(List list, List target)</span><span class="comment">//统计target在list中第一次出现的索引，找不到则返回-1</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOfSubList</span><span class="params">(List source, list target)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">replaceAll</span><span class="params">(List list, Object oldVal, Object newVal)</span> <span class="comment">//用新元素替换旧元素</span></span></span><br></pre></td></tr></table></figure><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><h4 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序 : sort()"></a>排序 : <code>sort()</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">// sort(int[] a)方法按照数字顺序排列指定的数组。</span></span><br><span class="line">Arrays.sort(a);</span><br><span class="line">System.out.println(<span class="string">"Arrays.sort(a):"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort(int[] a,int fromIndex,int toIndex)按升序排列数组的指定范围</span></span><br><span class="line"><span class="keyword">int</span> b[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span> &#125;;</span><br><span class="line">Arrays.sort(b, <span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">System.out.println(<span class="string">"Arrays.sort(b, 2, 6):"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : b) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">// parallelSort(int[] a) 按照数字顺序排列指定的数组(并行的)。同sort方法一样也有按范围的排序</span></span><br><span class="line">Arrays.parallelSort(c);</span><br><span class="line">System.out.println(<span class="string">"Arrays.parallelSort(c)："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : c) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">// parallelSort给字符数组排序，sort也可以</span></span><br><span class="line"><span class="keyword">char</span> d[] = &#123; <span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span> &#125;;</span><br><span class="line">Arrays.parallelSort(d);</span><br><span class="line">System.out.println(<span class="string">"Arrays.parallelSort(d)："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> d2 : d) &#123;</span><br><span class="line">System.out.print(d2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找-binarySearch"><a href="#查找-binarySearch" class="headerlink" title="查找 : binarySearch()"></a>查找 : <code>binarySearch()</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] e = &#123; <span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span> &#125;;</span><br><span class="line"><span class="comment">// 排序后再进行二分查找，否则找不到</span></span><br><span class="line">Arrays.sort(e);</span><br><span class="line">System.out.println(<span class="string">"Arrays.sort(e)"</span> + Arrays.toString(e));</span><br><span class="line">System.out.println(<span class="string">"Arrays.binarySearch(e, 'c')："</span>);</span><br><span class="line"><span class="keyword">int</span> s = Arrays.binarySearch(e, <span class="string">'c'</span>);</span><br><span class="line">System.out.println(<span class="string">"字符c在数组的位置："</span> + s);</span><br></pre></td></tr></table></figure><h4 id="比较-equals"><a href="#比较-equals" class="headerlink" title="比较: equals()"></a>比较: <code>equals()</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] e = &#123; <span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span> &#125;;</span><br><span class="line"><span class="keyword">char</span>[] f = &#123; <span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span> &#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 元素数量相同，并且相同位置的元素相同。 另外，如果两个数组引用都是null，则它们被认为是相等的 。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 输出true</span></span><br><span class="line">System.out.println(<span class="string">"Arrays.equals(e, f):"</span> + Arrays.equals(e, f));</span><br></pre></td></tr></table></figure><h4 id="填充-fill"><a href="#填充-fill" class="headerlink" title="填充 : fill()"></a>填充 : <code>fill()</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] g = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="comment">// 数组中所有元素重新分配值</span></span><br><span class="line">Arrays.fill(g, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">"Arrays.fill(g, 3)："</span>);</span><br><span class="line"><span class="comment">// 输出结果：333333333</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : g) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] h = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, &#125;;</span><br><span class="line"><span class="comment">// 数组中指定范围元素重新分配值</span></span><br><span class="line">Arrays.fill(h, <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">System.out.println(<span class="string">"Arrays.fill(h, 0, 2, 9);："</span>);</span><br><span class="line"><span class="comment">// 输出结果：993333666</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : h) &#123;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转列表-asList"><a href="#转列表-asList" class="headerlink" title="转列表 asList()"></a>转列表 <code>asList()</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 返回由指定数组支持的固定大小的列表。</span></span><br><span class="line"><span class="comment">* （将返回的列表更改为“写入数组”。）该方法作为基于数组和基于集合的API之间的桥梁，与Collection.toArray()相结合 。</span></span><br><span class="line"><span class="comment">* 返回的列表是可序列化的，并实现RandomAccess 。</span></span><br><span class="line"><span class="comment">* 此方法还提供了一种方便的方式来创建一个初始化为包含几个元素的固定大小的列表如下：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;String&gt; stooges = Arrays.asList(<span class="string">"Larry"</span>, <span class="string">"Moe"</span>, <span class="string">"Curly"</span>);</span><br><span class="line">System.out.println(stooges);</span><br></pre></td></tr></table></figure><h4 id="转字符串-toString"><a href="#转字符串-toString" class="headerlink" title="转字符串 toString()"></a>转字符串 <code>toString()</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 返回指定数组的内容的字符串表示形式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">char</span>[] k = &#123; <span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span> &#125;;</span><br><span class="line">System.out.println(Arrays.toString(k));<span class="comment">// [a, f, b, c, e, A, C, B]</span></span><br></pre></td></tr></table></figure><h4 id="复制-copyOf"><a href="#复制-copyOf" class="headerlink" title="复制 copyOf()"></a>复制 <code>copyOf()</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// copyOf 方法实现数组复制,h为数组，6为复制的长度</span></span><br><span class="line"><span class="keyword">int</span>[] h = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, &#125;;</span><br><span class="line"><span class="keyword">int</span> i[] = Arrays.copyOf(h, <span class="number">6</span>);</span><br><span class="line">System.out.println(<span class="string">"Arrays.copyOf(h, 6);："</span>);</span><br><span class="line"><span class="comment">// 输出结果：123333</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j : i) &#123;</span><br><span class="line">System.out.print(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">// copyOfRange将指定数组的指定范围复制到新数组中</span></span><br><span class="line"><span class="keyword">int</span> j[] = Arrays.copyOfRange(h, <span class="number">6</span>, <span class="number">11</span>);</span><br><span class="line">System.out.println(<span class="string">"Arrays.copyOfRange(h, 6, 11)："</span>);</span><br><span class="line"><span class="comment">// 输出结果66600(h数组只有9个元素这里是从索引6到索引11复制所以不足的就为0)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j2 : j) &#123;</span><br><span class="line">System.out.print(j2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换行</span></span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>把变量从内存中变成可存储或传输的过程称之为序列化，把字节序列恢复为Java对象的过程称为对象的反序列化。对象的序列化主要有两种用途：</p><ol><li>把对象的字节序列永久的保存到硬盘上，通常存放在一个文件中。</li><li>在网络上传送对象的字节序列。</li></ol><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/01-Java基础/序列化.png"></div><p></p><h3 id="默认序列化"><a href="#默认序列化" class="headerlink" title="默认序列化"></a>默认序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Path path = Paths.get(<span class="string">"test"</span>);</span><br><span class="line">Person temp = <span class="keyword">new</span> Person(<span class="string">"陈钰琪"</span>, <span class="number">19</span>, <span class="string">"411x2x19xx1x2x6x1x"</span>, <span class="number">20000</span>d);</span><br><span class="line"></span><br><span class="line">ObjectOutputStream out = </span><br><span class="line"><span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(path.toFile()));</span><br><span class="line">out.writeObject(temp);</span><br><span class="line"></span><br><span class="line">ObjectInputStream in = </span><br><span class="line"><span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path.toFile()));</span><br><span class="line">Person readObject = (Person)in.readObject();</span><br><span class="line">System.out.println(readObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">485348963313276072L</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age, String id, Double money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter和setter</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", </span></span><br><span class="line"><span class="string">age="</span> + age + <span class="string">", id="</span> + id + <span class="string">", money="</span> + money + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>版本号是为了控制对象的版本而存在的，版本号一致才可认为可以进行对应的序列化和反序列化。比如我们使用上面的代码把一个Person写入temp文件了，然后修改<code>serialVersionUID = 485348963313276072L;</code>，会发现爆出<code>java.io.InvalidClassException</code>。</p><h3 id="单例的处理"><a href="#单例的处理" class="headerlink" title="单例的处理"></a>单例的处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MySingleton</span><span class="params">()</span> </span>&#123; &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MySingleton INSTANCE = <span class="keyword">new</span> MySingleton(); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> INSTANCE; &#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123; </span><br><span class="line">    <span class="comment">// instead of the object we're on, return the class variable INSTANCE </span></span><br><span class="line"><span class="keyword">return</span> INSTANCE; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化”组装”一个新对象时，就会自动调用这个readResolve方法来返回我们指定好的对象了，单例规则也就得到了保证。</p><p>​</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h3 id="ThreadLocal使用"><a href="#ThreadLocal使用" class="headerlink" title="ThreadLocal使用"></a>ThreadLocal使用</h3><p>ThreadLocal是一个线程局部变量，我们都知道全局变量和局部变量的区别，拿Java举例就是定义在类中的是全局的变量，各个方法中都能访问得到（静态方法不能获得实例属性），而局部变量定义在方法中，只能在方法内访问。那线程局部变量（ThreadLocal）就是每个线程都会有一个局部变量，独立于变量的初始化副本，而各个副本是通过线程唯一标识相关联的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UniqueThreadIdGenerator t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TaskThread</span><span class="params">(String threadName, UniqueThreadIdGenerator t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.setName(threadName);</span><br><span class="line"><span class="keyword">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> value = t.getUniqueId();</span><br><span class="line">System.out.println(<span class="string">"thread[ "</span> + Thread.currentThread().getName() + </span><br><span class="line">                <span class="string">" ] --&gt; uniqueId[ "</span> + value + <span class="string">" ]"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">UniqueThreadIdGenerator uniqueThreadId = <span class="keyword">new</span> UniqueThreadIdGenerator();</span><br><span class="line"><span class="comment">// 为每个线程生成一个唯一的局部标识</span></span><br><span class="line">TaskThread t1 = <span class="keyword">new</span> TaskThread(<span class="string">"custom-thread-1"</span>, uniqueThreadId);</span><br><span class="line">TaskThread t2 = <span class="keyword">new</span> TaskThread(<span class="string">"custom-thread-2"</span>, uniqueThreadId);</span><br><span class="line">TaskThread t3 = <span class="keyword">new</span> TaskThread(<span class="string">"custom-thread-3"</span>, uniqueThreadId);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniqueThreadIdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程局部整型变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; uniqueNum = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUniqueId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">uniqueNum.set(uniqueNum.get() + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> uniqueNum.get();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// thread[ custom-thread-2 ] --&gt; uniqueId[ 1 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-1 ] --&gt; uniqueId[ 1 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-3 ] --&gt; uniqueId[ 1 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-1 ] --&gt; uniqueId[ 2 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-2 ] --&gt; uniqueId[ 2 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-1 ] --&gt; uniqueId[ 3 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-3 ] --&gt; uniqueId[ 2 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-1 ] --&gt; uniqueId[ 4 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-2 ] --&gt; uniqueId[ 3 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-3 ] --&gt; uniqueId[ 3 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-2 ] --&gt; uniqueId[ 4 ]</span></span><br><span class="line"><span class="comment">// thread[ custom-thread-3 ] --&gt; uniqueId[ 4 ]</span></span><br><span class="line"><span class="comment">// 每个线程之间的uniqueId是互不干扰的</span></span><br></pre></td></tr></table></figure><h3 id="ThreadLocal源码分析"><a href="#ThreadLocal源码分析" class="headerlink" title="ThreadLocal源码分析"></a>ThreadLocal源码分析</h3><p>每个线程内部有一个ThreadLocalMap，<code>get()</code>的时候就是获得当前线程的<code>ThreadLocalMap</code>，并且将当前<code>ThreadLocal</code>对象传入<code>map.getEntry(this);</code></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/01-Java基础/2019-07-13_160318.jpg"></div><p></p><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadLocal.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 拿到每个线程内部的ThreadLocalMap</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// this指的是这个ThreadLocal对象，每个ThreadLocalMap可以有多个ThreadLocal对象</span></span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T value = initialValue();</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认初始化为null</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ThreadLocalMap.java</span></span><br><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">    table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">    table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">    setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从当前线程的ThreadLocalMap中删除当前的ThreadLocal</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">        m.remove(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h3><p>ThreadLocalMap是ThreadLocal的内部类，没有实现Map接口，用独立的方式实现了Map的功能，其内部的Entry也独立实现。</p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/01-Java基础/2019-07-13_160809.jpg"></div><br>在ThreadLocalMap中，也是用Entry来保存K-V结构数据的。但是Entry中key只能是ThreadLocal对象，这点被Entry的构造方法已经限定死了。<p></p><p>Entry继承自WeakReference（弱引用，生命周期只能存活到下次GC前），但只有Key是弱引用类型的，Value并非弱引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Entry.java</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal k, Object v) &#123;</span><br><span class="line">        <span class="keyword">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hash冲突怎么解决"><a href="#Hash冲突怎么解决" class="headerlink" title="Hash冲突怎么解决"></a>Hash冲突怎么解决</h4><p>和HashMap的最大的不同在于，ThreadLocalMap结构非常简单，没有next引用，也就是说ThreadLocalMap中解决Hash冲突的方式并非链表的方式，而是采用线性探测的方式，所谓线性探测，就是根据初始key的hashcode值确定元素在table数组中的位置，如果发现这个位置上已经有其他key值的元素被占用，则利用固定的算法寻找一定步长的下个位置，依次判断，直至找到能够存放的位置。</p><p>ThreadLocalMap解决Hash冲突的方式就是简单的步长加1或减1，寻找下一个相邻的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increment i modulo len.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decrement i modulo len.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prevIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((i - <span class="number">1</span> &gt;= <span class="number">0</span>) ? i - <span class="number">1</span> : len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然ThreadLocalMap采用线性探测的方式解决Hash冲突的效率很低，如果有大量不同的ThreadLocal对象放入map中时发送冲突，或者发生二次冲突，则效率很低。<strong>所以这里引出的良好建议是：每个线程只存一个变量，需要多个变量 这个时候需要把这些对象封装成变量对象</strong>。</p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>ThreadLocal在ThreadLocalMap中是以一个弱引用身份被Entry中的Key引用的，因此如果ThreadLocal没有外部强引用来引用它，那么ThreadLocal会在下次JVM垃圾收集时被回收。这个时候就会出现Entry中Key已经被回收，出现一个null Key的情况，外部读取ThreadLocalMap中的元素是无法通过null Key来找到Value的。因此如果当前线程的生命周期很长，一直存在，那么其内部的ThreadLocalMap对象也一直生存下来，这些null key就存在一条强引用链的关系一直存在：Thread –&gt; ThreadLocalMap–&gt;Entry–&gt;Value，这条强引用链会导致Entry不会回收，Value也不会回收，但Entry中的Key却已经被回收的情况，造成内存泄漏。</p><p>但是JVM团队已经考虑到这样的情况，并做了一些措施来保证ThreadLocal尽量不会内存泄漏：在ThreadLocal的get()、set()、remove()方法调用的时候会清除掉线程ThreadLocalMap中所有Entry中Key为null的Value，并将整个Entry设置为null，利于下次内存回收。</p><p>ThreadLocal的get()方法在调用map.getEntry(this)时，内部会判断key是否为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">    Entry e = table[i];</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocal k = e.get();</span><br><span class="line">        <span class="keyword">if</span> (k == key)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">            expungeStaleEntry(i);<span class="comment">// 清除空结点的方法</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i = nextIndex(i, len);</span><br><span class="line">        e = tab[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expunge entry at staleSlot（意思是，删除value，设置为null便于下次回收）</span></span><br><span class="line">    tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">    tab[staleSlot] = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rehash until we encounter null</span></span><br><span class="line">    <span class="comment">// 将当前Entry删除后，会继续循环往下检查是否有key为null的节点，如果有则一并删除，防止内存泄漏。</span></span><br><span class="line">    Entry e;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">         i = nextIndex(i, len)) &#123;</span><br><span class="line">        ThreadLocal k = e.get();</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            e.value = <span class="keyword">null</span>;</span><br><span class="line">            tab[i] = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (h != i) &#123;</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Unlike Knuth 6.4 Algorithm R, we must scan until</span></span><br><span class="line">                <span class="comment">// null because multiple entries could have been stale.</span></span><br><span class="line">                <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</span><br><span class="line">                    h = nextIndex(h, len);</span><br><span class="line">                tab[h] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这样也并不能保证ThreadLocal不会发生内存泄漏，例如：</p><ul><li>使用static的ThreadLocal，延长了ThreadLocal的生命周期，可能导致的内存泄漏。</li><li>分配使用了ThreadLocal又不再调用get()、set()、remove()方法，那么就会导致内存泄漏</li></ul><h4 id="为什么使用弱引用？"><a href="#为什么使用弱引用？" class="headerlink" title="为什么使用弱引用？"></a>为什么使用弱引用？</h4><p>从表面上看，发生内存泄漏，是因为Key使用了弱引用类型。但其实是因为整个Entry的key为null后，没有主动清除value导致。为什么使用弱引用而不是强引用？</p><p>官方文档的说法：</p><blockquote><p>To help deal with very large and long-lived usages, the hash table entries use WeakReferences for keys.<br>为了处理非常大和生命周期非常长的线程，哈希表使用弱引用作为 key。</p></blockquote><p>下面我们分两种情况讨论：</p><ul><li><p>key 使用强引用：引用的ThreadLocal的对象被回收了，但是ThreadLocalMap还持有ThreadLocal的强引用，如果没有手动删除，ThreadLocal不会被回收，导致Entry内存泄漏。</p></li><li><p>key 使用弱引用：引用的ThreadLocal的对象被回收了，由于ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal也会被回收。value在下一次ThreadLocalMap调用set，get，remove的时候会被清除。</p></li></ul><p>比较两种情况，我们可以发现：由于ThreadLocalMap的生命周期跟Thread一样长，如果都没有手动删除对应key，都会导致内存泄漏，但是使用弱引用可以多一层保障：弱引用ThreadLocal不会内存泄漏，对应的value在下一次ThreadLocalMap调用set，get，remove的时候会被清除。</p><p>因此，ThreadLocal内存泄漏的根源是：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key的value就会导致内存泄漏，而不是因为弱引用。</p><p>所以：<strong>每次使用完ThreadLocal，都调用它的remove()方法，清除数据。</strong>尤其是在使用线程池的情况下，没有及时清理ThreadLocal，不仅是内存泄漏的问题，更严重的是可能导致业务逻辑出现问题。所以，使用ThreadLocal就跟加锁完要解锁一样，用完就清理。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;JVM-amp-JDK-amp-JRE&quot;&gt;&lt;a href=&quot;#JVM-amp-JDK-amp-JRE&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="应届求职复习" scheme="https://isjinhao.github.io/categories/%E5%BA%94%E5%B1%8A%E6%B1%82%E8%81%8C%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="应届求职复习" scheme="https://isjinhao.github.io/tags/%E5%BA%94%E5%B1%8A%E6%B1%82%E8%81%8C%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="面试" scheme="https://isjinhao.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java邮件发送</title>
    <link href="https://isjinhao.github.io/2019/Java%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>https://isjinhao.github.io/2019/Java邮件发送/</id>
    <published>2019-07-26T04:01:16.000Z</published>
    <updated>2019-07-26T04:04:44.497Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不要修改版本号，这个版本之间的差异很大。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(MailConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailVerification</span> </span>&#123;</span><br><span class="line"><span class="comment">// 收件人地址</span></span><br><span class="line"><span class="keyword">private</span> String recipientAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MailConfig mailconfig;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendVerCode</span><span class="params">(String info, String recipientAddress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.info = info;</span><br><span class="line"><span class="keyword">this</span>.recipientAddress = recipientAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、连接邮件服务器的参数配置</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//设置用户的认证方式</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">        <span class="comment">//设置传输协议</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);</span><br><span class="line">        <span class="comment">//设置发件人的SMTP服务器地址</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.163.com"</span>);</span><br><span class="line">        <span class="comment">//2、创建定义整个应用程序所需的环境信息的 Session 对象</span></span><br><span class="line">        Session session = Session.getInstance(props);</span><br><span class="line">        <span class="comment">//设置调试信息在控制台打印出来</span></span><br><span class="line">        session.setDebug(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//3、创建邮件的实例对象</span></span><br><span class="line">        Message msg = getMimeMessage(session);</span><br><span class="line">        <span class="comment">//4、根据session对象获取邮件传输对象Transport</span></span><br><span class="line">        Transport transport = session.getTransport();</span><br><span class="line">        <span class="comment">//设置发件人的账户名和密码</span></span><br><span class="line">        transport.connect(mailconfig.getSenderAccount(), mailconfig.getSenderPassword());</span><br><span class="line">        <span class="comment">//发送邮件，并发送到所有收件人地址，message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人</span></span><br><span class="line">        transport.sendMessage(msg, msg.getAllRecipients());</span><br><span class="line">        <span class="comment">//如果只想发送给指定的人，可以如下写法</span></span><br><span class="line">        <span class="comment">//transport.sendMessage(msg, new Address[]&#123;new InternetAddress("xxx@qq.com")&#125;);</span></span><br><span class="line">        <span class="comment">//5、关闭邮件连接</span></span><br><span class="line">        transport.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得创建一封邮件的实例对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> AddressException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> MimeMessage <span class="title">getMimeMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建一封邮件的实例对象</span></span><br><span class="line">MimeMessage msg = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line"><span class="comment">// 设置发件人地址</span></span><br><span class="line">msg.setFrom(<span class="keyword">new</span> InternetAddress(mailconfig.getSenderAddress()));</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置收件人地址（可以增加多个收件人、抄送、密送），即下面这一行代码书写多行 MimeMessage.RecipientType.TO:发送</span></span><br><span class="line"><span class="comment"> * MimeMessage.RecipientType.CC：抄送 MimeMessage.RecipientType.BCC：密送</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">msg.setRecipient(MimeMessage.RecipientType.TO, <span class="keyword">new</span> InternetAddress(recipientAddress));</span><br><span class="line">msg.setRecipient(MimeMessage.RecipientType.CC, <span class="keyword">new</span> InternetAddress(mailconfig.getSenderAddress()));</span><br><span class="line"></span><br><span class="line">msg.setSubject(<span class="string">"航班管理系统验证码"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="comment">// 设置邮件正文</span></span><br><span class="line">msg.setContent(<span class="string">"您好，您的验证码是： "</span>  + info + <span class="string">" ,请在30分钟内完成验证！"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 设置邮件的发送时间,默认立即发送</span></span><br><span class="line">msg.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"as.email"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String senderAddress;</span><br><span class="line">    <span class="keyword">private</span> String senderAccount;</span><br><span class="line">    <span class="keyword">private</span> String senderPassword;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSenderAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> senderAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSenderAddress</span><span class="params">(String senderAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.senderAddress = senderAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSenderAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> senderAccount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSenderAccount</span><span class="params">(String senderAccount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.senderAccount = senderAccount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSenderPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> senderPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSenderPassword</span><span class="params">(String senderPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.senderPassword = senderPassword;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Maven依赖&quot;&gt;&lt;a href=&quot;#Maven依赖&quot; class=&quot;headerlink&quot; title=&quot;Maven依赖&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="邮件发送" scheme="https://isjinhao.github.io/categories/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    
    
      <category term="邮件发送" scheme="https://isjinhao.github.io/tags/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>centos7下mysql5.6安装和卸载</title>
    <link href="https://isjinhao.github.io/2019/centos7%E4%B8%8Bmysql5-6%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/"/>
    <id>https://isjinhao.github.io/2019/centos7下mysql5-6安装和卸载/</id>
    <published>2019-07-16T02:43:13.000Z</published>
    <updated>2019-07-16T12:52:01.723Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>卸载mariadb：<code>yum remove maria*</code></li><li>下载安装包文件：<code>wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</code></li><li>安装rpm包：<code>rpm -ivh mysql-community-release-el7-5.noarch.rpm</code></li><li>安装mysql：<code>yum install mysql-server</code></li><li>启动 mysql 服务：<code>systemctl start mysqld.service</code><ol><li>重启：<code>systemctl restart mysqld.service</code></li><li>停止：<code>systemctl stop mysqld.service</code></li><li>设置开机启动：<code>systemctl enable mysqld.service</code></li></ol></li><li>设置密码：<ol><li><code>mysql -u root</code></li><li><code>use mysql;</code></li><li><code>update user set password=PASSWORD(&quot;这里输入root用户密码&quot;) where User=&#39;root&#39;;</code></li><li><code>flush privileges;</code></li></ol></li><li>设置root远程主机登录：<code>GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;密码&quot;;</code><ol><li><code>GRANT ALL PRIVILEGES ON *.* TO &#39;your username&#39;@&#39;%&#39; IDENTIFIED BY &#39;your password&#39;;</code></li></ol></li><li>设置全局编码集</li></ol><div align="center"><img width="80%" src="//isjinhao.github.io/2019/centos7下mysql5-6安装和卸载/2019-07-16_110314.jpg"></div><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><ol><li>查看MySQL的安装情况：<code>rpm -qa|grep -i mysql</code></li><li>停止服务：<code>service mysql stop</code></li><li>卸载第一步查询出来的所有结果：<code>rpm -ev 名字 --nodeps</code></li><li>查找mysql之前使用过的目录：<code>find / -name mysql</code></li><li>删除所有mysql之前使用过的所有目录</li><li>删除配置文件：<code>rm -rf /etc/my.cnf</code></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;
      
    
    </summary>
    
      <category term="mysql" scheme="https://isjinhao.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://isjinhao.github.io/tags/mysql/"/>
    
      <category term="centos7" scheme="https://isjinhao.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>UML基础</title>
    <link href="https://isjinhao.github.io/2019/UML%E5%9F%BA%E7%A1%80/"/>
    <id>https://isjinhao.github.io/2019/UML基础/</id>
    <published>2019-07-03T04:23:18.000Z</published>
    <updated>2019-07-16T03:52:45.199Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>An object is an entity with a well-defined boundary and identity that encapsulates state and behavior.</p><p>State is represented by attributes and relationships.</p><p>Behavior is represented by operations, methods, and state machines.</p><blockquote><p>An Object Has State</p></blockquote><p>The state of an object is one of the possible conditions in which an object may exist.</p><p>The state of an object normally changes over time.</p><blockquote><p>An Object Has Behavior</p></blockquote><p>Behavior determines how an object acts and reacts.</p><p>The visible behavior [bɪ’heɪvjə] of an object is modeled by the set of messages it can respond to (operations the object can perform).</p><blockquote><p>An Object Has Identity</p></blockquote><p>Each object has a unique identity, even if the state is identical to that of another object.</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>A class is a description of a set of objects that share the same properties and behavior. An object is an instance of a class.</p><blockquote><p>The Relationship Between Classes and Objects</p></blockquote><p>A class is an abstract definition of an object. It defines the structure and behavior of each object in the class. It serves as a template for creating objects.</p><p>Objects are grouped into classes.</p><p>An object is an instance of a class.</p><h2 id="What-Is-an-Operation"><a href="#What-Is-an-Operation" class="headerlink" title="What Is an Operation?"></a>What Is an Operation?</h2><p>An operation is the implementation of a service that can be requested from any object of the class to affect behavior.</p><p>A class may have any number of operations or none at all.</p><blockquote><p>Objects Need to Collaborate</p></blockquote><p>Objects are useless unless they can collaborate [kəˈlæbəreɪt] together to solve a problem.</p><ul><li><p>Each object is responsible for its own behavior and status.</p></li><li><p>No one object can carry out every responsibility on its own.</p></li></ul><p>How do objects interact with each other?</p><ul><li>They interact through messages.</li></ul><h2 id="What-is-a-message"><a href="#What-is-a-message" class="headerlink" title="What is a message?"></a>What is a message?</h2><p>A specification of a communication between objects that conveys information with the expectation that activity will ensue(跟着发生)</p><p>One object asks another object to perform an operation.</p><h3 id="What-Is-Abstraction"><a href="#What-Is-Abstraction" class="headerlink" title="What Is Abstraction?"></a>What Is Abstraction?</h3><p>Abstraction can be defined as: Process allowing to focus on most important aspects while ignoring less important details</p><p>Allows us to manage complexity by concentrating on essential aspects making an entity different from others</p><blockquote><p>Abstraction</p></blockquote><p>Emphasizes relevant characteristics.</p><p>Suppresses（抑制） other characteristics.</p><h3 id="What-Is-Encapsulation"><a href="#What-Is-Encapsulation" class="headerlink" title="What Is Encapsulation?"></a>What Is Encapsulation?</h3><p>Encapsulation means to design, produce, and describe software so that it can be easily used without knowing the details of how it works.</p><p>Also known as information hiding</p><p>An analogy:</p><p>When you drive a car, you don’t have know the details of how many cylinders(汽缸) the engine has or how the gasoline and air are mixed and ignited(点火).</p><p>Instead you only have to know how to use the controls.</p><ul><li>Encapsulation allows objects to be viewed as ‘black boxes’</li></ul><ul><li>It protects an object’s internal state from being corrupted by other objects.</li></ul><ul><li>Also, other objects are protected from changes in the object implementation.</li></ul><ul><li>隔离复杂度</li></ul><h3 id="What-Is-Inheritance"><a href="#What-Is-Inheritance" class="headerlink" title="What Is Inheritance ?"></a>What Is Inheritance ?</h3><ul><li>Inheritance [ɪnˈherɪtəns]—a way of organizing classes</li></ul><ul><li>Classes with properties in common can be grouped so that their common properties are only defined once.</li></ul><ul><li>增加了软件重用的机会</li></ul><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>Polymorphism—the same word or phrase can be mean different things in different contexts</p><p>Analogy（类比）: in English, bank can mean side of a river or a place to put money</p><p>In Java, two or more classes could each have a method called output</p><p>Each output method would do the right thing for the class that it was in.</p><ul><li>One output might display a number where as a different one might display a name.</li></ul><p>What Is Polymorphism?</p><ul><li>消息发送方不需要知道消息接收方属于那个子类</li><li>同一类族的接收者可以按自己的方式处理消息</li><li>同一类族的接收者可以按自己的方式处理同一个消息</li><li>有多种对象可以按自己的方式处理相同的数据</li></ul><h3 id="What-is-an-Interface"><a href="#What-is-an-Interface" class="headerlink" title="What is an Interface?"></a>What is an Interface?</h3><p>An interface is a collection of operations that specify a service of a class or component.</p><p>Interfaces formalize（正式化） polymorphism</p><p>Interfaces support “plug-and-play(即插即用)” architectures</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>类</p></blockquote><p>定义了对象群体的逻辑结构，包括属性和操作。系统运行时，类作为产生对象的模板，在物理层面是不存在的</p><blockquote><p>对象</p></blockquote><p>系统运行时必须为每一个需要的对象分配内存、保存数据对象存在于物理层面，每个对象都有自己的数据空间。所有的对象共享同一块代码空间</p><p>属性Attribute ==状态state == 信息information</p><p>操作operation == 方法method ==行为behaviour = = 职责responsibility</p><h2 id="Procedural-Programming"><a href="#Procedural-Programming" class="headerlink" title="Procedural Programming"></a>Procedural Programming</h2><p>This programming paradigm（范式） is essentially an abstraction of machine /assembly language.</p><p>Program is organized around procedures.</p><p>Focus on data structures, algorithms and sequencing of steps</p><blockquote><p>Programs = Algorithm + Data Structure</p></blockquote><ul><li><p>An algorithm is a set of instructions for solving a problem</p></li><li><p>A data structure is a construct used to organize data in a specific way.</p></li><li>Most computer languages, from early examples like FORTRAN and ALGOL to more recent languages like C and Ada have been imperative or procedural.</li></ul><h2 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object-Oriented Programming"></a>Object-Oriented Programming</h2><p>A design and programming technique</p><p>Some terminology:</p><ul><li>object - usually a person, place or thing (a noun)</li><li><p>method - an action performed by an object (a verb)</p></li><li><p>type or class - a category of similar objects (such as automobiles)</p></li></ul><p>Objects have both data and methods</p><p>Objects of the same class have the same data elements and methods</p><p>Objects send and receive messages to invoke actions</p><p>C语言是一种面向过程的思维方式</p><p>程序的运行“一切尽在掌握中”：从main()函数的逐条语句开始执行、调用了子程序就必须一层层返回，最终又返回main函数</p><p>系统需要完成的功能，分配到各个子函数，由main函数统一调度</p><p>比较</p><p>面向过程侧重于考虑方法的编写（哪个方法做什么事，不考虑所涉及的数据在哪里）</p><p>面向对象则致力于将数据和方法先做一个封装（分配一个对象做事，先考虑所需要的数据是否和它在一起）</p><h2 id="What-is-modeling"><a href="#What-is-modeling" class="headerlink" title="What is modeling?"></a>What is modeling?</h2><p>A model is an abstraction of things.</p><p>Emphasizes relevant characteristics.</p><p>Suppresses other characteristics.</p><blockquote><p>建模目的</p></blockquote><p>We build models to better understand the system we are developing.</p><p>Modeling achieves four aims.</p><ul><li><p>模型帮助我们按照实际情况或按照我们所需要的样式对系统进行可视化</p></li><li><p>模型允许我们详细说明系统的结构或行为</p></li><li><p>模型给出了一个指导我们构造系统的模板</p></li><li><p>模型对我们作出的决策进行文档化</p></li></ul><p>We build models of complex systems because we cannot comprehend such a system in its entirety.</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>Unified Modeling Language 统一建模语言</p><ol><li>作用：建立软件模型，可以用UML对软件密集型系统的制品（artifact：软件开发过程中产生的各种各样的产物）进行可视化、详述、构造和文档化。</li><li>建模语言：提供统一的交流词汇和规则</li><li>可视化: 通过标准图符构成图形来描述模型</li><li>通用标准: 成为软件建模的标准语言,并且在其他领域也得到应用。</li></ol><h3 id="UML的构成"><a href="#UML的构成" class="headerlink" title="UML的构成"></a>UML的构成</h3><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_215443.jpg"></div><h2 id="Building-Blocks-of-the-UML"><a href="#Building-Blocks-of-the-UML" class="headerlink" title="Building Blocks of the UML"></a>Building Blocks of the UML</h2><p>The vocabulary of the UML encompasses three kinds of building blocks:</p><ul><li><p>Things: the abstractions that are first-class citizens in a model;</p></li><li><p>Relationships: relationships tie these things together;</p></li><li><p>Diagrams: diagrams group interesting collections of things.</p></li></ul><h3 id="Things-in-the-UML"><a href="#Things-in-the-UML" class="headerlink" title="Things in the UML"></a>Things in the UML</h3><p>There are four kinds of things in the UML:</p><ul><li><p>Structural things: class, interface, collaboration, use case, active class, component, node</p></li><li><p>Behavioral things: interaction, state machine, activity</p></li><li><p>Grouping things: package</p></li><li><p>Annotational(注释) things: note</p></li></ul><p>These things are the basic object-oriented building blocks of the UML.</p><h4 id="Structural-things-in-the-UML"><a href="#Structural-things-in-the-UML" class="headerlink" title="Structural things in the UML"></a>Structural things in the UML</h4><p>the nouns of UML models.</p><p>the mostly static parts of a model, either conceptual or physical</p><p>Collectively, the structural things are called classifiers</p><h5 id="Structural-things-Class"><a href="#Structural-things-Class" class="headerlink" title="Structural things - Class"></a>Structural things - Class</h5><p>A class is a description of a set of objects that share the same attributes, operations, relationships, and semantics(语义).</p><p>A class is represented using a compartmented(间隔间) rectangle</p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_193200.jpg"></div><br>A class is comprised of three sections<br><br>- The first section contains the class name<br><br>- The second section shows the structure (attributes)<br><br>- The third section shows the behavior (operations)<br><br><br><br>Representing Objects<br><br>An object is represented as rectangles with underlined names<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_194100.jpg"></div><br>##### Structural things - Interface<br><br>An interface is a collection of operations that specify a service of a class or component.<br><br>Interfaces support “plug-and-play” architectures<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_194156.jpg"></div><br>##### Structural things – Use Case<br><br>a use case is a description of set of sequence of actions that a system performs that yields an observable result of value to a particular actor.<br><br>A use case is used to structure(组织) the behavioral things in a model.<br><br>A use case is realized by a collaboration.<br><br>Graphically, a use case is rendered as an ellipse [ɪˈlɪps] with solid lines, usually including only its name.<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_195115.jpg"></div><br>##### Structural things - Collaboration<br><br>In the context of a system‘s architecture, a collaboration allows you to name a conceptual chunk(大块) that encompasses both static and dynamic aspects.<br><br>A collaboration names a society of classes, interfaces, and other elements that work together to provide some cooperative [kəʊ’ɒpərətɪv] behavior that’s bigger than the sum of all its parts.<br><br>You use collaborations to specify the realization of use cases and operations, and to model the architecturally significant mechanisms of your system.<br><br>A collaboration is also the specification of how an element, such as a classifier (including a class, interface, component, node, or use case) or an operation, is realized by a set of classifiers and associations playing specific roles used in a specific way.<br><br>Graphically, a collaboration is rendered as an ellipse(椭圆) with dashed lines.<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_195950.jpg"></div><br>##### Structural things – Active Class<br><br>an active class is a class whose objects own one or more processes or threads and therefore can initiate control activity.<br><br>Graphically, an active class is rendered as a class with double lines on the left and right; it usually includes its name, attributes, and operations.<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_200116.jpg"></div><br>##### Structural things – Component<br><br>A component is a modular part of the system design that hides its implementation behind a set of external interfaces.<br><br>系统中遵从一组接口且提供其实现的物理的、可替换的部分。<br><br>构件是物理抽象，可以替换的文件。类是逻辑抽象，包含属性和方法。逻辑抽象出来的东西用文件写出来，这些源文件就是构件。<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_200209.jpg"></div><br>eg：<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_200247.jpg"></div><br>##### Structural things – Node<br><br>a node is a physical element that exists at run time and represents a computational resource, generally having at least some memory and, often, processing capability.<br><br>A set of components may reside（安置、居住） on a node and may also migrate from node to node.<br><br>Graphically, a node is rendered as a cube, usually including only its name.<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_200516.jpg"></div><br>#### Behavioral things in the UML<br><br>the verbs of UML models.<br><br>the mostly dynamic parts of a model<br><br>three primary kinds<br><br>- Among a set of objects: interaction<br><br>- For an object: state machine<br><br>- The sequence of steps: activity<br><br><br><br>##### Behavioral things - Interaction<br><br>an interaction is a behavior that comprises（包括） a set of messages exchanged among a set of objects within a particular context to accomplish a specific purpose.<br><br>An interaction involves（包含、涉及） a number of other elements, including messages, action sequences (the behavior invoked by a message), and links (the connection between objects).<br><br>Graphically, a message is rendered as a directed line, almost always including the name of its operation.<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_201810.jpg"></div><br>&gt; What Is an Interaction Diagram?<br><br>An interaction diagram shows an interaction, consisting of a set of objects and their relationships, including the messages that may be dispatched（派遣，分发） among them.<br><br>It models the dynamic aspects of a system.<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_203358.jpg"></div><br>&gt; What Is a Sequence Diagram?<br><br>A sequence diagram is an interaction diagram that emphasizes the time ordering of messages.<br><br>The diagram shows<br><br>- The objects participating in the interaction.<br><br>- The sequence of messages exchanged.<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_203528.jpg"></div><br>&gt; What Is a Communication Diagram?<br><br>A communication diagram emphasizes the organization of the objects that participate in an interaction.<br><br>The communication diagram shows<br><br>- The objects participating in the interaction.<br><br>- Links( physical or conceptual connection among objects) between the objects.<br><br>- Messages passed between the objects.<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_203846.jpg"></div><br>##### Behavioral things - State machine<br><br>a state machine is a behavior that specifies the sequences of states an object or an interaction goes through during its lifetime in response to events, together with its responses to those events.<br><br>A state machine involves a number of other elements, including states, transitions, events, and activities.<br><br>Graphically, a state is rendered as a rounded rectangle, usually including its name and its substates（子状态）, if any（如果有）.<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_210300.jpg"></div><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_211131.jpg"></div><br>Behavioral things - Activity<br><br>an activity is a behavior that specifies the sequence of steps a computational process performs<br><br>In an activity, the focus is on the flows among steps without regard to which object performs each step.<br><br>A step of an activity is called an action.<br><br>Graphically, an action is rendered as a rounded rectangle with a name indicating its purpose. States and actions are distinguished by their different contexts.<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_211234.jpg"></div><br>#### Grouping things in the UML<br><br>##### Grouping things - Package<br><br>- Grouping things are the organizational parts of UML models.<br><br>- Structural things, behavioral things, and even other grouping things may be placed in a package.<br><br>- Unlike components (which exist at run time), a package is purely conceptual (meaning that it exists only at development time).<br><br>- Graphically, a package is rendered as a tabbed folder, usually including only its name and, sometimes, its contents.<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_212150.jpg"></div><br>#### Annotational things in the UML<br><br>##### Annotational things - Note<br><br>Annotational things are the explanatory(解释性的) parts of UML models.<br><br>These are the comments（解释） you may apply to describe, illuminate（阐释）, and remark about any element in a model.<br><br>There is one primary kind of annotational thing, called a note.<br><br>A note is simply a symbol for rendering constraints and comments attached to an element or a collection of elements.<br><br>Graphically, a note is rendered as a rectangle with a dog-eared corner, together with a textual or graphical comment.<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_212634.jpg"></div><br>### Relationships in the UML<br><br>There are four kinds of relationships in the UML:<br><br>- Association<br><br>- Dependency<br><br>- Generalization<br><br>- Realization<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_212938.jpg"></div><br>#### What Is an Association<br><br>The semantic relationship between two or more classes that specifies connections among their instances<br><br>- A structural relationship, specifying that objects of one thing are connected to objects of another<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_214111.jpg"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_214134.jpg"></div><br>#### Relationships: Dependency<br><br>A relationship between two model elements where a change in one may cause a change in the other.<br><br>Non-structural, “using” relationship.<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_214353.jpg"></div><br>#### Relationships: Generalization<br><br>A relationship among classes where one class shares the structure and/or behavior of one or more classes<br><br>Defines a hierarchy of abstractions in which a subclass inherits from one or more superclasses<br><br>- Single inheritance<br><br>- Multiple inheritance<br><br>an “is-a-kind of” relationship<br><br><br><br>#### Relationships: Realization<br><br>One classifier serves as the contract that the other classifier agrees to carry out<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_214942.jpg"></div><br>### Diagrams in the UML<br><br>The UML1.x includes nine such diagrams:<br><br>- Use-case diagrams: to illustrate requirement.<br><br>- Class diagrams: to illustrate logical structure.<br><br>- Object diagrams: to illustrate objects and links.<br><br>- State diagrams: to illustrate behavior.<br><br>- Component diagrams: to illustrate physical structure of the software.<br><br>- Deployment diagrams: to show the mapping of software to hardware configurations.<br><br>- Interaction diagrams (i.e., collaboration and sequence diagrams): to illustrate behavior.<br><br>- Activity diagrams: to illustrate the flow of events in a use-case.<br><br>A diagram is a view into a model<br><br>A model is a complete description of a system from a particular perspective<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_215343.jpg"></div><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_215420.jpg"></div><br>## 规则<br><br>命名<br><br>规定对要素(事物)、关系、图命名。例如：student为一个类的名字<br><br>范围<br><br>UML成员所定义的内容起作用的上下文环境。<br><br>可视性<br><br>UML成员能被其他成员引用的方式。三种：<br><br>- public（+）：公共<br>- protected（#）：保护<br>- private（-）：私有<br><br>完整性<br><br>保证事物正确、一致地相互联系。<br><br>执行<br><br>运行或模拟动态模型的含义是什么<br><br><br><br>## UML的公共机制<br><br>UML的公共机制有：<br><br>- 规范说明<br><br>- 修饰<br><br>- 通用划分<br><br>- 扩展机制<br><br>### 规格说明，pecification<br><br>UML对每一个元素都有确定的图形表示符号，但对该图形符号还有语法、语义的文字说明。例如，Actor：参与者，UML表示为：<br><br><div align="center"><img width="15%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_220719.jpg"></div><br>### 修饰，adornment<br><br>图形符号表示一个元素的主要特征，此外，可以加上修饰，表示该元素的其它特征。例如：矩形框表示一个类，有类名，属性，操作等。但也可增加“可视性” 等修饰。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_220809.jpg"></div><br>### 通用划分（common division）<br><br>一种保证不同抽象概念层次的机制。有两种通用划分的形式：<br><br>抽象-实例：例如，类-对象，用例-具体用例<br><br>接口-实现：接口表示约定，实现表示对约定的实施<br><br><br><br>## Extension mechanism of the UML<br><br>- Stereotype<br><br>- Tagged value<br><br>- Constraint<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_221407.jpg"></div><br>### Extension mechanism - Stereotypes<br><br>A stereotype is an extension of the vocabulary of the UML, allowing you to create new kinds of building blocks similar to existing ones but specific to your problem.<br><br>Stereotypes must be based on certain existing types or classes in the metamodel. Stereotypes may extend the semantics, but not the structure of pre-existing types and classes. Certain stereotypes are predefined in the UML, others may be user defined.<br><br><br><br>### Extension mechanism - Tagged Values<br><br>Many kinds of elements have detailed properties that do not have a visual notation. In addition, users can define new element properties using the tagged value mechanism.<br><br>A tagged value is an extension of the properties of a UML element, allowing you to create new information in that element’s specification.<br><br>A tagged value is a keyword-value pair that may be attached to any kind of model element. The keyword is called a tag.<br><br>Common examples of tagged values are：<br><br>- {Author = (Dave,Ron)}<br><br>- {Version Number = 3}<br><br>- {Location = d:\java\uml\examples}<br><br>- {Location = Node: Middle Tier}<br><br>### Extension mechanism - Constraint<br><br>A constraint is an extension of the semantics of a UML elements, allowing you to add new rules or to modify existing ones.<br><br>Constraints may be written as free-form text. If you want to specify your semantics more precisely, you can use the UML’s Object Constraint Language (OCL).<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_224902.jpg"></div><br>### 小结<br><br>- Modeling Comments - use notes<br>- Modeling New Building Blocks - use stereotype.<br>- Modeling New Properties - use tagged values.<br>- Modeling New Semantics - use constraint<br><br><br><br>## UML的4+1视图<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-01_225144.jpg"></div><br>## UML可以用在系统开发的各个阶段<br><br>- 业务模型：业务用例图，活动图，状态图，实体图；<br>- 需求模型：用例图，活动图，状态图等<br>- 逻辑模型：类图，交互图，活动图，状态图等<br>- 设计模型：类图，交互图，活动图，状态图等<br>- 实现模型：构件图等<br>- 测试模型：用例图，类图，交互图等<br><br><br><br>## 用例<br><br>A sequence of actions a system performs that yields an observable result of value to a particular actor<br><br>UML中用例用椭圆表示，使用动宾结构或主谓结构命名。<br><br>### 用例的特点<br><br>- 用例从使用系统的角度描述系统中的信息，即站在系统外部查看系统功能，不反映功能的实现方式。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_085712.jpg"></div><br>- 用例描述用户提出的一些可见需求，对应一个具体的用户目标。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_085758.jpg"></div><br>- 用例反映系统与用户的一次交互过程，应该具有交互的信息的传递。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_085835.jpg"></div><br>- 用例是对系统行为的描述，属于UML的动态建模部分。<br>- 通过读卡机，储户插入ATM卡<br>- ATM系统从卡上读取银行ID、帐号、并验证帐号。<br>- 储户键入密码，系统检验密码。<br>- 储户按确认键，输入取款金额。<br>- ATM把帐号和取款金额传递给银行系统，取回帐户余额。<br>- ATM输出现金，并显示帐户余额。<br>- ATM记录事务到日志文件。<br><br><br><br>## What Is an Actor<br><br>- Actors are not part of the system.<br>- Actors represent roles a user of the system can play(扮演).<br>- They can represent a human, a machine, or another system.<br>- They can actively interchange（交换） information with the system.<br>- They can be a giver of information.<br>- They can be a passive recipient of information.<br><br>Actors are EXTERNAL.<br><br><br><br>### 参与者<br><br>参与者(actor)是指系统以外的、需要使用系统或与系统交互的事物，包括: 人、设备、外部系统等。其它译名有: 活动者、执行者、行动者等。例，一个银行业务系统中的参与者：<br><br>1. 客户：从系统获取信息并执行金融交易<br>2. 管理人员：创建系统的用户，获取并更新信息<br>3. 厂商：接受作为转账支付结果的资金<br>4. Mail系统：与系统交互，发送或接收邮件<br><br>An actor represents a role that a human, hardware device, or another system can play.<br><br>UML中的Actor实际上是一个版型化的类, 可以有三种表示形式：<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_090821.jpg"></div><br>由于Actor实际上是一个类, 因此它们之间可以存在一定的关系,如：<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_090906.jpg"></div><br>## 脚本<br><br>脚本(scenario)在UML中指贯穿用例的一条单一路径，用来显示用例中的正常和特殊情况。<br><br>系统在某个特定的执行期内所发生的一系列事件。其它译名：情景、场景、情节、剧本。<br><br>每个用例有一系列脚本，包括一个主要脚本，以及几个次要脚本。相对于主要脚本，次要脚本描述了执行路径中的异常或可选择的情况。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_091229.jpg"></div><br>## 用例之间的关系<br><br>用例与参与者之间：关联(association)关系。<br><br>用例之间的关系有：泛化(generalization)、包含(include)、扩展(extend)等。<br><br><br><br>### 关联关系<br><br>参与者与用例之间是关联关系，表示参与者与用例之间具有使用，交互信息的关联。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_091350.jpg"></div><br>### 泛化关系<br><br>泛化关系代表一般与特殊的关系，与继承类似。在泛化关系中，子用例继承了父用例的行为和含义，子用例也可以增加新的行为和含义或覆盖父用例中的行为和含义。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_091502.jpg"></div><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_091556.jpg"></div><br>### 包含关系<br><br>包含关系是指一个用例（基本用例）的行为包含了另一个用例（包含用例）的行为。包含关系是依赖关系的版型。<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_091722.jpg"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_091744.jpg"></div><br>### 扩展关系<br><br>扩展关系的基本含义与泛化关系类似，但对扩展用例有更多限制, 即基本用例必须声明若干“扩展点”，扩展用例只能在扩展点上增加行为和含义，以扩展到新用例。扩展关系是依赖关系版型。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_091913.jpg"></div><br>### 关系比较<br><br>- 扩展关系的基本用例是 well formed 的。一个基本用例执行时，可以执行或不执行扩展用例。<br>- 包含关系的基本用例可以不是或是 well formed 的。执行基本用例时，一定会执行包含用例。<br>- 需要重复处理两个或多个用例时吗，可以考虑包含关系。<br>- 处理正常行为的变型且只是偶而描述时，可以考虑只使用泛化关系。<br>- 处理正常行为的变型且希望采用更多控制方式时，可以在基本用例中设置扩展点，使用扩展关系。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_092400.jpg"></div><br>## 用例的描述<br><br>- 用例描述是指对一个用例的功能进行的文字描述，是参与者与系统交互动作序列的说明。<br><br>- 用例描述才是用例的主要部分，是后续的交互图分析和类图分析必不可少的部分。<br><br>- 用例采用自然语言描述参与者与系统的交互行为，要易于理解，其读者是开发人员、用户、项目经理、测试人员等。<br><br>### 错误描述<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_092647.jpg"></div><br>### 正确描述<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_092713.jpg"></div><br>### 用例规约的主要组成<br><br>- 用例名称<br><br>- 用例标识<br><br>- 涉及的参与者<br><br>- 描述<br><br>- 用例的规格说明<br>- 前置条件 PreConditions<br>- 后置条件 PostConditions<br>- 正常事件流 Flow of events<br>- 备选事件流 Alternate flow<br><br>- 其它<br>- 非功能需求、设计约束、尚存在的问题<br><br>#### 前置、后置条件-1<br><br>- 前置条件约束在用例开始前系统的状态<br>- 把它们看做是看门人，它阻止参与者触发该用例直到满足所有条件<br>- 说明在用例触发之前什么必须为真<br><br>- 后置条件约束用例执行后系统的状态<br>- 用例执行后什么必须为真<br>- 对于有多个事件流的用例，则应该有多个后置条件<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_092919.jpg"></div><br>#### 事件流描述要点<br><br>- 只书写“可观测”的语句、<br>- 系统通过ADO建立数据库连接，传送SQL查询语句，从“商品表”查询商品的详细信息……<br>- 系统按照查询条件搜索商品的详细信息<br><br>- 使用主动语句<br><br>- 句子必须以参与者或系统作为主语<br>- 出纳员接收顾客的付款—顾客的付款数可能高于商品总额<br>- 出纳员录入顾客所付的现金总额<br>- 系统显示出应找还给顾客的余额，打印付款收据<br><br>- 不要涉及界面细节<br>- 会员从下拉框中选择类别<br>- 会员在相应文本框中输入查询条件<br>- 会员点击“确定”按钮<br><br>- 分支和循环<br>- 分支：参与者的选择<br>- 分支：另一条成功线路<br>- 分支：系统进行验证<br>- 循环：直接描述<br><br><br><br>## 寻找用例的方法<br><br>- start with actors, then identify what they want to do What functions will the actor want from the system<br><br>- 系统是否存储和检索信息<br><br>- Are any actors notified when the system changes ?<br><br>- Are there external events that notify the system ?<br><br>- 哪个参与者触发了活动？Which actors trigger activity ?<br><br><br><br>## 用例的常见问题分析<br><br>### 用例的粒度问题<br><br>对于一个目标系统进行用例分析后得到的用例数目有多少比较合适?<br><br>- 用例要有路径，路径要有步骤；而这一切都是可观测的<br><br>- 最常犯错误：粒度过细，陷入功能分解。过细的粒度，一般都会导致技术语言的描述，而不再是业务语言。如把步骤当用例，或者把系统活动当用例。<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_093727.jpg"></div><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_093745.jpg"></div><br>## 用例模型<br><br>- 用例模型包括：<br>- 系统边界<br>- 参与者<br>- 用例<br>- 用例图<br>- 用例描述<br><br>- 是面向对象设计的输入<br><br>- 是开发部门与顾客之间的合同<br><br>- 是软件设计部门与软件工程师之间的合同<br><br>- 是开发部门领导、非直接开发人员，了解系统的主要信息来源<br><br><br><br>## 交互图的概念<br><br>- 交互图(interaction)：用来描述对象之间及对象与参与者之间的动态协作关系，以及协作过程中行为次序的图形文档。<br>- 交互图的类型：顺序图，协作图<br><br>- 交互图的作用：用于描述用例的行为，显示该用例中所涉及的对象和这些对象之间的消息传递情况。<br><br><br><br>## 顺序图的概念<br><br>顺序图(sequence diagram)：用来描述为了完成确定事务，对象之间按照时间进行消息交互的顺序关系。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_094251.jpg"></div><br>### 对象及命名<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_094336.jpg"></div><br>### 生命线<br><br>表示对象存在的时间，对象下面一条虚线表示。<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_094401.jpg"></div><br>### 控制焦点(Focus of Control, FOC)<br><br>小矩形，表示这个时间段内对象将执行操作。<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_094437.jpg"></div><br>#### 激活期<br><br>- 休眠的对象收到一个消息时，开始活动，称为激活<br>- 激活的对象要么执行自己的代码，要么在等待另一个对象的返回<br>- 激活期外，对象处在休眠期，什么事都不做，但它仍然存在，等待消息的激活<br><br><br><br>### 消息<br><br>带箭头的连线，表示对象之间传输的信息。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_094556.jpg"></div><br>#### 消息解释<br><br>对象之间传输的信息。消息有以下类型：<br><br>##### 调用消息（procedure call）<br><br>- 调用消息(也称为同步消息)的发送者把控制传递给接收者，然后停止活动，等到消息接收者放弃或返回控制。<br><br>- 调用消息必有一个与之配对的返回消息, 但是可以不用画出.<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_094856.jpg"></div><br>#### 异步消息<br><br>异步消息的发送者通过消息把信号传递给接收者，然后继续自己活动，不等待接收者返回消息或控制。<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_095200.jpg"></div><br>#### 返回消息<br><br>返回消息表示从过程调用返回。如果是从过程调用返回，则返回消息是隐含的，可以不画出来。对于非过程调用，如果有返回消息，必须画出来。<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_095140.jpg"></div><br>#### 消息的语法格式<br><br>- display (x,y) 简单消息<br><br>- p:= find (specs) 嵌套消息，消息带返回值、<br><br>- [x&lt;0]5: invert (x,color) 条件消息<br><br>- [i:=1..n]: update() 循环消息<br><br><br><br>### 建立顺序图<br><br>1. 从用例中识别交互过程;<br>2. 识别参与交互过程的对象;<br>3. 为每一个对象设置生命线,并确定对象的存在期限;哪些对象存在于整个交互过程，哪些对象在交互过程中被创建和销毁。<br>4. 从引发交互的初始消息开始,在对象生命线上依次画出交互的消息;<br><br><br><br>### Use Case：Register New Member<br><br>1. The customer fills out an application form containing the customer’s name, address and phone number and gives this to the clerk.<br>2. The clerk issues a request to add a new member.<br>3. The system asks for data about the new member.<br>4. The clerk enters the data into the system.<br>5. Reads in data, and if the member can be added, generates an identification number for the member and remembers information about the member. Informs the clerk if the member was added and outputs the member’s name, address, phone and id.<br>6. The clerk gives the user his identification number.<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_095537.jpg"></div><br>### Use Case：Adding New Book<br><br>1. The library receives a shipment of books from the publisher<br>2. The clerk issues a request to add a new book.<br>3. The system asks for the identifier, title, and author name of the book.<br>4. The clerk generates the unique identifier, enters the identifier, title, and author name of a book.<br>5. The system attempts to enter the information in the catalog and informs the clerk about the result. It then asks if the clerk wants to enter information about another book.<br>6. The clerk answers in the affirmative or in the negative.<br>7. If the answer is in the affirmative, the system goes to Step 3. Otherwise, it exits.<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_095715.jpg"></div><br>## 用例：借书<br><br>- 参与者：图书管理员<br>- 事件流：<br>1. 管理员进入图书借阅界面，用例开始。<br>2. 管理员输入借书证上的读者编号。<br>3. 系统检验借书证合法性吗，如果正确,则显示借阅者(姓名、学院、年级等信息)及其以前所借图书的信息。<br>- A1：借书证编码有错。<br>- A2: 如果该借阅者所借图书已经超期，则提示，本次拒借。<br><br>4. 管理员输入图书条码。<br>5. 系统显示所借图书的信息。<br>6. 管理员确认借书，系统保存借书信息（包括时间，读者号，图书编号等）。<br>7. 用例结束。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_095916.jpg"></div><br>## 协作图<br><br>- 协作图的概念：用来描述系统的行为是如何由系统的成分协作实现的图，各对象之间消息联系的结构关系。<br>- 协作图样式和元素：<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_100027.jpg"></div><br>### 建立协作图<br><br>1. 从用例中识别交互过程;<br>2. 识别参与交互过程的对象;<br>3. 确定对象之间的链，以及链上的消息;<br>4. 从引发交互的初始消息开始,将随后每个消息附在相应的链上;<br><br>### 顺序图与协作图的异同<br><br>- 顺序图和协作图都属于交互图,用来描述对象之间的动态关系。<br>- 顺序图强调消息的时间顺序，协作图强调参与交互的对象的组织关系。<br>- 顺序图和协作图在语义上是等价的，两者可以相互转换。<br><br><br><br>#### 写出Class A伪代码<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_102225.jpg"></div><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_102246.jpg"></div><br>## 图书馆还书处理的交互图<br><br>用例：还书<br><br>参与者：图书管理员<br><br>事件流：<br><br>- 管理员进入图书借阅界面，用例开始。<br>- 系统要求输入读者编号及所还图书的条码。管理员输入相应信息。<br>- 系统显示所还图书的图书、读者信息、借书记录信息。<br>- 图书管理员确认还书（登记还书时间）。<br>- 用例结束。<br><br><br><br>### 识别交互过程<br><br>读者在还书时，先由管理员把借书证上的读者编号及所借图书的图书编号扫描给系统，系统接收到这个信息，则显示这个该读者信息,以及这本书的信息、借书记录信息。<br><br>管理员确认还书,则系统登记还书信息，并返回还书成功信息，还书过程完成。<br><br>### 画图<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_102603.jpg"></div><br>## 类的概念<br><br>类的定义：类(class): 具有相似结构、行为和关系的一组对象。<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_103115.jpg"></div><br>缩略表示：<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_103342.jpg"></div><br>## 类的版型<br><br>### 边界类<br><br>边界类位于系统与外界的交界处,承担系统与外界的信息交互功能。<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_103453.jpg"></div><br>边界类处在用例图中，参与者与用例的关联处，可以根据用例图发现边界类。<br><br><br><br>### 实体类<br><br>实体类对应着现实中的客观实物，用来保存信息，一般对应着数据表、文件等。实体类可以从现实中存在的客观事物，以及需要持久存放的信息两方面来发现。<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_103611.jpg"></div><br>### 控制类<br><br>控制类负责其他类工作的类，控制调控的作用。一个用例中最少会有一个控制类，用来控制用例中的事件顺序，也可以在多个用例之间共用。控制类较少接收消息，发出较多(控制)消息。<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_103656.jpg"></div><br>## 类之间的关系<br><br>### 关联<br><br>模型元素之间的一种语义联系,它是对具有共同的结构特性、行为特性、关系和语义的链接（link，对象之间物理上或概念上的连接）的描述。<br><br>关联可以分为单向关联，双向关联。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_104022.jpg"></div><br>#### 关联的特性<br><br>- 关联名：用来描述关联的作用。<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_104114.jpg"></div><br>- 关联的角色：关联的两端可以以某种角色参与关联。<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_104149.jpg"></div><br>- 关联的多重性：表示可以有多少个对象参与该关联。<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_104228.jpg"></div><br>- 关联类：通过关联类描述关联的属性，操作，及其它信息。<br>- 增加关联类的准则<br>- 有某个属性与关联相关<br>- 关联类的实例具有依赖于关联的生命期<br>- 两个概念之间有多对多关联，并且存在与关联自身相关的信息<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_104321.jpg"></div><br>- ##### 关联的约束<br><br>通过约束加强关联的含义。例如，“帐户”不能同时与“人”和“公司”有关联。<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_104548.jpg"></div><br>- 限定关联<br><br>通过限定符(qualifier)来规定关联的限定关系。<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_104906.jpg"></div><br>#### 关联的种类<br><br>- 一元(自返)关联<br><br><div align="center"><img width="30%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_104955.jpg"></div><br>- 二元关联<br><br><div align="center"><img width="50%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_105018.jpg"></div><br>- 三元关联<br><br>三元关联是功能齐全的关联，可以有关联类。<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_110554.jpg"></div><br>- 多元关联<br><br>编程语言不能表示多元关联，需要提升为一个类<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_110629.jpg"></div><br>### 聚集和组合<br><br>#### 聚集<br><br>聚集(aggregation): 表示类之间一种松散的整体与部分的组成关系，是一种特殊的关联。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_110945.jpg"></div><br>#### 组合<br><br>组合(composition)：表示类之间一种紧密的整体与部分的组成关系，也是一种特殊的关联。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_111035.jpg"></div><br>#### 聚集与组合的区别<br><br>- 聚集松散，组合紧密<br><br>- 一个部分事物对象可以属于多个聚集对象,但一个部分事物对象仅能属于一个组合对象<br><br>- 聚集的对象生命周期可以不同,但组合对象则是同存同亡。<br><br><br><br>### 泛化<br><br>泛化(generalization)：表示事物之间的一般与特殊的关系；也可以称为继承关系。泛化关系除了表示类与类之间的关系之外，还可以表示参与者、用例、包、构件、接口等建模元素之间的关系。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_113645.jpg"></div><br>### 依赖<br><br>依赖(dependency): 表示两个元素X、Y，如果X的变化必然导致Y的变化，则称Y依赖X。依赖关系不仅限于类，用例、包、构件之间都可以存在依赖关系。 如果类A和类B有关联关系，那么就有依赖关系。只表示出关联关系，不用表示出依赖关系。依赖关系本身不生成专门的实现代码。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_113817.jpg"></div><br>### 派生属性和派生关联<br><br>派生属性和派生关联的概念：可以从其它属性或关联计算推演得到的属性和关联。在派生的名字前面加/，以示区别。派生容易产生不一致，应注意。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_114154.jpg"></div><br>#### 抽象类和接口<br><br>抽象类：只有声明，没有具体实现，不能实例化；<br><br><div align="center"><img width="30%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_114235.jpg"></div><br>接口：不包含属性，只有方法声明<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_114258.jpg"></div><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_114344.jpg"></div><br>## 类图<br><br>类图(Class Diagram): 是由类，相关建模元素（接口、包），及其关系构成的图，用来描述类之间的静态关系。类图在系统中处在核心位置。也是UML中最为重要的一种图。<br><br>售票系统的类图：顾客可多次订票，但每一次订票只能由一个顾客来执行。有两种订票方式：个人票或套票；前者只是一张票，后者包括多张票。每一张票不是个人票就是套票中的一张，但是不能又是个人票又是套票中的一张。每场演出都有多张票可供预定，每张票对应一个唯一的座位号。每次演出用剧目名、日期和时间来标识。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_114448.jpg"></div><br>### 类图的抽象层次<br><br>在系统的不同开发阶段，类图可以具有不同的抽象程度。随着开发的深入，类图应该越来越详细、具体。可以分为：概念层，说明层，实现层。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_114643.jpg"></div><br>### 构造类图<br><br>#### 寻找类的方法<br><br>- 根据用例描述中的名词确定候选类。<br><br>- 根据边界类、控制类和实体类的划分来帮助发现类。<br><br>- 参考设计模式来确定类。<br><br>- 根据软件开发过程的指导寻找类。<br><br><br><br>#### 构造类图时注意<br><br>- 不要试图使用所有的符号，20％的建模元素能满足80％的建模需求。<br><br>- 不要过早陷入细节, 根据不同阶段，采用不同层次类图，逐步细化。<br><br>- 构造完成要将模型与目标问题对照验证其是否合理，是否反应了应用领域的实际情况。<br><br><br><br>## 对象图<br><br>&gt; 对象图的概念<br><br>对象图表示一组对象及其它们之间的联系。对象是系统的详细状态在某一时刻的快照，通常用来表示复杂类图的一个实例。<br><br>&gt; 说明<br><br>- 对象图并不在任何时间都是必须的；<br>- Rose2003不支持对象图。<br><br><br><br>## 类的关系具有四种<br><br>- 关联：表示类中对象之间的链接关系<br><br>- 组成：表示事物之间的整体和部分关系，（聚合，组合）<br><br>- 泛化：表示事物的一般和特殊关系<br><br>- 依赖：事物之间的因果关系<br><br><br><br>## 状态图<br><br>状态图(state chart diagram)：用来描述一个特定的对象所有可能的状态，以及由于各种事件的发生而引起的状态之间的转移和变化。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_134436.jpg"></div><br>## 状态图的要素—–状态<br><br>### 概念<br><br>是指对象在其生命周期中，满足某些条件、执行某些活动、或等待某些事件时的一个状况（时间段）。<br><br>### 状态的表示和要素<br><br>- 状态的表示：用圆角的矩形框表示状态。<br><br>- 状态的要素：包括状态名，进入/退出动作、内部转移，子状态等。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_135250.jpg"></div><br>eg:<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_135323.jpg"></div><br>### 状态的类型<br><br>初态、终态、中间状态、组合状态、历史状态等。一个状态图只能有一个初态，但是结束状态可能有多个，也可以没有终态。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_135637.jpg"></div><br>#### 组合状态和子状态<br><br>嵌套在另一个状态中的状态称为子状态;包含子状态的状态称为组合状态.<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_135809.jpg"></div><br>#### 历史状态<br><br>历史状态是伪状态, 其目的是记住从组合状态中退出时所处的子状态, 当再次进入组合状态时, 可以直接进入这个子状态, 而不是再从组合状态的初态开始.<br><br>- 浅(shallow)历史状态，只记住最外层组合状态的历史<br><br><div align="center"><img width="5%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_140333.jpg"></div><br>- 深(deep)历史状态, 可以记住任意深度的组合状态的历史.<br><br><div align="center"><img width="5%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_140411.jpg"></div><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_140508.jpg"></div><br>## 状态图的要素—–转移<br><br>转移(transition): 是一个状态向另外一个状态的转换（瞬时变化）。转移是两种状态之间的一种关系，表示对象将在第一个状态执行一定的动作，并在某个特定事件发生且满足某个特定的警戒条件时进入第二个状态。<br><br>转移的格式：<code>event-name [‘(‘parameters’)’] [‘[’guard-condition’]’] [’/’action]</code><br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_141428.jpg"></div><br>对于一个给定的状态，最终只能产生一个转移，因此从一个状态出发的几个转移之间应该是互斥的，包括：事件不同；事件相同但警戒条件互斥。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_141724.jpg"></div><br>## 状态图的要素—–事 件<br><br>### 概念<br><br>事件(event)：是指在确定的时间和位置所发生的对于对象起作用的事情。事件的发生将引起一些动作，使对象发生状态的转移。<br><br>动作（action）：动作是对象类中一个操作的执行，动作具有原子性和不可中断特性。<br><br>### 描述<br><br>事件名称[参数表]<br><br>- 字符串，常为接收对象类中的一个操作。<br>- 事件的形式参数，可以省略<br><br>### 事件的类型<br><br>- 调用事件(call event)：是表示对操作的调用<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_142010.jpg"></div><br>- 变化事件(change event)：因满足某种条件（参量变化）而引起的事件，变化条件用when表示。(由满足布尔表达式而引起的事件，不断测试表达式，直到表达式为真)<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_142141.jpg"></div><br>- 时间事件：满足某一时间表达式而引起的事件,时间事件用after,when表示。<br><br><div align="center"><img width="70%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_142232.jpg"></div><br>## 状态图的作用<br><br>用来描述一个对象在其生命周期中所表现出来的状态和行为。当在系统建模过程中需要描述某个事物或对象的不同状态，以及状态之间转移的事件和动作时，用状态图。 但状态图并不是对每一个对象都需要的。<br><br><br><br>## 如何绘制状态图<br><br>1. 选择对象与视点<br>2. 寻找主要的状态<br>3. 确定状态之间的转移（换）<br>4. 细化状态内的活动与转换<br>5. 用组合状态来展开细节<br><br><br><br>## 活动图<br><br>活动图(activity diagram)是UML的动态视图之一，用来描述系统的工作流程和并发行为。活动图是状态图的一个变体，活动图中一个活动结束后将立即进入下一个活动（不需要事件的触发）。<br><br><br><br>### 使用活动图<br><br>- 活动图的用途是对人类组织的现实世界中的工作流程建模。<br>- 也可以对具体操作建模，用于描述计算过程的细节。<br>- 活动图有助于理解系统高层活动的执行行为，而不涉及建立交互图所必须的消息传送细节。<br>- 软件公司可以用活动图对一个软件的开发过程建模；<br>- 会计师事务所可以用活动图对任意数目的财务往来进行建模；<br>- 贸易公司可以用活动图对订单批准过程进行建模；<br>- 科研人员还可以对诸如求Fibonacci数列第n个数的数值之类的操作进行建模。<br><br><br><br>## 活动图的要素<br><br>### 活动<br><br>是活动图主要结点,用两边为弧的条形框表示,中间填活动名 。<br><br><div align="center"><img width="40%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_164527.jpg"></div><br>### 活动流（控制流）<br><br>描述活动之间的有向关系，反映一个活动向另外一个活动之间的转移。用带箭头的实线表示。<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_164613.jpg"></div><br>### 分支<br><br>表示从一个活动按照某种条件转移到几个不同的活动。<br><br><div align="center"><img width="60%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_164818.jpg"></div><br>### 分叉和汇合<br><br>表示并发的同步行为，用同步杆表示。分叉表示一个控制流被多个控制流替代，替代后的控制流是并发的。汇合与分叉含义相反。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_164858.jpg"></div><br>### 泳道<br><br>是活动图中的区域划分，每一个泳道代表一个责任区域。一个泳道中包括一组相关活动。<br><br><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_164947.jpg"></div><br>### 对象流<br><br>反映活动与对象之间的依赖关系，表示对象对活动的作用或活动对对象的影响，用依赖关系表示。<br><br><div align="center"><img width="90%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_165504.jpg"></div><br>## 活动图的用途<br><br>活动图具有广泛地用途,在软件建模中,活动图可以用来：<br><br>- 描述工作流：也被称为业务流程，通常对于涉及众多参与者的非常复杂的业务流程建模，简单的业务流程，用例文本就够用了。总之，分析理解用例。<br><br>- 用户下订单后，填写收货信息，选择支付方式，如果用户想要取消订单或订单超过了时限则该订单取消，否则系统处理付款，生成送货单，然后由供应商发货，修改订单项状态，然后等所有的订单项全都送货完毕，这样一笔订单就完成了。<br><br>-<div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_170020.jpg"></div><ul><li>描述算法流程</li></ul><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_170414.jpg"></div><p></p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>绘制一张活动图，描述登录电子邮件系统的细节。</p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_170854.jpg"></div><p></p><h2 id="状态图与活动图的比较"><a href="#状态图与活动图的比较" class="headerlink" title="状态图与活动图的比较"></a>状态图与活动图的比较</h2><ul><li>都是对系统的动态行为建模</li><li>描述对象不同<ul><li>状态图：描述对象状态及状态之间的转移；</li><li>活动图：描述从活动到活动的控制流。</li></ul></li><li>使用场合不同<ul><li>状态图：描述对象在其生命期中的行为状态变化；状态图中的动作和事件对应类模型中对象上的操作。</li><li>活动图：描述工作流程的过程变化。分析用例、理解涉及多个用例的工作流程等。</li></ul></li></ul><h2 id="OOAD"><a href="#OOAD" class="headerlink" title="OOAD"></a>OOAD</h2><h3 id="What-is-Analysis"><a href="#What-is-Analysis" class="headerlink" title="What is Analysis ?"></a>What is Analysis ?</h3><p>Analysis is investigation of the problem and requirements, rather than a solution.</p><ul><li>For example, if a new online trading system is desired,<ul><li>how will it be used? What are its functions?</li></ul></li><li>requirements analysis ：an investigation of the requirements</li></ul><h3 id="What-is-design"><a href="#What-is-design" class="headerlink" title="What is design?"></a>What is design?</h3><p>Design is a conceptual solution that fulfills the requirements 概念性的、满足 需求的解决方案</p><blockquote><p>Design is a conceptual solution that fulfills the requirements。</p></blockquote><h3 id="What-is-OOA"><a href="#What-is-OOA" class="headerlink" title="What is OOA"></a>What is OOA</h3><p>finding and describing the objects or concepts in the problem domain</p><h3 id="What-is-OOD"><a href="#What-is-OOD" class="headerlink" title="What is OOD"></a>What is OOD</h3><p>defining software objects and how they collaborate to fulfill the requirements</p><p>For example, Airplane example of object and class discovery</p><blockquote><p>OOA</p></blockquote><p>in the case of the flight information system, some of the concepts include：Plane, Flight, and Pilot.</p><blockquote><p>OOD</p></blockquote><p>a Plane software object may have a tailNumber attribute and a getFlightHistory() method.</p><h2 id="OOAD-Simple-Example"><a href="#OOAD-Simple-Example" class="headerlink" title="OOAD Simple Example"></a>OOAD Simple Example</h2><h3 id="Rudimentary（最基本的过程）-process"><a href="#Rudimentary（最基本的过程）-process" class="headerlink" title="Rudimentary（最基本的过程） process"></a>Rudimentary（最基本的过程） process</h3><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_172815.jpg"></div><p></p><h3 id="Dice-game-example"><a href="#Dice-game-example" class="headerlink" title="Dice game example"></a>Dice game example</h3><h4 id="Step1-Use-Case"><a href="#Step1-Use-Case" class="headerlink" title="Step1: Use Case"></a>Step1: Use Case</h4><ul><li><p>Player is requested to roll the dice.</p></li><li><p>System presents results:</p></li><li><p>If the dice face value totals (&gt;=)seven, player wins; otherwise, player loses</p></li></ul><h4 id="Step2-Domain-Model"><a href="#Step2-Domain-Model" class="headerlink" title="Step2: Domain Model"></a>Step2: Domain Model</h4><ul><li><p>OOA的结果体现在领域模型中，显示重要的领域概念或者对象</p></li><li><p>What is domain model?</p><ul><li>a visual representation of conceptual classes or real-situation(真实) objects in a domain.</li><li>Domain models have also been called conceptual models , domain object models, and analysis object models.</li></ul></li><li><p>有哪些概念类呢？</p></li></ul><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_173655.jpg"></div><p></p><h4 id="Step3-Interactions"><a href="#Step3-Interactions" class="headerlink" title="Step3: Interactions"></a>Step3: Interactions</h4><ul><li>Assignment of responsibilities among objects</li><li>Sequence or Communication diagrams</li></ul><p>在现实里，是Player扔的骰子。在软件设计中，由DiceGame 对 象 扔 骰 子dice (给Dice 对象发送一个消息)。 软件设计需要从真实世界的事物中获取一些灵感、启发，但是，不能完全模仿真实世界。</p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_173858.jpg"></div><p></p><h4 id="Step4-Design-Class-Diagrams-DCD"><a href="#Step4-Design-Class-Diagrams-DCD" class="headerlink" title="Step4: Design Class Diagrams (DCD)"></a>Step4: Design Class Diagrams (DCD)</h4><ul><li>Software classes（软件类） with methods according to responsibilities and attributes according to visibility</li></ul><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_174011.jpg"></div><p></p><ul><li><p>the domain model showing real-world classes</p></li><li><p>this diagram shows software classes</p></li></ul><h2 id="Object-Oriented-Analysis"><a href="#Object-Oriented-Analysis" class="headerlink" title="Object Oriented Analysis"></a>Object Oriented Analysis</h2><ul><li><p>Identifying objects 识别对象</p></li><li><p>Organising the objects: 组织对象</p><ul><li>classifying the objects identified, so similar objects can later be defined in the same class.</li></ul></li><li><p>Identifying relationships between objects: 定义对象之间的关系</p><ul><li>this helps to determine inputs and outputs of an object.</li></ul></li><li><p>Defining operations of the objects: 定义对象的操作</p><ul><li><p>the way of processing data within an object.</p></li><li><p>Also known as ‘responsibility assignment’</p></li><li><p>这一步，主要在设计阶段完成</p></li></ul></li><li><p>Defining objects internally: 定义对象内部细节</p><ul><li>information held within the objects.</li></ul></li></ul><h2 id="名词法定义概念"><a href="#名词法定义概念" class="headerlink" title="名词法定义概念"></a>名词法定义概念</h2><h3 id="名词法定义概念类"><a href="#名词法定义概念类" class="headerlink" title="名词法定义概念类"></a>名词法定义概念类</h3><p>The system controls a recycling machine for returnable bottles, cans and crates. The machine can be used by several customers at the same time and each customer can return all three types of item on the same occasion. The system has to check, for each item, what type has been returned.</p><p>The system will register how many items each customer returns and when the customer asks for a receipt, the system will print out what was deposited , the value of the returned items and the total return sum that will be paid to the customer.</p><ul><li>recycling machine</li><li>bottles, cans, and crates</li><li>machine</li><li>customers, customer</li><li>types of item, item, type, returned items</li><li>system</li><li>receipt(收据)</li><li>return sum</li></ul><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_225907.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_225931.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_225948.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230007.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230025.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230045.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230103.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230121.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230137.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230155.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230224.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230506.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230524.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230540.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230604.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230622.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230647.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230707.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_230725.jpg"></div><p></p><h2 id="分析模型法"><a href="#分析模型法" class="headerlink" title="分析模型法"></a>分析模型法</h2><ul><li><p>用于描述系统规格说明</p></li><li><p>一个健壮、稳定的模型，必须与实现环境无关</p></li><li><p>实现环境的任何变化，不会影响到系统的逻辑结构</p></li><li><p>分析模型能够关注到系统的信息、行为、展示（输入/出）等特性</p><p>特性：Behaviour - Information - Presentation</p></li></ul><p>The model is defined in information - behaviour - presentationspace.</p><h2 id="分析模型的语义"><a href="#分析模型的语义" class="headerlink" title="分析模型的语义"></a>分析模型的语义</h2><ul><li><p>An entity object models information that shows the state of a system. This information is often used to record the effects of operations and therefore is related to the behaviors of the system.</p></li><li><p>A boundary/interface object models inputs and outputs and operations that process them.</p></li><li><p>A control object models functionality/operations regarding to validate and decide whether to process and pass information from the interface object to the entity object or the way around.</p></li></ul><h2 id="分析模型的使用"><a href="#分析模型的使用" class="headerlink" title="分析模型的使用"></a>分析模型的使用</h2><h3 id="Identifying-interface-objects"><a href="#Identifying-interface-objects" class="headerlink" title="Identifying interface objects"></a>Identifying interface objects</h3><ul><li>functions directly related to actors</li></ul><h3 id="Identifying-entity-objects"><a href="#Identifying-entity-objects" class="headerlink" title="Identifying entity objects"></a>Identifying entity objects</h3><ul><li>information used in an use case and functions of processing the information</li></ul><h3 id="Identifying-control-objects"><a href="#Identifying-control-objects" class="headerlink" title="Identifying control objects"></a>Identifying control objects</h3><ul><li>functions that link interface objects and entity objects</li></ul><h2 id="1-4-分析模型案例：废品回收机"><a href="#1-4-分析模型案例：废品回收机" class="headerlink" title="1.4 分析模型案例：废品回收机"></a>1.4 分析模型案例：废品回收机</h2><ul><li>Identifying interface objects：Printer Customer Panel</li><li><p>Identifying entity objects</p><ul><li>Crate, Bottle, Can</li><li>Deposit item</li><li>Receipt basis</li></ul></li><li><p>Identifying control objects</p><ul><li>Deposit item receiver</li></ul></li></ul><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_232231.jpg"></div><p></p><h2 id="CRC"><a href="#CRC" class="headerlink" title="CRC"></a>CRC</h2><ul><li><p>Classes (of objects) 类</p></li><li><p>Responsibilities (of the objects in each class) 职责</p></li><li><p>Collaborations (with objects in other classes) 协作</p><ul><li>In UML, these will be examples of “associations”</li></ul></li></ul><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_232438.jpg"></div><p></p><h2 id="Domain-Models"><a href="#Domain-Models" class="headerlink" title="Domain Models"></a>Domain Models</h2><p>A domain model is a representation of real-world conceptual classes</p><ul><li><p>not a representation of software components.</p></li><li><p>not a set of diagrams describing software classes,</p></li><li><p>not software objects with responsibilities.</p></li></ul><p>A domain model is a visual representation of conceptual classes or real-world objects in a domain of interest</p><ul><li>They have also been called conceptual models, domain object models, and analysis object models.</li></ul><h2 id="Domain-Modeling-Guidelines"><a href="#Domain-Modeling-Guidelines" class="headerlink" title="Domain Modeling Guidelines"></a>Domain Modeling Guidelines</h2><ul><li><p>A Common Mistake in Identifying Conceptual Classes</p><ul><li>Perhaps the most common mistake when creating a domain model is to represent something as an attribute when it should have been a concept.</li><li>A rule of thumb (经验法则)to help prevent this mistake is:<ul><li>If we do not think of some conceptual class X as a number or text in the real world, X is probably a conceptual class, not an attribute.</li></ul></li></ul></li><li><p>As an example, should store be an attribute of Sale, or a separate conceptual class Store?</p><ul><li>In the real world, a store is not considered a number or text - the term suggests a legal entity, an organization, and something occupies space. Therefore, Store should be a concept.</li></ul></li><li>As another example, consider the domain of airline reservations. Should destination be an attribute of Flight, or a separate conceptual class Airport?<ul><li>In the real world, a destination airport is not considered a number or text—it is a massive thing that occupies space. Therefore, Airport should be a concept.</li></ul></li></ul><h2 id="What-are-System-Sequence-Diagrams"><a href="#What-are-System-Sequence-Diagrams" class="headerlink" title="What are System Sequence Diagrams?"></a>What are System Sequence Diagrams?</h2><ul><li><p>A system sequence diagram (SSD) is a picture that shows, for a particular scenario of a use case, the events that external actors generate, their order and inter-system （与系统交互）events</p></li><li><p>All systems are treated as a black box; the emphasis of the diagram is events that cross the system boundary from actors to systems</p></li></ul><h3 id="Guideline"><a href="#Guideline" class="headerlink" title="Guideline"></a>Guideline</h3><ul><li><p>Draw an SSD for a main success scenario of each use case, and frequent or complex.</p></li><li><p>alternative scenarios</p></li></ul><h3 id="The-Relationship-between-SSDs-and-Use-Cases"><a href="#The-Relationship-between-SSDs-and-Use-Cases" class="headerlink" title="The Relationship between SSDs and Use Cases?"></a>The Relationship between SSDs and Use Cases?</h3><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_234200.jpg"></div><p></p><h2 id="Why-draw-SSD"><a href="#Why-draw-SSD" class="headerlink" title="Why draw SSD?"></a>Why draw SSD?</h2><ul><li>Basically, a software system reacts to three things:<ul><li>external events from actors (humans or computers),</li><li>timer events,</li><li>faults or exceptions (which are often from external sources).</li></ul></li><li><p>It is useful to know what, precisely, are the external input events— the system events. They are an important part of analyzing system behavior</p></li><li><p>Before proceeding to a detailed design of how a software application will work, it is useful to investigate and define its behavior as a “black box.“</p></li><li><p>System behavior is a description of what a system does, without explaining how it does it.</p><ul><li>One part of that description is a system sequence diagram(SSD)</li><li>Other parts include the use cases and system operation contracts</li></ul></li></ul><h2 id="What-is-Contract-契约"><a href="#What-is-Contract-契约" class="headerlink" title="What is Contract?(契约)"></a>What is Contract?(契约)</h2><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_234758.jpg"></div><p></p><h2 id="Example-enterItem"><a href="#Example-enterItem" class="headerlink" title="Example : enterItem"></a>Example : enterItem</h2><ul><li><p>Operation: enterItem(itemID:ItemID,quantity:integer)</p></li><li><p>Cross References: Process Sale</p></li><li><p>Preconditions: There is a sale underway</p></li><li>Postconditions:<ul><li>A SalesLineItem instance sli was created(instance creation)</li><li>sli was associated with current Sale(association formed)</li><li>sli.quantity became quantity(attribute modification)</li><li>Sli was associated with a ProductDescription, based on itemID match (association formed)</li></ul></li></ul><h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-02_235316.jpg"></div><p></p><ul><li><p>可以做到关注分离（separation of concerns），减少耦合和依赖性，增强内聚性</p></li><li><p>封装和分解了相关的复杂性</p></li><li><p>某些层可以被替换（例如UI层）</p></li><li><p>较低层可以被复用</p></li><li><p>通过逻辑划分，有助于团队开发</p></li></ul><h2 id="Designing-Objects-对象设计"><a href="#Designing-Objects-对象设计" class="headerlink" title="Designing Objects(对象设计)"></a>Designing Objects(对象设计)</h2><ul><li><p>Static modeling (Design Class Diagram, Package)</p></li><li><p>Dynamic modeling (Sequence and Communication Diagram)</p><ul><li>Principles of responsibility assignment</li><li>Design Pattern</li></ul></li></ul><h2 id="GRASP"><a href="#GRASP" class="headerlink" title="GRASP"></a>GRASP</h2><p>General Responsibility Assignment software patterns.</p><ul><li><p>Doing responsibilities of an object include:</p><ul><li>doing something itself, such as creating an object or doing a calculation</li><li>initiating action in other objects</li><li>controlling and coordinating activities in other objects</li></ul></li><li><p>Knowing responsibilities of an object include:</p><ul><li>knowing about private encapsulated data</li><li>knowing about related objects</li><li>knowing about things it can derive or calculate</li></ul></li></ul><p>For example</p><ul><li><p>“a Sale is responsible for creating SalesLineItems” (a doing),</p></li><li><p>“a Sale is responsible for knowing its total” (a knowing).</p></li></ul><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-03_000514.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-03_000546.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-03_000608.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-03_000654.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-03_000806.jpg"></div><p></p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-03_000830.jpg"></div><p></p><h2 id="GRASP-1"><a href="#GRASP-1" class="headerlink" title="GRASP"></a>GRASP</h2><h3 id="GRASP-Creator"><a href="#GRASP-Creator" class="headerlink" title="GRASP  - Creator"></a>GRASP - Creator</h3><h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem:"></a>Problem:</h4><p>Who creates an A?</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Assign class B the responsibility to create an instance of class A if one of these is true (the more the better):</p><ul><li>B “contains” or compositely aggregates A.</li><li>B records A.</li><li>B closely uses A.</li><li>B has the initializing data for A.</li></ul><h3 id="GRASP-Information-Expert"><a href="#GRASP-Information-Expert" class="headerlink" title="GRASP  - Information Expert"></a>GRASP - Information Expert</h3><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem:"></a>Problem:</h3><p>What is a basic principle by which to assign responsibilities to objects?</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Assign a responsibility to the class that has the information needed to fulfill it.</p><p></p><div align="center"><img width="80%" src="//isjinhao.github.io/2019/UML基础/2019-07-03_001025.jpg"></div><p></p><h3 id="GRASP-Low-Coupling"><a href="#GRASP-Low-Coupling" class="headerlink" title="GRASP  - Low Coupling"></a>GRASP - Low Coupling</h3><h4 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem:"></a>Problem:</h4><p>How to reduce the impact of change?</p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ul><li><p>Assign responsibilities so that (unnecessary) coupling remains low.</p></li><li><p>Use this principle to evaluate alternatives.</p></li></ul><h4 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h4><ul><li><p>What is Coupling ？</p></li><li><p>面向对象语言中，TypeX到TypeY耦合的常见形式？</p></li></ul><h3 id="GRASP-Controller"><a href="#GRASP-Controller" class="headerlink" title="GRASP  - Controller"></a>GRASP - Controller</h3><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem:"></a>Problem:</h3><p>What first object beyond the UI layer receives and coordinates (“controls”) a system operation?</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>Assign the responsibility to an object representing one of these choices:</p><ul><li>Represents the overall “system,” a “root object,” a device that the software is running within, or a major subsystem (these are all variations of a facade controller). 外观控制器</li><li>Represents a use case scenario within which the system operation occurs (a use case or session controller)，<usecasename>Handler. 会话控制器</usecasename></li></ul><h3 id="GRASP-High-Cohesion"><a href="#GRASP-High-Cohesion" class="headerlink" title="GRASP  - High Cohesion"></a>GRASP - High Cohesion</h3><h4 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem:"></a>Problem:</h4><p>How to keep objects focused, understandable, and manageable, and as a side effect, support Low Coupling?</p><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><p>Assign responsibilities so that cohesion remains high.</p><p>Use this to evaluate alternatives.</p><h2 id="OO设计的原则"><a href="#OO设计的原则" class="headerlink" title="OO设计的原则"></a>OO设计的原则</h2><ul><li><p>开闭原则(Open/Closed Principle, OCP)</p></li><li><p>Liskov替换原则(Liskov Substitution Principle, LSP)</p></li><li><p>依赖倒置原则(Dependency Inversion Principle, DSP)</p></li><li><p>接口分离原则(Interface Segregation Principle, ISP)</p></li></ul><h2 id="GoF设计模式的分类"><a href="#GoF设计模式的分类" class="headerlink" title="GoF设计模式的分类"></a>GoF设计模式的分类</h2><p>创建型：抽象了创建对象的过程，使得系统不依赖于系统中的对象是如何创建、组合和表示的。例如：Factory method, Singleton.</p><p>结构型：描述如何组合类和对象。例如：Adapter，Façade</p><p>行为型：描述算法和对象间职责的分配。主要考虑对象之间的通信方式。例如：Iterator, Visitor</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;object&quot;&gt;&lt;a href=&quot;#object&quot; class=&quot;headerlink&quot; title=&quot;object&quot;&gt;&lt;/a&gt;obj
      
    
    </summary>
    
      <category term="UML" scheme="https://isjinhao.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://isjinhao.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="https://isjinhao.github.io/2019/springboot/"/>
    <id>https://isjinhao.github.io/2019/springboot/</id>
    <published>2019-06-26T00:58:46.000Z</published>
    <updated>2019-07-02T16:24:46.083Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
      <category term="springboot" scheme="https://isjinhao.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://isjinhao.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>04-单表DQL</title>
    <link href="https://isjinhao.github.io/2019/04-%E5%8D%95%E8%A1%A8DQL/"/>
    <id>https://isjinhao.github.io/2019/04-单表DQL/</id>
    <published>2019-06-20T02:11:56.778Z</published>
    <updated>2019-02-07T01:16:44.415Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">pname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">price <span class="keyword">double</span>,</span><br><span class="line">category_id <span class="built_in">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'联想'</span>,<span class="number">5000</span>,<span class="string">'c001'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'海尔'</span>,<span class="number">3000</span>,<span class="string">'c001'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'雷神'</span>,<span class="number">5000</span>,<span class="string">'c001'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">'JACK JONES'</span>,<span class="number">800</span>,<span class="string">'c002'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">'真维斯'</span>,<span class="number">200</span>,<span class="string">'c002'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">'花花公子'</span>,<span class="number">440</span>,<span class="string">'c002'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">'劲霸'</span>,<span class="number">2000</span>,<span class="string">'c002'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">'香奈儿'</span>,<span class="number">800</span>,<span class="string">'c003'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="string">'相宜本草'</span>,<span class="number">200</span>,<span class="string">'c003'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="string">'面霸'</span>,<span class="number">5</span>,<span class="string">'c003'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="string">'好想你枣'</span>,<span class="number">56</span>,<span class="string">'c004'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">12</span>,<span class="string">'香飘飘奶茶'</span>,<span class="number">1</span>,<span class="string">'c005'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="string">'果9'</span>,<span class="number">1</span>,<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><ul><li>查询表的所有字段信息：<code>select * from 表名;</code></li><li>查询表中某字段信息：<code>select 字段1, 字段2 from 表名;</code></li><li>去掉重复值：<code>select distinct 字段1, 字段2, ... from 表名;</code><ul><li>若有多个字段则所有字段相等才被算为重复值。</li></ul></li><li>查询结果是表达式（运算查询）：将商品的价格+10元进行显示，<code>select pname,price+10 from product;</code></li><li>别名查询，使用的关键字是as（as可以省略的）：<ul><li>表别名：<code>select * from product as p;</code></li><li>列别名：<code>select pname as pn from product;</code></li></ul></li></ul><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">&gt; &lt; &lt;= &gt;= = &lt;&gt;!=</td><td style="text-align:center">大于、小于、大于(小于)等于、不等于</td></tr><tr><td style="text-align:center">BETWEEN …AND…</td><td style="text-align:center">显示在某一区间的值(含头含尾)(也可以是日期)</td></tr><tr><td style="text-align:center">IN(set)</td><td style="text-align:center">显示在in列表中的值，例：<code>in(100,200)</code></td></tr><tr><td style="text-align:center">LIKE ‘张%’</td><td style="text-align:center">%代表零个或多个任意字符，_代表一个字符。例如：<code>first_name like ‘_a%’</code></td></tr><tr><td style="text-align:center">IS NULL / IS NOT NULL</td><td style="text-align:center">判断为空/不为空</td></tr><tr><td style="text-align:center">and</td><td style="text-align:center">多个条件同时成立</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">多个条件任一成立</td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">不成立，例：<code>where not(salary&gt;100);</code></td></tr></tbody></table><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><ul><li>查询商品名称为“花花公子”的商品所有信息：<code>SELECT * FROM product WHERE pname = &#39;花花公子&#39;</code></li><li>查询价格为800商品：<code>SELECT * FROM product WHERE price = 800</code></li><li>查询价格不是800的所有商品：<ul><li><code>SELECT * FROM product WHERE price != 800</code></li><li><code>SELECT * FROM product WHERE price &lt;&gt; 800</code></li><li><code>SELECT * FROM product WHERE NOT(price = 800)</code></li></ul></li><li>查询商品价格大于60元的所有商品信息：<code>SELECT * FROM product WHERE price &gt; 60;</code></li><li>查询商品价格在200到1000之间所有商品：<ul><li><code>SELECT * FROM product WHERE price &gt;= 200 AND price &lt;=1000;</code></li><li><code>SELECT * FROM product WHERE price BETWEEN 200 AND 1000;</code></li></ul></li><li>查询商品价格是200或800的所有商品：<ul><li><code>SELECT * FROM product WHERE price = 200 OR price = 800;</code></li><li><code>SELECT * FROM product WHERE price IN (200,800);</code></li></ul></li><li>查询含有’霸’字的所有商品：<code>SELECT * FROM product WHERE pname LIKE &#39;%霸%&#39;;</code></li><li>查询以’香’开头的所有商品：<code>SELECT * FROM product WHERE pname LIKE &#39;香%&#39;;</code></li><li>查询第二个字为’想’的所有商品：<code>SELECT * FROM product WHERE pname LIKE &#39;_想%&#39;;</code></li><li>查询没有分类的商品：<code>SELECT * FROM product WHERE category_id IS NULL;</code></li><li>查询有分类的商品：<code>SELECT * FROM prod quct WHERE category_id IS NOT NULL</code></li><li>查询所有价格大于2000的电脑商品或者价格大于1000的服装商品：<code>SELECT * FROM product WHERE (price &gt; 2000 AND category_id=&#39;c001&#39;) OR (price &gt;1000 AND category_id=&#39;c002&#39;);</code></li></ul><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><h3 id="SELECT-FROM-表名-ORDER-BY-排序字段-ASC-DESC"><a href="#SELECT-FROM-表名-ORDER-BY-排序字段-ASC-DESC" class="headerlink" title="SELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;"></a><code>SELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;</code></h3><ul><li>ASC： 升序 (默认)</li><li>DESC：降序</li></ul><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><ul><li>查询所有商品信息，使用价格排序(降序)：<br><code>SELECT * FROM product ORDER BY price DESC;</code></li><li>在价格排序(降序)的基础上，以分类排序(降序)：<br><code>SELECT * FROM product ORDER BY price DESC, category_id DESC;</code></li><li>显示商品的价格(去重复)，并排序(降序)：<br><code>SELECT DISTINCT price FROM product ORDER BY price DESC;</code></li></ul><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul><li>SELECT不仅可以作用于字段，还可以作用于聚合函数。<ul><li>count(…)：统计指定列不为NULL的记录行数；</li><li>sum(…)：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</li><li>max(…)：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</li><li>min(…)：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</li><li>avg(…)：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</li></ul></li><li>例：<ul><li>查询商品的总条数：<code>SELECT COUNT(*) FROM product;</code></li><li>查询价格大于200的商品总条数：<code>SELECT COUNT(*) FROM product WHERE price &gt; 200;</code></li><li>查询分类为’c001’的商品价格总和：<br><code>SELECT SUM(price) FROM product WHERE category_id = &#39;c001&#39;;</code></li><li>查询分类为’c002’商品的平均价格：<br><code>SELECT AVG(price) FROM product WHERE category_id = &#39;c002&#39;;</code></li><li>查询商品的最大价格和最小价格：<code>SELECT MAX(price),MIN(price) FROM product;</code></li></ul></li></ul><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul><li>分组查询是指使用group by字句对查询信息进行分组。<br>​ <code>SELECT 字段1, 字段2… FROM 表名 GROUP BY 分组字段 HAVING 分组条件;</code></li><li>HAVING：<br>分组操作中的having子语句，是用于在分组后对数据进行过滤的，作用类似于where条件。与where的区别:<ul><li>having是在分组后对数据进行过滤。where是在分组前对数据进行过滤。</li><li>having后面可以使用聚合函数过滤数据。where后面不可以使用聚合函数。</li></ul></li><li>例：<ul><li>统计各个分类商品的个数：<br><code>SELECT category_id ,COUNT(*) FROM product GROUP BY category_id;</code></li><li>统计各个分类商品的个数,且只显示个数大于1的信息：<br><code>SELECT category_id, COUNT(*) FROM product GROUP BY category_id HAVING COUNT(*) &gt; 1;</code></li></ul></li></ul><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>由于数据量很大，显示屏长度有限，因此对数据需要采取分页显示方式。例如数据共有30条，每页显示5条。</p><ul><li>格式：<br><code>SELECT 字段1，字段2... FROM 表明 LIMIT M, N;</code><ul><li>M: 整数，表示从第几条索引开始，计算方式 （当前页-1）*每页显示条数</li><li>N: 整数，表示查询多少条数据</li></ul></li><li>例：<ul><li><code>SELECT 字段1，字段2... FROM 表明 LIMIT 0,5;</code></li><li><code>SELECT 字段1，字段2... FROM 表明 LIMIT 5,5;</code></li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;数据准备&quot;&gt;&lt;a href=&quot;#数据准备&quot; class=&quot;headerlink&quot; title=&quot;数据准备&quot;&gt;&lt;/a&gt;数据准备&lt;/h2&gt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://isjinhao.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://isjinhao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://isjinhao.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>03-DDL与DML</title>
    <link href="https://isjinhao.github.io/2019/03-DDL%E4%B8%8EDML/"/>
    <id>https://isjinhao.github.io/2019/03-DDL与DML/</id>
    <published>2019-06-20T02:11:56.772Z</published>
    <updated>2019-03-02T12:14:56.076Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li><code>create database 数据库名;</code><ul><li>例：<code>CREATE DATABASE db1;</code></li></ul></li><li><code>create database 数据库名 charset 字符集;</code><ul><li>例：<code>CREATE DATABASE db2 CHARSET utf8;</code><br><div align="center"><img src="//isjinhao.github.io/2019/03-DDL与DML/创建数据库.jpg"><div></div></div></li></ul></li></ul><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul><li><code>drop database 数据库名</code></li></ul><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><p></p><div align="center"><img src="//isjinhao.github.io/2019/03-DDL与DML/使用数据库.jpg"><div></div></div><p></p><h3 id="查看数据库的定义信息"><a href="#查看数据库的定义信息" class="headerlink" title="查看数据库的定义信息"></a>查看数据库的定义信息</h3><ul><li><code>show create database 数据库名;</code><br><div align="center"><img src="//isjinhao.github.io/2019/03-DDL与DML/查看数据库定义信息.png"><div></div></div></li></ul><h2 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &lt;表名&gt;(</span><br><span class="line">字段名<span class="number">1</span> 类型(长度) [列级完整性约束条件], </span><br><span class="line"> 字段名<span class="number">2</span> 类型(长度) [列级完整性约束条件],</span><br><span class="line"> ...</span><br><span class="line"> 字段名n 类型(长度) [列级完整性约束条件]</span><br><span class="line">    [,&lt;表级完整性约束条件&gt;]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>先不涉及约束条件，后面会有详细分析。<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> (</span><br><span class="line">    cid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, <span class="comment">#分类ID </span></span><br><span class="line">    cname <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="comment">#分类名称</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p></p><h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><ul><li>查看数据库中的所有表：<code>SHOW TABLES;</code></li><li>查看表结构：<code>DESC 表名;</code><br><div align="center"><img src="//isjinhao.github.io/2019/03-DDL与DML/表结构.jpg"><div></div></div></li></ul><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><ul><li><code>drop table 表名</code></li></ul><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><ul><li><code>rename table 表名 to 新表名;</code></li></ul><h2 id="增改删"><a href="#增改删" class="headerlink" title="增改删"></a>增改删</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul><li>向表中插入某些字段：<code>insert into 表 (字段1,字段2,字段3..) values (值1,值2,值3..);</code></li><li>向表中插入所有字段，字段的顺序为创建表时的顺序：<code>insert into 表 values (值1,值2,值3..);</code><br>注意：</li><li>值与字段必须对应，个数相同，类型相同</li><li>值的数据大小必须在字段的长度范围内</li><li>除了数值类型外，其它的字段类型的值必须使用引号引起。（建议单引号）</li><li>如果要插入空值，可以不写字段，或者插入 null。</li></ul><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><ul><li>更新所有记录的指定字段：<code>update 表名 set 字段名=值, 字段名=值, ...;</code></li><li>更新符号条件记录的指定字段：<code>update 表名 set 字段名=值, 字段名=值, ... where 条件;</code><br>注意：</li><li>列名的类型与修改的值要一致</li><li>修改值得时候不能超过最大长度</li><li>除了数值类型外，其它的字段类型的值必须使用引号引起</li></ul><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ul><li>删除所有数据：<code>delete from 表名;</code>或者<code>truncate table 表名;</code><ul><li>delete 一条一条删除，不清空auto_increment记录数。</li><li>truncate 直接将表删除，重新建表，auto_increment将置为零，从新开始。</li></ul></li><li>删除某些数据：<code>delete from 表名 where 条件</code></li></ul><h2 id="操作表结构"><a href="#操作表结构" class="headerlink" title="操作表结构"></a>操作表结构</h2><ul><li>添加列：<code>alter table 表名 add 列名 类型(长度) [约束];</code><ul><li><code>ALTER TABLE category ADD cdesc VARCHAR(20);</code></li></ul></li><li>删除列：<code>alter table 表名 drop 列名;</code><ul><li><code>ALTER TABLE category DROP cdesc;</code></li></ul></li><li>修改列名：<code>alter table 表名 change 旧列名 新列名 类型(长度) 约束;</code><ul><li><code>ALTER TABLE category CHANGE cdesc description VARCHAR(30);</code></li></ul></li><li>修改列的类型长度及约束：<code>alter table 表名 modify 列名 类型(长度) 约束;</code><ul><li><code>ALTER TABLE category MODIFY cdesc VARCHAR(50) NOT NULL;</code></li></ul></li><li>修改表的字符集：<code>alter table 表名 character set 字符集;</code><ul><li><code>ALTER TABLE category CHARACTER SET gbk;</code></li></ul></li></ul><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><p>指数据库中存储的数据是有意义的或正确的。</p><h3 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h3><p>若属性A是基本关系R的主属性，则属性A不能取空值。</p><h3 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h3><p>若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码相对应，则对于R中每个元组在F上的值必须为：</p><ul><li>或者取空值（S的每个属性值均为空值）。</li><li>或者等于S中某个元组的主码值。<br><code>EMP(E#, ESEX, D#) -参照关系； DEPT(D# ,DNAME,LOCATION) -被参照关系</code></li></ul><h3 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h3><p>针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求。</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><ul><li>唯一标识一条记录的属性值。<ul><li>主键必须是唯一的值。</li><li>主键列不能是 NULL 值。</li><li>每个表都应该有且只能有一个主键。</li></ul></li><li><p>添加主键约束。</p><ul><li><p>方式一：创建表时，在字段描述处，声明指定字段为主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">    Id_P <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>方式二：创建表时，在表级约束区域，声明指定字段为主键</p><ul><li>格式：<code>[constraint 名称] primary key (字段列表)</code></li><li>关键字constraint可以省略，如果需要为主键命名，constraint不能省略。</li><li>字段列表需要使用小括号括住，如果有多字段需要使用逗号分隔。这时多个字段联合构成主键。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> pk_PersonID] PRIMARY <span class="keyword">KEY</span> (FirstName,LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方式三：创建表之后，通过修改表结构，声明指定字段为主键</p><ul><li><code>ALTER TABLE Persons ADD [CONSTRAINT 名称] PRIMARY KEY (字段列表)</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (FirstName);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>撤销主键约束：</p><ul><li><code>ALTER TABLE Persons DROP PRIMARY KEY</code></li></ul></li></ul><h3 id="自动增长列"><a href="#自动增长列" class="headerlink" title="自动增长列"></a>自动增长列</h3><ul><li>设置某列的值自动增长。<ul><li>使用 auto_increment（自动增长列）关键字。</li><li>自动增长列类型必须是整形。</li><li>自动增长列必须为键(一般是主键)。</li></ul></li><li><p>添加自动增长：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">    P_Id <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>添加数据时，可以不设置值，也可以设置成null，数据库将自动维护主键值：</p><ul><li><code>INSERT INTO Persons (FirstName,LastName) VALUES (&#39;Bill&#39;,&#39;Gates&#39;)</code>;</li><li><code>INSERT INTO Persons (P_Id,FirstName,LastName) VALUES (NULL,&#39;Bill&#39;,&#39;Gates&#39;)</code>;</li></ul></li><li><p>修改起始值</p><ul><li><code>ALTER TABLE Persons AUTO_INCREMENT=100;</code></li></ul></li></ul><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>约束不接受NULL值，意味着如果不向字段添加值，就无法插入新记录或者更新记录。</p><ul><li><p>添加方式</p><ul><li><p>方式一：创建表，下面的 SQL 语句强制 “Id_P” 列和 “LastName” 列不接受 NULL 值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">    Id_P <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>方式二：修改表结构<br><code>ALTER TABLE student MODIFY LastName varchar(255) NOT NULL</code></p></li></ul></li><li><p>删除非空约束</p><ul><li><code>ALTER TABLE student MODIFY LastName varchar(255);</code></li></ul></li></ul><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>UNIQUE约束唯一标识数据库表中的每条记录。PRIMARY KEY拥有自动定义的UNIQUE约束。每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p><ul><li><p>添加唯一约束</p><ul><li><p>方式1：创建表时，在字段描述处，声明唯一</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">    Id_P <span class="built_in">int</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>方式2：创建表时，在约束区域，声明唯一</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">    Id_P <span class="built_in">int</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> 名称 <span class="keyword">UNIQUE</span> (Id_P)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>方式3：创建表后，修改表结构，声明字段唯一<br><code>ALTER TABLE Persons ADD [CONSTRAINT 名称] UNIQUE (Id_P);</code></p></li></ul></li><li>删除唯一约束<ul><li><code>ALTER TABLE Persons DROP INDEX 约束名称</code></li><li>如果添加唯一约束时，没有设置约束名称，默认是当前字段的字段名。</li></ul></li></ul><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p>在添加数据中，如果该字段不指定值，采用默认值处理。</p><ul><li><p>添加方式</p><ul><li><p>方式一： 创建表，字段处声明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">    Id_P <span class="built_in">int</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">'北京'</span>,</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>方式二： 修改表结构<br><code>ALTER TABLE Persons MODIFY Address VARCHAR(255) DEFAULT &#39;北京&#39;;</code></p></li></ul></li><li>删除方式<br><code>ALTER TABLE Persons MODIFY Address VARCHAR(255);</code></li></ul><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>参照关系对应的表是从表。被参照关系对应的表是主表。</p><ul><li><p>声明外键约束</p><ul><li><p>创建表时添加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons(</span><br><span class="line">    Id_P int,</span><br><span class="line">    LastName varchar(255) NOT NULL,</span><br><span class="line">    FirstName varchar(255),</span><br><span class="line">    Address varchar(255) DEFAULT &apos;北京&apos;,</span><br><span class="line">    City varchar(255),</span><br><span class="line">    [CONSTRAINT FK_DEPTNO] FOREIGN KEY (Address) REFERENCES CITY(Address)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改表结构<br><code>alter table 从表 add [constraint 名称] foreign key (外键字段) references 主表 (主表主键);</code></p></li></ul></li><li><p>删除外键</p><ul><li><code>alter table 从表 drop foreign key 外键名称;</code></li></ul></li></ul><h2 id="备份-amp-恢复"><a href="#备份-amp-恢复" class="headerlink" title="备份 &amp; 恢复"></a>备份 &amp; 恢复</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p></p><div align="center"><img src="//isjinhao.github.io/2019/03-DDL与DML/转储1.jpg"><div></div></div><p></p><p></p><div align="center"><img src="//isjinhao.github.io/2019/03-DDL与DML/转储2.jpg"><div></div></div><p></p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p></p><div align="center"><img src="//isjinhao.github.io/2019/03-DDL与DML/恢复1.jpg">&gt;<div></div></div><p></p><p></p><div align="center"><img src="//isjinhao.github.io/2019/03-DDL与DML/恢复2.jpg"><div></div></div><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:28 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;操作数据库&quot;&gt;&lt;a href=&quot;#操作数据库&quot; class=&quot;headerlink&quot; title=&quot;操作数据库&quot;&gt;&lt;/a&gt;操作数据库&lt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://isjinhao.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://isjinhao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://isjinhao.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>02-进程的描述与控制</title>
    <link href="https://isjinhao.github.io/2019/02-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/"/>
    <id>https://isjinhao.github.io/2019/02-进程的描述与控制/</id>
    <published>2019-06-20T02:11:56.770Z</published>
    <updated>2019-03-11T12:20:34.208Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --><h2 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h2><h3 id="前趋图"><a href="#前趋图" class="headerlink" title="前趋图"></a>前趋图</h3><p>数据结构中的有向无环图。箭头表示进程之间执行的先后关系。结点表示一个程序或一个进程，甚至一条语句。</p><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/前趋图.jpg"></div><h3 id="程序的并发执行"><a href="#程序的并发执行" class="headerlink" title="程序的并发执行"></a>程序的并发执行</h3><p>不存在前趋关系的程序之间才有可能并发执行。特征：</p><ul><li>间断性：程序在并发执行时，由于它们共享系统资源，以及为完成同一项任务而相互合作，致使在这些并发执行的程序之间形成了相互制约的关系，进而导致并发程序具有“执行-暂停-执行”这种间断性的活动规律。</li><li>失去封闭性：由于资源共享，所以当某程序的运行影响资源的状态时，其他程序的运行环境就会被破坏。</li><li>不可再现性：计算结果与并发程序各自执行速度有关。即同一程序，使用相同输入、在相同环境下运行，却可能获得完全不同的结果。</li></ul><h3 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h3><p>在多道程序环境下，程序的执行属于并发执行，此时他们将失去其封闭性，并具有间断性，以及运行结果的不可再现性。由此，决定了通常的程序是不能参与并发执行的。为了能使程序并发执行，引入了进程。</p><ul><li>进程实体：程序+数据+进程控制块（Process Control Block，PCB）。</li><li>进程：运行态的进程实体是就是进程，是系统进行资源分配和调度的一个独立单位。<br>PCB是为了使程序能并发执行而诞生的一种数据结构，它用来控制和管理进程。由于数据和程序本来就存在，所以创建/撤销进程也就是创建/撤销PCB。至于如何并发执行，见下面的<a href="#jump">进程同步</a>。<br>区别于作业：进程是程序在数据集上的一次作执行，作业是用户提交给系统的一个任务，包含一个或多个进程。</li></ul><h3 id="进程的特点"><a href="#进程的特点" class="headerlink" title="进程的特点"></a>进程的特点</h3><ul><li>动态性：由创建而产生，由调度而执行，由撤销而消亡。</li><li>并发性：进程的重要特征，操作系统的重要特征。</li><li>独立性：独立运行、独立分配资源、独立接受调度。</li><li>异步性：按各自独立、不可预知的速度向前推进。</li></ul><h2 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h2><h3 id="PCB中保存的信息"><a href="#PCB中保存的信息" class="headerlink" title="PCB中保存的信息"></a>PCB中保存的信息</h3><ul><li>进程标识符。用于唯一的标识某个进程。<ul><li>外部标识符：不仅可以标识进程，还指明其父进程、子进程以及拥有该进程的用户。</li><li>内部标识符：方便系统使用进程，仅能标识进程。</li></ul></li><li>处理机状态。用于在进程切换时保存处理机中各个寄存器的内容。以便在该进程重新调度时能再从断点执行。</li><li>进程调度信息。<ul><li>进程状态：指明进程的状态，方便进程调度和对换时的依据。</li><li>进程优先级：进程优先级高的更容易获得处理机。</li><li>进程调度所需信息：保存的内容和进程调度算法有关，如进程等待了多久CPU，使用了多长CPU。</li><li>事件：进程因何由执行状态转变为阻塞状态，即阻塞原因。</li></ul></li><li>进程控制信息。<ul><li>程序和数据的地址。</li><li>进程同步的通信机制。</li><li>资源清单。进程已分配到的除处理机之外的资源。</li><li>链接指针。用于指向下一个PCB的首地址。用于进程调度。</li></ul></li></ul><h3 id="PCB的组织方式"><a href="#PCB的组织方式" class="headerlink" title="PCB的组织方式"></a>PCB的组织方式</h3><ul><li>线性方式：所有的PCB都保存在一张表中，每次寻找PCB都在表中查找。效率低。</li><li>链接方式：把具有相同状态的PCB链接起来。</li><li>索引方式：把具有相同状态的PCB保存在相应的表中。<div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/pcb的组织方式.jpg"></div></li></ul><h2 id="OS内核"><a href="#OS内核" class="headerlink" title="OS内核"></a>OS内核</h2><h3 id="系统态-amp-用户态"><a href="#系统态-amp-用户态" class="headerlink" title="系统态 &amp; 用户态"></a>系统态 &amp; 用户态</h3><p>对于处理机来说，根据其执行的指令不同，可以将其分成系统态（管态、内核态）和用户态。处理机处于系统态时可以执行任意的指令，访问所有的寄存器和存储区，而处于用户态的时候会受到相应的限制。所以计算机中的程序可以分成系统程序和用户程序，用户程序运行在用户态，这样就可以防止用户程序对操作系统进行破坏。</p><h3 id="指令分类"><a href="#指令分类" class="headerlink" title="指令分类"></a>指令分类</h3><p>操作系统把CPU指令分成两类：</p><ul><li>特权指令：在系统态执行的指令。执行几乎不受限制，如启动外部设备、设置系统时钟等。</li><li>非特权指令：在用户态执行的指令。限制较多，比如不能操作硬件等。</li></ul><h3 id="内核概念"><a href="#内核概念" class="headerlink" title="内核概念"></a>内核概念</h3><p>现代操作系统采用分层设计模式，不同权重的程序分别设置在不同的层次中。通常与<strong>硬件紧密相关的程序</strong>、<strong>设备驱动程序</strong>和<strong>运行频率高的程序</strong>等放置在高级别层次中，操作系统会将它们常驻内存，这些程序便被称为OS内核。OS内核运行在系统态中。</p><h3 id="内核的功能"><a href="#内核的功能" class="headerlink" title="内核的功能"></a>内核的功能</h3><p>不同操作系统的内核在功能上有一定的差异，但是一般都包含两类功能：</p><ul><li>支撑功能<ul><li>中断处理：是指计算机运行过程中，出现某些意外情况需主机干预时，机器能自动停止正在运行的程序并转入处理新情况的程序，且处理完毕后又返回原被暂停的程序继续运行。人机交互、设备驱动和进程调度等都需要依赖中断处理。</li><li>时钟管理：系统中很多活动都需要用到时钟，如定时任务、时间片轮转调度算法等。</li><li>原语操作：原语是若干条机器指令构成的，用以完成特定功能的一段程序。而原语操作便是原语的执行，其在执行期间是不可分割的。</li></ul></li><li>资源管理功能<ul><li>进程管理：进程的创建、撤销、调度等操作。</li><li>存储器管理：空间的分配、撤销、逻辑地址转换为物理地址等。</li><li>设备管理：进行设备分配、缓和CPU和I/O速度不匹配矛盾的缓冲管理等。</li></ul></li></ul><h2 id="进程的生命周期"><a href="#进程的生命周期" class="headerlink" title="进程的生命周期"></a>进程的生命周期</h2><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><ol><li>为新进程申请内部标识符，同时从PCB集合中索取一个空白的PCB。</li><li>为新进程分配其运行所需的资源。这些资源直接来自操作系统或者父进程。</li><li>初始化PCB。如处理机状态信息、标识符和进程优先级等。</li><li>若就绪队列还能接受进程，则插入就绪队列。不能接受则执行相应处理机制。</li></ol><h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><ol><li>从PCB集合中获得某进程的PCB，并读出该进程的状态。<ul><li>若进程正处于执行状态，应立即终止该进程的执行。</li><li>若此进程有子进程则一并终止，防止其成为不可控进程。</li></ul></li><li>将进程拥有的所有资源归还给其父进程或操作系统。</li><li>将被终止的进程从所在队列或链表（指PCB的组织方式）中移出，等待其他程序收集信息，释放空间等。</li></ol><h3 id="三种基本状态"><a href="#三种基本状态" class="headerlink" title="三种基本状态"></a>三种基本状态</h3><ul><li>就绪状态：分配到出处理机之外的其他所有必要资源。此时可运行，但其他进程正在占用CPU。</li><li>执行状态：就绪状态的进程获得CPU，正在执行的状态。</li><li>阻塞状态：进程发出的请求没有及时得到满足而无法继续执行的状态，此时会引起进程调度，OS把处理机分配给其他就绪进程，原进程暂停。<div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/五种进程状态.jpg"></div></li></ul><h3 id="挂起"><a href="#挂起" class="headerlink" title="挂起"></a>挂起</h3><p>进程暂停执行或不接受调度的状态。原因有如下几点：</p><ul><li>用户的需要：用户想暂停正在的进程，观察其状态或修改程序等。</li><li>父进程请求：父进程为了完成某项任务，协调其各子进程间的活动。</li><li>负荷调节的需要：系统压力过大或实时操作系统不能很好的满足可靠性时会挂起一些进程。</li><li>操作系统的需要：操作系统挂起某些进程来更方便的检查系统资源。<br>挂起和阻塞不同在于阻塞是客观条件不能得到满足，即资源不足引起暂停。挂起是主观需要引起暂停。<div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/引入挂起的进程状态图.jpg"></div></li></ul><h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a><span id="jump">进程同步</span></h2><p>进程同步的主要任务是使并发执行的诸进程之间能有效的共享资源和相互合作，从而使程序的执行具有可再现性。</p><h3 id="同步-amp-互斥"><a href="#同步-amp-互斥" class="headerlink" title="同步 &amp; 互斥"></a>同步 &amp; 互斥</h3><p>并发执行的诸进程之间既有独立性又有制约性。</p><ul><li>独立性：各进程都可独立地向前推进；</li><li>制约性：由于资源共享和进程合作引起的进程之间的相互依赖和相互制约的关系。可归结为互斥和同步。<ul><li>同步：两个或多个事件的发生有着某种时序上的关系。按照这种时序关系进行能保证各任务安全的完成。</li><li>互斥：资源的使用要排它使用，防止冲突（不同时使用，但无先后次序。一种特殊同步）。</li></ul></li></ul><h3 id="临界资源-amp-临界区"><a href="#临界资源-amp-临界区" class="headerlink" title="临界资源 &amp; 临界区"></a>临界资源 &amp; 临界区</h3><ul><li>临界资源：需要被各进程互斥访问的资源。</li><li>临界区：各进程中访问临界资源的代码。<br>若能保证各进程互斥地进入自己的临界区，便可以保证互斥地访问临界资源，进而保证进程同步。常用的方式有硬件同步机制和信号量机制。</li></ul><h3 id="同步准则"><a href="#同步准则" class="headerlink" title="同步准则"></a>同步准则</h3><ul><li>空闲让进：当无进程处于临界区时，应当允许一个进程进入自己的临界区。</li><li>忙则等待：当有进程处于临界区时其他请求就如临界区的进程必须等待。</li><li>有限等待：对要求访问临界资源的进程，应保证在有限的时间内能进入自己的临界区。</li><li>让权等待：当进程不能进入临界区时，应立即释放处理机避免进程陷入“忙等”的状态。</li></ul><h2 id="硬件同步机制"><a href="#硬件同步机制" class="headerlink" title="硬件同步机制"></a>硬件同步机制</h2><h3 id="关中断"><a href="#关中断" class="headerlink" title="关中断"></a>关中断</h3><p>当进程在临界区执行期间，计算机系统不响应中断，因此不会引发调度，临界资源只会被一个进程占据，这样就不会发生进程同步问题。</p><h3 id="利用Test-and-Set指令实现互斥"><a href="#利用Test-and-Set指令实现互斥" class="headerlink" title="利用Test-and-Set指令实现互斥"></a>利用Test-and-Set指令实现互斥</h3><p>指令的描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">TS</span><span class="params">(boolean *lock)</span></span>&#123;</span><br><span class="line">    boolean old;</span><br><span class="line">    old = *lock;</span><br><span class="line">    *lock = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为临界资源设置一个布尔变量<code>lock = false</code>。在进程进入临界区之前利用TS指令测试，如果得到的值为<code>false</code>表示资源未被使用，如果得到的值为<code>true</code>，则一直测试到结果为<code>false</code>。使用TS指令实现互斥描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (TS(&amp;lock));</span><br><span class="line">...</span><br><span class="line">lock = <span class="literal">false</span>;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p></p><h3 id="利用Swap指令实现互斥"><a href="#利用Swap指令实现互斥" class="headerlink" title="利用Swap指令实现互斥"></a>利用Swap指令实现互斥</h3><p>指令描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(boolean *a, boolean *b)</span></span>&#123;</span><br><span class="line">    boolean temp;</span><br><span class="line">    temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>为每个临界资源设置一个全局变量<code>lock=false</code>。每个进程设置一个局部变量<code>key</code>。实现互斥的描述如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">...</span><br><span class="line">    key = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        swap(&amp;lock, &amp;key);</span><br><span class="line">    &#125;<span class="keyword">while</span>(key != <span class="literal">false</span>)</span><br><span class="line">    critical section;</span><br><span class="line">    lock = <span class="literal">false</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>关中断：效率低下且不适用于多处理机系统。且其他进行会”忙等“，不符合让权等待。</li><li>TS指令 &amp; Swap指令：其他进行会”忙等“，不符合让权等待。</li></ul><h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><h3 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h3><p>整型信号量是一个用于描述资源数目的整型量（S）。但除了初始化以外，仅能通过两个原子操作来访问。</p><ul><li><p>wait(S)：P操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wait(S)&#123;</span><br><span class="line">    <span class="keyword">while</span>(S &lt;= <span class="number">0</span>);</span><br><span class="line">    S--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>signal(S)：V操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">signal(S)&#123;</span><br><span class="line">    S++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>P操作用于分配资源，V操作用于释放资源。</p><h3 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h3><p>整型信号量未遵循让权等待原则。只要<code>S &lt;= 0</code>就会不断的循环。此时需要增加一个进程链表指针链接等待进程。</p><ul><li><p>数据结构的描述：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;<span class="comment">//资源数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process_control_block</span> *<span class="title">list</span>;</span><span class="comment">//阻塞队列</span></span><br><span class="line">&#125; semaphore;</span><br></pre></td></tr></table></figure></li><li><p>wait(S)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wait(semaphore *S)&#123;</span><br><span class="line">    S-&gt;value--;</span><br><span class="line">    if(S-&gt;value &lt; 0)</span><br><span class="line">    block(S-&gt;list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>signal(S)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">signal(semaphore *S)&#123;</span><br><span class="line">    S-&gt;value++;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;value &lt;= <span class="number">0</span>)</span><br><span class="line">    wakeup(S-&gt;<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>当进程被阻塞时会被加入阻塞对列，资源被满足时唤醒阻塞对列中的某个资源。</p><h3 id="AND型信号量"><a href="#AND型信号量" class="headerlink" title="AND型信号量"></a>AND型信号量</h3><p>记录型信号量只能解决共享一个临界资源的情况，若有多个临界资源则需要使用多个记录型信号量。但是信号量越多，系统死锁的概率越大，且大量的同步操作会给系统的管理带来麻烦。AND型信号量的思想是一次性分配进程所需的全部资源，如果有一个没有分配成功，则其他所有可能为之分配的资源亦不分配。</p><ul><li><p>Swait(S)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Swait(S1, S2, ..., Sn)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Si &gt;= <span class="number">1</span> &amp;&amp; ... &amp;&amp; Sn &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            Si--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            把进程阻塞在请求未能得到满足的资源Si所对应的阻塞队列里，同时把进程的程序计数器（放  置CPU下一条要执行的指令地址）放置在本操作的开始处（下一次再调度到此进程，需要再次</span><br><span class="line">            检查所有的资源）。</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Ssignal(S)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ssignal(S1, S2, ..., Sn)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            Si++;</span><br><span class="line">            唤醒等待Si资源的阻塞队列。</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="信号量集"><a href="#信号量集" class="headerlink" title="信号量集"></a>信号量集</h3><p>之前的信号量都是一次申请或释放某资源一份，若申请或释放N份资源需要进行N次操作，效率比较低下。此外，当资源数量低于某一下限值时，为了系统安全，就不能再予以分配。所以产生信号量集解决以上问题。描述如下：</p><ul><li><code>Swait(S1, t1, d1, ..., Sn, tn, dn)</code>：当<code>Si &gt;= ti</code>时<code>Si = Si - di</code>。（<code>di &gt;= ti</code>）</li><li><code>Ssignal(S1, d1, ..., Sn, dn)</code>：<code>Si = Si + di</code>。<br>特殊的信号量集：</li><li><code>Swait(S1, d, d)</code>：每次申请d份资源，资源少于d时不分配。</li><li><code>Swait(S, 1, 1)</code>：退化成一般的记录型信号量。</li><li><code>Swait(S, 1, 0)</code>：<code>S &gt;= 1</code>时运行多个进行进入特定区。<code>S &lt;= 0</code>时禁止进程进入特定区。</li></ul><h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><p>直接使用信号量机制会把大量的同步操作分散在各个进程中，这会增加系统死锁的概率并且不方便系统的管理。而管程就是把代表共享资源的数据结构和对共享数据结构的操作（包括同步机制）封装起来以更好的为进程使用。这时所有请求访问共享资源的进程都只能通过管程间接访问，同时管程每次只允许一个进程进入管程。<br>此时的管程可以使用面相对象的操作来完成整型信号量的功能。但是此时无法解决“让权等待”的问题，所以再按照面相对象的思想将<code>block</code>和<code>wakeup</code>操作封装起来来解决这个问题，即构成条件变量。条件变量的操作如下：</p><ul><li><code>condition.wait()</code>：使进程在因某条件不能满足时阻塞在其所对应的条件变量上。</li><li><code>condition.signal()</code>：唤醒因某条件不能满足而阻塞的进程。<br>可以很容易看出来，设置不同的条件变量能使由不同原因等待的进程阻塞在不同的队列中。<br>使用时把<code>signal()</code>操作放在函数/过程的最后，这样保证在唤醒其他进程后本进程能直接退出而不再产生冲突。<br><strong>管程的描述如下：</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、局部数据和条件变量组成管程内的数据结构。</span></span><br><span class="line"><span class="comment">2、过程/函数1~过程/函数k组成管程内的一组过程对管程内的数据结构进行操作。</span></span><br><span class="line"><span class="comment">3、初始化代码：对管程内的数据结构进行初始化。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Monitor monitor_name&#123;</span><br><span class="line">    share variable declartions; <span class="comment">//共享变量说明</span></span><br><span class="line">    condition declarations;<span class="comment">//条件变量说明</span></span><br><span class="line">    &#123;<span class="comment">//管程主体</span></span><br><span class="line">        initialization code;    <span class="comment">//初始化代码</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>:<span class="comment">//能被进程调用的过程</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">P1</span><span class="params">(...)</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">P2</span><span class="params">(...)</span></span>&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pn</span><span class="params">(...)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="信号量的应用"><a href="#信号量的应用" class="headerlink" title="信号量的应用"></a>信号量的应用</h2><h3 id="互斥访问资源"><a href="#互斥访问资源" class="headerlink" title="互斥访问资源"></a>互斥访问资源</h3><p>设某共享资源的信号量是<code>mutex</code>，PA和PB进程并发时需互斥访问。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line">PA()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">        wait(mutex);</span><br><span class="line">        ...</span><br><span class="line">        signal(mutex);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">PB()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">        wait(mutex);</span><br><span class="line">        ...</span><br><span class="line">        signal(mutex);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="利用信号量实现前趋关系"><a href="#利用信号量实现前趋关系" class="headerlink" title="利用信号量实现前趋关系"></a>利用信号量实现前趋关系</h3><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/前趋图例题.jpg"></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">P1（）&#123;...V(f1);V(f1);V(f1);&#125;</span><br><span class="line">P2（）&#123;P(f1)；... V(f2);&#125;</span><br><span class="line">P3（）&#123;P(f1)；... V(f3);&#125;</span><br><span class="line">P4（）&#123;P(f1)；... V(f4);&#125;</span><br><span class="line">P5（）&#123;P(f2)；... V(f5);&#125;</span><br><span class="line">P6（）&#123;P(f3);P(f4);P(f5);...;&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    semaphore f1=f2=f3=f4=f5=<span class="number">0</span>；</span><br><span class="line">    Cobegin</span><br><span class="line">    P1(); P2();P3(); P4();P5(); P6();</span><br><span class="line">    Coend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在并发时，如果<code>P1</code>的功能代码未执行完，<code>f1</code>为0，每次对<code>f1</code>进行V操作能使<code>P2</code>、<code>P3</code>、<code>P4</code>运行一个。其他亦然。</p><h3 id="生产者—消费者问题"><a href="#生产者—消费者问题" class="headerlink" title="生产者—消费者问题"></a>生产者—消费者问题</h3><ul><li>问题描述：多个生产者进程生产产品以供多个消费者消费。通过由n个环形缓冲区构成的缓冲池（循环队列），把多个生产者和多个消费者联系起来。不允许消费者进程到一个空缓冲区去取产品，也不允许生产者进程向一个已装满产品且尚未取走的缓冲区中投放产品。</li></ul><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/生产者消费者.jpg"></div><ul><li>分析：<ul><li>任何时刻，只能有一个进程在缓冲区中操作。</li><li>对于“生产者”而言，缓冲区满则应等待。</li><li>对于“消费者”而言，缓冲区空则应等待。</li></ul></li><li><p>利用记录型信号量解决问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>;<span class="comment">//in指向此次生产的产品应该放置的位置。out指向此次消费的产品所在的位置。</span></span><br><span class="line">item buffer[n];<span class="comment">//缓存区大小为n，地址为[0, n-1]。</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>, empty = n, full = <span class="number">0</span>;<span class="comment">//mutex用于互斥访问缓存区</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        produce an item nextproducer;</span><br><span class="line">        ...</span><br><span class="line">        wait(empty);<span class="comment">//消耗一个empty，当empty&lt;=0时等待</span></span><br><span class="line">        wait(mutex);</span><br><span class="line">        buffer[in] = nextproducer;</span><br><span class="line">        in = (in+<span class="number">1</span>) % n;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(full);<span class="comment">//增加一个full</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        wait(full);<span class="comment">//消耗一个full，当full&lt;=0时等待</span></span><br><span class="line">        wait(mutex);</span><br><span class="line">        nextconsumer = buffer[out];</span><br><span class="line">        out = (out+<span class="number">1</span>) % n;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(empty);<span class="comment">//增加一个empty</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        produce();consumer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>互斥信号量 &amp; 资源信号量<br>互斥使用的资源设置一个互斥信号量，资源数为1。资源信号量的资源数和资源的意义有关。资源信号量的资源为1时退化成互斥信号量。<br>在使用时互斥信号量的P操作需要紧邻其对应共享资源的临界区使用，否则可能造成同步问题。比如互换上面代码的第8行和第9行之后，若生产者进程和消费者进程都只有一个，且生产者通过了<code>P(mutex)</code>，阻塞在<code>P(empty)</code>，消费者通过了<code>P(full)</code>，阻塞在<code>P(mutex)</code>，此时生产者等待消费者的<code>V(empty)</code>，消费者等待生产者的<code>V(mutex)</code>，发生死锁。而V操作不需要注意顺序。</li></ul></li><li><p>利用AND型信号量解决问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>;<span class="comment">//in指向此次生产的产品应该放置的位置。out指向此次消费的产品所在的位置。</span></span><br><span class="line">item buffer[n];<span class="comment">//缓存区大小为n，地址为[0, n-1]。</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>, empty = n, full = <span class="number">0</span>;<span class="comment">//mutex用于互斥访问缓存区</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        produce an item nextproducer;</span><br><span class="line">        ...</span><br><span class="line">        Swait(empty, mutex);<span class="comment">//消耗一个empty，当empty&lt;=0时等待</span></span><br><span class="line">        buffer[in] = nextproducer;</span><br><span class="line">        in = (in+<span class="number">1</span>) % n;</span><br><span class="line">        signal(empty, mutex);<span class="comment">//增加一个full</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        wait(full, mutex);<span class="comment">//消耗一个full，当full&lt;=0时等待</span></span><br><span class="line">        nextconsumer = buffer[out];</span><br><span class="line">        out = (out+<span class="number">1</span>) % n;</span><br><span class="line">        signal(full, mutex);<span class="comment">//增加一个empty</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        produce();consumer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用管程解决问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Monitor monitor&#123;</span><br><span class="line">    item buffer[n];</span><br><span class="line">    <span class="keyword">int</span> in = <span class="number">0</span>, out = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">    condition notfull, notempty;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">put</span><span class="params">(item x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= n)</span><br><span class="line">            cwait(notfull);<span class="comment">//阻塞在队列满的条件下</span></span><br><span class="line">            buffer[in] = x;</span><br><span class="line">            in = (in+<span class="number">1</span>) % n;</span><br><span class="line">            count++;</span><br><span class="line">            csignal(notempty);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">get</span><span class="params">(item &amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count &lt;= <span class="number">0</span>)</span><br><span class="line">                cwait(notempty);<span class="comment">//阻塞在队列空的条件下</span></span><br><span class="line">            x = buffer[out];</span><br><span class="line">            out = (out+<span class="number">1</span>) % n;</span><br><span class="line">            count--;</span><br><span class="line">            csignal(notfull);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    item x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">        produce an item in nextproducer;</span><br><span class="line">        monitor.put(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    item x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        monitor.get(x);</span><br><span class="line">        consume the item in nextconsumer;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        produce();consumer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><ul><li><p>问题描述：五个哲学家坐在圆桌前，每人一份饭，每个哲学家两侧各有一支筷子,只有拿到左右两只筷子才能进餐，哲学家处于吃饭和思考两种状态。</p><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/哲学家进餐.jpg"></div></li><li><p>分析</p><ul><li>同一时刻一只筷子只能有一个哲学家拿起。</li><li>只有获得两个筷子后才能进餐。</li><li>如果每个哲学家都拿起一只筷子，都饿死。</li><li>并行程度：五只筷子允许两人同时进餐。</li></ul></li><li>利用AND型信号量解决问题<br>每次必须拿到两只筷子才能拿起，否则不拿起筷子。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Swait(chopstick[i], chopstick[(i+<span class="number">1</span>) % <span class="number">5</span>]);</span><br><span class="line">    ...</span><br><span class="line">    Ssignal(chopstick[i], chopstick[(i+<span class="number">1</span>) % <span class="number">5</span>]);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h3><ul><li><p>问题描述：</p><ul><li>写者向共享数据区放数据，读者从共享数据区读数据。</li><li>多个读者可同时读取数据，多个写者不能同时写数据。</li></ul><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/读者-写者.jpg"></div></li><li><p>分析：</p><ul><li>读者进入共享数据区，写者必须等待。</li><li>读者进入共享数据区，读者可以进入。</li><li>写者进入共享数据区，读者必须等待。</li></ul></li><li><p>利用记录型信号量解决问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">semaphore readmutex = <span class="number">1</span>, writemutex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> readcount = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        wait(readmutex);</span><br><span class="line">        <span class="keyword">if</span>(readcount == <span class="number">0</span>)</span><br><span class="line">            wait(writemutex);</span><br><span class="line">        readcount++;</span><br><span class="line">        signal(readmutex);</span><br><span class="line">        ...<span class="comment">//read opreation</span></span><br><span class="line">        wait(readmutex);</span><br><span class="line">        readcount--;</span><br><span class="line">        <span class="keyword">if</span>(readcount == <span class="number">0</span>)</span><br><span class="line">            signal(writemutex);</span><br><span class="line">        signal(readmutex);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        wait(writemutex);<span class="comment">//当写者进入共享数据区，reader会阻塞在</span></span><br><span class="line">        ... <span class="comment">//write operation</span></span><br><span class="line">        signal(writemutex);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        reader();writer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码分析：<br>最开始并发的时候：</p><ul><li>假如读者先抢到资源，<code>readcount == 0</code>，<code>P(writemutex)</code>，<code>writer()</code>会阻塞在第20行，但其他<code>reader()</code>仍可以运行，只是不会再<code>P(writemutex)</code>。同时每个<code>reader()</code>都<code>readcount++</code>，直到<code>readcount == 0</code>时<code>V(writemutex)</code>，然后<code>writer()</code>才有可能能进入。此时读者进程和写者进程进入共享数据区的个数都为0，即又是重新开始。</li><li>假如写者先抢到资源，<code>P(writemutex)</code>，此时<code>readcount == 0</code>，所有<code>reader()</code>阻塞在第7行。此时读者进程和写者进程进入共享数据区的个数都为0，即又是重新开始。<br>综上，完成了要求。</li></ul></li></ul><h3 id="读者-写者问题拓展"><a href="#读者-写者问题拓展" class="headerlink" title="读者-写者问题拓展"></a>读者-写者问题拓展</h3><ul><li>问题描述：拓展就是又增加一个条件，最多只允许RN个读者同时读。</li><li><p>利用信号量集解决问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">semaphore L = RN, mx = <span class="number">1</span>;<span class="comment">//L用来控制访问数，mx控制写者访问时所有读者阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        Swait(L, <span class="number">1</span>, <span class="number">1</span>);<span class="comment">//第RN+1个读者进入时会阻塞</span></span><br><span class="line">        Swait(mx, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//mx &gt;= 1时才可以进入</span></span><br><span class="line">        ...<span class="comment">//read operation</span></span><br><span class="line">        Ssignal(L, <span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        Swait(mx, <span class="number">1</span>, <span class="number">1</span>; L, RN, <span class="number">0</span>);<span class="comment">//mx &gt;= 1 &amp;&amp; L &gt;= RN时进入</span></span><br><span class="line">        ...<span class="comment">//write operation</span></span><br><span class="line">        Ssignal(mx, <span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConcurrentBegin</span><br><span class="line">        reader();writer();</span><br><span class="line">    ConcurrentEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码分析：<br>最开始并发的时候：</p><ul><li>假如读者先抢到资源，<code>L = L - 1</code>，写者阻塞在第12行，但其他<code>reader()</code>仍可以运行，直至没有读者进程在访问共享数据区。当所有的读者进程都退出时，共享数据区中停留的个进程数都为0，即重新开始。</li><li>假如写者先抢到资源，<code>mx = mx - 1</code>，所有读者进程和其他写者进程都要被阻塞，写者进程退出时，共享数据区中停留的个进程数都为0，即重新开始。</li></ul></li></ul><h3 id="理发师问题"><a href="#理发师问题" class="headerlink" title="理发师问题"></a>理发师问题</h3><ul><li><p>问题描述：一把理发椅，N把等待座位。理发师为理发椅上的顾客理发，没有顾客就在理发椅上睡觉，有一个顾客时需要叫醒理发师，多个顾客时需要在等待座位上等候。</p><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/理发师问题.jpg"></div></li><li><p>分析：</p><ul><li>理发椅上只能有一位顾客。</li><li>等待座位是有限缓冲区。</li><li>只要存在顾客，理发师就不能睡觉。</li></ul></li><li><p>利用记录型信号量解决问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">semaphore customer = <span class="number">0</span>, barber = <span class="number">0</span>, mutex = <span class="number">1</span>; <span class="comment">//barber使理发师只能为一个顾客服务</span></span><br><span class="line"><span class="keyword">int</span> waiting = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">barber</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        wait(customer);<span class="comment">//没有顾客的时候理发师睡觉</span></span><br><span class="line">        wait(mutex);</span><br><span class="line">        waiting –= <span class="number">1</span>;<span class="comment">//等待的人少一个</span></span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(barber);</span><br><span class="line">        ...<span class="comment">//获得被激活进程的信息并给相应的顾客剪发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wait(mutex);</span><br><span class="line">    <span class="keyword">if</span>(waiting &lt; CHAIRS)&#123;<span class="comment">//顾客到来的时候，还有座位就进去等待</span></span><br><span class="line">        waiting += <span class="number">1</span>;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        signal(customer);</span><br><span class="line">        wait(barber);</span><br><span class="line">        ...  <span class="comment">//将被激活进程的信息发送给barber()</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        signal(mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码分析<br>在最开始并发的时候<code>barber()</code>会等待到有顾客时才醒来。顾客一来就需要访问<code>waiting</code>，所以获得<code>mutex</code>。</p><ul><li>如果位置不够就立即释放<code>mutex</code>。</li><li>如果位置够，就让等待的人加1，再释放<code>mutex</code>。然后顾客人数<code>customer += 1</code>来激活理发师进程。理发师进程激活后会<code>V(barber)</code>，然后等待着的<code>customer()</code>进程争夺资源，争夺到<code>P(barber)</code>的进程将被激活进程的信息发送给<code>barber()</code>，<code>barber()</code>获得被激活进程的信息并给相应的顾客剪发。</li></ul></li></ul><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>进程之间合作完成工作不仅仅需要有时序关系，还需要进程信息交互，比如刚才的理发师问题中就设计到了信息交互。从概念上说进程通信是指进程之间的信息交换，所以信号量机制本身就涉及到了信息交换，不过我们把这种信息交换叫做低级进程通信，因为其效率低且需要用户大量的干预。真正的进程通信需要满足使用方便且能高效传输大量数据的需求。</p><h3 id="共享存储器系统"><a href="#共享存储器系统" class="headerlink" title="共享存储器系统"></a>共享存储器系统</h3><ul><li>基于共享数据结构的通信方式：诸进程公用某些数据结构来实现进行通信 ，如生产者—消费者问题中的有界缓冲区，属于低级通信方式。</li><li>基于共享存储区的通信方式：在存储器中划出一块共享存储区，诸进程通过对共享存储区中数据的读或写实现通信，此时数据的形式、位置和访问控制仍是进程实现。适用于传输大量数据，属于高级通信。</li></ul><h3 id="管道通信系统"><a href="#管道通信系统" class="headerlink" title="管道通信系统"></a>管道通信系统</h3><p>所谓“管道”，是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又名pipe文件。向管道提供输入的发送进程（即写进程）以字符流形式将大量的数据送入管道，而接收进程（即读进程），可从管道中接收数据。管道通信系统必须满足以下三个要求：</p><ul><li>互斥：管道的使用必须互斥。因为存数据和取数据可归于写文件的添加和删除。</li><li>同步：写进程把一定数量的数据写入管道后去睡眠，读进程读完后将其唤醒。读进程读空的管道时需要睡眠。</li><li>确定对方存在：如果写进程不存在，读进程就会一直等待。如果读进程不存在，写进程写完数据后也会一直等待，所以通信双方必须同时存在。</li></ul><h3 id="消息传递系统"><a href="#消息传递系统" class="headerlink" title="消息传递系统"></a>消息传递系统</h3><p>指进程可以利用一组通信命令（原语）把数据封装在消息中传送，不需要显示的指定共享存储区或数据结构等。它隐藏了通信的细节，也是目前使用最广泛的进程间通信机制。通常有两种实现方式：</p><ul><li>直接通信方式：OS提供原语给进程使用。</li><li>间接通信方式：借助共享中间实体（称为邮箱）完成进程间的通信。<ul><li>和共享存储器系统的区别是进程不再需要指定数据的形式、位置和访问控制等，信箱内部自有实现。</li></ul></li></ul><h3 id="客户机-服务器系统"><a href="#客户机-服务器系统" class="headerlink" title="客户机-服务器系统"></a>客户机-服务器系统</h3><p>前三种都是单机下的通信机制，这种是网络环境中的通信机制。主要有套接字和RPC两种方式。</p><ul><li>套接字：一个套接字是一个通信标识类型的数据结构，包含了通信目的地址、通信端口号、通信的网络协议、进程自身的地址以及对外提供的系统调用等。使用套接字可以在不同主机上的进程建立连接进而进行通信。</li><li>RPC：Remote Procedure Call，它是一个通信协议，可以使本地进程调用其他主机的进程对程序员表现为常规方法调用。<div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/rpc.jpg"></div></li></ul><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程的由来"><a href="#线程的由来" class="headerlink" title="线程的由来"></a>线程的由来</h3><p>进程解决了程序不能并发执行的问题，但是由于进程是拥有资源的基本单位，所以在创建、撤销和切换时所需的时空开销很大，因为处理机势必要付出更大的代价来保存现场。所以把拥有资源和独立运行两项功能分开，让线程作为独立运行的基本单位，进程作为拥有资源的基本单位。不过线程也拥有一些能保证其独立运行的资源，如TCB。</p><h3 id="TCB（Thread-Control-Block）"><a href="#TCB（Thread-Control-Block）" class="headerlink" title="TCB（Thread Control Block）"></a>TCB（Thread Control Block）</h3><p>所有用于控制和管理线程的信息都会被记录在线程控制块中，通常包含：</p><ul><li>线程标识符：每个线程都有唯一的线程标识符。</li><li>处理机信息：包括程序计数器、状态寄存器、通用寄存器的内容。</li><li>线程运行状态：线程和进程一样也有多种运行状态，就绪、阻塞、运行等。详见<code>103-网络编程</code>。</li><li>优先级：和调度算法有关，优先级越高，得到处理机的机会越大。</li><li>线程专有存储区：用于在线程切换时保存现场状态和保存线程的统计信息。</li><li>信号屏蔽：屏蔽某些发送给线程的信号。</li><li>堆栈指针：线程调用别的过程时需要保存局部变量和返回地址等来供返回时能继续执行。</li></ul><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><p>线程是为了解决进程调度时过于笨重的问题，所以在不同的环境中实现线程的方式不同。根据内核能否感知到线程的存在可分为内核支持线程（Kernel Supported Threads，KST）和用户级线程（User Level Threads，ULT）。它俩的区别是能否直接调用系统服务，前者可以而后者需要借助中间系统。</p><h3 id="内核支持线程"><a href="#内核支持线程" class="headerlink" title="内核支持线程"></a>内核支持线程</h3><p>若线程是由内核直接调度，线程资源也是保存在内核空间，就可以说此类线程为内核支持线程。此类线程的创建、撤销和切换等操作都是在内核空间完成的，此时线程可以直接调用系统服务。一种可能的实现方式是在创建进程时分配一个任务数据区（Per Task Data Area，PTDA），各个线程的TCB保存在其中即可。不过仅实现内核支持线程的系统对用户进程创建的线程很不友好，每次线程调度处理机都要从用户态转换到核心态。</p><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/内核级线程.jpg"></div><h3 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h3><p>用户级线程是指线程虽客观存在但对内核来说是透明的，此时不能再直接调用系统服务，间接调用系统服务需要有中间系统的支持，通常的中间系统有运行时系统和内核控制线程。</p><ul><li><p>运行时系统：把创建线程、撤销线程和线程同步等只能由OS内核完成的操作封装起来作为运行时系统，而运行时系统停留在用户空间供其他进程调用来实现线程调度。</p><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/运行时系统.jpg"></div></li><li><p>内核控制线程：这种线程又被称作轻量进程（Light Weight Process，LWP），它既可以共享进程的资源，又可以使用内核提供的服务。虽然下图中LWP和用户线程是1对1关系，但实际上多个用户级线程可以复用一个LWP，但每个轻型线程都要连接到一个内核线程中。所以此种方式系统需要同时实现内核支持线程。</p></li></ul><div align="center"><img src="//isjinhao.github.io/2019/02-进程的描述与控制/内核控制线程.png" width="80%"></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Aug 06 2019 14:33:29 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;进程概念&quot;&gt;&lt;a href=&quot;#进程概念&quot; class=&quot;headerlink&quot; title=&quot;进程概念&quot;&gt;&lt;/a&gt;进程概念&lt;/h2&gt;
      
    
    </summary>
    
      <category term="操作系统" scheme="https://isjinhao.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://isjinhao.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
