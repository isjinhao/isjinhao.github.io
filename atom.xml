<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ISJINHAO</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://isjinhao.github.io/"/>
  <updated>2019-04-25T06:53:37.509Z</updated>
  <id>https://isjinhao.github.io/</id>
  
  <author>
    <name>ISJINHAO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-序列化</title>
    <link href="https://isjinhao.github.io/2019/Java-%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://isjinhao.github.io/2019/Java-序列化/</id>
    <published>2019-04-24T13:41:19.000Z</published>
    <updated>2019-04-25T06:53:37.509Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>把Java对象转换为字节序列的过程称为对象的序列化；把字节序列恢复为Java对象的过程称为对象的反序列化。对象的序列化主要有两种用途：</p><ol><li>把对象的字节序列永久的保存到硬盘上，通常存放在一个文件中。</li><li>在网络上传送对象的字节序列。</li></ol><div align="center"><img src="//isjinhao.github.io/2019/Java-序列化/序列化.png"></div><h2 id="默认序列化"><a href="#默认序列化" class="headerlink" title="默认序列化"></a>默认序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.isjinhao.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Path path = Paths.get(<span class="string">"test"</span>);</span><br><span class="line">Person temp = <span class="keyword">new</span> Person(<span class="string">"陈钰琪"</span>, <span class="number">19</span>, <span class="string">"411x2x19xx1x2x6x1x"</span>, <span class="number">20000</span>d);</span><br><span class="line"></span><br><span class="line">ObjectOutputStream out=<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(path.toFile()));</span><br><span class="line">out.writeObject(temp);</span><br><span class="line"></span><br><span class="line">ObjectInputStream in=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path.toFile()));</span><br><span class="line">Person readObject = (Person)in.readObject();</span><br><span class="line">System.out.println(readObject);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">485348963313276072L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age, String id, Double money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", id="</span> + id + <span class="string">", money="</span> + money + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>版本号是为了控制对象的版本而存在的，版本号一致才可认为可以进行对应的序列化和反序列化。比如我们使用上面的代码把一个Person写入temp文件了，然后修改<code>serialVersionUID = 485348963313276072L;</code>，会发现爆出<code>java.io.InvalidClassException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Path path = Paths.get(<span class="string">"test"</span>);</span><br><span class="line">ObjectInputStream in=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path.toFile()));</span><br><span class="line">Person readObject = (Person)in.readObject();</span><br><span class="line">System.out.println(readObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化图"><a href="#序列化图" class="headerlink" title="序列化图"></a>序列化图</h2><p>在默认方式下，对象输出流会对整个对象图进行序列化。</p><div align="center"><img src="//isjinhao.github.io/2019/Java-序列化/序列化图.png"></div><h2 id="控制序列化"><a href="#控制序列化" class="headerlink" title="控制序列化"></a>控制序列化</h2><ol><li>不会序列化对象的transient修饰的的变量。</li><li>不会序列化静态变量。</li></ol><h2 id="单例的处理"><a href="#单例的处理" class="headerlink" title="单例的处理"></a>单例的处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MySingleton</span><span class="params">()</span> </span>&#123; &#125; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MySingleton INSTANCE = <span class="keyword">new</span> MySingleton(); </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> INSTANCE; &#125; </span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123; </span><br><span class="line">    <span class="comment">// instead of the object we're on, </span></span><br><span class="line">    <span class="comment">// return the class variable INSTANCE </span></span><br><span class="line"><span class="keyword">return</span> INSTANCE; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化”组装”一个新对象时，就会自动调用这个readResolve方法来返回我们指定好的对象了，单例规则也就得到了保证。</p><h2 id="Externalizable"><a href="#Externalizable" class="headerlink" title="Externalizable"></a>Externalizable</h2><p>Externalizable接口extends Serializable接口，而且在其基础上增加了两个方法：writeExternal()和readExternal()。这两个方法会在序列化和反序列化还原的过程中被自动调用，以便执行一些特殊的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blip</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String s;<span class="comment">//没有初始化</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">//默认构造函数必须有，而且必须是public</span></span><br><span class="line">        System.out.println(<span class="string">"Blip默认构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blip</span><span class="params">(String s ,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//s,i只是在带参数的构造函数中进行初始化。</span></span><br><span class="line">        System.out.println(<span class="string">"Blip带参数构造函数"</span>);</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s  + i ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ClassNotFoundException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用readExternal（）方法"</span>);</span><br><span class="line">        s = (String)in.readObject();<span class="comment">//在反序列化时，需要初始化s和i，否则只是调用默认构造函数，得不到s和i的值</span></span><br><span class="line">        i = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用writeExternal（）方法"</span>);</span><br><span class="line">        out.writeObject(s); <span class="comment">//如果我们不将s和i的值写入的话，那么在反序列化的时候，就不会得到这些值。</span></span><br><span class="line">        out.writeInt(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalizableTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"序列化之前"</span>);</span><br><span class="line">        Blip b = <span class="keyword">new</span> Blip(<span class="string">"This String is "</span> , <span class="number">47</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"序列化操作，writeObject"</span>);</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        oos.writeObject(b);</span><br><span class="line">        System.out.println(<span class="string">"反序列化之后,readObject"</span>);</span><br><span class="line">        ByteArrayInputStream in = <span class="keyword">new</span> ByteArrayInputStream(out.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        Blip bb = (Blip)ois.readObject();</span><br><span class="line">        System.out.println(bb);     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;把Java
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="Java网络编程" scheme="https://isjinhao.github.io/tags/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://isjinhao.github.io/2019/%E5%8F%8D%E5%B0%84/"/>
    <id>https://isjinhao.github.io/2019/反射/</id>
    <published>2019-04-22T08:41:49.000Z</published>
    <updated>2019-04-22T10:40:54.587Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通常能够分析类能力的程序称为反射（reflective）。程序员通过反射库（包括Class类，Constructor类等）完成业务功能，便是使用到了反射技术。反射的主要功能是在程序运行时分析类。一提到运行时分析类大家肯定第一个想到的是<a href="https://blog.csdn.net/qq_38206090/article/details/82492391" target="_blank" rel="noopener">运行时多态</a>。而反射也和运行时多态的功能一致，增强程序的可维护性和可拓展性。<br>运用反射技术来实现功能一般分为四步：获得Class对象、获得构造器、获得类的实例、运行。反射技术甚至可以获得私有信息。</p><h2 id="获得Class对象"><a href="#获得Class对象" class="headerlink" title="获得Class对象"></a>获得Class对象</h2><p>Class对象是在类加载时由Java虚拟机创建的封装某类型信息的对象。有三种获得方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//1、通过Object类的getClass()方法</span></span><br><span class="line">TestClazz tc = <span class="keyword">new</span> TestClazz();</span><br><span class="line">Class clazz1 = tc.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过类的静态class属性。</span></span><br><span class="line">Class clazz2 = TestClazz.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、通过Class类中的方法构造。这种可拓展性更强，根本不需要知道类型，通过字符串就能获得。</span></span><br><span class="line"><span class="comment">//但是也正是这个原因，可能发生ClassNotFoundException（main函数的此异常与前两者无关）</span></span><br><span class="line">Class clazz3 = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获得构造器"><a href="#获得构造器" class="headerlink" title="获得构造器"></a>获得构造器</h2><ul><li><p>获得所有公共权限的构造方法（包括继承的）：<code>clazz.getConstructors();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TestClazz</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; System.out.println(i); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line"></span><br><span class="line">Constructor[] constructors = clazz.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor e:constructors)</span><br><span class="line">System.out.println(e);</span><br><span class="line"><span class="comment">/*Console：</span></span><br><span class="line"><span class="comment"> public com.first.TestClazz(java.lang.String)</span></span><br><span class="line"><span class="comment">public com.first.TestClazz() */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得指定参数的公共构造器（可以获得继承的）：<code>clazz.getConstructor((Class... parameterTypes);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TestClazz</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; System.out.println(i); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line"></span><br><span class="line">Constructor con1 = clazz.getConstructor();</span><br><span class="line">Constructor con2 = clazz.getConstructor(String.class);</span><br><span class="line">System.out.println(con1);</span><br><span class="line">System.out.println(con2);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">  public com.first.TestClazz()</span></span><br><span class="line"><span class="comment">public com.first.TestClazz(java.lang.String)*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得所有的构造器（不包括继承的）：<code>clazz.getDeclaredConstructors();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TestClazz</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; System.out.println(i); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line"></span><br><span class="line">Constructor []cons = clazz.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor e : cons)</span><br><span class="line">System.out.println(e);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">  public com.first.TestClazz()</span></span><br><span class="line"><span class="comment">public com.first.TestClazz(java.lang.String)</span></span><br><span class="line"><span class="comment">private com.first.TestClazz(int)*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得指定的构造器（不包括继承的）：<code>clazz.getDeclaredConstructor((Class... parameterTypes);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TestClazz</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; System.out.println(i); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line"></span><br><span class="line">Constructor con = clazz.getDeclaredConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">System.out.println(con);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">  private com.first.TestClazz(int)*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><ul><li><p>通过公共构造器创建对象：<code>constructor.newInstance(Object... initargs)</code>方法。传入的参数类型和构造器的参数类型一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TestClazz</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; System.out.println(i); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Constructor con1 = clazz.getConstructor(String.class);</span><br><span class="line">Object obj1 = con1.newInstance(<span class="string">"HelloWorld!"</span>);</span><br><span class="line">System.out.println(obj1);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line">Constructor con2 = clazz.getConstructor();</span><br><span class="line">Object obj2 = con2.newInstance();</span><br><span class="line">System.out.println(obj2);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment"> HelloWorld!</span></span><br><span class="line"><span class="comment">com.first.TestClazz@7852e922</span></span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line"><span class="comment">com.first.TestClazz@4e25154f */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过当前类不可访问的构造器创建对象：<code>constructor.setAccessible(true);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TestClazz</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; System.out.println(i); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Constructor constructor = clazz.getDeclaredConstructor(<span class="keyword">int</span>.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在本例中不写这句也能执行，因为被反射的类和当前类是同一个类，private的构造方法是可以被访问的</span></span><br><span class="line"><span class="comment">//如果某个构造器是当前类不可访问的，此方法可以使其变成可访问的类型</span></span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object object = constructor.newInstance(<span class="number">1</span>);</span><br><span class="line">System.out.println(object);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment"> 1</span></span><br><span class="line"><span class="comment"> com.first.TestClazz@7852e922 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="快速获得对象"><a href="#快速获得对象" class="headerlink" title="快速获得对象"></a>快速获得对象</h2><p>如果被反射的类有被当前类可访问的无参构造函数，可以直接使用<code>clazz.newInstance();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">TestClazz</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; System.out.println(i); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestClazz</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line"></span><br><span class="line">Object object = clazz.newInstance();</span><br><span class="line">System.out.println(object);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment"> com.first.TestClazz@7852e922 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获得成员变量"><a href="#获得成员变量" class="headerlink" title="获得成员变量"></a>获得成员变量</h2><ul><li><p>获得所有公共类型的属性（包括继承的）：<code>clazz.getFields();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String msg;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Field[] fields = clazz.getFields();</span><br><span class="line"><span class="keyword">for</span>(Field f : fields)</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">  public java.lang.String com.first.TestClazz.msg*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得指定公共类型的属性（包括继承的）：<code>clazz.getField(String name);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String msg;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Field field = clazz.getField(<span class="string">"msg"</span>);</span><br><span class="line">System.out.println(field);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">  public java.lang.String com.first.TestClazz.msg*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得所有的属性（不包括继承的）：<code>clazz.getDeclaredFields();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String msg;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Field []fields = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field f : fields)</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">  public java.lang.String com.first.TestClazz.msg</span></span><br><span class="line"><span class="comment">private int com.first.TestClazz.i*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得指定的属性（不包括继承的）：<code>clazz.getDeclaredField(String name);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String msg;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Field field = clazz.getDeclaredField(<span class="string">"i"</span>);</span><br><span class="line">System.out.println(field);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">private int com.first.TestClazz.i*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="设置成员变量的值"><a href="#设置成员变量的值" class="headerlink" title="设置成员变量的值"></a>设置成员变量的值</h2><ul><li><p>设置可访问的变量的值：<code>field.set(Object obj, Object value);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String msg;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">TestClazz object = (TestClazz)clazz.newInstance();</span><br><span class="line">Field field = clazz.getDeclaredField(<span class="string">"msg"</span>);</span><br><span class="line">field.set(object, <span class="string">"HelloWorld!"</span>);</span><br><span class="line">System.out.println(object.msg);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">HelloWorld!*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置不可访问的变量的值：<code>field.setAccessible(true);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String msg;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">TestClazz object = (TestClazz)clazz.newInstance();</span><br><span class="line">Field field = clazz.getDeclaredField(<span class="string">"i"</span>);</span><br><span class="line"><span class="comment">//在本例中不写这句也能执行，因为被反射的类和当前类是同一个类，private的属性是可以被访问的</span></span><br><span class="line"><span class="comment">//如果某个属性是当前类不可访问的，此方法可以使其变成可访问的类型</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(object, <span class="number">65535</span>);</span><br><span class="line">System.out.println(object.i);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">65535*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="一个编译正则表达式的例子"><a href="#一个编译正则表达式的例子" class="headerlink" title="一个编译正则表达式的例子"></a>一个编译正则表达式的例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//航班唯一标识</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLID = <span class="string">"((flid=)&#123;1&#125;)\\d&#123;7&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//航班标识</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FFID = <span class="string">"((ffid=)&#123;1&#125;)\\w&#123;2&#125;-\\w&#123;3,6&#125;-\\d&#123;8&#125;-\\w"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束登机时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String POKT = <span class="string">"((pokt=)&#123;1&#125;)(\\d&#123;14&#125;|null)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预计起飞时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FETT = <span class="string">"((fett=)&#123;1&#125;)(\\d&#123;14&#125;|null)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际起飞时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRTT = <span class="string">"((frtt=)&#123;1&#125;)(\\d&#123;14&#125;|null)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值机柜台</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE = <span class="string">"((code=)&#123;1&#125;)[A-Z]\\d&#123;2&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//航班号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLNO = <span class="string">"((flno=)&#123;1&#125;)[A-Za-z0-9]&#123;3,6&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出发地</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARNO1 = <span class="string">"((1, apcd=)&#123;1&#125;)(\\w&#123;3,4&#125;|null)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//经停地</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARNO2 = <span class="string">"((2, apcd=)&#123;1&#125;)(\\w&#123;3,4&#125;|null)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目的地</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARNO3 = <span class="string">"((3, apcd=)&#123;1&#125;)(\\w&#123;3,4&#125;|null)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//共享航班号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SFNO = <span class="string">"((sfno=)&#123;1&#125;)[A-Za-z0-9]&#123;3,6&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: get&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 获得相应的Pattern&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> regName，正则表达式对应的属性名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>Pattern</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pattern <span class="title">get</span><span class="params">(String regName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.core.Regs"</span>);</span><br><span class="line">String reg = (String) clazz.getField(regName).get(regName);</span><br><span class="line"><span class="keyword">return</span> changeToPattern(reg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译正则表达式</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Pattern <span class="title">changeToPattern</span><span class="params">(String reg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Pattern.compile(reg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获得成员方法"><a href="#获得成员方法" class="headerlink" title="获得成员方法"></a>获得成员方法</h2><ul><li><p>获得所有公共的方法（包括继承的和构造器）：<code>clazz.getMethods();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> i; &#125;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Method[] methods = clazz.getMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m : methods)</span><br><span class="line">System.out.println(m);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">public static void com.first.TestClazz.main(java.lang.String[]) throws java.lang.Exception</span></span><br><span class="line"><span class="comment">public final void java.lang.Object.wait() throws java.lang.InterruptedException</span></span><br><span class="line"><span class="comment">public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span></span><br><span class="line"><span class="comment">public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span></span><br><span class="line"><span class="comment">public boolean java.lang.Object.equals(java.lang.Object)</span></span><br><span class="line"><span class="comment">public java.lang.String java.lang.Object.toString()</span></span><br><span class="line"><span class="comment">public native int java.lang.Object.hashCode()</span></span><br><span class="line"><span class="comment">public final native java.lang.Class java.lang.Object.getClass()</span></span><br><span class="line"><span class="comment">public final native void java.lang.Object.notify()</span></span><br><span class="line"><span class="comment">public final native void java.lang.Object.notifyAll()*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得指定的公共方法（包括继承的，不包括构造器）：<code>clazz.getMethod(String name, Class&lt;?&gt;... parameterTypes);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Method m = clazz.getMethod(<span class="string">"show"</span>, String.class);</span><br><span class="line">System.out.println(m);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">public void com.first.TestClazz.show(java.lang.String)*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得所有的方法（不包括继承的，不包括构造器）：<code>clazz.getDeclaredMethods();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> i; &#125;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m : methods)</span><br><span class="line">System.out.println(m);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">public static void com.first.TestClazz.main(java.lang.String[]) throws java.lang.Exception</span></span><br><span class="line"><span class="comment">private int com.first.TestClazz.getI()*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得指定的方法（不包括继承的，不包括构造器）：<code>clazz.getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes);</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClazz</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String msg)</span> </span>&#123; System.out.println(msg); &#125;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"com.first.TestClazz"</span>);</span><br><span class="line">Method m = clazz.getDeclaredMethod(<span class="string">"show"</span>, String.class);</span><br><span class="line">System.out.println(m);</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment">public void com.first.TestClazz.show(java.lang.String)*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h2><ul><li><p>执行公共方法：<code>method.invoke(Object obj, Object... args);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span><br><span class="line">public class TestClazz&#123;</span><br><span class="line">public void show(String msg) &#123; System.out.println(msg); &#125;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">Class clazz = Class.forName(&quot;com.first.TestClazz&quot;);</span><br><span class="line">Object object = clazz.newInstance();</span><br><span class="line">Method m = clazz.getDeclaredMethod(&quot;show&quot;, String.class);</span><br><span class="line">m.invoke(object, &quot;HelloWorld!&quot;);</span><br><span class="line">/*Console:</span><br><span class="line">HelloWorld*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行私有方法：<code>method.invoke(Object obj, Object... args);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span><br><span class="line">public class TestClazz&#123;</span><br><span class="line">private void show(String msg) &#123; System.out.println(msg); &#125;</span><br><span class="line">TestClazz() &#123; &#125;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">Class clazz = Class.forName(&quot;com.first.TestClazz&quot;);</span><br><span class="line">Object object = clazz.newInstance();</span><br><span class="line">Method m = clazz.getDeclaredMethod(&quot;show&quot;, String.class);</span><br><span class="line">m.setAccessible(true);</span><br><span class="line">m.invoke(object, &quot;HelloWorld!&quot;);</span><br><span class="line">/*Console:</span><br><span class="line">HelloWorld*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;通常能够分
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>方法功能的增强</title>
    <link href="https://isjinhao.github.io/2019/%E6%96%B9%E6%B3%95%E5%8A%9F%E8%83%BD%E7%9A%84%E5%A2%9E%E5%BC%BA/"/>
    <id>https://isjinhao.github.io/2019/方法功能的增强/</id>
    <published>2019-04-22T08:34:44.000Z</published>
    <updated>2019-04-22T10:40:54.589Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>方法功能的增强是开发时常做的事情，当官方或者第三方提供的API不能满足我们的需要时，可以在原有API的基础上加上我们自定义的功能来实现需求。</p><p>常见的功能增强的方式有三种：继承、装饰者模式、动态代理。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>小码农以最近看的某码农培训班的视频结合自己的理解给出个例子来理解。现在有一个很火的概念：无人驾驶。假设无人驾驶的标准是Oracle公司制定的，Google想使用Java语言来开发无人驾驶系统，那么首先它需要创建一个类实现Oracle公司提供的无人驾驶的接口（接口为AIDriving，类为GoogleAIDriving）。</p><ul><li><p>AIDriving</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;  <span class="comment">//无人驾驶汽车启动的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;   <span class="comment">//无人驾驶汽车停止的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>GoogleAIDriving</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleAIDriving</span> <span class="keyword">implements</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Google汽车启动了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Google汽车停止了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>这个时候国内某汽车制造公司（设为A公司）想使用Google提供的无人驾驶系统。但是Google提供的系统不太适合我国国情，所以A公司的工程师就想在Google系统的基础上进行定制。他们选择的方式是继承GoogleAIDriving，创建一个自己的类：A1GoogleAIDriving。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A1GoogleAIDriving</span> <span class="keyword">extends</span> <span class="title">GoogleAIDriving</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国启动汽车"</span>);</span><br><span class="line"><span class="keyword">super</span>.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国停止汽车"</span>);</span><br><span class="line"><span class="keyword">super</span>.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>但理想很美好，现实很残忍。GoogleAIDriving被定义为一个final类（不能被继承），这个是可以理解的，因为如果GoogleAIDriving不是一个final类，任何继承GoogleAIDriving的类都可以对其start()、stop()方法进行覆盖，如果覆盖时出现bug就可能会出现大问题。所以像启动、停止这种核心功能是不允许汽车制造商随意修改的。A公司的工程师就想到了使用装饰者模式来增强功能（设类为A2GoogleAIDriving）。</p><p>装饰者模式该怎么做呢？</p><ol><li>首先，装饰类得和被装饰类实现相同的接口，即AIDriving；</li><li>第二，在装饰类中定义一个AIDriving类型的属性，即AIDriving car；</li><li>第三，有一个参数为AIDriving类型的构造函数，即A2GoogleAIDriving(AIDriving car)；</li><li>第四，装饰类的每个方法都要调用被装饰类相应的方法；</li><li>第五，使用第三步中的构造函数创建装饰类；</li><li>第六，在装饰类的方法中自定义功能。</li></ol><ul><li><p>创建装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A2GoogleAIDriving</span> <span class="keyword">implements</span> <span class="title">AIDriving</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> AIDriving car;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A2GoogleAIDriving</span><span class="params">(AIDriving car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国启动汽车..."</span>);</span><br><span class="line">car.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在中国停止汽车..."</span>);</span><br><span class="line">car.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">GoogleAIDriving car = <span class="keyword">new</span> GoogleAIDriving();</span><br><span class="line">A2GoogleAIDriving aCar = <span class="keyword">new</span> A2GoogleAIDriving(car);</span><br><span class="line">aCar.start();</span><br><span class="line"> <span class="comment">/* Console : </span></span><br><span class="line"><span class="comment">  在中国启动汽车...</span></span><br><span class="line"><span class="comment">Google汽车启动了... */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>A公司工程师正沉浸在胜利到来前的喜悦中，突然他们发现AIDriving接口有1000个方法，所以在装饰类中其他不需要加入自定义动能的998个方法我们也要调用。这一看就不是一个好的解决方案，A公司的某大佬就想起来动态代理。<a href="https://blog.csdn.net/qq_38206090/article/details/81879376" target="_blank" rel="noopener">动态代理的详细讲解请见这里</a>。</p><p>动态代理中可以使用反射技术得到方法的信息，如果是<code>start()</code>或者<code>stop()</code>方法就加上自定义的功能，其他方法直接执行。</p><ul><li><p>A3GoogleAIDriving</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A3GoogleAIDriving</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> AIDriving car;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A3GoogleAIDriving</span><span class="params">(AIDriving car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AIDriving <span class="title">getIns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AIDriving a3GoogleAIDriving = (AIDriving)Proxy.newProxyInstance(</span><br><span class="line">GoogleAIDriving.class.getClassLoader(), </span><br><span class="line">GoogleAIDriving.class.getInterfaces(), </span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(method.getName().equals(<span class="string">"start"</span>)</span><br><span class="line">&amp;&amp;method.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"在中国启动汽车..."</span>);</span><br><span class="line"><span class="keyword">return</span> method.invoke(car, args);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"stop"</span>)</span><br><span class="line">&amp;&amp;method.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"在中国停止汽车..."</span>);</span><br><span class="line"><span class="keyword">return</span> method.invoke(car, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> method.invoke(car, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> a3GoogleAIDriving;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行A3GoogleAIDriving</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">GoogleAIDriving car = <span class="keyword">new</span> GoogleAIDriving();</span><br><span class="line">A3GoogleAIDriving a3GoogleAIDriving = <span class="keyword">new</span> A3GoogleAIDriving(car);</span><br><span class="line">AIDriving ins = a3GoogleAIDriving.getIns();</span><br><span class="line">ins.start();</span><br><span class="line">ins.stop();</span><br><span class="line"><span class="comment">/*   Console : </span></span><br><span class="line"><span class="comment">  在中国启动汽车...</span></span><br><span class="line"><span class="comment">Google汽车启动了...</span></span><br><span class="line"><span class="comment">在中国停止汽车...</span></span><br><span class="line"><span class="comment">Google汽车停止了...  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三种方式总结"><a href="#三种方式总结" class="headerlink" title="三种方式总结"></a>三种方式总结</h2><p>分析了三种方式的功能增强，各位大腿是不是被小码农带入了一个误区：后者比前者更好？按照存在即合理的解释，肯定不是这样的。相反，三种方法中继承却是最常见的增强方式，因为它结构简单、易于理解。而后两种都是设计模式，一般在大型软件开发时才会用到。</p><p>而且对于装饰者模式和动态代理的区别是：装饰者模式一般用于增强功能，动态代理一般用于拦截对方法的请求。</p><h2 id="装饰者模式解决Web开发乱码"><a href="#装饰者模式解决Web开发乱码" class="headerlink" title="装饰者模式解决Web开发乱码"></a>装饰者模式解决Web开发乱码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: RequestEncodingUtils </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO(解决request乱码的工具类)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 詹金浩 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年3月11日 下午2:27:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestEncodingUtils</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"><span class="keyword">private</span> Boolean isEncoded = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestEncodingUtils</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(request);</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line"></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"></span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line"><span class="comment">//处理Post请求</span></span><br><span class="line"><span class="keyword">if</span>(method.equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">parameterMap =  request.getParameterMap();</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;  <span class="comment">//处理Get请求</span></span><br><span class="line"><span class="comment">//保证编码只被执行一次</span></span><br><span class="line"><span class="keyword">if</span>(!isEncoded) &#123;</span><br><span class="line"><span class="keyword">for</span>(String key : parameterMap.keySet()) &#123;</span><br><span class="line">String []values = parameterMap.get(key);</span><br><span class="line"><span class="keyword">if</span>(values != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">values[i] = <span class="keyword">new</span> String(values[i].getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEncoded = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> parameterMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = <span class="keyword">this</span>.getParameterMap();</span><br><span class="line">String []values = parameterMap.get(name);</span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">String []values = getParameterValues(name);</span><br><span class="line"><span class="keyword">return</span> values!=<span class="keyword">null</span>?values[<span class="number">0</span>]:<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sys.utils.RequestEncodingUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: GlobalEncoding </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO(解决全局编码的filter) </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 詹金浩 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年3月10日 下午10:26:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalEncoding</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default constructor. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlobalEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    RequestEncodingUtils myRequest = <span class="keyword">new</span> RequestEncodingUtils((HttpServletRequest)request);</span><br><span class="line">    chain.doFilter(myRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#destroy()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#doFilter(ServletRequest, ServletResponse, FilterChain)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Filter#init(FilterConfig)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;方法功能的
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>动态代理</title>
    <link href="https://isjinhao.github.io/2019/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://isjinhao.github.io/2019/动态代理/</id>
    <published>2019-04-22T08:33:37.000Z</published>
    <updated>2019-04-22T10:40:54.582Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="理解代理"><a href="#理解代理" class="headerlink" title="理解代理"></a>理解代理</h2><p>代理这个词对于广告满天飞的现代社会应该是很常见了，和它具有相同意义还有中介、经纪人等词。我们就以找影视明星拍片为例来理解代理。</p><p>假如你有一个很好的剧本，现在想找A明星来做主角，可以两种方式：第一种是直接找A明星本人，第二种是找A明星的经纪人。但是明星的主要功能是拍戏，如果诸如报酬、档期、宣传等工作也让A明星来负责，势必会减少他/她的拍戏时间，所以更好的方式是去寻求他/她的经纪人，让经纪人来做这些拍戏以外的工作。</p><p>但同时经济人也得有和明星A一样的功能，比如A会演戏、唱歌、跳舞，那么经纪人也得有这些功能，只不过经纪人的功能是让明星A去完成的，经纪人本身只提供这种服务的接口。而我们所说的明星A便是目标对象，经纪人便是代理对象。</p><p>对于Java中的代理，假如有一个方法（设为M1）的功能是把UTF-8编码下的字符转化成GBK编码下的字符。那么这个方法的功能就是进行转化、对于判断传入的是不是UTF-8编码下的字符这种事情应该传入之前就处理完成，所以这时候就要有一个代理方法（设为M2）在M1执行之前做个处理。当然M1执行完毕之后也可能存在M3进行一些处理。</p><h3 id="代理对象的要点"><a href="#代理对象的要点" class="headerlink" title="代理对象的要点"></a>代理对象的要点</h3><blockquote><ol><li>代理对象存在的价值主要用于拦截对目标对象的访问。</li><li>代理对象应该具有和目标对象相同的方法。</li></ol></blockquote><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在我们刚才的解释中，每个目标对象都要有一个实在的代理对象，这在实际开发中是很耗费精力的一件事，但如果说能在程序运行期间给我们动态生成一个代理对象可以大大减小编写的代码的压力。所以动态代理的概念就是：不用手动编写一个代理对象，不需要编写与目标对象相同的方法，运行时在内存中<strong>动态生成代理对象</strong>（字节码对象级别的代理对象）。</p><h2 id="JDK提供的动态代理"><a href="#JDK提供的动态代理" class="headerlink" title="JDK提供的动态代理"></a>JDK提供的动态代理</h2><p>JDK1.5之后为我们提供了用于专用于动态生成代理对象的类：java.lang.reflect.Proxy。有一个很重要的静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Object newProxyInstance</span><br><span class="line">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHander h)</span><br></pre></td></tr></table></figure><p>在解释参数之前，我们先看一个接口InvocationHander，JDK对它的解释是：</p><blockquote><p>Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the method of its invocation handler.（每个代理实例都有一个关联的调用处理程序。当在代理实例上调用方法时，将方法调用编码并调度到其调用处理程序的方法。） 它只有一个invoke()方法。我们之后执行时真正起作用的也是这个方法。</p></blockquote><p><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;</code></p><p>对<code>newProxyInstance()</code>方法参数的解释在下面的例子中。</p><ul><li><p>明星接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrightStar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dancing</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ShootFilm</span><span class="params">(String filmName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>A明星类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarA</span> <span class="keyword">implements</span> <span class="title">BrightStar</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"A is singing..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dancing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hai cao wu"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ShootFilm</span><span class="params">(String filmName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> filmName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StarA starA = <span class="keyword">new</span> StarA();</span><br><span class="line">BrightStar newProxyInstance = (BrightStar)Proxy.newProxyInstance(</span><br><span class="line"><span class="comment">//代理类的类加载器，获取目标类加载器即可</span></span><br><span class="line">StarA.class.getClassLoader(), </span><br><span class="line"><span class="comment">//代理类应该实现的接口，由于代理类和目标类需要继承相同的接口，使用目标类的接口即可</span></span><br><span class="line">StarA.class.getInterfaces(), </span><br><span class="line"><span class="comment">//使用匿名内部类传入InvocationHandler的实例</span></span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * proxy：传入代理对象。</span></span><br><span class="line"><span class="comment"> * method：被执行的方法。</span></span><br><span class="line"><span class="comment"> * args：传入的参数。</span></span><br><span class="line"><span class="comment"> * 例子：newProxyInstance.ShootFilm("我不是药神");</span></span><br><span class="line"><span class="comment"> * proxy：newProxyInstance；      method：ShootFilm；       args："我不是药神"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//执行前的操作</span></span><br><span class="line">System.out.println(<span class="string">"before"</span>);</span><br><span class="line">Object invoke = method.invoke(starA, args);</span><br><span class="line"><span class="comment">//执行后的操作</span></span><br><span class="line">System.out.println(<span class="string">"after"</span>);</span><br><span class="line"><span class="keyword">return</span> invoke;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">newProxyInstance.sing();</span><br><span class="line">System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">String dancing = newProxyInstance.dancing();</span><br><span class="line">System.out.println(dancing);</span><br><span class="line">System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">String film = newProxyInstance.ShootFilm(<span class="string">"我不是药神"</span>);</span><br><span class="line">System.out.println(film);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Console : </span></span><br><span class="line"><span class="comment"> before</span></span><br><span class="line"><span class="comment">A is singing...</span></span><br><span class="line"><span class="comment">after</span></span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="comment">before</span></span><br><span class="line"><span class="comment">after</span></span><br><span class="line"><span class="comment">Hai cao wu</span></span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="comment">before</span></span><br><span class="line"><span class="comment">after</span></span><br><span class="line"><span class="comment">我不是药神</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>下面介绍一个经典案例，使用动态代理解决Web工程的全局编码问题。</p><ul><li><p>前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert_Title_Here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--主体部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>get方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/ProxySolveCoding/test"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>post方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/ProxySolveCoding/test"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(urlPatterns=<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterCoding</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> HttpServletRequest req = (HttpServletRequest)request;</span><br><span class="line">HttpServletRequest proReq = (HttpServletRequest)Proxy.newProxyInstance(</span><br><span class="line">req.getClass().getClassLoader(),</span><br><span class="line">req.getClass().getInterfaces(),</span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(method.getName().equalsIgnoreCase(<span class="string">"getParameter"</span>)) &#123;</span><br><span class="line">String gm = req.getMethod();</span><br><span class="line"><span class="keyword">if</span>(gm.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;</span><br><span class="line"><span class="comment">//处理get方式的请求</span></span><br><span class="line">String before = (String) method.invoke(req, args);</span><br><span class="line">System.out.println(before);</span><br><span class="line">String after = <span class="keyword">new</span> String(before.getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="keyword">return</span> after;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//处理post形式的请求</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> method.invoke(req, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">chain.doFilter(proReq, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="JDK动态代理的特点"><a href="#JDK动态代理的特点" class="headerlink" title="JDK动态代理的特点"></a>JDK动态代理的特点</h3><p>能被代理的对象必须存在接口，否则会报错。且被增强的方法一定是在接口中有相同的方法签名。因为它生成代理对象的方式是拿到类的所有接口，然后根据这些接口和我们实现的<code>InvocationHandler</code>中的<code>invoke()</code>动态创建一个对象。</p><h2 id="Cglib概述"><a href="#Cglib概述" class="headerlink" title="Cglib概述"></a>Cglib概述</h2><p>是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。它是第三方实现的，所以需要导入<code>jar</code>包。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>和JDK提供的动态代理相比，Cglib更加灵活，不需要类上存在接口，因为它生成代理对象是通过现有的类派生出一个子类，在子类中加入我们新的条件。所以被代理的类不能使用final修饰。</p><h3 id="使用的例子"><a href="#使用的例子" class="headerlink" title="使用的例子"></a>使用的例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"HelloWorld"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"保存..."</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中没有我"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"UserDaoImpl [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.spring.secondday.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.spring.secondday.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao ud;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CglibProxy</span><span class="params">(UserDao ud)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ud = ud;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDaoImpl <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">en.setSuperclass(ud.getClass());</span><br><span class="line">en.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line"><span class="comment">//proxy：被代理的对象   m：被增强的方法   args：方法所需的参数  methodProxy：增强后的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method m, Object[] args, MethodProxy methodProxy)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"before"</span>);</span><br><span class="line">Object super1 = methodProxy.invokeSuper(proxy, args);</span><br><span class="line">System.out.println(<span class="string">"after"</span>);</span><br><span class="line"><span class="keyword">return</span> super1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">UserDaoImpl proxy = (UserDaoImpl)en.create();</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">UserDaoImpl ud = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">UserDaoImpl proxy = <span class="keyword">new</span> CglibProxy(ud).getProxy();</span><br><span class="line"><span class="comment">/*Console:</span></span><br><span class="line"><span class="comment"> before</span></span><br><span class="line"><span class="comment">接口中没有我</span></span><br><span class="line"><span class="comment">after */</span></span><br><span class="line">proxy.talk();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;理解代理&quot;&gt;&lt;a href=&quot;#理解代理&quot; class=&quot;headerlink&quot; title=&quot;理解代理&quot;&gt;&lt;/a&gt;理解代理&lt;/h2&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://isjinhao.github.io/2019/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://isjinhao.github.io/2019/策略模式/</id>
    <published>2019-04-21T10:01:42.000Z</published>
    <updated>2019-04-21T12:01:09.441Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><p>本文转至：<a href="https://blog.csdn.net/u011240877/article/details/52346671" target="_blank" rel="noopener">https://blog.csdn.net/u011240877/article/details/52346671</a></p><p>作者基于网络小说的套路，讲解了用代码如何实现“如何用固定套路写小说”</p><h2 id="先定义一个故事梗概接口-Synopsis-，里面设定了主要情节"><a href="#先定义一个故事梗概接口-Synopsis-，里面设定了主要情节" class="headerlink" title="先定义一个故事梗概接口 Synopsis ，里面设定了主要情节"></a>先定义一个故事梗概接口 <em>Synopsis</em> ，里面设定了主要情节</h2><ul><li>不幸的开始</li><li>突然有天遇到神人/捡到神器</li><li>以弱胜强，暂露光芒</li><li>开挂似的升级超快</li><li>组团刷怪九死一生（主角怎么也死不了）</li><li>功成名就 + 妻妾成群</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网络玄幻小说的故事梗概接口</span></span><br><span class="line"><span class="comment"> * 固定的一些套路</span></span><br><span class="line"><span class="comment"> * Created by zhangshixin on 8/27/2016.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Synopsis</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 穷困潦倒的开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">badStart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 突然有天遇到神人/捡到神器，实力大涨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adventure</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在一场战斗中以弱胜强</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">winABattle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从此飞速成长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">growFast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组团刷怪,经历九死一生（主角怎么也死不了）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">manyFights</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终功成名就，妻妾成群</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">succeed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组合起来就是小说内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getContent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有了梗概剩下的就是填内容了，我们分别创建两个具体小说类-StoryA-、-StoryB"><a href="#有了梗概剩下的就是填内容了，我们分别创建两个具体小说类-StoryA-、-StoryB" class="headerlink" title="有了梗概剩下的就是填内容了，我们分别创建两个具体小说类 StoryA 、 StoryB"></a>有了梗概剩下的就是填内容了，我们分别创建两个具体小说类 <em>StoryA</em> 、 <em>StoryB</em></h2><h3 id="故事-A-，跳舞的恶魔法则"><a href="#故事-A-，跳舞的恶魔法则" class="headerlink" title="故事 A ，跳舞的恶魔法则"></a>故事 A ，跳舞的恶魔法则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 故事 A ，恶魔法则</span></span><br><span class="line"><span class="comment"> * Created by zhangshixin on 8/27/2016.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoryA</span> <span class="keyword">implements</span> <span class="title">Synopsis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StoryA</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        mName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">badStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 无故穿越，因为没有魔法能力，成为将军家的废物，不受待见。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adventure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 因为意外来到恶魔岛，在恶魔岛上遇见了恶魔的仆人，获得了一直想要的使用魔法的能力"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">winABattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 协助辰皇子夺得了帝国的权力，成为郁金香公爵"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">growFast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 先后在曾曾曾祖母、恶魔仆人、圣骑士、魔导师的帮助下飞速成长"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manyFights</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 建立魔法学院和魔法学会，与魔法工会分庭抗礼。坐拥西北十万雄兵，歼灭西北军团，打退草原人，带领人类全族击退北方的异族军队。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">succeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 娶了女皇为妻子，成为罗兰帝国的英雄。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        badStart();</span><br><span class="line">        adventure();</span><br><span class="line">        winABattle();</span><br><span class="line">        growFast();</span><br><span class="line">        manyFights();</span><br><span class="line">        succeed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="故事-B-，萧鼎的诛仙"><a href="#故事-B-，萧鼎的诛仙" class="headerlink" title="故事 B ，萧鼎的诛仙"></a>故事 B ，萧鼎的诛仙</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 故事 B ,诛仙</span></span><br><span class="line"><span class="comment"> * Created by zhangshixin on 8/27/2016.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoryB</span> <span class="keyword">implements</span> <span class="title">Synopsis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StoryB</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        mName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">badStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 全村被屠，投入青云七脉中人数最少的大竹峰。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adventure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 在一次伐竹过程中，为追一只三眼灵猴，入青云山深处得到了烧火棍。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">winABattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 在七脉会武中侥幸进了前 4，和陆雪琪等人一起万蝠古窟历练。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">growFast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 在魔教十年，深得鬼王器重和真传。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manyFights</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mName + <span class="string">" 经历无数战斗，先是为鬼王卖命，后来与鬼王大战。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">succeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"天地不仁，以万物为刍狗。 "</span> + mName +<span class="string">" 最后成为最有资格拥有天书的人。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        badStart();</span><br><span class="line">        adventure();</span><br><span class="line">        winABattle();</span><br><span class="line">        growFast();</span><br><span class="line">        manyFights();</span><br><span class="line">        succeed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="故事梗概、具体内容都有了，剩下的就是量产了"><a href="#故事梗概、具体内容都有了，剩下的就是量产了" class="headerlink" title="故事梗概、具体内容都有了，剩下的就是量产了"></a>故事梗概、具体内容都有了，剩下的就是量产了</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写小说</span></span><br><span class="line"><span class="comment"> * Created by zhangshixin on 8/28/2016.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteNovel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Synopsis mSynopsis;     <span class="comment">//故事梗概</span></span><br><span class="line">    <span class="keyword">private</span> String mMainActorName;  <span class="comment">//主角名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 梗概、内容都差不多确定后，换个名称就是另一部小说</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mainName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WriteNovel</span><span class="params">(String mainName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (mainName)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"张小凡"</span>:</span><br><span class="line">                mSynopsis = <span class="keyword">new</span> StoryB(mainName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"杜维"</span>:</span><br><span class="line">                mSynopsis = <span class="keyword">new</span> StoryA(mainName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                mSynopsis = <span class="keyword">new</span> StoryB(mainName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取小说内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNovelDetail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mSynopsis.getContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端只要输入主角名称，就可以得到一部小说，比如写一部类似诛仙的小说，主角名称为张拭心"><a href="#客户端只要输入主角名称，就可以得到一部小说，比如写一部类似诛仙的小说，主角名称为张拭心" class="headerlink" title="客户端只要输入主角名称，就可以得到一部小说，比如写一部类似诛仙的小说，主角名称为张拭心"></a>客户端只要输入主角名称，就可以得到一部小说，比如写一部类似<strong>诛仙</strong>的小说，主角名称为张拭心</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetNovelDetail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    WriteNovel writeNovel = <span class="keyword">new</span> WriteNovel(<span class="string">"张拭心"</span>);</span><br><span class="line">    writeNovel.getNovelDetail();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以把 <em>WriteNovel</em> 类中的 <em>default</em> 设置为 <em>StoryB</em> ，即 诛仙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public WriteNovel(String mainName)&#123;</span><br><span class="line">    switch (mainName)&#123;</span><br><span class="line">        //...省略掉不关键的内容</span><br><span class="line">        default:</span><br><span class="line">            mSynopsis = new StoryB(mainName);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="假如现在需求变了，要写一部穿越的小说，主角还是-张拭心，这时只需修改-WriteNovel-中的-default-设置为-StoryA-，即-恶魔法则-即可，客户端不需要修改"><a href="#假如现在需求变了，要写一部穿越的小说，主角还是-张拭心，这时只需修改-WriteNovel-中的-default-设置为-StoryA-，即-恶魔法则-即可，客户端不需要修改" class="headerlink" title="假如现在需求变了，要写一部穿越的小说，主角还是 张拭心，这时只需修改 WriteNovel 中的 default 设置为 StoryA ，即 恶魔法则 即可，客户端不需要修改"></a>假如现在需求变了，要写一部穿越的小说，主角还是 <strong>张拭心</strong>，这时只需修改 <em>WriteNovel</em> 中的 <em>default</em> 设置为 <em>StoryA</em> ，即 恶魔法则 即可，客户端不需要修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 梗概、内容都差不多确定后，换个名称就是另一部小说</span><br><span class="line"> * @param mainName</span><br><span class="line"> */</span><br><span class="line">public WriteNovel(String mainName)&#123;</span><br><span class="line">    switch (mainName)&#123;</span><br><span class="line">        case &quot;张小凡&quot;:</span><br><span class="line">            mSynopsis = new StoryB(mainName);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;杜维&quot;:</span><br><span class="line">            mSynopsis = new StoryA(mainName);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            mSynopsis = new StoryA(mainName);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将公共的情节提取到梗概接口 <em>Synopsis</em> 中，然后创建不同的故事类，写小说时<em>WriteNovel</em> 中有一个接口的引用，根据客户端传入主角名称创建不同的实现类。其实这就是传说中的 <strong>策略模式</strong>。</p><p>只要遇到很多 <em>if-else</em> 或者有很多 <em>case</em> 的 <em>switch</em>，就可以考虑使用策略模式了，将这些行为独立的封装起来，可以在公共类中消除条件语句。</p><p><strong>在实践中，只要听到需要在不同情况下应用不同的业务，就可以考虑使用策略模式来封装这种变化的可能性。</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文转至：&lt;a href=&quot;https://blog.csdn.net/u011240877/article/details/52346671&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://isjinhao.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://isjinhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Comparable和Comparator</title>
    <link href="https://isjinhao.github.io/2019/Comparable%E5%92%8CComparator/"/>
    <id>https://isjinhao.github.io/2019/Comparable和Comparator/</id>
    <published>2019-04-20T01:25:44.000Z</published>
    <updated>2019-04-21T12:01:09.438Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><p>这俩都是Java集合框架的一部分，而且都是和集合排序有关。</p><h2 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h2><p>Comparable 在 java.lang 包下，是一个接口，内部只有一个方法 compareTo()：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Comparable&lt;T&gt; &#123;</span><br><span class="line">    public int compareTo(T o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compareTo 方法的返回值有三种情况：</p><ul><li>e1.compareTo(e2) &gt; 0 即 e1 &gt; e2</li><li>e1.compareTo(e2) = 0 即 e1 = e2</li><li>e1.compareTo(e2) &lt; 0 即 e1 &lt; e2</li></ul><blockquote><p>This interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class’s natural ordering, and the class’s compareTo method is referred to as its natural comparison method.</p><p>Lists (and arrays) of objects that implement this interface can be sorted automatically by Collections.sort (and Arrays.sort). Objects that implement this interface can be used as keys in a sorted map or as elements in a sorted set, without the need to specify a comparator.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">30</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">90</span>));</span><br><span class="line">    </span><br><span class="line">    Iterator&lt;Person&gt; iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age &gt; o.age)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(age &lt; o.age)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note that null is not an instance of any class, and e.compareTo(null) should throw a NullPointerException even though e.equals(null)returns false.</p></blockquote><blockquote><p>The natural ordering for a class C is said to be consistent with equals if and only if e1.compareTo(e2) == 0 has the same boolean value as e1.equals(e2) for every e1 and e2 of class C. It is strongly recommended (though not required) that natural orderings be consistent with equals. This is so because sorted sets (and sorted maps)without explicit comparators behave “strangely” when they are used with elements (or keys) whose natural ordering is inconsistent with equals. In particular, such a sorted set (or sorted map) violates the general contract for set (or map), which is defined in terms of the equals method.</p><p>For example, if one adds two keys a and b such that (!a.equals(b) &amp;&amp; a.compareTo(b) == 0) to a sorted set that does not use an explicit comparator, the second add operation returns false (and the size of the sorted set does not increase) because a and b are equivalent from the sorted set’s perspective.</p></blockquote><p>这段话的意思是如果compareTo规则和equals规则不同就会发生奇怪的问题，即在!a.equals(b) &amp;&amp; a.compareTo(b) == 0这种情况下，不能插入集合中，但是从排序集合的角度来看它们是不同的。（排序集合通过equals规则判断是否一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">90</span>));</span><br><span class="line">    </span><br><span class="line">    Iterator&lt;Person&gt; iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age &gt; o.age)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(age &lt; o.age)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">Person p = (Person)obj;</span><br><span class="line"><span class="keyword">if</span>(p.age == age + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h2><p>核心方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(T lhs, T rhs)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用自然排序需要类实现 Comparable，并且在内部重写 comparaTo 方法。而 Comparator 则是在外部制定排序规则，然后作为排序策略参数传递给某些类，比如 Collections.sort(), Arrays.sort(), 或者一些内部有序的集合（比如 SortedSet，SortedMap 等）。</p><p>使用方式主要分三步：</p><ol><li>创建一个 Comparator 接口的实现类，并赋值给一个对象。在 compare 方法中针对自定义类写排序规则。</li><li>将 Comparator 对象作为参数传递给 排序类的某个方法</li><li>向排序类中添加 compare 方法中使用的自定义类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Comparator&lt;Person&gt; com = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o1.getAge() &gt; o2.getAge())</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(o1.getAge() &lt; o2.getAge())</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">    Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(com);</span><br><span class="line">    </span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">20</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">90</span>));</span><br><span class="line">    </span><br><span class="line">    Iterator&lt;Person&gt; iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java 中的两种排序方式：</p><ol><li>Comparable 自然排序。（实体类实现）</li><li>Comparator 是定制排序。（无法修改实体类时，直接在调用方创建）</li></ol><p>同时存在时采用 Comparator（定制排序）的规则进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Comparator&lt;Person&gt; com = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o1.getAge() &gt; o2.getAge())</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(o1.getAge() &lt; o2.getAge())</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">    Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(com);</span><br><span class="line">    </span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">50</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">20</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">90</span>));</span><br><span class="line">    </span><br><span class="line">    Iterator&lt;Person&gt; iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age &gt; o.age)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(age &lt; o.age)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;这俩都是Java集合框架的一部分，而且都是和集合排序有关。&lt;/p&gt;&lt;h2 id=&quot;Comparable&quot;&gt;&lt;a href=&quot;#Comparabl
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java8-Stream</title>
    <link href="https://isjinhao.github.io/2019/Java8-Stream/"/>
    <id>https://isjinhao.github.io/2019/Java8-Stream/</id>
    <published>2019-04-18T08:51:37.000Z</published>
    <updated>2019-04-19T14:02:42.342Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>lambda</title>
    <link href="https://isjinhao.github.io/2019/lambda/"/>
    <id>https://isjinhao.github.io/2019/lambda/</id>
    <published>2019-04-18T08:50:33.000Z</published>
    <updated>2019-04-21T10:42:34.864Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="Java8" scheme="https://isjinhao.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>requset的get开头无参方法测试</title>
    <link href="https://isjinhao.github.io/2019/requset%E7%9A%84get%E5%BC%80%E5%A4%B4%E6%97%A0%E5%8F%82%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95/"/>
    <id>https://isjinhao.github.io/2019/requset的get开头无参方法测试/</id>
    <published>2019-04-18T06:05:55.000Z</published>
    <updated>2019-04-21T11:57:39.485Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><p>笔者一直都对request.get*()方法觉得迷惑，分不清返回的到底是什么东西。所以做个测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(request.getRequestURL().toString());</span><br><span class="line">System.out.println(request.getRequestURI().toString());</span><br><span class="line">System.out.println(request.getServletPath());</span><br><span class="line">System.out.println(request.getServerPort());</span><br><span class="line">System.out.println(request.getScheme());</span><br><span class="line">System.out.println(request.getRemoteUser());</span><br><span class="line">System.out.println(request.getRemotePort());</span><br><span class="line">System.out.println(request.getRemoteHost());</span><br><span class="line">System.out.println(request.getRemoteAddr());</span><br><span class="line">System.out.println(request.getQueryString());</span><br><span class="line">System.out.println(request.getProtocol());</span><br><span class="line">System.out.println(request.getPathTranslated());</span><br><span class="line">System.out.println(request.getAuthType());</span><br><span class="line">System.out.println(request.getCharacterEncoding());</span><br><span class="line">System.out.println(request.getContentLength());</span><br><span class="line">System.out.println(request.getContentLengthLong());</span><br><span class="line">System.out.println(request.getContentType());</span><br><span class="line">System.out.println(request.getContextPath());</span><br><span class="line">System.out.println(request.getLocalAddr());</span><br><span class="line">System.out.println(request.getLocalName());</span><br><span class="line">System.out.println(request.getLocalPort());</span><br><span class="line">System.out.println(request.getMethod());</span><br><span class="line">System.out.println(request.getPathInfo());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端IP：10.5.70.87</p><p>服务器IP：10.5.69.204</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">getAuthType : null</span><br><span class="line">getCharacterEncoding : null</span><br><span class="line">getContentLength : -1</span><br><span class="line">getContentLengthLong : -1</span><br><span class="line">getContentType : null</span><br><span class="line">getContextPath : /Test-URI//webapps下的项目文件夹名称</span><br><span class="line">getLocalAddr : 10.5.69.204//相对Web应用来说是Local，对B/S结构来说是S</span><br><span class="line">getLocalName : DESKTOP-OI1K2LH  //S的名称</span><br><span class="line">getLocalPort : 80//S的端口号</span><br><span class="line">getMethod : GET</span><br><span class="line">getPathInfo : null</span><br><span class="line">getPathTranslated : null</span><br><span class="line">getProtocol : HTTP/1.1</span><br><span class="line">getQueryString : id=10</span><br><span class="line">getRemoteAddr : 10.5.70.87//B/S的B的地址</span><br><span class="line">getRemoteHost : 10.5.70.87</span><br><span class="line">getRemotePort : 52897//B的端口号</span><br><span class="line">getRemoteUser : null</span><br><span class="line">getRequestedSessionId : null</span><br><span class="line">getRequestURI : /Test-URI/test//相对于项目的地址</span><br><span class="line">getScheme : http//协议类型</span><br><span class="line">getServerName : 10.5.69.204</span><br><span class="line">getServerPort : 80</span><br><span class="line">getServletPath : /test//Servlet映射的地址</span><br><span class="line">getAttributeNames : java.util.Collections$3@1994a730</span><br><span class="line">getRequestURL : http://10.5.69.204/Test-URI/test//浏览器中输入地址</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;笔者一直都对request.get*()方法觉得迷惑，分不清返回的到底是什么东西。所以做个测试：&lt;/p&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
      <category term="JavaWeb" scheme="https://isjinhao.github.io/categories/Java/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="JavaWeb" scheme="https://isjinhao.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>File和Path和Files</title>
    <link href="https://isjinhao.github.io/2019/File%E5%92%8CPath%E5%92%8CFiles/"/>
    <id>https://isjinhao.github.io/2019/File和Path和Files/</id>
    <published>2019-04-18T05:41:16.000Z</published>
    <updated>2019-04-22T07:59:41.976Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public File(String filepath);</span><br><span class="line">绝对路径:以盘符开头的路径</span><br><span class="line">相对路径:相对当前项目的根目录</span><br><span class="line"></span><br><span class="line">public File(String parent, String child);</span><br><span class="line"></span><br><span class="line">public File(File parent,String child);</span><br><span class="line"></span><br><span class="line">public File(URI uri);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File aFile;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">aFile = <span class="keyword">new</span> File(<span class="keyword">new</span> URI(<span class="string">"file:///https://isjinhao.github.io/2019/Maven%E5%9F%BA%E7%A1%80/%E4%BC%A0%E7%BB%9F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91.png"</span>));</span><br><span class="line">System.out.println(aFile.getName());<span class="comment">// false</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public String getAbsolutePath();//获取绝对路径</span><br><span class="line"></span><br><span class="line">public String getName();//获取当前File对象的名字</span><br><span class="line"></span><br><span class="line">public String getPath();//获取创建File对象时 传递的路径</span><br><span class="line"></span><br><span class="line">public long length();</span><br><span class="line">//获取表示文件的File对象的占用的字节数</span><br><span class="line">//如果是文件夹的File对象,返回目录本身的大小,不是目录及其所有孩子的大小</span><br></pre></td></tr></table></figure><h3 id="创建和删除"><a href="#创建和删除" class="headerlink" title="创建和删除"></a>创建和删除</h3><h3 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h3><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public boolean createNewFile();//创建一个新的文件(只能是文件,不能是文件夹),返回是否创建成功</span><br></pre></td></tr></table></figure><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public boolean mkdir();//创建一个新的文件夹,返回是否创建成功</span><br></pre></td></tr></table></figure><h3 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h3><h4 id="判断File对象所表示的文件在OS中是否存在"><a href="#判断File对象所表示的文件在OS中是否存在" class="headerlink" title="判断File对象所表示的文件在OS中是否存在"></a>判断File对象所表示的文件在OS中是否存在</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public boolean exists(); //返回该File 对象是否存在</span><br></pre></td></tr></table></figure><h4 id="判断是否是文件"><a href="#判断是否是文件" class="headerlink" title="判断是否是文件"></a>判断是否是文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public boolean isFile();//返回是否是文件</span><br></pre></td></tr></table></figure><h4 id="判断是否是文件夹"><a href="#判断是否是文件夹" class="headerlink" title="判断是否是文件夹"></a>判断是否是文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public boolean isDirectory();//返回是否是文件夹</span><br></pre></td></tr></table></figure><h3 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public boolean delete();//删除文件或者文件夹。可以删除的是单个文件,或者空文件夹</span><br></pre></td></tr></table></figure><h3 id="File类的list和listFiles方法"><a href="#File类的list和listFiles方法" class="headerlink" title="File类的list和listFiles方法"></a>File类的list和listFiles方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String[] list();</span><br><span class="line">public File[] listFiles();</span><br><span class="line">//只能列出当前文件夹下的一级子文件或者子文件夹</span><br></pre></td></tr></table></figure><h3 id="文件过滤"><a href="#文件过滤" class="headerlink" title="文件过滤"></a>文件过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File fileDir = <span class="keyword">new</span> File(<span class="string">"D:\\blog\\isjinhao\\source\\_posts\\04-进程管理"</span>);</span><br><span class="line"><span class="comment">//列出file下所有file对象</span></span><br><span class="line">MyFileFilter ff = <span class="keyword">new</span> MyFileFilter();</span><br><span class="line">File[] files = fileDir.listFiles(ff);</span><br><span class="line"><span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">System.out.println(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFileFilter</span> <span class="keyword">implements</span> <span class="title">FileFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">String name = pathname.getName();</span><br><span class="line"><span class="keyword">if</span>(name.endsWith(<span class="string">".png"</span>) || name.endsWith(<span class="string">".PNG"</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>Path是JDK7中表达路径的一个新方式，在Path中，它把文件的路径看做几个<strong>部件</strong>组成的，比如<code>/usr/develop/tomcat</code>可以被看出两个部件组成：<code>/usr</code>和<code>/develop/tomcat</code>，当然也可以看做三个部件<code>/usr</code>、<code>/develop</code>和<code>/tomcat</code>组成的。以根部件开始的是绝对路径，在类Unix系统中是<code>\</code>，在Windows系统中是<code>C:\</code>等。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="获得Path"><a href="#获得Path" class="headerlink" title="获得Path"></a>获得Path</h4><p>通过Paths的静态方法：</p><ol><li><code>static Path get(String first, String ... more);</code></li><li><code>public static Path get(URI uri);</code></li></ol><p>通过连接给定的字符串创建一个路径。</p><h4 id="按当前路径解析路径"><a href="#按当前路径解析路径" class="headerlink" title="按当前路径解析路径"></a>按当前路径解析路径</h4><ol><li><code>Path resolve(Path other);</code></li><li><code>Path resolve(String other);</code></li></ol><p>如果other是绝对路径，那么返回other；否则，返回通过连接this和other获得路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Path path1 = Paths.get(<span class="string">"D:\\"</span>, <span class="string">"data.csv"</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">"test\\test"</span>, <span class="string">"选修课数据修改.csv"</span>);</span><br><span class="line"></span><br><span class="line">Path path3 = path1.resolve(path2);</span><br><span class="line">Path path4 = path2.resolve(path1);</span><br><span class="line"></span><br><span class="line">System.out.println(path3);<span class="comment">//D:\data.csv\test\test\选修课数据修改.csv</span></span><br><span class="line">System.out.println(path4);<span class="comment">//D:\data.csv</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按当前路径解析路径-1"><a href="#按当前路径解析路径-1" class="headerlink" title="按当前路径解析路径"></a>按当前路径解析路径</h4><ol><li><code>Path resolveSibling(Path other);</code></li><li><code>Path resolveSibling(String other);</code></li></ol><p>如果other是绝对路径，那么返回other；否则，返回通过连接this的父路径和other获得路径。</p><h4 id="按相对路径进行解析"><a href="#按相对路径进行解析" class="headerlink" title="按相对路径进行解析"></a>按相对路径进行解析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Path path1 = Paths.get(<span class="string">"D:\\"</span>, <span class="string">"data.csv"</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">"D:\\test\\test"</span>, <span class="string">"选修课数据修改.csv"</span>);</span><br><span class="line"></span><br><span class="line">Path path3 = path2.relativize(path1);</span><br><span class="line">System.out.println(path3);  <span class="comment">//返回相对于path2的path1的绝对路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h4><ol><li>移除诸如.和..等的冗余元素：<code>Path normalize();</code></li><li>返回和当前路径相等价的绝对路径：<code>Path toAbsolutePath();</code></li><li>返回父路径（没有时返回null）：<code>Path getParent();</code></li><li>返回该路径的最后一个部件：<code>Path getFileName();</code></li><li>返回该路径的根部件（没有时返回null）：<code>Path getRoot();</code></li><li>由Path创建一个File对象：<code>File toFile();</code></li></ol><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><h3 id="处理小型文本文件"><a href="#处理小型文本文件" class="headerlink" title="处理小型文本文件"></a>处理小型文本文件</h3><ul><li><code>public static byte[] readAllBytes(Path path) throws IOException</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">"filestest"</span>));</span><br><span class="line">String string = <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>public static List&lt;String&gt; readAllLines(Path path) throws IOException</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;String&gt; lines = Files.readAllLines(Paths.get(<span class="string">"filestest"</span>));</span><br><span class="line">Iterator&lt;String&gt; iterator = lines.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>public static Path write(Path path, byte[] bytes, OpenOption... options) throws IOException</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Files.write(Paths.get(<span class="string">"filestest"</span>), <span class="string">"深陷琪中，钰罢不能"</span>.getBytes(), StandardOpenOption.APPEND);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获得IO流<ul><li><code>public static InputStream newInputStream(Path path, OpenOption... options)</code></li><li><code>public static OutputStream newOutputStream(Path path, OpenOption... options)</code></li><li><code>public static BufferedReader newBufferedReader(Path path, Charset cs)</code></li><li><code>public static BufferedReader newBufferedReader(Path path)</code></li></ul></li></ul><h3 id="替换File"><a href="#替换File" class="headerlink" title="替换File"></a>替换File</h3><h4 id="Files-exists"><a href="#Files-exists" class="headerlink" title="Files.exists()"></a>Files.exists()</h4><p><code>Files.exists()</code>方法检查给定的<code>Path</code>在文件系统中是否存在。</p><p>可以创建在文件系统中不存在的<code>Path</code>实例。例如，如果您计划创建一个新目录，您首先要创建相应的<code>Path</code>实例，然后创建目录。</p><p>由于<code>Path</code>实例可能指向，也可能没有指向文件系统中存在的路径，你可以使用<code>Files.exists()</code>方法来确定它们是否存在(如果需要检查的话)。</p><p>这里是一个Java <code>Files.exists()</code>的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(&quot;data/logging.properties&quot;);</span><br><span class="line"></span><br><span class="line">boolean pathExists =</span><br><span class="line">        Files.exists(path, new LinkOption[]&#123; LinkOption.NOFOLLOW_LINKS &#125;);</span><br></pre></td></tr></table></figure><p>这个例子首先创建一个<code>Path</code>实例指向一个路径，我们想要检查这个路径是否存在。然后，这个例子调用<code>Files.exists()</code>方法，然后将<code>Path</code>实例作为第一个参数。</p><p>注意<code>Files.exists()</code>方法的第二个参数。这个参数是一个选项数组，它影响<code>Files.exists()</code>如何确定路径是否存在。在上面的例子中的数组包含<code>LinkOption.NOFOLLOW_LINKS</code>，这意味着<code>Files.exists()</code>方法不应该在文件系统中跟踪符号链接，以确定文件是否存在。</p><h4 id="Files-createDirectory"><a href="#Files-createDirectory" class="headerlink" title="Files.createDirectory()"></a>Files.createDirectory()</h4><p><code>Files.createDirectory()</code>方法，用于根据<code>Path</code>实例创建一个新目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(&quot;data/subdir&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">    Path newDir = Files.createDirectory(path);</span><br><span class="line">&#125; catch(FileAlreadyExistsException e)&#123;</span><br><span class="line">    // 目录已经存在</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    // 其他发生的异常</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行创建表示要创建的目录的<code>Path</code>实例。在<code>try-catch</code>块中，用路径作为参数调用<code>Files.createDirectory()</code>方法。如果创建目录成功，将返回一个<code>Path</code>实例，该实例指向新创建的路径。</p><p>如果该目录已经存在，则是抛出一个<code>java.nio.file.FileAlreadyExistsException</code>。如果出现其他错误，可能会抛出<code>IOException</code>。例如，如果想要的新目录的父目录不存在，则可能会抛出<code>IOException</code>。父目录是您想要创建新目录的目录。因此，它表示新目录的父目录。</p><h4 id="Files-copy"><a href="#Files-copy" class="headerlink" title="Files.copy()"></a>Files.copy()</h4><p><code>Files.copy()</code>方法从一个路径拷贝一个文件到另外一个目录，这里是一个Java <code>Files.copy()</code>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Path sourcePath      = Paths.get(&quot;data/logging.properties&quot;);</span><br><span class="line">Path destinationPath = Paths.get(&quot;data/logging-copy.properties&quot;);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    Files.copy(sourcePath, destinationPath);</span><br><span class="line">&#125; catch(FileAlreadyExistsException e) &#123;</span><br><span class="line">    // 目录已经存在</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    // 其他发生的异常</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，该示例创建一个源和目标<code>Path</code>实例。然后，这个例子调用<code>Files.copy()</code>，将两个<code>Path</code>实例作为参数传递。这可以让源路径引用的文件被复制到目标路径引用的文件中。</p><p>如果目标文件已经存在，则抛出一个<code>java.nio.file.FileAlreadyExistsException</code>异常。如果有其他错误，则会抛出一个<code>IOException</code>。例如，如果将该文件复制到不存在的目录，则会抛出<code>IOException</code>。</p><h4 id="重写已存在的文件"><a href="#重写已存在的文件" class="headerlink" title="重写已存在的文件"></a>重写已存在的文件</h4><p>可以强制<code>Files.copy()</code>覆盖现有的文件。这里有一个示例，演示如何使用<code>Files.copy()</code>覆盖现有文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Path sourcePath      = Paths.get(&quot;data/logging.properties&quot;);</span><br><span class="line">Path destinationPath = Paths.get(&quot;data/logging-copy.properties&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">    Files.copy(sourcePath, destinationPath,</span><br><span class="line">            StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">&#125; catch(FileAlreadyExistsException e) &#123;</span><br><span class="line">    // 目标文件已存在</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    // 其他发生的异常</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意<code>Files.copy()</code>方法的第三个参数。如果目标文件已经存在，这个参数指示<code>copy()</code>方法覆盖现有的文件。</p><h4 id="Files-move"><a href="#Files-move" class="headerlink" title="Files.move()"></a>Files.move()</h4><p>Java NIO <code>Files</code>还包含一个函数，用于将文件从一个路径移动到另一个路径。移动文件与重命名相同，但是移动文件既可以移动到不同的目录，也可以在相同的操作中更改它的名称。是的,<code>java.io.File</code>类也可以使用它的<code>renameTo()</code>方法来完成这个操作，但是现在已经在<code>java.nio.file.Files</code>中有了文件移动功能。</p><p>这里有一个Java <code>Files.move()</code>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Path sourcePath      = Paths.get(&quot;data/logging-copy.properties&quot;);</span><br><span class="line">Path destinationPath = Paths.get(&quot;data/subdir/logging-moved.properties&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">    Files.move(sourcePath, destinationPath,</span><br><span class="line">            StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    //移动文件失败</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先创建源路径和目标路径。源路径指向要移动的文件，而目标路径指向文件应该移动到的位置。然后调用<code>Files.move()</code>方法。这会导致文件被移动。</p><p>请注意传递给<code>Files.move()</code>的第三个参数。这个参数告诉<code>Files.move()</code>方法来覆盖目标路径上的任何现有文件。这个参数实际上是可选的。</p><p>如果移动文件失败，<code>Files.move()</code>方法可能抛出一个<code>IOException</code>。例如，如果一个文件已经存在于目标路径中，并且您已经排除了<code>StandardCopyOption.REPLACE_EXISTING</code>选项，或者被移动的文件不存在等等。</p><h4 id="Files-delete"><a href="#Files-delete" class="headerlink" title="Files.delete()"></a>Files.delete()</h4><p><code>Files.delete()</code>方法可以删除一个文件或者目录。下面是一个Java <code>Files.delete()</code>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(&quot;data/subdir/logging-moved.properties&quot;);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    Files.delete(path);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    // 删除文件失败</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，创建指向要删除的文件的<code>Path</code>。然后调用<code>Files.delete()</code>方法。如果<code>Files.delete()</code>由于某种原因不能删除文件(例如，文件或目录不存在)，会抛出一个<code>IOException</code>。</p><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><h4 id="Files-walkFileTree"><a href="#Files-walkFileTree" class="headerlink" title="Files.walkFileTree()"></a>Files.walkFileTree()</h4><p><code>Files.walkFileTree()</code>方法包含递归遍历目录树的功能。<code>walkFileTree()</code>方法将<code>Path</code>实例和<code>FileVisitor</code>作为参数。<code>Path</code>实例指向您想要遍历的目录。<code>FileVisitor</code>在遍历期间被调用。</p><p>在我解释遍历是如何工作之前，这里我们先了解<code>FileVisitor</code>接口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface FileVisitor &#123;</span><br><span class="line">    public FileVisitResult preVisitDirectory(</span><br><span class="line">        Path dir, BasicFileAttributes attrs) throws IOException;</span><br><span class="line"></span><br><span class="line">    public FileVisitResult visitFile(</span><br><span class="line">        Path file, BasicFileAttributes attrs) throws IOException;</span><br><span class="line"></span><br><span class="line">    public FileVisitResult visitFileFailed(</span><br><span class="line">        Path file, IOException exc) throws IOException;</span><br><span class="line"></span><br><span class="line">    public FileVisitResult postVisitDirectory(</span><br><span class="line">        Path dir, IOException exc) throws IOException &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您必须自己实现<code>FileVisitor</code>接口，并将实现的实例传递给<code>walkFileTree()</code>方法。在目录遍历过程中，您的<code>FileVisitor</code>实现的每个方法都将被调用。如果不需要实现所有这些方法，那么可以扩展<code>SimpleFileVisitor</code>类，它包含<code>FileVisitor</code>接口中所有方法的默认实现。</p><p>这里是一个<code>walkFileTree()</code>的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Files.walkFileTree(path, new FileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException &#123;</span><br><span class="line">    System.out.println(&quot;pre visit dir:&quot; + dir);</span><br><span class="line">    return FileVisitResult.CONTINUE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException &#123;</span><br><span class="line">    System.out.println(&quot;visit file: &quot; + file);</span><br><span class="line">    return FileVisitResult.CONTINUE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException &#123;</span><br><span class="line">    System.out.println(&quot;visit file failed: &quot; + file);</span><br><span class="line">    return FileVisitResult.CONTINUE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException &#123;</span><br><span class="line">    System.out.println(&quot;post visit directory: &quot; + dir);</span><br><span class="line">    return FileVisitResult.CONTINUE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>FileVisitor</code>实现中的每个方法在遍历过程中的不同时间都被调用:</p><p>在访问任何目录之前调用<code>preVisitDirectory()</code>方法。在访问一个目录之后调用<code>postVisitDirectory()</code>方法。</p><p>调用<code>visitFile()</code>在文件遍历过程中访问的每一个文件。它不会访问目录-只会访问文件。在访问文件失败时调用<code>visitFileFailed()</code>方法。例如，如果您没有正确的权限，或者其他什么地方出错了。</p><p>这四个方法中的每个都返回一个<code>FileVisitResult</code>枚举实例。<code>FileVisitResult</code>枚举包含以下四个选项:</p><ul><li>CONTINUE 继续</li><li>TERMINATE 终止</li><li>SKIP_SIBLING 跳过同级</li><li>SKIP_SUBTREE 跳过子级</li></ul><p>通过返回其中一个值，调用方法可以决定如何继续执行文件。</p><p><code>CONTINUE</code><strong>继续</strong>意味着文件的执行应该像正常一样继续。</p><p><code>TERMINATE</code><strong>终止</strong>意味着文件遍历现在应该终止。</p><p><code>SKIP_SIBLINGS</code><strong>跳过同级</strong>意味着文件遍历应该继续，但不需要访问该文件或目录的任何同级。</p><p><code>SKIP_SUBTREE</code><strong>跳过子级</strong>意味着文件遍历应该继续，但是不需要访问这个目录中的子目录。这个值只有从<code>preVisitDirectory()</code>返回时才是一个函数。如果从任何其他方法返回，它将被解释为一个<code>CONTINUE</code>继续。</p><h4 id="文件搜索-1"><a href="#文件搜索-1" class="headerlink" title="文件搜索"></a>文件搜索</h4><p>这里是一个用于扩展<code>SimpleFileVisitor</code>的<code>walkFileTree()</code>，以查找一个名为<code>README.txt</code>的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Path rootPath = Paths.get(&quot;data&quot;);</span><br><span class="line">String fileToFind = File.separator + &quot;README.txt&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  Files.walkFileTree(rootPath, new SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException &#123;</span><br><span class="line">      String fileString = file.toAbsolutePath().toString();</span><br><span class="line">      //System.out.println(&quot;pathString = &quot; + fileString);</span><br><span class="line"></span><br><span class="line">      if(fileString.endsWith(fileToFind))&#123;</span><br><span class="line">        System.out.println(&quot;file found at path: &quot; + file.toAbsolutePath());</span><br><span class="line">        return FileVisitResult.TERMINATE;</span><br><span class="line">      &#125;</span><br><span class="line">      return FileVisitResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; catch(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归删除目录"><a href="#递归删除目录" class="headerlink" title="递归删除目录"></a>递归删除目录</h4><p><code>Files.walkFileTree()</code>也可以用来删除包含所有文件和子目录的目录。<code>Files.delete()</code>方法只会删除一个目录，如果它是空的。通过遍历所有目录并删除每个目录中的所有文件(在<code>visitFile()</code>)中，然后删除目录本身(在<code>postVisitDirectory()</code>中)，您可以删除包含所有子目录和文件的目录。下面是一个递归目录删除示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Path rootPath = Paths.get(&quot;data/to-delete&quot;);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  Files.walkFileTree(rootPath, new SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException &#123;</span><br><span class="line">      System.out.println(&quot;delete file: &quot; + file.toString());</span><br><span class="line">      Files.delete(file);</span><br><span class="line">      return FileVisitResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException &#123;</span><br><span class="line">      Files.delete(dir);</span><br><span class="line">      System.out.println(&quot;delete dir: &quot; + dir.toString());</span><br><span class="line">      return FileVisitResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; catch(IOException e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;File&quot;&gt;&lt;a href=&quot;#File&quot; class=&quot;headerlink&quot; title=&quot;File&quot;&gt;&lt;/a&gt;File&lt;/h2&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="Java-文件处理" scheme="https://isjinhao.github.io/tags/Java-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java-正则表达式</title>
    <link href="https://isjinhao.github.io/2019/Java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://isjinhao.github.io/2019/Java-正则表达式/</id>
    <published>2019-04-18T04:51:36.000Z</published>
    <updated>2019-04-18T05:22:42.737Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。但是上面的叙述，对于之前没有接触过正则表达式的人还是很迷，我们打个比方，有一串字符：<code>123xyz234</code>和一个模式：<code>*^*</code>，我们假设<code>*</code>表示任意长度的由数字组成的字符串，<code>^</code>表示任意长度的由英文字符表示的字符串，那么我们就可以说这个字符串能匹配上这个模式。因为<code>123</code>可以匹配上<code>*</code>，<code>xyz</code>可以匹配上<code>^</code>，<code>234</code>可以匹配上<code>*</code>。同样的，假如我们再有一个模式：<code>*^</code>，我们用这个模式在字符串中提取，可以提取出来：<code>123</code>、<code>123x</code>、<code>123xyz</code>、<code>234</code> 等等，但是不能提取出来<code>z234</code>、<code>123xyz234</code>。因为我们能提取出来的都是符合这个模式的，这个模式就是正则表达式。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>不同的语言在正则表达式上的语法是有差距的，但是相同点远远大于不同点。我们在这使用Java语言中正则表达式。不过正则表达式的语法非常难记，在这也是举例出一些常用的语法，具体使用还是得查文档。</p><h3 id="最简单的正则表达式"><a href="#最简单的正则表达式" class="headerlink" title="最简单的正则表达式"></a>最简单的正则表达式</h3><p>在我们刚才的举例中可以看出正则表达式其实就是一种匹配规则，那么每个字符串也都是一种匹配规则（这种规则只能匹配其自身）。比如下面的<code>split()</code>方法是按照正则表达式把字符串分割，我们传入的一个字符串就是一个正则表达式。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String testStr = <span class="string">"1234567890"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Splits this string around matches of the given regular expression. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] split = testStr.split(<span class="string">"67"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//testStr中只有67能匹配split()方法中传入的67，所以按67进行分隔，同时67被删除</span></span><br><span class="line">System.out.println(Arrays.deepToString(split));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="和正则表达式有关的类"><a href="#和正则表达式有关的类" class="headerlink" title="和正则表达式有关的类"></a>和正则表达式有关的类</h3><p>虽然上个例子我们并没有使用到正则表达式相关的类，但这并不表明正则表达式就是一个字符串这么简单，在<code>split()</code>方法的内部还是调用了正则表达式相关的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex) &#123;</span><br><span class="line">    <span class="keyword">return</span> split(regex, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Pattern</code>类：一个Pattern表示一个正则表达式。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式字符串作为它的第一个参数。</li><li><code>Matcher</code>类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</li><li><code>PatternSyntaxException</code>：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</li></ul><p>现在我们使用正则表达式有关的类来完成上面的例子：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String testStr = <span class="string">"1234567890"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"67"</span>);</span><br><span class="line">String[] split = pattern.split(testStr);</span><br><span class="line">System.out.println(Arrays.deepToString(split));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>PatternSyntaxException 式一个异常类，但是不强制处理正则表达式的异常，所以这里可加可不加。Matcher的用法请继续看下去。</p><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><p>在上面我们测试的是正则表达式的分割作用，但是这并不是一个很好的学习正则表达式的例子。所以下面我们将采用<code>匹配方法</code>来学习正则表达式，先给一个小例子。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String testStr = <span class="string">"1234567890"</span>;</span><br><span class="line"><span class="keyword">boolean</span> matches = Pattern.matches(<span class="string">"67"</span>, testStr);</span><br><span class="line">System.out.println(matches);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里的输出结果肯定是<code>false</code>了，因为这是两个不同的字符串，自然无法被匹配。</p><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><ul><li><code>[abc]</code> ：a、b 或 c（简单类）</li><li><code>[^abc]</code> ：任何字符，除了 a、b 或 c（否定）</li><li><code>[a-zA-Z]</code> ：a 到 z 或 A 到 Z，两头的字母包括在内（范围）</li><li><code>[a-d[m-p]]</code> ：a 到 d 或 m 到 p：[a-dm-p]（并集）</li><li><code>[a-z&amp;&amp;[def]]</code> ：d、e 或 f（交集）</li><li><code>[a-z&amp;&amp;[^bc]]</code> ：a 到 z，除了 b 和 c：[ad-z]（减去）</li><li><code>[a-z&amp;&amp;[^m-p]]</code> ：a 到 z，而非 m 到 p：[a-lq-z]（减去）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String testStr = <span class="string">"123"</span>;</span><br><span class="line">Pattern.matches(<span class="string">"[123][123][123]"</span>, testStr); <span class="comment">//true</span></span><br><span class="line">Pattern.matches(<span class="string">"[^123][123][123]"</span>, testStr); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h4><ul><li><code>.</code> ：任何字符（与行结束符可能匹配也可能不匹配）</li><li><code>\d</code> ：数字：[0-9]</li><li><code>\D</code> ：非数字： [^0-9]</li><li><code>\s</code> ：空白字符：[ \t\n\x0B\f\r]</li><li><code>\S</code> ：非空白字符：[^\s]</li><li><code>\w</code> ：单词字符：[a-zA-Z_0-9]</li><li><code>\W</code> ：非单词字符：[^\w]<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String testStr = <span class="string">"123"</span>;</span><br><span class="line">System.out.println(Pattern.matches(<span class="string">"\\d\\d\\d"</span>, testStr)); <span class="comment">//true</span></span><br><span class="line">System.out.println(Pattern.matches(<span class="string">"\\w\\w\\w"</span>, testStr));<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h4><ul><li><code>X?</code>： X存在一次或一次也没有</li><li><code>X*</code> ：X存在零次或多次</li><li><code>X+</code> ：X存在一次或多次</li><li><code>X{n}</code> ：X存在恰好 n 次</li><li><code>X{n,}</code> ：X存在至少 n 次</li><li><code>X{n,m}</code> ：X存在至少 n 次，但是不超过 m 次<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String testStr = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">boolean</span> matches = Pattern.matches(<span class="string">"[123]&#123;3&#125;"</span>, testStr); <span class="comment">//true</span></span><br><span class="line">System.out.println(matches);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="查找子串"><a href="#查找子串" class="headerlink" title="查找子串"></a>查找子串</h4><p>查找子串需要使用到Pattern和Mather<br><code>[flid=1415279, ffid=BK-2898-20180922-A, frtt=20180922210700, frlt=20180923000300][flid=1417032, ffid=OD-689-20180923-D, fatt=2401, stat=BOR, ista=BOR]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FFID = <span class="string">"((ffid=)&#123;1&#125;)\\w&#123;2&#125;-\\w&#123;3,6&#125;-\\d&#123;8&#125;-\\w"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"[flid=1415279, ffid=BK-2898-20180922-A, frtt=20180922210700, frlt=20180923000300][flid=1417032, ffid=OD-689-20180923-D, fatt=2401, stat=BOR, ista=BOR]"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(FFID);</span><br><span class="line">Matcher matcher = pattern.matcher(str);</span><br><span class="line"><span class="comment">//循环找出全部的匹配子串</span></span><br><span class="line"><span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">System.out.println(matcher.group(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ffid=BK-2898-20180922-A</span></span><br><span class="line"><span class="comment">//ffid=OD-689-20180923-D</span></span><br></pre></td></tr></table></figure><p>marcher.group()必须和find()方法配合使用，也就是说find()是真正在字符串中搜索模式的方法（搜索到返回真，否则返回假），但是marcher.group()是将其输出的方法。</p><h4 id="组"><a href="#组" class="headerlink" title="组"></a>组</h4><p>在正则表达式中，每个小括号<code>()</code>括起来的一个子模式是一个组，如<code>(&quot;W(or)(ld!)&quot;</code>中，有两个组<code>or</code>和<code>ld!</code>。在我们方才的例子中，<code>matcher.group(0)</code>的0指的就是matcher关联的模式，但是如果是matcher.group(1)指的就是<code>(ffid=)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FFID = <span class="string">"((ffid=)&#123;1&#125;)\\w&#123;2&#125;-\\w&#123;3,6&#125;-\\d&#123;8&#125;-\\w"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"[flid=1415279, ffid=BK-2898-20180922-A, frtt=20180922210700, frlt=20180923000300][flid=1417032, ffid=OD-689-20180923-D, fatt=2401, stat=BOR, ista=BOR]"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(FFID);</span><br><span class="line">Matcher matcher = pattern.matcher(str);</span><br><span class="line"><span class="comment">//循环找出全部的匹配子串</span></span><br><span class="line">System.out.println(matcher.groupCount());</span><br><span class="line"><span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">System.out.println(matcher.group(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flid=</span></span><br><span class="line"><span class="comment">//flid=</span></span><br></pre></td></tr></table></figure><h2 id="正在表达式实例"><a href="#正在表达式实例" class="headerlink" title="正在表达式实例"></a>正在表达式实例</h2><p><a href="https://www.cnblogs.com/fozero/p/7868687.html。" target="_blank" rel="noopener">https://www.cnblogs.com/fozero/p/7868687.html。</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;正则表达式
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="正则表达式" scheme="https://isjinhao.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring的AOP和事务管理</title>
    <link href="https://isjinhao.github.io/2019/Spring%E7%9A%84AOP%E5%92%8C%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>https://isjinhao.github.io/2019/Spring的AOP和事务管理/</id>
    <published>2019-04-14T14:17:26.000Z</published>
    <updated>2019-04-14T14:17:41.838Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Maven配置SSM环境详解</title>
    <link href="https://isjinhao.github.io/2019/Maven%E9%85%8D%E7%BD%AESSM%E7%8E%AF%E5%A2%83%E8%AF%A6%E8%A7%A3/"/>
    <id>https://isjinhao.github.io/2019/Maven配置SSM环境详解/</id>
    <published>2019-04-14T13:06:35.000Z</published>
    <updated>2019-04-14T14:17:41.841Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ssm-maven-template<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单位分钟 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 解决post乱码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml没有什么好说的，就是将SSM的配置文件加载进去。21行的<code>&lt;servlet&gt;&lt;/servlet&gt;</code>是加载进入SpringMVC的配置文件，可以理解成controller层的配置文件。34行的<code>&lt;context-param&gt;</code>是加载进去service层和dao层的配置文件。</p><h2 id="配置springmvc-xml"><a href="#配置springmvc-xml" class="headerlink" title="配置springmvc.xml"></a>配置springmvc.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/task/spring-task-4.2.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置扫描 器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.template.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置处理器映射器  适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置Fastjson支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"features"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>WriteMapNullValue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>QuoteFieldNames<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解释器 jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置上传文件的最大尺寸为5MB --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>5242880<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 拦截器  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;mvc:interceptors&gt;</span></span><br><span class="line"><span class="comment">&lt;mvc:interceptor&gt;</span></span><br><span class="line"><span class="comment">&lt;mvc:mapping path="/**" /&gt;</span></span><br><span class="line"><span class="comment">&lt;bean class="cn.template.Interceptor.AutoLoginInterceptor" /&gt;</span></span><br><span class="line"><span class="comment">&lt;/mvc:interceptor&gt;</span></span><br><span class="line"><span class="comment">&lt;/mvc:interceptors&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在springmvc.xml中主要配置的是controller层的扫描器，视图解析器，文件上传插件，拦截器等和用户交互相关的配置。SpringMVC默认使用Jackson包来处理json，但是个人一般喜欢使用阿里巴巴的fastjson，所以在此配置文件中将fastjson配置进去。</p><h2 id="配置applicationContext-xml"><a href="#配置applicationContext-xml" class="headerlink" title="配置applicationContext-*.xml"></a>配置applicationContext-*.xml</h2><h3 id="applicationContext-dao-xml"><a href="#applicationContext-dao-xml" class="headerlink" title="applicationContext-dao.xml"></a>applicationContext-dao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/task/spring-task-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 读取properties文件 jdbc.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 Mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置pojo别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"cn.template.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--使用下面的方式配置参数，一行配置一个 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>helperDialect=mysql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描mapper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.template.mapper"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dao层配置文件配置和数据库相关的信息。本人在写项目的时候只使用过mysql，所以这一部分的配置仅可以保证针对mysql生效。</p><ul><li>数据库连接池：阿里巴巴的druid</li><li>配置mybatis及其分页插件</li><li>配置自动扫描接口</li></ul><h3 id="applicationContext-service-xml"><a href="#applicationContext-service-xml" class="headerlink" title="applicationContext-service.xml"></a>applicationContext-service.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/task/spring-task-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 扫描 @Service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span></span></span><br><span class="line"><span class="tag"><span class="attr">base-package</span>=<span class="string">"cn.template.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="applicationContext-transaction-xml"><a href="#applicationContext-transaction-xml" class="headerlink" title="applicationContext-transaction.xml"></a>applicationContext-transaction.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/task/spring-task-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 增删改加入事物控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询方法(只读)不用事物控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置aop切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* cn.template.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.isjinhao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-maven-template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.7<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置支持事物的事务管理器applicationContext-transaction.xml中 org.springframework.jdbc.datasource.DataSourceTransactionManager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatis依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatis-Spring整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通用Mapper依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatis_PageHelper分页依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JSTL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql-connector --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- servlet-api和jsp-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>servletapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servletapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指明只在编译中有效(因为发布过程中Tomcat等容器已经包含了该jar包，导致冲突) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- slf4j到log4j的转接包,才能看到sql语句打印(依赖了log4j，不用单独配置上述log4j) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/template<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 资源文件拷贝插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>坐标没有什么好说的，主要是不产生依赖问题就行。但是插件必须要解释一下：</p><ul><li>tomcat7-maven-plugin：可以将tomcat内嵌到web项目中，直接运行webapp项目。有了这个插件才可以使用<code>tomcat7:run</code>命令。</li><li>maven-resources-plugin：这是资源拷贝插件。在原始的maven项目中，我们使用<code>tomcat7:run</code>运行项目之后会如上图所示，将<code>src/main/java</code>目录下的java文件编译至target目录下的classes目录下。但是我们的mapper.xml文件虽然和mapper.java文件放在同一目录下，但是仍然不会被拷贝至classes目录下。所以我们需要加入此插件将src/main/java下的mapper.xml文件拷贝至classer目录下。不过加入这个插件后，此插件替代了默认的拷贝方式，及src/main/resources不会再被拷贝至classes目录下，所以我们需要指定src/main/resources下的配置文件拷贝过去。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>源码：<a href="https://github.com/isjinhao/ssm-maven-template" target="_blank" rel="noopener">https://github.com/isjinhao/ssm-maven-template</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;配置web-xml&quot;&gt;&lt;a href=&quot;#配置web-xml&quot; class=&quot;headerlink&quot; title=&quot;配置web.xml
      
    
    </summary>
    
      <category term="Maven" scheme="https://isjinhao.github.io/categories/Maven/"/>
    
    
      <category term="SSM" scheme="https://isjinhao.github.io/tags/SSM/"/>
    
      <category term="JavaWeb" scheme="https://isjinhao.github.io/tags/JavaWeb/"/>
    
      <category term="Maven" scheme="https://isjinhao.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven基础</title>
    <link href="https://isjinhao.github.io/2019/Maven%E5%9F%BA%E7%A1%80/"/>
    <id>https://isjinhao.github.io/2019/Maven基础/</id>
    <published>2019-04-14T10:20:21.000Z</published>
    <updated>2019-04-14T10:22:33.034Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Maven是Apache下的一个纯Java开发的开源项目，它是一个项目管理工具，使用Maven对项目进行构建和依赖管理等。所以下面就会介绍什么是项目构建，什么是依赖管理，以及使用Maven来做的好处。</p><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><p>项目构建是指一个项目从编写源代码到编译、测试、运行、打包、部署、运行的过程。在传统的项目构建中流程图如下：</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/传统项目开发.png"></div><p>但是上面的开发适应于小型项目开发，对于大型项目开发，使用Maven给我们提供的规范可以更好更快的开发。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/Maven项目开发.png"></div><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>如果一个项目，需要使用第三方jar包才能运行，我们就说这个项目依赖了这些第三方jar包。比如：使用SSM框架开发OA系统，则此OA依赖SSM框架。在原始开发的过程中，我们是手动添加jar包进去，这样太过麻烦，使用Maven，可以通过配置的方式自动获取jar包并且添加进去。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官网下载地址：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p>下载之后解压到不含中文字符和特殊符号的路径下。再配置环境变量：</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/MAVEN安装1.png"></div><p>然后把<code>%MAVEN_HOME%\bin\</code>配置进Path中。再CMD中输入 mvn -v测试是否安装成功。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/maven安装测试.png"></div><h3 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h3><p>Maven能通过配置的方式添加第三方jar包，是因为它可以自动把指定位置的jar包导入仓库中，这些指定位置就是Maven的仓库。</p><p>在Maven中有三种仓库：本地仓库，私服和中央仓库。中央仓库是Maven团队维护的市面上常用的jar包的集合，平时所用的jar包都能在这个中央仓库中找到。私服指的是在团队开发或公司中，维护一个内网下的中央仓库，所有人使用的jar包都从这个仓库中获取，保证所有人用的开发版本是一致的。本地仓库就是在我们自己的计算机中维护一个仓库，自己在开发的时候都使用这个仓库中的jar包。</p><p>Maven项目在查找jar包的顺序：本地 -&gt; 私服 -&gt; 中央仓库。但是无论的jar包的来源是什么，项目最终都是在本地仓库中寻找jar包。如果本地仓库找不到jar包的时候可以去这个网站寻找，然后贴在<code>pom.xml</code>的<code>&lt;dependencies&gt;&lt;dependencies&gt;</code>中，再update project就可以了。</p><h4 id="Maven仓库的配置"><a href="#Maven仓库的配置" class="headerlink" title="Maven仓库的配置"></a>Maven仓库的配置</h4><p>建一个保存jar包的文件夹。在<code>%MAVEN_HOME%\conf\settings.xml</code>中配置图片中最后一行，位置是自己的本地仓库。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/localrepository.png"></div><h3 id="修改JDK版本"><a href="#修改JDK版本" class="headerlink" title="修改JDK版本"></a>修改JDK版本</h3><p>在<code>%MAVEN_HOME%\conf\settings.xml</code>中的<code>&lt;/profiles&gt;</code>便签里配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Eclipse配置Maven"><a href="#Eclipse配置Maven" class="headerlink" title="Eclipse配置Maven"></a>Eclipse配置Maven</h3><h4 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h4><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/Maven配置eclipse.png"></div><h4 id="更换配置文件"><a href="#更换配置文件" class="headerlink" title="更换配置文件"></a>更换配置文件</h4><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/更换配置文件.png"></div><h4 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h4><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/更新索引.png"></div><h4 id="更换镜像"><a href="#更换镜像" class="headerlink" title="更换镜像"></a>更换镜像</h4><p>Maven默认的镜像是国外站点的镜像。换成阿里云的镜像访问较快。修改setting.xml文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;mirrors&gt;</span><br><span class="line">&lt;mirror&gt; </span><br><span class="line">&lt;id&gt;nexus-aliyun&lt;/id&gt; </span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt; </span><br><span class="line">&lt;name&gt;Nexus aliyun&lt;/name&gt; </span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; </span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line"> &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure><h4 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h4><p><code>Window -&gt; Show View -&gt; Other -&gt; Maven Repositories</code>。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/rebuildIndex.png"></div><h2 id="Maven项目开发"><a href="#Maven项目开发" class="headerlink" title="Maven项目开发"></a>Maven项目开发</h2><h3 id="Maven项目的目录规范"><a href="#Maven项目的目录规范" class="headerlink" title="Maven项目的目录规范"></a>Maven项目的目录规范</h3><p>就像Java项目有它的目录规范，Dynamic Web项目有它的项目规范，Maven项目自然也有他自己的项目规范。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/Maven目录规范.png"></div><h3 id="Eclipse开发Maven项目"><a href="#Eclipse开发Maven项目" class="headerlink" title="Eclipse开发Maven项目"></a>Eclipse开发Maven项目</h3><ul><li>new的时候选择<code>Maven Project</code>。</li></ul><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/eclipse-maven项目1.png"></div><ul><li><strong>勾选create a simple project…</strong>。这步一定要做，否则构建出来的Maven不完整。</li></ul><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/eclipse-maven项目2.png"></div><ul><li>选择Next后必填项是Group Id 和 Artifact Id，前者一般写域名的后置，如：com.xxx，后者是项目名。需要注意的是Packaging，这里有三种选择，jar、pom和war，jar指的是Java Project，pom用于工程的继承，父工程一般打成pom包，war包指的是Java Web项目。本次测试使用war包。</li></ul><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/eclipse-maven项目3.png"></div><ul><li>创建项目后，<code>右击项目 -&gt; Java EE Tools -&gt; Generate Deployment Descriptor Stub</code></li><li>新建项目后。我们在<code>Java Resource/src/main/java</code>中写Java代码。在<code>src/main/webapp</code>中写jsp代码。</li></ul><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/eclipse-maven开发.png"></div><p>Hello.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns=<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">response.getWriter().write(<span class="string">"hello haohao..."</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/NewFile.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NewFile.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=ISO-8859-1"</span></span><br><span class="line">    pageEncoding=<span class="string">"ISO-8859-1"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> hello</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.isjinhao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>course-selection-help<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/helloworld2<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>tomcat7:run</code>运行</li></ul><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/eclipse-maven运行.png"></div><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/tomcat7run.png"></div><p>运行时如果报：No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?，请参考这篇文章：<a href="https://blog.csdn.net/lslk9898/article/details/73836745" target="_blank" rel="noopener">https://blog.csdn.net/lslk9898/article/details/73836745</a></p><ul><li>启动后发现访问时会报错</li></ul><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/依赖报错.png"></div><p>此时需要注意Maven的依赖范围，所以我们需要继续看下去。</p><h2 id="Maven依赖范围"><a href="#Maven依赖范围" class="headerlink" title="Maven依赖范围"></a>Maven依赖范围</h2><h3 id="什么是依赖范围"><a href="#什么是依赖范围" class="headerlink" title="什么是依赖范围?"></a>什么是依赖范围?</h3><p>maven 项目不同的阶段引入到classpath中的依赖是不同的，例如，编译时，maven 会将与编译相关的依赖引入classpath中，测试时，maven会将测试相关的的依赖引入到classpath中，运行时，maven会将与运行相关的依赖引入classpath中，而依赖范围就是用来控制依赖于这三种classpath的关系。</p><h3 id="依赖范围在pom-xml中如何体现？"><a href="#依赖范围在pom-xml中如何体现？" class="headerlink" title="依赖范围在pom.xml中如何体现？"></a>依赖范围在pom.xml中如何体现？</h3><p>pom文件如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.7&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>其scope标签就是依赖范围的配置，默认是compile，可选配置有test、provided、runtime、system、import。6个中最常用的是前四个。</p><h4 id="编译依赖范围（compile）"><a href="#编译依赖范围（compile）" class="headerlink" title="编译依赖范围（compile）"></a>编译依赖范围（compile）</h4><p>该范围就是默认依赖范围，此依赖范围对 于编译、测试、运行三种classpath都有效，举个简单的例子，假如项目中有spring-core的依赖，那么spring-core不管是在编译，测试，还是运行都会被用到，因此spring-core必须是编译范围（构件默认的是编译范围，所以依赖范围是编译范围的无须显示指定）</p><h4 id="测试依赖范围（test）"><a href="#测试依赖范围（test）" class="headerlink" title="测试依赖范围（test）"></a>测试依赖范围（test）</h4><p>顾名思义就是针对于测试的，使用此依赖范围的依赖，只对测试classpath有效，在编译主代码和项目运行时，都将无法使用该依赖，最典型的例子就是 Junit, 构件在测试时才需要，所以它的依赖范围是测试，因此它的依赖范围需要显示指定为<code>&lt;scope&gt;test&lt;/scope&gt;</code>，当然不显示指定依赖范围也不会报错，但是该依赖会被加入到编译和运行的classpath中,造成不必要的浪费 。</p><h4 id="已提供依赖范围（provided）"><a href="#已提供依赖范围（provided）" class="headerlink" title="已提供依赖范围（provided）"></a>已提供依赖范围（provided）</h4><p>使用该依赖范围的maven依赖，只对编译和测试的classpath有效，对运行的classpath无效，典型的例子就是servlet-api， 编译和测试该项目的时候需要该依赖，但是在运行时，web容器已经提供的该依赖，所以运行时就不再需要此依赖，如果不显示指定该依赖范围，并且容器依赖的版本和maven依赖的版本不一致的话，可能会引起版本冲突，造成不良影响。</p><h4 id="运行时依赖范围（runtime）"><a href="#运行时依赖范围（runtime）" class="headerlink" title="运行时依赖范围（runtime）"></a>运行时依赖范围（runtime）</h4><p>使用该依赖范围的maven依赖，只对测试和运行的classpath有效，对编译的classpath无效，典型例子就是JDBC的驱动实现，项目主代码编译的时候只需要JDK提供的JDBC接口，只有在测试和运行的时候才需要实现上述接口的具体JDBC驱动。</p><h3 id="之前问题的解决"><a href="#之前问题的解决" class="headerlink" title="之前问题的解决"></a>之前问题的解决</h3><p>把<code>pom.xml</code>文件中的<code>runtime</code>修改为<code>provided</code>。</p><h2 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h2><p>右击项目在Run As中可以看到build、clean、generate-sources、install、和test命令，但是build一个就可以完成整个Maven项目的发布，其他的只是把常用的Maven项目发布的重甲过程提取出来。但是eclipse中命令不是很完整，所以我们进入maven工程的根目录执行命令。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/maven命令eclipse.png"></div><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>把src/main/java下的文件编译成class文件，并输出到target目录下。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/compile-1.png"></div><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/mvn-comlipe.png"></div><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/compile-2.png"></div><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>执行src/test/java下的单元测试类。</p><p>在src/test/java下创建类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.isjinhao.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"demo1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时需要注意两点。</p><p>一个是要配置<code>pom.xml</code>文件：scope一定不能写test。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二个是需要配置更新工程：<code>右击项目 -&gt; Maven -&gt; Update Project</code>。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/test1.png"></div><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/test2.png"></div><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>删除target目录中我们生成的文件。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/clean1.png"></div><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/clean2.png"></div><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>web工程打成jar包，java工程打成war包。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/package.png"></div><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>执行install将使用maven打包发布到本地仓库。</p><div align="center"><img src="//isjinhao.github.io/2019/Maven基础/install.png"></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Maven
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="JavaWeb" scheme="https://isjinhao.github.io/tags/JavaWeb/"/>
    
      <category term="项目构建" scheme="https://isjinhao.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java-NIO</title>
    <link href="https://isjinhao.github.io/2019/Java-NIO/"/>
    <id>https://isjinhao.github.io/2019/Java-NIO/</id>
    <published>2019-04-13T04:30:08.000Z</published>
    <updated>2019-04-14T10:22:33.026Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java-网络编程</title>
    <link href="https://isjinhao.github.io/2019/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://isjinhao.github.io/2019/Java-网络编程/</id>
    <published>2019-04-13T04:29:55.000Z</published>
    <updated>2019-04-25T10:49:29.574Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h2><blockquote><p>This class represents an Internet Protocol (IP) address.</p></blockquote><h3 id="获得本机IP地址"><a href="#获得本机IP地址" class="headerlink" title="获得本机IP地址"></a>获得本机IP地址</h3><ul><li>获得本地IP地址</li></ul><p><code>InetAddress iaddress = InetAddress.getLocalHost();</code></p><p>但是这个函数有问题，因为这个函数的原理是通过获取本机的<code>hostname</code>，然后对此<code>hostname</code>做解析，从而获取<code>IP</code>地址的。那么问题来了，如果在本机的<code>/etc/hosts</code>文件里对这个主机名指向了一个错误的<code>IP</code>地址，那么<code>InetAddress.getLocalHost</code>就会返回这个错误的<code>IP</code>地址。当然如果你的<code>hostname</code>是到<code>DNS</code>去解析的，碰巧<code>DNS</code>上的信息也是错的，也同样是悲惨结局。</p><p><code>InetAddress</code>是由两部分组成的，一部分是getHostName()，一部分是getHostAddress()。</p><ul><li>获得本机所有的IP地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取机器所有网卡的IP（ipv4）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getLocalIP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; ipList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">InetAddress ip = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;NetworkInterface&gt; netInterfaces = (Enumeration&lt;NetworkInterface&gt;) NetworkInterface.getNetworkInterfaces();</span><br><span class="line"><span class="keyword">while</span> (netInterfaces.hasMoreElements()) &#123;</span><br><span class="line">NetworkInterface ni = (NetworkInterface) netInterfaces.nextElement();</span><br><span class="line"><span class="comment">// 遍历所有ip</span></span><br><span class="line">Enumeration&lt;InetAddress&gt; ips = ni.getInetAddresses();</span><br><span class="line"><span class="keyword">while</span> (ips.hasMoreElements()) &#123;</span><br><span class="line">ip = (InetAddress) ips.nextElement();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == ip || <span class="string">""</span>.equals(ip)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String sIP = ip.getHostAddress();</span><br><span class="line"><span class="keyword">if</span>(sIP == <span class="keyword">null</span> || sIP.indexOf(<span class="string">":"</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ipList.add(sIP);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ipList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取其他主机的IP地址对象</li></ul><p><code>InetAddress otherInetAddress = InetAddress.getByName(&quot;www.baidu.com&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line"><span class="comment">//1.获取本地主机</span></span><br><span class="line">InetAddress iaddress = InetAddress.getLocalHost();</span><br><span class="line">System.out.println(iaddress); <span class="comment">//打印 InetAddress对象 默认格式: 用户名/IP地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取主机名</span></span><br><span class="line">String hostName = iaddress.getHostName();</span><br><span class="line"><span class="comment">//3.获取主机IP地址</span></span><br><span class="line">String ip = iaddress.getHostAddress();</span><br><span class="line">System.out.println(hostName);</span><br><span class="line">System.out.println(ip);</span><br><span class="line"><span class="comment">//3.获取其他主机的IP地址对象</span></span><br><span class="line">InetAddress otherInetAddress = InetAddress.getByName(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">System.out.println(otherInetAddress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP通信需要两个类的支持：</p><ul><li>数据的发送接收器：DatagramSocket</li><li>数据包类：DatagramPacket</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建DatagramSocket对象,</span></span><br><span class="line"><span class="comment">//强调:接收端必须指定一个端口号</span></span><br><span class="line">DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.直接创建一个DatagramPacket对象</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bs, bs.length);</span><br><span class="line"><span class="comment">//3.接收</span></span><br><span class="line">System.out.println(<span class="string">"等待发送端发送数据...."</span>);</span><br><span class="line">ds.receive(dp);<span class="comment">//这个方法具有等待功能,等待发送端发送过来的数据</span></span><br><span class="line">System.out.println(<span class="string">"接收数据成功!!"</span>);</span><br><span class="line"><span class="comment">//获取发送端的地址</span></span><br><span class="line">InetAddress sendAddress = dp.getAddress();</span><br><span class="line">System.out.println(<span class="string">"发送端是:"</span>+sendAddress.getHostAddress());</span><br><span class="line"><span class="comment">//获取真正的数据</span></span><br><span class="line"><span class="keyword">byte</span>[] data = dp.getData();</span><br><span class="line"><span class="comment">//获取发送端 发来了多少字节</span></span><br><span class="line"><span class="keyword">int</span> len = dp.getLength();</span><br><span class="line"><span class="comment">//打印数据</span></span><br><span class="line">String receiveMsg = <span class="keyword">new</span> String(data, <span class="number">0</span>, len);</span><br><span class="line">System.out.println(<span class="string">"发送端说:"</span>+receiveMsg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.关闭资源（程序运行结束之后是需要关闭资源的，但是我们的程序是一个死循环，此句永不会执行，所以不能加关闭）</span></span><br><span class="line"><span class="comment">//ds.close();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSender</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//1.创建DatagramSocket对象</span></span><br><span class="line">DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.创建DatagramPacket对象</span></span><br><span class="line"><span class="comment">//存储 发送的数据,对方的IP,端口号</span></span><br><span class="line">System.out.println(<span class="string">"请输入您要发送的数据:"</span>);</span><br><span class="line">String sendMsg = sc.nextLine();</span><br><span class="line"><span class="keyword">byte</span>[] bs = sendMsg.getBytes();</span><br><span class="line"><span class="comment">//IP地址:127.0.0.1  代表本机,本地回环地址</span></span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bs,bs.length,InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">12345</span>);</span><br><span class="line"><span class="comment">//3.发送</span></span><br><span class="line">ds.send(dp);</span><br><span class="line">System.out.println(<span class="string">"发送数据成功!!!"</span>);<span class="comment">//192.168.146.72</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.关闭资源（程序运行结束之后是需要关闭资源的，但是我们的程序是一个死循环，此句永不会执行，所以不能加关闭）</span></span><br><span class="line"><span class="comment">//ds.close();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP服务器:(ServerSocket) 步骤:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1.创建一个ServerSocket对象,必须绑定一个端口,这个端口必须和客户端连接的端口一致</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.调用server的accept()方法,获取到底哪一个客户端连接的服务器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.通过刚刚获取到的客户端对象 调用getInputStream()方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.通过输入流调用read方法,读取客户端写过来的数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 5.关闭资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建一个ServerSocket对象,必须绑定一个端口,这个端口必须和客户端连接的端口一致</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="comment">// 2.获取到 哪一个 客户端连接的我</span></span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line">Socket client = server.accept();<span class="comment">// 此方法也具有等待功能,等待某一个客户端连接</span></span><br><span class="line"><span class="comment">// 打印一些和客户端有关信息</span></span><br><span class="line">String ip = client.getInetAddress().getHostAddress();</span><br><span class="line">System.out.println(<span class="string">"小样,抓到你了:"</span> + ip);</span><br><span class="line"><span class="comment">// 3.获取输入流,实际上是客户端写数据时的输出流</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="comment">// 4.读取数据</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = in.read(bs);</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">System.out.println(<span class="string">"客户端说:"</span> + <span class="keyword">new</span> String(bs, <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 5.要向客户端 回写数据,告诉客户端您的信息我已经收到了</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line">out.write(<span class="string">"您的消息已经收到..."</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"给客户端反馈的信息发送成功!!!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">server.close();</span><br><span class="line">client.close();</span><br><span class="line">in.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用TCP协议的客户端(Socket类) 步骤: 1.创建一个客户端对象(注意:指定这个Socket要连接的服务器的IP和端口)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.从客户端对象中获取 输出流:getOutputStream()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.调用输出流的Write方法写数据到服务器即可</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 4.关闭资源</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建一个客户端对象(注意:指定这个Socket要连接的服务器的IP和端口)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这个构造方法干了很多事情: a.自动去连接服务器 b.自动进行三次握手,建立连接 c.自动为连接中创建两个流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.从客户端对象中获取 输出流:getOutputStream()</span></span><br><span class="line"><span class="comment">// OutputStream out = client.getOutputStream();</span></span><br><span class="line"><span class="comment">// 3.调用输出流的Write方法写数据到服务器即可</span></span><br><span class="line"><span class="comment">// out.write("How are you".getBytes());</span></span><br><span class="line">client.getOutputStream().write(<span class="string">"How are you"</span>.getBytes());</span><br><span class="line">System.out.println(<span class="string">"给服务器发送数据成功!!"</span>);</span><br><span class="line"><span class="comment">// 4.读取服务器 发送过来的反馈信息</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = in.read(bs);</span><br><span class="line">System.out.println(<span class="string">"服务器响应:"</span> + <span class="keyword">new</span> String(bs, <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件传输案例"><a href="#文件传输案例" class="headerlink" title="文件传输案例"></a>文件传输案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.创建ServerSocket对象,绑定一个端口</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//2.获取哪一个客户端连接的服务器</span></span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line"><span class="keyword">final</span> Socket client = server.accept();</span><br><span class="line"><span class="comment">//开启一个线程,和clinet进行交互</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"小样:"</span>+client.getInetAddress().getHostAddress());</span><br><span class="line"><span class="comment">//3.获取输入流,读取客户端发来数据</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="comment">//4.创建文件的输出流,把数据写到文件中</span></span><br><span class="line">String picName = <span class="string">"D:\\"</span>+System.currentTimeMillis()+<span class="string">".png"</span>;</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(picName);</span><br><span class="line"><span class="comment">//5.循环 从输入流读取客户端数据, 写入到文件中</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=in.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">fos.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;<span class="comment">//1小时</span></span><br><span class="line">System.out.println(<span class="string">"客户端的文件已经保存完毕,可以查看了"</span>+picName);</span><br><span class="line"><span class="comment">//6.告知客户端,文件真的真的真的上传成功</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line">out.write(<span class="string">"您的文件真的真的真的上传成功"</span>.getBytes());</span><br><span class="line">client.close();</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.关闭</span></span><br><span class="line"><span class="comment">//server.close();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.创建Socket对象,连接服务器</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>);</span><br><span class="line">System.out.println(<span class="string">"连接服务器成功.."</span>);</span><br><span class="line"><span class="comment">//2.获取输出流,把数据写向服务器</span></span><br><span class="line">OutputStream out = client.getOutputStream();</span><br><span class="line"><span class="comment">//3.创建文件的输入流,读取本地的文件数据</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\ISJINHAO\\Desktop\\我.jpg"</span>);</span><br><span class="line"><span class="comment">//4.循环,读取本地文件,写到服务器</span></span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=fis.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">out.write(bs, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭输出流</span></span><br><span class="line">client.shutdownOutput();</span><br><span class="line"><span class="comment">//5.获取服务器反馈的信息</span></span><br><span class="line">InputStream in = client.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len1 = in.read(bs1);</span><br><span class="line">System.out.println(<span class="string">"服务器说:"</span>+<span class="keyword">new</span> String(bs1,<span class="number">0</span>,len1));</span><br><span class="line"><span class="comment">//6关闭</span></span><br><span class="line">client.close();</span><br><span class="line">out.close();</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;InetAddress&quot;&gt;&lt;a href=&quot;#InetAddress&quot; class=&quot;headerlink&quot; title=&quot;InetA
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="Java网络编程" scheme="https://isjinhao.github.io/tags/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java-IO流</title>
    <link href="https://isjinhao.github.io/2019/Java-IO%E6%B5%81/"/>
    <id>https://isjinhao.github.io/2019/Java-IO流/</id>
    <published>2019-04-13T04:29:41.000Z</published>
    <updated>2019-04-24T13:40:57.171Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>InputStream是字节输入流的根类，Reader是字符输入流的根类。我们所说的输入输出都是相对Java程序而言的，所以输入是把外存中的数据读取到内存中。而分成两个根类的原因是在流的基本单位是字节，但是Java字符使用UTF-16编码，在UTF-16编码中，绝大部分字符是双字节的，所以单独划分一个类别来表示字符输入流。</p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>InputStream是字节输入流，常用的直接实现类有ByteArrayInputStream和FileInputStream，前者是把某byte数组指定为数据源，后者是把文件作为数据源。</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String test;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> []bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">bs[i] =  (<span class="keyword">byte</span>)i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以字节数组为数据源</span></span><br><span class="line">InputStream isb = <span class="keyword">new</span> ByteArrayInputStream(bs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以文件为数据源</span></span><br><span class="line">InputStream isf = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\video\\10 IO流-基础\\视频\\avi\\10.01_IO流的概述和分类.avi"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个的演示API相同，但是字节数组更直观，所以使用字节数组作为数据源演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  读取当前数据源的下一个字节数据并返回：</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * 0</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(isb.read());</span><br><span class="line">System.out.println(isb.read());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳过指定字节的数据</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">isb.skip(<span class="number">2</span>);</span><br><span class="line">System.out.println(isb.read());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 还可以读取的字节数</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * 95</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(isb.available());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尽可能把数据读入temps中，即如果数据字节数大于数组容量，数组会被读满，</span></span><br><span class="line"><span class="comment"> * 小于数据源数据会全部读进去， 返回真正读取的字节数</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * 5 6 7 8 9 10 11 12 13 14 </span></span><br><span class="line"><span class="comment"> *10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">byte</span> []temps = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> read = isb.read(temps);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">byte</span> e : temps)</span><br><span class="line">System.out.print(e + <span class="string">" "</span>);</span><br><span class="line">System.out.println(<span class="string">"\n"</span> + read);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * read(byte[] b, int off, int len)</span></span><br><span class="line"><span class="comment"> * 从off位置开始开始读入len个字节的数据到b中，返回真正读取的字节数</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * 5 6 7 8 9 10 11 12 13 14 </span></span><br><span class="line"><span class="comment"> *10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> read2 = isb.read(temps, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">byte</span> e : temps)</span><br><span class="line">System.out.print(e + <span class="string">" "</span>);</span><br><span class="line">System.out.println(<span class="string">"\n"</span> + read2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mark(int readlimit) &amp; reset()</span></span><br><span class="line"><span class="comment"> * 再调用reset()之后，会返回最近的一次被mark的位置，</span></span><br><span class="line"><span class="comment"> * 传入的参数：readLimit是说系统会保证在readLimit</span></span><br><span class="line"><span class="comment"> * 个字节之内不会使mark失效，超过这个字节之后就不再保证了</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * 17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">isb.mark(isb.available());</span><br><span class="line">isb.read();</span><br><span class="line">isb.reset();</span><br><span class="line">System.out.println(isb.read());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看当前流是否支持mark和reset。</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(isb.markSupported());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  关闭此流并且释放系统资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">isb.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FilterInputStream"><a href="#FilterInputStream" class="headerlink" title="FilterInputStream"></a>FilterInputStream</h4><p>这个类直译是过滤输入流，但是在Java中过滤的目的是为了增强某些功能，所以我更喜欢叫他增强输入流。虽然它不是抽象类，但是它却不能直接使用，因为它所有的属性和方法都是protected的，它有一个常用的实现类：BufferedInputStream。这个类的增强的功能就是采用开辟缓存区的方式使输入流读取数据能更快。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\video\\10 IO流-基础\\视频\\avi\\10.01_IO流的概述和分类.avi"</span>);</span><br><span class="line"><span class="keyword">long</span> begin1 = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">while</span>(is.read() != -<span class="number">1</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">long</span> end1 = System.currentTimeMillis();</span><br><span class="line">System.out.println(end1 - begin1);</span><br><span class="line"></span><br><span class="line">InputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\video\\10 IO流-基础\\视频\\avi\\10.01_IO流的概述和分类.avi"</span>));</span><br><span class="line"><span class="keyword">long</span> begin2= System.currentTimeMillis();</span><br><span class="line"><span class="keyword">while</span>(bis.read() != -<span class="number">1</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">long</span> end2 = System.currentTimeMillis();</span><br><span class="line">System.out.println(end2 - begin2);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * 23175</span></span><br><span class="line"><span class="comment"> * 53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">is.close();</span><br><span class="line">bis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>这个类是处理字符文件的根类。它的常用实现类有FileReader和CharArrayReader。同样的，如果要加快读取速度，使用带缓冲区的BufferedReader类。</p><h4 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.CharArrayReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> []strs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">strs[i] = (<span class="keyword">char</span>)(i + <span class="number">97</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以文件作为数据源</span></span><br><span class="line">Reader fr = <span class="keyword">new</span> FileReader(<span class="string">"D:\\a.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以字符数组作为数据源</span></span><br><span class="line">Reader car = <span class="keyword">new</span> CharArrayReader(strs);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为了方便，数据源使用字符数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取单个字符，并返回相应的int值</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> read = car.read();</span><br><span class="line">System.out.println((<span class="keyword">char</span>)read);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尽可能读取到字符数组，并返回真实读取的字符数。如果数组容量小于数据源字符个数</span></span><br><span class="line"><span class="comment"> * 数组会被全部读满，否则读至数据源结尾。</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * b c d e f g h i j k </span></span><br><span class="line"><span class="comment"> *10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">char</span> []temps = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> read2 = car.read(temps);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> e : temps)</span><br><span class="line">System.out.print(e + <span class="string">" "</span>);</span><br><span class="line">System.out.println(<span class="string">"\n"</span> + read2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * read(char[] cbuf, int off, int len)</span></span><br><span class="line"><span class="comment"> * 从字符数组的off位置开始，读入长度为len的数据进入，返回真正读取的字符数、</span></span><br><span class="line"><span class="comment"> * Console:</span></span><br><span class="line"><span class="comment"> * b c d l m g h i j k </span></span><br><span class="line"><span class="comment"> *2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> read3 = car.read(temps, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> e : temps)</span><br><span class="line">System.out.print(e + <span class="string">" "</span>);</span><br><span class="line">System.out.println(<span class="string">"\n"</span> + read3);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * skip(long n)</span></span><br><span class="line"><span class="comment"> * mark(int readAheadLimit) </span></span><br><span class="line"><span class="comment"> * reset()</span></span><br><span class="line"><span class="comment"> * markSupported()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 和InputStream一致</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h4><p><code>InputStreamReader</code>是 <code>a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset</code>。它有且只有<code>FileReader</code>这个子类，所以<code>FileReader</code>实现从文件中读取的方法是从把文件按字节读入后按照指定编码规则进行解码，默认是平台解码集。</p><h2 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>OutputStream是字节输出流的根类，Writer是字符输出流的根类。我们所说的输入输出都是相对Java程序而言的，所以输出是把内存中的数据读取到外存中。而分成两个根类的原因是在流的基本单位是字节，但是Java字符使用UTF-16编码，在UTF-16编码中，绝大部分字符是双字节的，所以单独划分一个类别来表示字符输出流。</p><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>OutputStream是字节输出流，常用的直接实现类是FileOutputStream，它把文件作为数据输出位置。如果想加快输出效率，使用BufferedOutputStream。</p><h4 id="API-2"><a href="#API-2" class="headerlink" title="API"></a>API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不存在这个文件，会自动创建</span></span><br><span class="line">OutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\aa.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * write(int b)：将指定的字节写入此输出流。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fos.write(<span class="number">97</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * flush()：刷新缓冲区，让write的数据真正写入磁盘文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fos.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * write(byte[] b)：将 b.length 个字节从指定的 byte 数组写入此输出流。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">byte</span> []bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">bs[i] = (<span class="keyword">byte</span>) ((i % <span class="number">26</span>) + <span class="number">97</span>);</span><br><span class="line">fos.write(bs);</span><br><span class="line">fos.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * void write(byte[] b, int off, int len) </span></span><br><span class="line"><span class="comment">         * 将指定 byte数组中从off开始的 len个字节写入此输出流。 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fos.write(bs, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">fos.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * close()：释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><p>这个类是写入字符文件的根类。它的常用实现类是FileWriter。同样的，如果要加快读取速度，使用带缓冲区的BufferedWriter类。</p><h4 id="API-3"><a href="#API-3" class="headerlink" title="API"></a>API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定一个输出位置，如果不存在会自动创建</span></span><br><span class="line">Writer w = <span class="keyword">new</span> FileWriter(<span class="string">"d:\\bbb.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入单个字符</span></span><br><span class="line">w.write(<span class="number">97</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字符串</span></span><br><span class="line">w.write(<span class="string">"bcd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字符串的某一部分</span></span><br><span class="line">w.write(<span class="string">"defgf"</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字符数组</span></span><br><span class="line"><span class="keyword">char</span> []temps = &#123;<span class="string">'g'</span>, <span class="string">'h'</span>&#125;;</span><br><span class="line">w.write(temps);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字符数组的某一部分</span></span><br><span class="line">w.write(temps, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">w.flush();</span><br><span class="line">w.close();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File:</span></span><br><span class="line"><span class="comment"> * abcdefghh</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//流被关闭之后是不能再被打开的，重新开启输出一个流，向其中写入数据会覆盖原有</span></span><br><span class="line"><span class="comment">//数据，如果我们想继续之前的写，可以使用追加方法，不过append方法虽然翻译过来叫住追加</span></span><br><span class="line"><span class="comment">//但是它不是追加，它的作用和write()差不多。</span></span><br><span class="line"></span><br><span class="line">w = <span class="keyword">new</span> FileWriter(<span class="string">"d:\\bbb.txt"</span>);</span><br><span class="line"><span class="comment">//写入一个字符</span></span><br><span class="line">w.append(<span class="string">'|'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入一个字符串</span></span><br><span class="line">w.append(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字符串的某一部分</span></span><br><span class="line">w.append(<span class="string">"def"</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">w.flush();</span><br><span class="line">w.close();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File:</span></span><br><span class="line"><span class="comment"> * |abce</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符流追加数据可以在构造方法中指定写入数据为追加数据</span></span><br><span class="line">w = <span class="keyword">new</span> FileWriter(<span class="string">"d:\\bbb.txt"</span>, <span class="keyword">true</span>);</span><br><span class="line">w.write(<span class="string">"aaa"</span>);</span><br><span class="line">w.flush();</span><br><span class="line">w.close();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File:</span></span><br><span class="line"><span class="comment"> * |abceaaa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InputStreamReader-1"><a href="#InputStreamReader-1" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h4><p>OutputStreamReader是<code>a bridge from character streams to byte streams:Characters written to it are encoded into bytes using a specified charset</code>。它有且只有<code>FileWriter</code>这个子类，所以<code>FileWriter</code>实现从写入文件的方法是从把字符按编码规则编码成字节数据后写入文件，默认是平台编码集。</p><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>PrintStream和PrintReader是为了方便输出而产生的两个流，前者是java.io.FilterOutputStream的子类，后者是java.io.Writer的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardOpenOption;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">OutputStream stream = Files.newOutputStream(Paths.get(<span class="string">"test"</span>), StandardOpenOption.WRITE);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置true之后，当输出字节数组、println方法或写入换行符或字节（'\n'）后，将自动调用flush方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintStream打印的所有字符都使用平台的默认字符编码转换为字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PrintStream printStream = <span class="keyword">new</span> PrintStream(stream, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定转化为字节数组的编码集后使用指定的编码集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">printStream.write(<span class="string">"陈钰琪   "</span>.getBytes(<span class="string">"GBK"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ture表示是追加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GBK指定输出时按GBK编码集转化成字节数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Writer writer = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"test"</span>, <span class="keyword">true</span>), <span class="string">"GBK"</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * true表示自动刷新，但只有println, printf, or format方法才能触发自动刷新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(writer, <span class="keyword">true</span>);</span><br><span class="line">printWriter.write(<span class="string">"钰琪是个小可爱"</span>);</span><br><span class="line">printWriter.flush();</span><br><span class="line">printWriter.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BufferedWriter writer = Files.newBufferedWriter(Paths.get("test"), StandardOpenOption.WRITE, StandardOpenOption.APPEND);</span></span><br><span class="line"><span class="comment">PrintWriter printWriter = new PrintWriter("test", "GBK");</span></span><br><span class="line"><span class="comment">printWriter.write("钰琪是个小可爱");</span></span><br><span class="line"><span class="comment">printWriter.close();</span></span><br><span class="line"><span class="comment">writer.close();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这段代码无法进行追加...讲道理应该是可以追加的...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h2><p>RandomAccessFile是Java的IO流体系中功能最丰富的文件内容访问类，既可以读取文件内容，也可以向文件输出数据。与普通的输入/输出流不同的是，RandomAccessFile支持跳到文件任意位置读写数据，RandomAccessFile对象包含一个记录指针，用以标识当前读写处的位置，当程序创建一个新的RandomAccessFile对象时，该对象的文件记录指针对于文件头（也就是0处），当读写n个字节后，文件记录指针将会向后移动n个字节。除此之外，RandomAccessFile可以自由移动该记录指针。</p><p>RandomAccessFile包含两个方法来操作文件记录指针：</p><ul><li>long getFilePointer()：返回文件记录指针的当前位置</li><li>void seek(long pos)：将文件记录指针定位到pos位置</li></ul><p>RandomAccessFile类在创建对象时，除了指定文件本身，还需要指定一个mode参数，该参数指定RandomAccessFile的访问模式，该参数有如下四个值：</p><ul><li>r：以只读方式打开指定文件。如果试图对该RandomAccessFile指定的文件执行写入方法则会抛出IOException</li><li>rw：以读取、写入方式打开指定文件。如果该文件不存在，则尝试创建文件</li><li>rws：以读取、写入方式打开指定文件。相对于rw模式，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备，默认情形下（rw模式下）,是使用buffer的，只有cache满的或者使用RandomAccessFile.close()关闭流的时候儿才真正的写到文件（其没有flush方法）</li><li>rwd：与rws类似，只是仅对文件的内容同步更新到磁盘，而不修改文件的元数据<ul><li>文件系统中的数据分为数据和元数据。数据是指普通文件中的实际数据，而元数据指用来描述一个文件的特征的系统数据，诸如访问权限、文件拥有者以及文件数据块的分布信息(inode…)等等。</li></ul></li></ul><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String fileName = <span class="string">"test"</span>;</span><br><span class="line">    <span class="comment">//文件内容：陈钰琪好可爱</span></span><br><span class="line">    </span><br><span class="line">        RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf = <span class="keyword">new</span> RandomAccessFile(fileName, <span class="string">"r"</span>);</span><br><span class="line">            System.out.println(<span class="string">"RandomAccessFile的文件指针初始位置:"</span> + raf.getFilePointer());</span><br><span class="line">            raf.seek(<span class="string">"陈钰琪"</span>.getBytes().length);</span><br><span class="line">            <span class="keyword">byte</span>[] bbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> hasRead = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((hasRead = raf.read(bbuf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> String(bbuf, <span class="number">0</span>, hasRead));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (raf != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    raf.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="追加文件"><a href="#追加文件" class="headerlink" title="追加文件"></a>追加文件</h3><p>RandomAccessFile先获取文件的长度，再将指针移到文件的末尾，再将要插入的内容插入到文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String filename = <span class="string">"test"</span>;</span><br><span class="line">        <span class="comment">//文件内容：陈钰琪好可爱</span></span><br><span class="line">        </span><br><span class="line">        RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] arrays = <span class="keyword">new</span> String[] &#123; <span class="string">"Hello Hadoop"</span>, <span class="string">"Hello Spark"</span>, <span class="string">"Hello Hive"</span> &#125;;</span><br><span class="line">            raf = <span class="keyword">new</span> RandomAccessFile(filename, <span class="string">"rw"</span>);</span><br><span class="line">            raf.seek(raf.length());</span><br><span class="line">            raf.write(<span class="string">"追加内容:\n"</span>.getBytes());</span><br><span class="line">            <span class="keyword">for</span> (String arr : arrays) &#123;</span><br><span class="line">                raf.write((arr + <span class="string">"\n"</span>).getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (raf != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    raf.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件中间插入"><a href="#文件中间插入" class="headerlink" title="文件中间插入"></a>文件中间插入</h3><p>RandomAccessFile如果向文件的指定的位置插入内容，则新输出的内容会覆盖文件中原有的内容。如果需要向指定位置插入内容，程序需要先把插入点后面的内容读入缓冲区，等把需要的插入数据写入文件后，再将缓冲区的内容追加到文件后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cauc.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String fileName = <span class="string">"test"</span>;</span><br><span class="line">        Long pos = (<span class="keyword">long</span>) <span class="string">"陈钰琪"</span>.getBytes().length;</span><br><span class="line">        String insertContent = <span class="string">"可爱可爱可爱啊"</span>;</span><br><span class="line">        </span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf = <span class="keyword">new</span> RandomAccessFile(fileName, <span class="string">"rw"</span>);</span><br><span class="line">            File tmp = File.createTempFile(<span class="string">"tmp"</span>, <span class="keyword">null</span>);</span><br><span class="line">            tmp.deleteOnExit();</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(tmp);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(tmp);</span><br><span class="line">            raf.seek(pos);</span><br><span class="line">            <span class="keyword">byte</span>[] bbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">64</span>];</span><br><span class="line">            <span class="keyword">int</span> hasRead = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((hasRead = raf.read(bbuf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                fos.write(bbuf, <span class="number">0</span>, hasRead);</span><br><span class="line">            &#125;</span><br><span class="line">            raf.seek(pos);</span><br><span class="line">            raf.write(<span class="string">"\n插入内容:\n"</span>.getBytes());</span><br><span class="line">            raf.write((insertContent + <span class="string">"\n"</span>).getBytes());</span><br><span class="line">            <span class="keyword">while</span> ((hasRead = fis.read(bbuf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                raf.write(bbuf, <span class="number">0</span>, hasRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (raf != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    raf.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;输入流&quot;&gt;&lt;a href=&quot;#输入流&quot; class=&quot;headerlink&quot; title=&quot;输入流&quot;&gt;&lt;/a&gt;输入流&lt;/h2&gt;&lt;h3 
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="Java网络编程" scheme="https://isjinhao.github.io/tags/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaIO流" scheme="https://isjinhao.github.io/tags/JavaIO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>thread和synchronized</title>
    <link href="https://isjinhao.github.io/2019/thread%E5%92%8Csynchronized/"/>
    <id>https://isjinhao.github.io/2019/thread和synchronized/</id>
    <published>2019-04-13T04:23:18.000Z</published>
    <updated>2019-04-18T03:15:02.405Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><p>按照时间发展呢的顺序，Java中是先出现了synchronized（since 1.0），再出现了Lock（since 5.0）。这是由于synchronized有一定的不足，所以才出现了Lock来更好的完成同步操作。</p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>在Java中，每一个对象都拥有一个锁标记（monitor），也称为监视器，我们可以使用synchronized关键字来标记一个方法或者代码块，当某个线程调用该对象的synchronized方法或者访问synchronized代码块时，这个线程便获得了该对象的锁，其他线程暂时无法访问这个方法，只有等待这个方法执行完毕或者代码块执行完毕，这个线程才会释放该对象的锁，其他线程才能执行这个方法或者代码块。</p><ul><li>synchronized方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通方法获得当前对象的锁，即this的锁。静态方法获得类的字节码对象的锁。</p><ul><li>synchronized代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(synObject) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于synchronized方法或者synchronized代码块，当出现异常时，JVM会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。</p><h3 id="条件对象"><a href="#条件对象" class="headerlink" title="条件对象"></a>条件对象</h3><p>当一个线程进入临界区后却发现某一条件被满足之后它才能执行，比如在银行转账时，A向B账户转账，但是当A账户获得锁后，发现账户中没有钱，需要等待C账户给其转账之后其才能给B账户转账，这时它就需要释放锁，进入等待状态，并且当其的账户余额能保证向B转完账后不为负数这个条件时才能转账，同时当此条件被满足时其他线程需要通知等待的线程让其进入运行状态。方法如下：</p><ul><li>synchronized方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(条件x不满足)</span><br><span class="line">wait();</span><br><span class="line"><span class="keyword">if</span>(条件x被满足)</span><br><span class="line">notify() <span class="function">or <span class="title">notifyAll</span><span class="params">()</span>  <span class="comment">//唤醒等待在条件x上的线程</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>synchronized代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(synObject) &#123;</span><br><span class="line"><span class="keyword">if</span>(条件x不满足)</span><br><span class="line">wait();</span><br><span class="line"><span class="keyword">if</span>(条件x被满足)</span><br><span class="line">notify() <span class="function">or <span class="title">notifyAll</span><span class="params">()</span>  <span class="comment">//唤醒等待在条件x上的线程</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>但是如果还有一个条件可以迫使线程进入等待状态，在编程时只能将其也等待在条件x上，这就是其不足之一。</p><p>需要注意：对于synchronized方法或者synchronized代码块，当出现异常时，JVM会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。</p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>Lock接口定义的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>tryLock()</code>方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</li><li><code>tryLock(long time, TimeUnit unit)</code>方法和<code>tryLock()</code>方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。</li></ul><p>Lock接口的典型使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = ...;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">     </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();   <span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>翻译为是“可重入锁”，意思是如果锁具备可重入性，则称作为可重入锁。像synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举个简单的例子，当一个线程执行到某个synchronized方法时，比如说method1，而在method1中会调用另外一个synchronized方法method2，此时线程不必重新去申请锁，而是可以直接执行方法method2。</p><p>按不同的分类，还有一类锁是中断锁，顾名思义，就是可以相应中断的锁。在Java中，synchronized就不是可中断锁，而Lock是可中断锁。如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread0 = <span class="keyword">new</span> MyThread(test);</span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(test);</span><br><span class="line">        thread0.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        thread1.interrupt();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        lock.lockInterruptibly();   </span><br><span class="line">        <span class="comment">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">                <span class="keyword">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 *插入数据</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"执行finally"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test test = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.insert(Thread.currentThread());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"被中断"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，如果线程1首先获得锁，其会一直运行下去，此时线程0得不到锁就会永远等待下去。但是如果线程0首先获得锁，其会一直运行下去，所以此时线程1得不到锁，但是在主线程中线程1启用了interrupt()方法，而lockInterruptibly()可以响应中断。</p><h2 id="thread的状态"><a href="#thread的状态" class="headerlink" title="thread的状态"></a>thread的状态</h2><div align="center"><img src="//isjinhao.github.io/2019/thread和synchronized/线程的状态.png"></div><h3 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK原型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint.</p></blockquote><p>当yield()成功的时候会自动放弃时间片，转入就绪状态，然后和其它线程进行CPU的争夺。</p><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>join方法有三个重载版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">join()</span><br><span class="line">join(long millis)     //参数为毫秒</span><br><span class="line">join(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒</span><br></pre></td></tr></table></figure><p>假如在main线程中，调用thread.join方法，则main方法会等待thread线程执行完毕或者等待一定的时间。如果调用的是无参join方法，则等待thread执行完毕，如果调用的是指定了时间参数的join方法，则等待一定的时间。</p><h4 id="join的实现"><a href="#join的实现" class="headerlink" title="join的实现"></a>join的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function"> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>join是使用wait来实现的，如果线程仍然活着，则等待对应的时间。当调用线程（设为A）执行到其他线程（设为B）的join()方法时，A阻塞在线程B的this对象（线程B本身），如第12行或第20行所示。从代码上我们看不出来什么时候notify线程A，但是JDK注释上描述：</p><blockquote><p>As a thread terminates the this.notifyAll method is invoked.</p></blockquote><p>笔者也是在此知道，当一个线程结束时会通知所有在其上等待的线程。</p><h3 id="interrupt-和-isInterrupted"><a href="#interrupt-和-isInterrupted" class="headerlink" title="interrupt() 和 isInterrupted()"></a>interrupt() 和 isInterrupted()</h3><p>interrupt()是一个线程中断的方法，本人只在Java网络编程这门课的实验里用过一次。其可以使得处于阻塞状态的线程抛出一个异常，也就说，它可以用来中断一个正处于阻塞状态的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread = test.new MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"进入睡眠状态"</span>);</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">10000</span>);</span><br><span class="line">                System.out.println(<span class="string">"睡眠完毕"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"得到中断异常"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"run方法执行完毕"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合isInterrupted()能够中断正在运行的线程，因为调用interrupt方法相当于将中断标志位置为true，那么可以通过调用isInterrupted()判断中断标志是否被置位来中断线程的执行。比如下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread = test.new MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!isInterrupted() &amp;&amp; i &lt; Integer.MAX_VALUE)&#123;</span><br><span class="line">                System.out.println(i+<span class="string">" while循环"</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是以上的暂停程序运行的方法可以被替换为如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isStop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!isStop)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStop</span><span class="params">(<span class="keyword">boolean</span> stop)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isStop = stop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>volatile的目的是禁止指令重排。参见：<a href="https://isjinhao.github.io/2019/volatile/#more">https://isjinhao.github.io/2019/volatile/#more</a></p><h2 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h2><blockquote><p>Tests whether the current thread has been interrupted. The <em>interrupted status</em> of the thread is cleared by this method. In other words, if this method were to be called twice in succession, the second call would return false (unless the current thread were interrupted again, after the first call had cleared its interrupted status and before the second call had examined it).</p><p>A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false.</p></blockquote><p>每个线程都有一个中断状态位：</p><ul><li>isInterrupted(boolean ClearInterrupted)：传入true重置状态位，传入false不重置状态位。返回此方法执行完成前线程中断状态位的状态。</li><li>interrupt()：将中断状态位设置为true。</li><li>isInterrupted()：查看当前状态位但是不影响状态位，内部实现原理isInterrupted(false)。</li><li>interrupted()：重置当前线程状态位（即如果状态位是true，则设置为false），内部实现原理isInterrupted(true)。</li></ul><p>参考：<a href="https://blog.csdn.net/zhuyong7/article/details/80852884" target="_blank" rel="noopener">https://blog.csdn.net/zhuyong7/article/details/80852884</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/dolphin0520/p/3920357.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3920357.html</a></li><li>Java核心技术卷1</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;按照时间发展呢的顺序，Java中是先出现了synchronized（since 1.0），再出现了Lock（since 5.0）。这是由于syn
      
    
    </summary>
    
      <category term="Java" scheme="https://isjinhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://isjinhao.github.io/tags/Java/"/>
    
      <category term="Java并发编程" scheme="https://isjinhao.github.io/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>centos7软件安装和JavaWeb环境搭建</title>
    <link href="https://isjinhao.github.io/2019/centos7%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%92%8CJavaWeb%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://isjinhao.github.io/2019/centos7软件安装和JavaWeb环境搭建/</id>
    <published>2019-04-13T02:23:50.000Z</published>
    <updated>2019-04-18T05:24:35.874Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><p>由于Linux各发行版对软件安装工具的不同支持，导致Linux软件安装是相对很麻烦的事情，由于本人目前只使用过Centos7，所以借着搭建JavaWeb开发环境把Centos7的软件安装总结一下。不过在这之前需要先了解一下<code>wget</code>。</p><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><h3 id="下载单个文件"><a href="#下载单个文件" class="headerlink" title="下载单个文件"></a>下载单个文件</h3><p><code>wget url</code>。如<code>wget www.baidu.com</code>，得到百度站点的首页html文件。</p><div align="center"><img src="//isjinhao.github.io/2019/centos7软件安装和JavaWeb环境搭建/wget.jpg"></div><h3 id="下载并改变文件名"><a href="#下载并改变文件名" class="headerlink" title="下载并改变文件名"></a>下载并改变文件名</h3><p>选项：<code>-O</code>。</p><div align="center"><img src="//isjinhao.github.io/2019/centos7软件安装和JavaWeb环境搭建/wget-O.jpg"></div><h3 id="后台下载"><a href="#后台下载" class="headerlink" title="后台下载"></a>后台下载</h3><p>选项：<code>-b</code>。应用于下载文件非常大的时候。</p><h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>选项：<code>-c</code>。对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。</p><h3 id="限速下载"><a href="#限速下载" class="headerlink" title="限速下载"></a>限速下载</h3><p>选项：<code>--limit</code>。如<code>wget --limit-rate=30k www.baidu.com</code>。</p><h3 id="下载多个文件"><a href="#下载多个文件" class="headerlink" title="下载多个文件"></a>下载多个文件</h3><p>选项：<code>-i</code>。首先，保存一份下载链接文件。但是在文件中需要完整的路径名，比如不能直接使用<code>www.baidu.com</code>，需要使用<code>https://www.baidu.com</code>。如以下是文件<code>urls</code>中的两个url。</p><div align="center"><img src="//isjinhao.github.io/2019/centos7软件安装和JavaWeb环境搭建/wget-i.jpg"></div><p>下载时使用<code>wget -i urls</code>即可。</p><h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><ul><li><a href="https://www.cnblogs.com/semonxv/p/3816366.html" target="_blank" rel="noopener">https://www.cnblogs.com/semonxv/p/3816366.html</a></li></ul><h2 id="源码包解压即用"><a href="#源码包解压即用" class="headerlink" title="源码包解压即用"></a>源码包解压即用</h2><p>源码包解压即用是最简单的一种方式。如安装<code>tomcat</code>的时候，我们先获得压缩包：</p><p><code>wget https://www-us.apache.org/dist/tomcat/tomcat-8/v8.5.39/bin/apache-tomcat-8.5.39.tar.gz</code></p><div align="center"><img src="//isjinhao.github.io/2019/centos7软件安装和JavaWeb环境搭建/wget-tomcat.jpg"></div><p>解压：<code>tar -zxvf apache-tomcat-8.5.39.tar.gz</code></p><p>然后进入<code>apache-tomcat-8.5.39\bin\</code>运行<code>startup.sh</code>就可以使用。</p><h2 id="源码包解压配置环境变量"><a href="#源码包解压配置环境变量" class="headerlink" title="源码包解压配置环境变量"></a>源码包解压配置环境变量</h2><p>刚才不需要配置环境变量是因为，我们在运行<code>war</code>包的时候可以将包放入<code>webapps</code>中，在运行<code>bin</code>目录下的<code>startup.sh</code>。如果我们想一个软件在任何位置都能运行就需要配置环境变量，比如<code>jdk</code>。</p><p>获得<code>jdk</code>的安装包不能再使用官网上的<code>url</code>并执行<code>wget url</code>来获取，因为<code>oracle</code>的官方网站有限制。所以我们需要先下载<code>jdk</code>，再上传到服务器上。上传服务器之后解压即可。</p><p>Linux配置环境变量时就是修改<code>/etc/profile</code>文件。<code>JAVA_HOME</code>指向解压的<code>JDK</code>目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/jdk1.8.0_201</span><br><span class="line">export PATH=$JAVA_HOME/bin:$ANT_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>修改完配置文件后使用命令刷新：<code>source /etc/profile</code></p><h2 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h2><p>rpm是由红帽公司开发的软件包管理方式，使用rpm我们可以方便的进行软件的安装、查询、卸载、升级等工作。但是rpm软件包之间的依赖性问题往往会很繁琐，尤其是软件由多个rpm包组成时。一般过程：</p><ol><li>找到相应的软件包，比如soft.version.rpm，下载到本机某个目录；</li><li>打开一个终端，su 成root用户；</li><li>cd soft.version.rpm所在的目录；</li><li>输入rpm -ivh soft.version.rpm</li></ol><h2 id="Yum"><a href="#Yum" class="headerlink" title="Yum"></a>Yum</h2><p>Yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p><h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><p>在centos7中一般默认安装了MariaDB。</p><div align="center"><img src="//isjinhao.github.io/2019/centos7软件安装和JavaWeb环境搭建/mariadb.png"></div><p>这是mysql的一个开源分支。为了避免这个分支对我们安装mariadb产生影响，我们先卸载这个东西：</p><p><code>yum remove maria*</code>。</p><ul><li>获得mysql5.7的Repository的rpm安装包：<code>wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</code></li><li>安装下载的rpm：<code>yum -y install mysql57-community-release-el7-10.noarch.rpm</code>。</li><li>安装mysql：<code>yum install mysql-server</code></li></ul><h3 id="配置Mysql"><a href="#配置Mysql" class="headerlink" title="配置Mysql"></a>配置Mysql</h3><ul><li>启动：<code>systemctl start mysqld</code></li><li>然后在<code>/var/log/mysqld.log</code>文件中会自动生成一个随机的密码，我们需要先取得这个随机密码，以用于登录 MySQL 服务端：<code>cat /var/log/mysqld.log | grep password</code></li><li>登录：<code>mysql -u root -p</code></li><li>修改密码：<code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;hilX0U!9i3_6&#39;;</code></li><li><p>设置密码永不过期：<code>ALTER USER &#39;root&#39;@&#39;localhost&#39; PASSWORD EXPIRE NEVER;</code></p></li><li><p>设置root可以在远程访问：<code>grant all privileges on *.* to root@&quot;%&quot; identified by &quot;new password&quot;;</code></p></li><li>设置root可以在本地访问：<code>grant all privileges on *.* to root@&quot;localhost&quot; identified by &quot;new password&quot;;</code></li><li>刷新配置：<code>flush privileges;</code></li><li>退出：<code>exit</code></li><li>解封阿里云3306端口。</li><li></li></ul><p>密码策略：<a href="https://blog.csdn.net/hello_world_qwp/article/details/79551789" target="_blank" rel="noopener">https://blog.csdn.net/hello_world_qwp/article/details/79551789</a></p><h4 id="Mysql相关命令"><a href="#Mysql相关命令" class="headerlink" title="Mysql相关命令"></a>Mysql相关命令</h4><ul><li>启动：systemctl start mysqld</li><li>查看状态：service mysqld status</li><li>停止：service mysqld stop</li><li>重启：service mysqld restart</li></ul><h2 id="make安装"><a href="#make安装" class="headerlink" title="make安装"></a>make安装</h2><ol><li>解压</li><li>执行“./configure”命令为编译做好准备；</li><li>执行“make”命令进行软件编译；</li><li>执行“make install”完成安装；</li><li>执行“make clean”删除安装时产生的临时文件。</li></ol><h2 id="Cmake安装"><a href="#Cmake安装" class="headerlink" title="Cmake安装"></a>Cmake安装</h2><p>CMake是一种跨平台编译工具，比make更为高级，使用起来要方便得多。CMake主要是编写CMakeLists.txt文件，然后用cmake命令将CMakeLists.txt文件转化为make所需要的makefile文件，最后用make命令编译源码生成可执行程序或共享库（so，shared object）。因此CMake的编译基本就两个步骤：</p><ul><li>cmake</li><li>make</li></ul><p>cmake 指向CMakeLists.txt所在的目录，例如cmake .. 表示CMakeLists.txt在当前目录的上一级目录。cmake后会生成很多编译的中间文件以及makefile文件，所以一般建议新建一个新的目录，专门用来编译，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">//等cmake结束</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>make根据生成的makefile文件，编译程序。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;由于Linux各发行版对软件安装工具的不同支持，导致Linux软件安装是相对很麻烦的事情，由于本人目前只使用过Centos7，所以借着搭建Jav
      
    
    </summary>
    
      <category term="Linux" scheme="https://isjinhao.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://isjinhao.github.io/tags/Linux/"/>
    
      <category term="JavaWeb" scheme="https://isjinhao.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树基础</title>
    <link href="https://isjinhao.github.io/2019/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%9F%BA%E7%A1%80/"/>
    <id>https://isjinhao.github.io/2019/二叉搜索树基础/</id>
    <published>2019-04-10T04:27:16.000Z</published>
    <updated>2019-04-10T10:55:01.247Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>对任何节点$x$，其左子树中的关键字最大不超过$x.key$，其右子树中的关键字最小不低于$x.key$。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>中序遍历得到的结点是非降序排序。递归根节点的左子树得到树中最小元素，递归根节点的右子树得到树中最大元素。</p><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><p>对于结点$x$，$x$存在指向左孩子、右孩子及父节点的指针。有且仅有根节点中的指向父节点的指针为空。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><div align="left"><img src="//isjinhao.github.io/2019/二叉搜索树基础/查找.jpg"></div><p>$x$是根节点，$k$是待查找关键字，查找的到则返回相应节点，查找不到返回空。</p><h3 id="后继"><a href="#后继" class="headerlink" title="后继"></a>后继</h3><div align="left"><img src="//isjinhao.github.io/2019/二叉搜索树基础/后继.jpg"></div><p>$x$是待查找结点，右子树不为空，右子树的最小值所在的节点是后继。解释第<code>3-7</code>行代码需要证明一个定理：</p><blockquote><p>对于一棵二叉搜索树T，其关键字各不相同，如果T中一个节点$x$的右子树为空，且$x$有一个后继$y$，那么$y$一定是$x$的最底层祖先，并且其左孩子也是$x$的祖先。（每个结点都是其自身的祖先）</p></blockquote><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>对于给定结点$x$，若其后继$y$存在，则$y &gt; x$。</p><ol><li>考虑结点$x$，对于$x$的左子树，显然其中任意结点值都小于$x$，所以$y$必定不在其左子树中。</li><li>$x$的右子树，其中任意结点值都大于$x$,但是根据题设，其右子树为空。</li></ol><p>所以，$y$必定为$x$的祖先或其祖先的右子树。</p><p>又因为$y$是其中大于$x$且最小的一个，则$y$不可能是其祖先的右子树，那么我们可以将范围缩小至$y$必定为$x$的某一祖先，又根据$y&gt;x$，则$x$必定在$y$的左子树中，即$y$的左孩子也是$x$的祖先（$x$也是$x$的祖先）</p><p>对于所有满足条件的，假设有$p_0,p_1 \dots p_n$共$n+1$个，且$p_0 &lt; p_1 &lt; p_2 &lt; \dots &lt; p_n$。显然，$x$的前驱结点$y$必定是其中的最小一个，即$y=p_0$。又因为$y$是$x$的祖先，则$y$必然是$x$的最底层祖先。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>这个定理实际的意义是，对于二叉搜索树中的一个节点（$x$），如果其不存在右子树且还有后继（$y$），则$y$是$x$祖先节点中有左子树的最底层祖先。如下图中的13。</p><div align="center"><img src="//isjinhao.github.io/2019/二叉搜索树基础/后继图示.jpg"></div><h3 id="前驱"><a href="#前驱" class="headerlink" title="前驱"></a>前驱</h3><p>前驱的代码和后继对应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TREE-PREDECESSOR(x)</span><br><span class="line">if x.left != null</span><br><span class="line">return TREE-MAXNUM(x.left);</span><br><span class="line">y = x.p</span><br><span class="line">while y != null and x == y.left</span><br><span class="line">x = y</span><br><span class="line">y = y.p</span><br><span class="line">return y</span><br></pre></td></tr></table></figure><p><code>3-7</code>行代码的意思是，对于二叉搜索树中的一个节点（$x$），如果其不存在左子树且还有前驱（$y$），则$y$是$x$祖先节点中有右子树的最底层祖先。如图中的17。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><div align="left"><img src="//isjinhao.github.io/2019/二叉搜索树基础/插入.jpg"></div><p>$z$是待插入节点，<code>3-7</code>行$y$下降到叶子结点。下降之后插入。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>讨论删除之前需要证明一个定理：</p><blockquote><p>如果一个二叉搜索树中的一个节点有两个孩子，那么它的后继没有左孩子，它的前驱没有右孩子。</p></blockquote><h4 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h4><p>如果一棵二叉搜索树中的一个结点有两个孩子，那么它的后继为它的右子树中的最小值，所以它的后继没有左孩子，它的前驱为它的左子树中的最大值，所以它的前驱没有右孩子。</p><h4 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h4><p>删除时有三种情况：</p><ol><li>如果被删除节点（$z$）没有孩子节点，直接删除，修改父节点相应指针指向空。</li><li>如果$z$只有一个孩子，把孩子提到树中$z$所在的位置，并修改$z$的父节点，用$z$的孩子来替换。</li><li>如果$z$有两个孩子，那么找$z$的后继$y$（一定在$z$的右子树中）。<ol><li>如果$y$是$z$的右孩子，用$y$替换$z$，同时留下$y$的右孩子。</li><li>如果$y$不是$z$的右孩子，有之上定理可知，$y$是没有左孩子的，此时用$y$的右孩子替换$y$，用$y$替换$z$，不留下$y$的右孩子。</li></ol></li></ol><h4 id="伪码实现"><a href="#伪码实现" class="headerlink" title="伪码实现"></a>伪码实现</h4><div align="left"><img src="//isjinhao.github.io/2019/二叉搜索树基础/删除.jpg"></div><h5 id="TRANSPLANT"><a href="#TRANSPLANT" class="headerlink" title="TRANSPLANT"></a>TRANSPLANT</h5><p><code>TRANSPLANT</code>的功能是在树$T$中用一棵以$v$为根的子树来替换一棵以$u$为根的子树。</p><ul><li><code>1-2</code>行：当$u$是树根的时候，直接让$T$的根指向$v$。</li><li><code>3-4</code>行：当$u$是一个左孩子的时候，将$v$放在$u$的左孩子的位置。</li><li><code>5</code>行：当$u$是一个右孩子的时候，将$v$放在$u$的右孩子的位置。</li><li><code>6-7</code>行：更新$v​$的父节点。</li></ul><h5 id="TREE-DELETE"><a href="#TREE-DELETE" class="headerlink" title="TREE-DELETE"></a>TREE-DELETE</h5><p><code>TREE-DELETE</code>的功能：</p><ol><li><code>1-4</code>行：如果$z$没有左孩子，那么用其右孩子替换$z$。如果$z$没有右孩子，那么用其左孩子替换$z$。（此时等同于上诉删除过程中的1和2）</li><li><code>6-9</code>行：如果如果$z$有两个孩子，且$y$不是$z$的右孩子，用$y$的右孩子替换$y$，用$y$替换$z$。</li><li><code>10-12</code>行：如果$y$是$z$的右孩子，用$y$替换$z$，同时留下$y​$的右孩子。</li></ol><div align="center"><img src="//isjinhao.github.io/2019/二叉搜索树基础/删除图示.jpg"></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Apr 25 2019 18:51:19 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;对任何节点
      
    
    </summary>
    
      <category term="DSA" scheme="https://isjinhao.github.io/categories/DSA/"/>
    
    
      <category term="数据结构" scheme="https://isjinhao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="DSA" scheme="https://isjinhao.github.io/tags/DSA/"/>
    
      <category term="树" scheme="https://isjinhao.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
