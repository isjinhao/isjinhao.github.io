<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[软件开发文档用图]]></title>
    <url>%2F2019%2F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E7%94%A8%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[系统流程图表达的是数据在系统各部件之间流动的情况，但不表达对数据进行加工处理的控制过程。基本思想：用图形符号以黑盒子形式描绘组成系统的每个部件（程序，文档，数据库，人工过程等），表达数据在系统各部件之间流动的情况。符号装配厂供货流程图某装配厂有一座存放零件的仓库，仓库中现有的各种零件的数量以及每种零件的库存量临界值等数据记录在库存清单主文件中。当仓库中零件数量有变化时，应该及时修改库存清单主文件，如果哪种零件的库存量少于它的库存量临界值，则应该报告给采购部门以便订货，规定每天向采购部门送一次订货报告。该装配厂使用一台小型计算机处理更新库存清单主文件和产生订货报告的任务。零件库存量的每一次变化称为一个事务，由放在仓库中的CRT终端输入到计算机中；系统中的库存清单程序对事务进行处理，更新存储在磁盘上的库存清单主文件，并且把必要的订货信息写在磁带上。最后，每天由报告生成程序读一次磁带，并且打印出订货报告。人工销售教材流程图计算机售书系统流程图数据流图符号通过图形的方法，从数据传递和数据处理的角度，刻画数据流从输入到输出的移动变换过程。数据流三个重要属性：数据流名字数据组成流向### 银行取款过程的数据流图数据流程图分层顶层流图仅包含一个数据处理，它代表被开发系统。它的输入流是该系统的输入数据，输出流是系统所输出数据底层流图是指其数据处理不需再做分解的数据流图，它处在最底层中间层流图则表示对其上层父图的细化。它的每一数据处理可能继续细化，形成子图商场业务处理系统的分层数据流图商场进货时，先发订货单给供应商，供应商收到订货单，将商品发给商场，商场货到付款，供应商收款后，将收据发给商场；当顾客到商场采购商品时，先下购物订单，商场查询库存中是否有此种商品，若有则发货给顾客；若没有，则向供应商订货，货到之后再销售给顾客；顾客收到货物之后付款，商场开收据给顾客；商场对货物的管理方面要求知道每种货物详细的销售情况。#### 绘制L0层数据流图首先从问题的描述中提取数据流图中的源（终）点、数据处理、数据流和数据存储四种成份。- 分析源（终）点：将商场的购、销业务系统看成一个整体，外部的与这个系统有交往的对象（机构、人员、或外部系统）是“供应商，和“顾客”，二者是商场购销系统源点和终点。- 分析数据处理：在顶层数据流图的处理中，用一个整体来表示- 分析数据流：- 供应商方 $\rightarrow$ 商场：发货单、货款收据- 顾客 $\rightarrow$ 商场：订单、货款- 商场 $\rightarrow$ 供货商：订货单、货款- 商场 $\rightarrow$ 顾客：货物、收据- 分析数据存储- 库存信息- 暂存订单（缺货订单）- 采购订单- 商品销售历史- 资金帐目#### 绘制L1层数据流图商店业务处理的主要数据处理是销售、采购、会计三大数据处理，三者之间的数据流：- 销售 $\rightarrow$ 采购：订货通知- 销售 $\rightarrow$ 会计：收款单- 会计 $\rightarrow$ 销售：收据- 采购 $\rightarrow$ 销售：到货通知- 采购 $\rightarrow$ 会计：付款单绘制L2层数据流图销售细化- 采购细化教务管理系统某校准备开发一个学生成绩管理系统。在该系统中，教务人员录入学生信息、课程信息和成绩信息，学生可以随时查询自己所选课程的成绩。由于学生成绩属于敏感信息，系统必须提供必要的安全措施以防非法存取。绘制L0层数据流图源点终点：教务人员（源点）；学生（终点）数据处理：将系统当成一个整体“学生成绩管理”数据流：学生信息、课程信息和成绩；（教务人员录入时）查询请求、查询结果（学生查询时）数据文件：成绩文件、学生文件、课程文件。教务人员维护学生信息和课程信息，并登录学生的选课成绩；学生查询自己的成绩单。绘制L1层数据流图“学生信息”是教务人员需要录入的一个信息，因此加入一个加入“录入学生信息” ；同样得到“录入课程信息”、“登记成绩”两个数据处理。另外，数据流“查询请求”和“查询结果”应该由数据处理“查询成绩”来完成。对第 0 层 DFD 的加工“学生成绩管理“进行展开。数据处理：录入学生信息录入课程信息登记学生成绩查询学生成绩数据存储：增加这些数据流对应的数据存储，即“学生”、“课程”和“成绩” ，最后得到如图所示的第 1 层 DFD 。绘制L2层数据流图继续分解第 1 层 DFD 中的加工“查询学生成绩”数据处理：分解为“合法性检查”和“查询成绩”数据文件：合法的查询条件状态转换图语法在状态图中：初态用实心圆表示；终态用一对同心圆（内圆为实心圆）表示。中间状态用圆角矩形表示，可以用两条水平横线把它分成上、中、下3个部分。上面部分为状态的名称（必须）；中间部分为状态变量的名字和值（可选）；下面部分是活动表（可选）。#### 活动表的语法格式事件名(参数表)/动作表达式。- 在活动表中经常使用下述3种标准事件：entry, exit和do。- entry事件指定进入该状态的动作；- exit事件指定退出该状态的动作；- do事件则指定在该状态下的动作。- 活动表中的动作表达式描述应做的具体动作。#### 事件表达式的语法- 事件说明［守卫条件］／动作表达式- 其中事件说明的语法为：事件名(参数表)。举例结构图模块关系- 一个方框表示一个模块；- 一个模块指向另一个模块的箭头或直线，表示前一模块对后一模块的调用；- 调用直线边的小箭头，表示调用时从一个模块传给另一个模块的数据，也指出了传送方向。### 四种模块1. 从下属模块取得数据，经过处理，再传入上级模块2. 从上级模块获得数据，经过处理，再传送给下属模块3. 加工模块。从上级模块获得数据，经过处理，转换成其他形式，再送回上级模块4. 对所有下属模块进行协调和管理的模块### 医院管理系统选择/循环调用变换型SCDFD#### 第一级分解后 SC 的数据流#### 传入分支的分解传出分支的分解中心加工分支的分解事务型SCDFD分解系统设置控制器分解密码处理控制器程序流程图符号(a) 选择(分支)； (b) 注释； (c) 预先定义的处理； (d) 多分支； (e) 开始或停止； (f) 准备； (g) 循环上界限； (h) 循环下界限； (i) 虚线； (j) 省略符； (k) 并行方式； (l) 处理； (m) 输入输出； (n) 连接； (o) 换页连接； (p) 控制流### 例子## 盒图### 符号例子PAD图符号1. 顺序(先执行P1后执行P2)；2. 选择(IF C THEN P1 ELSE P2);3. CASE型多分支；4. WHILE型循环(WHILE C DO P);5. UNTIL型循环(REPEAT P UNTIL C)；6. 语句标号；7. 定义### PAD 描述的示例判定表例子检查发货单判定表判定树程序图从流程图导出程序图]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件工程和项目管理]]></title>
    <url>%2F2019%2F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[软件危机软件危机指在计算机软件的开发和维护过程中，所遇到的一系列严重问题。软件危机主要包括的问题：如何开发软件如何维护软件软件危机的典型表现：发费用和进度难以估算和控制，大大超过预期的资金和规定日期软件需求分析不够充分，用户不满意“已经完成”的软件系统。软件质量难于保证软件维护困难难以改正程序中的错误难以根据用户的需要在原有程序中增加一些新的功能。通常没有保留适当的文档资料。文档的作用：软件开发管理人员：用于管理和评价软件开发工程的进展状况软件开发人员：用于开发人员对各个阶段的工作都进行周密思考、全盘权衡、从而减少返工。并且可在开发早期发现错误和不一致性，便于及时加以纠正软件维护人员：软件维护的依据开发成本逐年上升，软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势。产生软件危机的原因软件本身的特点软件与硬件不同抽象性。软件生产没有明显的制造过程，难以衡量开发进展，也难以控制软件质量。问题的隐蔽性。没有硬件的磨损、老化问题，但存在开发早期在分析、设计阶段的错误，修改难度较大。软件与一般程序不同软件远比一般程序规模庞大，复杂性高。而复杂性包括实际问题的复杂性和程序逻辑结构的复杂性。大型软件开发既有技术问题，还有社会问题。如：开发团队成员分工合作、技术与管理的矛盾、软件开发人员对软件应用的领域知识的了解。包括的社会因素有：组织机构、体制、管理方式、观念、人的心理素质等。软件开发与维护的方法不正确对用户需求的获取不正确用户的原因分析人员的原因，对分析人员的要求：沟通能力、归纳总结能力、经验。软件开发不是编写程序。一个完整的软件产品由一整套完整的配置组成，程序只是其中的一个组成部分。软件开发过程包括多个阶段，每个阶段的产品都是最终的完整的软件产品的一部分。软件开发只要依靠个别编程高手就能完成。轻视软件维护。软件维护约占软件费用55%-75%，包括修改软件运行的错误；对软件进行改进和功能扩充。其他产生软件危机的原因软件开发尚未完全摆脱手工艺的开发方式。软件成本相当昂贵，主要依靠大量复杂的、高强度的脑力劳动。软件的开发和运行常常受到计算机系统的限制，对计算机系统有着不同程度的依赖性。软件的本质特性复杂性一致性软件不能独立存在，需要依附于一定的环境（如硬件、网络以及其他软件）软件必须遵从认为的惯例并适应已有的技术和系统软件需要随接口不同而改变，随时间推移而变化，而这些变化是不同人设计的结果可变性：软件需要不断的进行调整来满足用户的需求不可见性软件是一种“看不见，摸不着”的逻辑实体，不具有空间的形体特征。开发人员可以直接看到程序代码，但是源代码并不是软件本身。软件是以机器代码的形式运行，但是开发人员无法看到源代码是如何执行的。软件开发面临的挑战消除软件危机的途径彻底消除“软件就是程序”的错误观念。充分认识到软件开发是一种组织良好、管理严密、各类人员协同配合、共同完成的工程项目，不是个人独立的劳动。推广和使用在实践中总结出来的软件开发的成功技术和方法。开发和使用更好的软件工具“软件工程”的方法理论是摆脱软件危机的一个主要出路。即按工程化的原则和方法组织软件开发工作是有效的，是摆脱软件危机的一个主要出路。软件开发的误区只要是编程高手，即使是不懂软件工程，也能编出很好的软件。软件是服务于大众，却是由个性化的开发人员完成的。如果个性化太强，程序就无法阅读，其他人员也就无法维护。例：国内 80 年代涌现出来的众多汉字操作系统均是由编程高手完成的。只要拥有一套讲述如何开发软件的书籍，并了解了书中的标准与示例，就可以解决软件开发中遇到的任何问题。软件是用来解决现实问题的，现实问题的特殊性对规范提出了挑战（要进行适应）。软件技术是发展的，没有祖传秘方。就像拥有食谱并不能成为名厨一样，软件开发需要实践。只要拥有最好的开发工具、最好的计算机，一定能做出优秀的软件。硬件环境只是必要条件，人才是充分条件，软件是人在一定的约束条件下创造出来的。因人因事而异。软件开发时，如果进度慢，落后于计划，可以增加更多的程序员来解决。Brook法则：当人数增加后，项目所需的工作量将不成比例的增加。因为需要增加管理、协调、通信等工作。软件的定义软件 = 程序 + 数据 + 文档软件：计算机可以接受的一系列指令，运行时可以提供所要求的功能和性能。数据：使得程序能够适当地操作信息的数据结构文档：描述程序的研制过程、方法和使用的图文资料。软件工程1968 年，第一届NATO会议：为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用完善的工程原理。1993 年，IEEE/CS：将系统化的、规范的、可度量的方法应用于软件的开发、运行和维护的过程，即将工程化应用于软件中。软件工程便是对上述提到的各种方法的研究。另一个角度的看软件工程本质特性软件工程关注于大型程序的构造。软件工程的中心课题是控制复杂性主要考虑：如何分解和集成。为什么要分解： G .Miller（美国认知心理学家乔治·米勒）, “7±2 ” 原则，即短时间内人的记忆广度大约为7±2个单位。比如在记忆圆周率的时候只能记忆7±2位，超过这个范围需要分组记忆。软件经常变化开发软件的效率非常重要和谐地合作是开发软件的关键软件必须有效地支持它的用户在软件工程领域中是由具有一种文化背景的人替具有另一种文化背景的人创造产品扩展定义：软件 = 知识＋程序 + 数据 + 文档软件工程的基本原理用分阶段的生命周期计划严格管理坚持进行阶段评审实行严格的产品控制基线：基线（baseline）控制采用现代程序设计技术结果应能清楚地审查开发小组的人员应该少而精承认不断改进软件工程实践的必要性软件工程方法学软件工程包括“管理”和“技术”两方面内容：管理：对人、财、物的合理使用和配置；技术：指软件开发中采用的方法、工具和过程。软件工程方法学：通常把在软件生命周期全过程中使用的一整套技术方法的集合称为方法学（methodology），也称为范型（paradigm）。三要素软件工程过程：规定了完成各项任务的工作步骤。软件工程方法：完成软件开发的各项任务的技术方法，为软件开发提供了“如何做”的技术。如项目计划与估算、软件系统需求分析、数据结构、系统总体结构的设计、算法过程的设计、编码、测试以及维护等。软件工程工具：计算机辅助软件工程 CASE（computer Aided sottware Engineering），为软件工程方法提供自动或半自动的软件支撑环境。软件工程方法软件工程方法学思想传统方法学采用结构化技术（结构化分析、结构化设计和结构化实现）来完成软件开发的各项任务；把软件生命周期划分为若干个阶段，按顺序完成每个阶段的任务；每个阶段开始和结束都有严格的标准，对任何两个相邻的阶段而言，前一个阶段的结束标准就是后一阶段的开始标准；每一个阶段结束之前都必须进行正式严格的技术审查和管理复审优点分解任务，分工合作，降低整个软件开发工程的困难；采用科学的管理技术和良好的技术方法对每个阶段成果都进行严格的审查。保证了软件的质量。缺点把数据和操作人为地分离成两个独立的部分，增加了软件开发与维护的难度。面向对象方法学模拟人类习惯的思维方式，使开发软件的方法与过程尽可能接近人类认识世界解决问题的方法与过程，从而使描述问题的问题空间（也称为问题域）与实现解法的解空间（也称为求解域）在结构上尽可能一致。要点如下：把对象（object）作为融合了数据及在数据上的操作行为的统一的软件构件。把所有对象都划分成类（class ）。按照父类（或称为基类）与子类（或称为派生类）的关系，把若干个相关类组成一个层次结构的系统（也称为类等级）。对象彼此间仅能通过发送消息互相联系。和传统方法学的区别是：传统方法学强调自顶向下顺序地完成软件开发的各阶段任务。面向对象方法是主动地多次反复迭代的演化过程。软件生命周期### 软件定义时期- 确定软件开发工程必须完成的总目标；- 确定工程的可行性；- 导出实现工程目标应该采用的策略及系统必须完成的功能；- 估计完成该项工程需要的资源和成本，并且制定工程进度表。- 通常分为问题定义、可行性研究和需求分析三个阶段。#### 问题定义阶段要解决的问题是什么？#### 可行性研究阶段对于上一个阶段所确定的问题有行得通的解决办法吗？#### 需求分析为了解决这个问题，目标系统必须做什么。用正式文档准确地记录对目标系统的需求，这份文档通常称为规格说明书（specification）。### 软件开发时期具体设计和实现前一个时期定义的软件，通常分为四个阶段。#### 总体设计（概要设计）根据需求分析，设计软件的体系结构；定义结构中的组成模块。#### 详细设计（模块设计）对每个模块要完成的工作进行具体的描述，为源程序编写打下基础。编写设计说明书，提交评审。与总体设计统称系统设计。#### 程序编写（Coding, Programming）把软件设计转换成计算机可以接受的程序代码。#### 软件测试（Testing）按规定的各项需求，逐项进行有效性测试，决定已开发的软件是否合格，能否交付用户使用，包括单元测试和组装测试。与程序编写统称系统实现。### 运行维护（软件维护）时期使软件持久的满足用户的需要，包括：- 改正性维护：运行中发现了软件中的错误需要修正。- 适应性维护：为了适应变化了的软件工作环境，需做适当变更。- 完善性维护：当用户有新的要求时，应该及时改进软件以满足用户的要求。- 预防性维护: 即修改软件为将来的维护活动预先做准备。## 软件过程软件过程是为了获得高质量软件所需要完成的一系列任务的框架，它规定了完成各项任务的工作步骤。软件过程描述为了开发出客户需要的软件，什么人（who）、在什么时候（when）、做什么事（what）以及怎样（how）做这些事以实现某一个特定的具体目标。通常用软件生命周期模型来描述。ISO 9000的定义：使用资源将输入转化为输出的活动所构成的系统。 “系统”是相互关联或相互作用的一组要素。软件生命周期模型指软件项目从需求定义直至软件经使用后废弃为止，跨越整个生存周期的系统开发、运作和维护所实施的全部过程、活动和任务的结构框架。瀑布模型从上一阶段接受本阶段的工作对象，作为输入；利用输入，完成本阶段活动的内容。本阶段的工作成果作为输出传入下一阶段。实际的瀑布模型增加了一个评审活动，评审每个阶段完成的活动，若得到确认，则进行下一阶段的活动；否则返回前一阶段，甚至更前阶段返工。#### 特点- 阶段间具有顺序性和依赖性。- 推迟实现的观点。- 质量保证的观点。#### 优点- 可强迫开发人员采用规范的方法；- 严格地规定了每个阶段必须提交的文档；- 要求每个阶段的所有产品都必须经过质量保证小组的仔细验证；#### 缺点- 无法解决软件需求不明确或不准确的问题；可能导致最终开发的产品不能真正满足用户需要。瀑布模型比较适合开发需求明确的软件。### 快速原型模型原型是快速实现和运行的早期版本，反映最终系统部分重要特性。常见的原型实例：人机界面；系统主要功能。快速原型就是快速开发一个能用的版本再后期修改。- 获得用户的基本需求说明，据此快速建立一个小型软件系统。- 用户试用，对其评价；- 开发人员按照用户的意见快速地修改原型系统，获得新的原型版本，再请用户试用，如此反复，直到满足用户的要求；- 用户确认原型系统之后，开发人员据此书写规格说明文档，进行下一步开发。#### 优点- 通常能反映用户真实需求；- 软件产品的开发基本上是线性顺序进行的。### 增量（渐增）模型把软件产品作为一系列的增量构件来设计、编码、集成和测试。每个构件由多个相互作用的模块构成，并且能够完成特定的功能。使用增量模型时，第一个阶段的增量构件往往实现软件的基本需求，提供最核心的功能；后面的增量构架逐渐添加系统的功能。#### 注意事项- 增量构件规模适中；- 分解的约束条件是当把新构件集成到现有软件中时，所形成的产品必须是可测试的；- 软件体系必须是开放的，即在对现有系统添加新增量构件时，不能破坏系统原有功能。#### 优点- 能在较短的时间内，提供可完成部分工作的初步产品给用户；- 用户有较为充裕的时间学习和适应新产品。#### 缺点对开发人员技术能力要求较高，要求能从系统整体出发正确划分增量构件，并进行分别开发，最后能很好地集成这些构件。#### 一种风险更大的增量模型有可能提高开发速度，但需要密切地监控整个开发过程，否则会有构件无法集成到一起的风险。### 螺旋模型大型软件开发面临的重要问题：软件风险，如：- 产品交付给用户之后，用户不满意；- 开发进度落后，开发成本超出预算；- 产品完成前关键的开发人员跳槽；- 在产品投人市场前，竞争对手发布了一个功能相近，价格更低的软件 …构建原型能使某些类型的风险降到最低。#### 优点- 强调可选方案和约束条件，有利于已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标；- 减少了过多测试（浪费资金）或测试不足（产品故障多）所带来的风险；- 维护是一个周期，与开发并没有本质区别#### 缺点- 需要开发人员具有相当丰富的风险评估经验和专门知识；- 进行风险分析的费用可能较大。适合大型软件开发。### 各种模型的比较| 模型 | 优点 | 缺点 || :———-: | :————————–: | :———————————-: || 瀑布模型 | 规范，文档驱动 | 系统可能不满足客户真正的需求 || 快速原型 | 克服了瀑布型的缺点 | || 增量模型 | 开发早期回报明确，易于维护 | 要求开放的软件体系结构 || 螺旋模型 | 风险驱动，适用于大型项目开发 | 风险分析人员需要有经验且经过充分训练 |## 软件工程工具软件开发的基本策略软件复用利用已有的软件制品，直接组装或合理修改形成新的软件系统，从而提高开发效率和产品质量，降低维护成本。软件复用不仅仅是代码复用，函数库、类库、模板（文档、网页）、设计模式、组件、框架。分而治之软件工程是一项解决问题的工程活动，通过对问题进行研究分析，将一个复杂的问题分解成可以理解并能够处理的若干小问题，然后再逐个解决。逐步演进软件开发应该遵循软件的客观规律，不断进行迭代式增量开发，最终交付符合客户价值的产品。优化折中软件工程师应该把优化当成一种责任，不断改进和提升软件质量；但是优化是一个多目标的最优决策，在不可能使所有目标都得到优化时，需要进行折中实现整体最优。ISO9126 质量模型### 功能性- 适合性：当软件你在指定条件下使用，其满足明确和隐含要求功能的能力。- 准确性：软件提供给用户功能的精准度能不能满足要求- 互操作性：软件与其他系统进行交互的能力- 安全性：软件保护信息和数据的安全能力### 可靠性- 成熟性：软件产品避免因软件中错误开发而导致失效的能力- 容错性：软件防止外部接口错误扩散而导致系统失效的能力- 可恢复性：系统失效后，重新恢复原有功能和性能的能力### 易用性- 易理解性：软件显示的信息要清晰、准确且易懂，使用户能够快速理解软件。- 易学习性：软件使用户能学习其应用的能力- 易操作性：软件产品使用户能易于操作和控制它的能力。- 吸引性：软件具有的某些独特的、能让用户眼前一亮的属性。### 效率- 时间特性：在规定的条件下，软件产品执行其功能时能够提供适当的响应时间效和处理时间以及吞吐率的能力。- 资源利用：软件系统在完成用户指定的业务请求所消耗的系统资源，诸如CPU占有率、内存占有率、网络带宽占有率等。### 可维护性- 易分析性：软件提供辅助手段帮助开发人员定位缺陷原因并判断出修改之处。- 易改变性：软件产品使得指定的修改容易实现的能力。- 稳定性：软件产品避免由于软件修改而造成意外结果的能力。- 易测试性：软件提供辅助性手段帮助测试人员实现其测试意图。### 可移植性- 适应性：软件产品无需做任何相应变动就能适应不同运行环境的能力。- 易安装性：在平台变化后成功安装软件的难易程度- 共存性：软件产品在公共环境与其共享资源的其他系统共存的能力。- 替换性：软件系统的升级能力，包括在线升级、打补丁升级等。## 可行性研究的目的- 说明该软件开发项目的实现在技术上、经济上和社会条件上的可行性；评述为合理地达到开发目标可能选择的各种方案。- 用最小的代价在尽可能短的时间内确定问题是否能够并且值得解决。可行性研究最根本任务是对以后的行动方针提出建议，一般占预期工程总成本的 5%-10%。## 可行性研究的基本内容- 技术可行性：使用现有的技术能实现这个系统吗？主要考虑：开发风险；资源；相关技术的发展- 经济可行性：这个系统的经济效益能超过它的开发成本吗？- 系统经济效益 = 新系统增加的收入＋ 新系统节省的费用- 考虑：成本——效益分析、长期的公司经营策略、对其他单位或产品的影响、开发所需的成本和资源、潜在的市场前景- 操作可行性：系统的操作方式在用户组织内行得通吗？- 其他：法律可行性、社会效应、管理问题等### 技术可行性对系统的性能、可靠性、可维护性以及生产率等方面的信息进行评价。通过技术可行性的分析，将为新系统提交技术可行性评估。以指明为完成系统的功能和性能需要什么技术？需要哪些材料、方法、算法、或者过程等。技术可行性分析方法：数学模型和优化技术、概率和统计、排队论、控制论等方法。### 经济可行性进行成本效益分析，评估项目的开发成本。操作可行性一个地区、一个行业乃至一个国家计算机应用发展的客观道路及规律客观发展规律，各阶段是不能超越的结合实际分析本单位、本部门、本行业的实际情况，参照国内外经验教训，实事求是地规划本企业信息系统的发展。可行性研究的任务可行性研究的目的是建立目标系统的逻辑模型。通常软件软件开发项目是要实现目标系统的物理模型，即确定待开发软件系统的系统元素，并将功能和数据结构分配到这些系统元素中。它是软件实现的基础。但是目标系统的物理模型是由它的逻辑模型经实例化，即具体到某个业务领域而得到的。与物理模型不同，逻辑模型忽视机制和细节，只描述系统要完成的功能和要处理的数据。为此，该阶段的主要任务是，借助于当前系统的逻辑模型导出目标系统的逻辑模型，也就是解决目标系统“做什么”的问题。其实系统的开发过程就是根据需要解决的问题，建立一个有信息技术支撑、与解决问题相关的、数据处理的、可运行的计算机模型。具体模型到逻辑模型举例可行性研究的定义了解客户的要求及现实环境，从技术、经济和社会因素等三方面研究并论证本软件项目的可行性，编写可行性研究报告，制定初步项目开发计划。可行性分析的描述手段：系统流程图、数据流图可行性研究报告功能说明软件项目的实现在技术上、经济上和社会因素上的可行性，评述为合理地达到开发目标可供选择的各种可能的实现方案，说明并论证所选定实施方案的理由。成本／效益分析从经济角度分析开发一个特定的新系统是否划算，帮助客户负责人作出是否投资的决定。主要包括成本估计和成本效益分析。成本估计包括开发成本和运行成本开发成本代码行技术：根据经验和历史数据，估算实现一个功能需要多少源程序行数，用每行代码的平均成本乘以行数。任务分解技术：将软件开发工程分解成若干个相对独立的任务，分别估算，然后累加得出总成本。按阶段分解按功能分解自动估计成本技术：采用自动估计成本的软件工具，需要有长期搜集的大量历史数据为基础，并需要良好的数据库系统支持。运行成本取决于系统的操作费用（操作人员数、工作时间、消耗的物资等）和维护费用。需求定义需求是人们要解决的问题某个问题或达到某种目的的需要。是系统或其组成部分为满足某种书面规定（合同、标准、规范等）所要具备的能力。需求将作为系统开发、测试、验收、提交的正式文档的依据。需求的内容需求是系统为满足客户期望的目标而完成的行为需求要体现出对问题领域的清晰理解给出系统的使用场景和上下文需求定义涵盖如下内容为什么要设计此系统系统由谁使用系统要做什么系统涉及哪些信息对解决方案有什么额外补充如何使用该系统质量需要达到何种程度需求内容来源干系人：干系人是任何和系统有关的人，如：资方、客户、系统用户、领域专家、项目研发团队。识别干系人可以从以下几个方面来判别：产品谁来用、输入谁提供、输出谁要、谁监管、影响谁、奖励谁、惩罚谁。业务过程：对现有业务过程的分析有助于识别业务问题并改进找出并列举当前业务过程中的问题分析问题的本质，可能是遗漏的，可能不好用，可能有新需求分析改进的机会分析改进的实质组织规章制度：分析规章制度有益于确定业务规则和约束条件业务规则：描述对业务过程的要求，如支撑系统的业务过程的结构、控制、行为效果约束：对系统开发过程的管理限制，主要涉及经济、政治、技术和环境四个方面，具体包括项目资源、时间、目标环境级现有系统：分析现有系统有助于了解未来系统的工作数据需求分析软件需求指用户对所开发的软件在功能、性能、环境、可靠性等各方面的要求。需求分析主要回答待开发的系统必须“做什么”，并用 《 需求规格说明书 》 的形式准确、详细、规范地表达出来。需求分析阶段，系统分析员的主要关注点是“做什么（ what ) ” ，不是“怎样做（ how）”；需求分析阶段，系统分析员应该给出软件需求规格书。需求分析的任务确定对系统的综合要求分析系统的数据要求导出系统的逻辑模型修正系统开发计划确定对系统的综合要求功能需求。指定系统必须提供的服务。性能需求。指定系统必须满足的定时约束或容量约束等。可靠性和可用性需求。应定量指定。出错处理需求。指环境错误，非系统本身的错误。接口需求。常见的接口需求：用户接口需求；硬件接口需求；软件接口需求；通信接口需求。常见的约束：精度；工具和语言约束；设计约束；应该使用的标准；应该使用的硬件平台。逆向需求。指定系统不应该做什么，将来可能提出的要求。分析建模结构化分析（Structured Analysis，SA）是面向数据流进行分析的方法，主要建立以下几种模型：实体关系图（Entity-Relationship Diagram，E-R图）来创建数据模型，描述系统中所有重要的数据对象；数据流图（Data Flow Diagram，DFD）：用来创建功能模型，描述了信息流和数据转换；状态转换图（State-Transition Diagram，STD）用来创建行为模型，描述系统状态如何响应外部事件，而进行转换。面向对象分祈方法（OOA）所建立的摸型对象模型（Object model）：定义实体，描述系统的静态结构，定义“对谁做”动态模型（Dynamic model）：描述对象之间的交互过程，规定“何时做”功能模型（Functional model） ：描述内部数据的处理，指明系统应“做什么”数据词典DD 是对数据流图中包含的所有元素的定义的集合，使得每个图形元素的名字都有一个精确的、严格的定义。数据流图和词典结合在一起，能清楚地表达数据处理的要求，构成了“需求说明书”定义数据的方法举例北京某高校可用的电话号码有以下几类：校内电话号码由4位数字组成，第1位数字不是0；校外电话又分为本市电话和外地电话两类，拨校外电话需先拨0，若是本市电话则再接着拨8位数字(第1位不是0)，若是外地电话则拨3位区码再拨8位电话号码(第1位不是0)。请用定义数据字典的方法，定义上述的电话号码。电话号码 = [校内电话号码|校外电话号码]校内电话号码 = 非零数字+ 3 位数字 //后面继续定义校外电话号码 = [本市号码|外地号码]本市号码 = 数字零+8位数字外地号码 = 数字零+3位数字+8位数字非零数字 = [1|2|3|4|5|6|7|8|9]数字零＝03位数字＝3{数字}3 //3至3个数字8位数字 = 非零数字+7位数字7位数字 = 7{数字}7数字＝[0|1|2|3|4|5|6|7|8|9]DD定义数据流数据流名：说明：简要介绍作用即它产生的原因和结果。数据流来源：来自何方。数据流去向：去向何处。数据流组成：数据结构。数据量流通量：数据量，流通量数据流定义- 数据流：购物单- 别名：无- 简述：学生购书时填写的项目- 来源：学生- 去向：审查并开发票- 组成：学号+姓名+书号+数量- 数据流量：1000次/周- 高峰值：开学期间1000次/天### DD定义数据元素数据元素，又叫数据项，指数据处理中最小的，不可再分的单位。描述包括：- 数据元素名- 类型：数字（离散值，连续值），文字（编码类型）- 长度- 取值范围- 相关的数据元素及数据结构#### 举例- 数据元素名：商品编号- 别名：- 描述：唯一的描述库存库清单中一个特定商品的关键域- 定义：商品编号 = 8 {字符} 8- 位置：- 订货报表- 订货信息- 库存清单### DD定义数据存储- 数据文件名：- 简述：存放的是什么数据- 输入数据：- 输出数据：- 数据文件组成：数据结构- 存储方式：顺序，直接，关键码- 存取频率：#### 举例- 数据文件名：库存记录- 别名：无- 简述：存放库存所有可供货物的信息- 组成：货物名称+编号+生产厂家+单价+库存量- 组织方式：索引文件，以货物编号为关键字- 查询要求：要求能立即查询### DD定义数据处理- 处理名- 编号：DFD中的编号- 激活条件- 处理逻辑：此处理的子项- 执行频率#### 例子- 数据处理名：登记报名单- 编号：1- 激活条件：收到报告单- 数据处理组成：- 1.1：检查报告单- 1.2：编准考证号- 1.3：登记考生- 执行频率：2000次/日## 软件设计的目标软件需求：解决“做什么”。软件设计：解决“怎么做”。- 软件设计的任务：以软件需求规格说明书为依据，着手实现软件的需求，并将设计的结果反映在“设计规格说明书”文档中。- 软件设计的重要性：是软件开发阶段的第一步，最终影响软件实现的成败和软件维护的难易程度。### 软件设计的两个阶段#### 第一阶段：概要设计（总体设计）根据软件需求，设计软件系统结构和数据结构，确定程序的组成模块及模块之间的相互关系。回答“概括地说，系统应该如何实现？”。其重要性是：站在全局高度，从较抽象的层次上分析对比多种可能的系统实现方案和软件结构，从中选出最佳方案和最合理的软件结构，从而用较低成本开发出较高质量的软件系统。#### 第二阶段：详细设计（过程设计）- 确定模块内部的算法和数据结构；- 选定某种过程的表达形式来描述各种算法；- 产生精确描述各模块程序过程的详细文档，并进行评审。## SA和SD概要设计的任务制定规范：为软件开发小组制定在进行软件设计，应该共同遵守的标准，以便协调组内各员的工作。设计软件系统结构（简称软件结构）将系统按功能划分成模块确定每个模块的功能确定模块之间的调用关系确定模块之间的接口，即模块之间传递的信息评价模块结构的质量处理方式设计功能设计：确定实现功能法，评估算法的性能．性能设计：确定实现性能需求必须的算法和模块间的控制方式数据结构及数据库设计可靠性设计编写概要设计文档概要设计评审软件设计的过程软件设计的原理模块化采取自顶向下的方式，逐层把软件系统划分成若干可单独命名和可编址的部分，即“ 模块” ，每个模块完成一个特定的子功能；所有模块按某种方法组成一个整体，完成整个系统所要求的功能。软件系统就是通过这些模块的组合来实现。模块化是在逻辑和无理上将整个系统分解成多个更小的部分，其实质是“分而治之”，即将一个复杂问题分解成若干个简单问题，然后再逐个解决。### 自顶向下，逐步求精的基本思想- 将功能、信息的说明分为多个层次，最高层也最抽象 ― 仅仅只是概念性地描述功能或信息，不提供功能的内部工作情况或信息的内部结构；- 设计者从最高层开始，仔细推敲，进行功能和信息的细化，给出下层实现的细节；- 随着每个后续细化逐步的完成，提供越来越多的细节，最终得出用程序设计语言表达的程序。模块独立系统分解的目标：高内聚、低耦合。内聚性是一个模块或子系统内部的依赖程度。如果一个模块或子系统含有许多彼此相关的元素，并且它们执行类似任务，那么其内聚性比较高；如果一个模块或子系统含有许多彼此不相关的元素，其内聚性就比较低。耦合性是两个模块或子系统之间依赖关系的强度。如果两个模块或 子系统是松散耦合的，二者相互独立，那么当其中一个发生变化时对另一个产生的影响就很小；如果两个模块或子系统是紧密耦合的，其中一个发生变化就可能对另一个产生较大影响。耦合性也称块间的联系。是对软件系统结构中，各模块间相互联系紧密程度的一种度量。无直接藕合两个模块没有直接关系，模块独立性最强。#### 数据耦合属松散耦合。一模块访问另一模块时，通过数据参数交换输入、输出信息。控制藕合模块之间传递的是控制信息（如开关、标志、名字等），控制被调用模块的内部逻辑。#### 特征耦合两个模块通过传递数据结构加以联系，或都与一个数据结构有关系，则称这两个模块间存在特征耦合。可能出现的情况：当把整个数据结构作为参数传递时，被调用的模块虽然只需要使用其中的一部分数据元素，但实际可以使用的数据多于它真正需要的数据，这将导致对数据访问失去控制。“住户情况”是一个数据结构，图中模块都与此数据结构有关。“计算水费”和“计算电费”本无关，由于引用了此数据结构产生依赖关系。#### 公共环境耦合一组模块引用同一个公用数据区（也称全局数据区、公共数据环境）。公共数据区指：- 全局数据结构。- 共享通讯区。- 内存公共覆盖区等公共耦合存在的问题：- 软件可理解性降低- 诊断错误困难- 软件可维护性差- 软件可靠性差#### 内容耦合有下列情况之一的。是最不好的耦合形式！#### 控制耦合改为数据耦合- 将被调用模块内的判定上移到调用模块中进行- 被调用模块分解成若干单一功能模块#### 特征耦合修改为数据耦合内聚性巧合内聚块内各组成成份在功能上是互不相关的。逻辑内聚把几种相关功能（逻辑上相似的功能）组合在一模块内，每次调用由传给模块的参数确定执行哪种功能。时间内聚模块完成的功能必须在同一时间内执行，这些功能只因时间因素关联在一起。如：]初始化系统模块系统结束模块、紧急故障处理模块等过程内聚模块内各处理成分相关，且必须以特定次序执行。#### 通信内聚模块内各部分使用相同的输入数据，或产生相同的输出结果。#### 顺序内聚模块完成多个功能，各功能都在同一数据结构上操作，每一功能有唯一入口。#### 功能内聚模块仅包括为完成某个功能所必须的所有成分。模块所有成分共同完成一个功能，缺一不可。### 启发规则- 改进软件结构，提高模块独立性：通过模块分解或合并，降低耦合提高内聚模块规模适中：在考虑模块的独立性同时，为了增加可理解性，模块的大小最好在 50-150 条语句左右，可以用 1-2 页打印纸打印，便于人们阅读与研究。模块过大：可理解程度下降模块过小：开销大于有效操作系统接口复杂深度、宽度、扇出和扇入适中- 将模块的影响限制在控制范围内：使任一模块的作用域在其控制域内- 作用域是指受模块内一个判定影响的所有模块的集合- 控制域是指这个模块本身及其所有的下属模块的集合模块 C 的控制范围： C 、 D 、 E 、 F 、 G 、 H 。如果模块 C 作出的决策影响了模块 L ，L超出了 C 的控制范围- 降低模块接口的复杂性：接口传递信息应简单且和模块功能一致。模块的接口要简单、清晰、含义明确，便于理解，易于实现、测试与维护。- 设计单入口单出口的模块：不要使模块间出现内容耦合。- 模块功能可预测：如果一个模块可以当作一个黑盒子，相同输入产生相同输出，其功能为可预测的。若模块带有内部“存储器”，其功能可能是不可预测的，难理解、难测试、难维护。单一的模块具有高内聚。但模块功能过分局限，可使用范围将过分狭窄，缺乏灵活性和扩充性。## 描绘软件结构的图形具### 层次图和 HIPO 图描述软件的层次结构。层次图中，一个方框代表一个模块，方框间的连线表示调用关系。 HIPO图=层次图+ IPO 图### 结构图…## 结构程序设计经典定义：如果一个程序的代码块仅仅通过顺序、选择和循环这 3 种基本控制结构进行连接，而且每个代码块只有一个入口和一个出口，则称这个程序是结构化的。比较全面的定义：结构程序设计是尽可能少用 GOTO 语句的程序设计方法，最好仅仅在检测出错误时才使用 GOTO 语句，而且应该总是使用前向的 GOTO 语句。### SP主要原则- 使用语言中的顺序、选择、重复等有限的基本控制结构表示程序逻辑。- 选用的控制结构只准许有一个入口和一个出口。- 复杂结构应该用基本控制结构进行组合嵌套来实现。- 严格控制 GOTO 语句，仅在下列情形才可使用。- 用一个非结构化的程序设计语言去实现一个结构化的构造。- 在某种可以改善而不是损害程序可读性的情况下。### 五种基本的结构化控制结构## 控制流图- 符号“ O ”为程序图的结点，表示一个或多个无分支的语句；- 箭头为边，表示控制流的方向。-边和结点圈定的封闭范围叫做区域。### 程序图的基本元素从图论的观点看，它是一个可以用 G = &lt; N , E ＞来表示的有向图。其中：- N一结点；- E一有向边，指明程序的流程；- 包含条件的结点称为判定结点；### 环路复杂性- V ( G ) ＝流图中区域数（包括图外区域）- V ( G ) ＝判定结点数＋ 1- V ( G )= E - N + 2## 编码### 选择程序设计语言从软件工程的角度，根据程序设计语言发展的历程，大致分为 4 类：- 第一代语言：从属于机器的语言- 第二代语言：汇编语言- 第三代语言：高级程序设计语言- 第四代语言（4GL）### 编码风格编码风格是指一个人编制程序时所表现出来的特点、习惯、逻辑思路等。良好编码风格包括：- 程序内部应该有很好的文档：如标识符、注释良好，程序文档结构易读易理解。- 数据说明应易于理解和维护- 语句结构尽可能简单直观- 输入输出风格遵守人机界面设计准则- 效率满足用户需求即可## 软件测试的基础- 什么是软件测试？- 是为了发现错误而执行程序的过程。- 发现错误是为了更正错误，最终得到一个高质量的软件系统。- 软件测试的对象：整个软件定义、开发周期的产品- 测试用例：通常指测试数据和预期的输出结果### 软件测试存在的矛盾用户希望通过软件测试暴露软件中隐藏的错误和缺陷，以考虑是否可接受该产品。软件开发者希望通过软件测试表明软件产品中不存在错误，已正确地实现了用户的要求。### 软件测试目的- 测试是为了发现错误而执行程序的过程- 好的测试用例是极可能发现至今为止尚未发现的错误的测试方案；- 成功的测试是发现了至今未发现的错误的测试总之，测试的目的是以最少的时间和人力，系统地找出软件中潜在的各种错误和缺陷；测试附带的收获是它能证明软件的功能和性能与需求说明相符合。注意：测试不能表明软件中不存在错误，它只能说明软件中存在错误。### 软件测试的准则- 所有测试都能追溯到用户需求- 应该远在测试开始之前就制定出测试计划- 应该把 Pareto原理应用到软件测试中- 群集现象： 80 ％的错误可能是由 20 ％的模块造成的- 从“小规模”测试开始，逐步过渡到“大规模”测试- 穷举测试是不可能的- 测试只能证明程序有错，不能证明程序没有错误- 应由独立的第三方从事测试工作### 测试步骤- 单元（模块）测试：检查各各程序模块是否有错误，能发现编码和详细设计的错误。- 集成测试（子系统和系统测试）：测试模块（子系统）接口，发现软件设计和需求说明的错误。- 确认（验收）测试：检查软件是否满足用户的需要以及文档资料是否完整、准确- 平行运行：同时运行新、旧系统单元测试模块接口测试在单元测试的开始，应对通过被测模块的数据流进行测试。测试项目：调用本模块的输入参数是否正确；本模块调用子模块时，输入给子模块的参数是否正确；输出给标准函数的参数是否正确；全局量的定义和用法在各摸块中是否一致；与外部设备的输入输出是否正确局部数据结构测试测试项目：不正确或不一致的数据类型说明使用尚未赋值或尚未初始化的变量错误的初始值或错误的缺省值变量名拼写错或书写错不一致的数据类型全局数据对模块的影响重要的执行通路测试白盒测试错误处理测试着重测试以下可能发生的错误：出错的措述是否难以理解出错的描述是否能够对错误定位显示的错误与实际的错误是否相符对错误条件的处理正确与否在对错误进行处理之前，错误条件是否已经引起系统的干预等边界测试重点检查刚好等于、大于或小于边界值的数据;对运行时间有要求的模块，还要专门进行关键路径测试，以确定最坏情况下和平均意义下影响模块运行时间的因素。代码审查人工测试源程序。参与者：程序的设计者、编写者、测试者没有直接参与系统开发，但有力的程序员。方法：研究设计说明书，一起审查程序代码如何实现设计，从中发现问题。注意：通常代码审查和机器测试结合使用。计算机测试单元测试通常在编码阶段进行。常用机器测试，即通过运行模块发现问题。两个重要概念：驱动程序（ driver ) ：相当于被测试模块的“主程序”，接收测试数据，把这些数据传送给被测试的模块，并且输出相关结果。存根程序（stub）：代替被测试模块所调用的模块。不需要具有子模块所有功能，但不允许什么事情也不做。集成测试在单元测试之后，将模块组装成系统，为发现并排除模块在连接中可能出现的问题，而进行的测试。需要考虑：模块连接时穿越模块接口的数据是否会 丢失；一个模块对另一个模块是否会产生不利的影响；各子功能组合起来，能 否达到预期要求的父功能全局数据结构是否有问题；单个模块的误差累积起来，是 否会放大至不能接受的程度。集成测试的两种方式非渐增式组装方式对每个模块分别进行单元测试，再把所有模块组装成一个完整的系统进行的测试，从而得到要求的软件系统。渐增式组装方式先对模块进行单元测试，然后将测试后的模块逐步组装成较大的系统；在组装的过程中边连接边测试，以发现连接过程中产生的问题；最后组装成为要求的软件系统。自顶向下的渐增方式将模块按系统程序结构，沿控制层次自顶向下进行组装。不需要驱动模块，需要存根模块自底向上结合的渐增方式从程序模块结构最底层的模块开始组装和测试。不再需要存根程序，需要驱动模块。组合策略：把低层模块组合成实现某个特定的软件子功能的族；用驱动程序协调测试数据的输入和输出;对由模块组成的子功能族进行测试;去掉驱动程序，没软件结构自下向上移动，把子功能族组合起来形成更大的子功能族。混合渐增测试衍变的自顶向下的增殖测试：先对输入／输出模块和引入新算法模块进行测试；再自底向上组装成为功能相当完整且相对独立的子系统；然后由主模块开始自顶向下进行增殖测试。自底向上 - 自顶向下的增殖测试：先对含读操作的子系统自底向上直至根结点模块进行组装和测试；再对含写操作的子系统做自顶向下的组装与测试。确认测试又称有效性测试。验证软件的功能、性能及其它特性是否与用户的要求一致。确认测试的基础 ：软件需求规格说明书确认测试的主要工作：有效性测试与软件配置审查主要参与人员：以用户为主确认测试范围通常采用黑盒测试，验证被测软件是否满足用户需求。测试计划：包括测试种类及进度安排；测试步骤：描述具体的测试用例测试目的：确定软件的特性是否与需求相符；所有的文档都是正确且便于使用；其它软件需求。测试结果：与预期的结果相符；与预期的结果不符：要提交一份问题报告。软件配置复查目的：保证软件配置的所有成分都齐全；各方面的质量都符合要求；具有维护阶段所必需的细节；而且已经编排好分类的目录。应当严格遵守用户手册和操作手册中规定的使用步骤，以便检查这些文档资料的完整性和正确性。α测试和β测试α测试：由用户在开发环境下进行的测试。主要评价软件产品的:FLURPS(即功能、局域化、可使用性、可靠性、性能和支持）β测试：由最终用户在实际使用环境下进行的测试，这些用户定期返回有关错误信息给开发者。注意：只有当α测试达到一定的可靠程度时，才开始β测试。自盒测试技术白盒测试执行的要求：对程序模块的所有独立的执行路径至少测试一次对所有的逻辑判定，取“真”与取“假”的两种情况都至少测试一次；在循环的边界和运行界限内执行循环体；测试内部数据结构的有效性。逻辑覆盖语句覆盖使得每一可执行语句至少执行一次。判定覆盖运行被测程序，使得程序中每个判断的取真分支和取假分支至少经历一次。条件覆盖使得程序中每个判断的每个条件的可能取值至少执行一次。判定一条件覆盖使得判断中每个条件的所有可能取值至少执行一次，每个判断中的每个分支至少执行一次。即同时满足判断覆盖和条件覆盖。条件组合覆盖使得每个判断的所有可能的条件取值组合至少执行一次。点覆盖如果连通图G的子图G′是连通的，而且包含G的所有结点，则称G′是G的点覆盖。点覆盖标准和语句覆盖标准是相同的。边覆盖要求选取足够多测试数据，使得程序执行路径至少经过流图中每条边一次。通常边覆盖和判定覆盖是一致的。路径覆盖覆盖程序中所有可能的路径。控制结构测试基本路径测试以环形复杂度为基础，导出基本可执行路径集合，设计测试用例的方法。测试用例要保证程序的每个可执行语句至少执行一次。步骤由程序流程图导出程序控制流图，并计算其环路复杂度：确定程序的独立路径什么是独立路径？流图中，一条独立路径是至少包含一条在其它独立路径中从未有过的边的路径。独立路径条数是确保程序中，每个可执行语句至少能被执行一次所必需的测试用例数目的上界。独立路径条数＝程序环路复杂性 V ( G )黑盒测试技术黑盒测试主要是为了发现以下错误：是否有不正确或遗漏了的功能？能否正确地接受输入？能否正确的输出结果？是否有数据结构错误或外部数据库访问错误？性能上是否能够满足要求？是否有初始化或终止性错误？几种黑盒测试技术：等价类划分边界值分析错误推测法因果图等价划分把所有可能的输入数据（包括有效或无效的），划分成若干数据类（等价类），然后从每个数据类中选取少数有代表性的数据做为测试用例。这种方法完全不考虑程序的内部结构，只依据程序的规格说明来设计测试用例。步骤1：划分等价类等价类是指输入数据的子集合。在该子集合中，各输入数据对于发现程序中的错误都是等效的。根据程序功能说明，确定有效和无效的等价类等价类划分原则若规定了取值范围，或输入值的个数，则可以确立一个有效等价类和两个无效等价类。如果规定了输入数据的一组值，而且程序要对每种输入数据分别处理，则可为每种输入值确立一个有效等价类，此外针对这组值确立一个无效等价类，它是所有不允许的输入值的集合。若规定了输入值的集合，或者是规定了“必须如何”的条件，则可确立一个有效等价类和一个无效等价类。如果规定输入数据为整型，则可划分出正整、零和负整数三个有效类，其他数据为无效类如果程序处理对象是表格，则应使用空表、含一项和多项的表。如果确知，已划分的等价类中各元素在程序中的处理方式不同，则应将此等价类进一步划分成更小的等价类。步骤2：根据等价类设计测试用例在确立了等价类之后，建立等价类表，列出所有划分出的等价类。#### 测试用例的选择原则- 为每一个等价类规定一个唯一编号；- 设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖的有效等价类，重复这一步，直到所有的有效等价类都被覆盖为止；- 设计一个新的测试用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复这一步，直到所有的无效等价类都被覆盖为止。### 某报表处理系统系统规定日期由年、月的 6 位数字字符组成，前 4 位代表年，后两位代表月。设日期限制在 1990 年 1 月至 1999 年 12 月，即系统只能对该段时期内的报表进行处理。如果用户输入的日期不在此范围内，则显示输入错误。现用等价类划分法设计测试用例，来测试程序的“日期检查功能”。#### 为合理等价类设计测试用例#### 不合理等价类设计测试用例边界值分析边界是指，对于输入和输出等价类而言，稍高和稍低于其边界值的一些特定情况。经验得知，大量的错误是发生在输入或输出范围的边界上，而不是在输入范围的内部。边界值分析方法思想：确定边界之后，选取正好等于、刚刚大于或刚刚小于边界的值做为测试数据，而不是选取等价类中典型值或任意值做为测试数据。通常总是与等价划分技术联合使用，是等价划分方法的补充。假设一个数据库产品规范要求该产品能够处理从1到1000中间的任何数量的记录。请首先为其划分等价类，并利用等价类划分和边界值分析技术为其设计测试用例，并说明每个测试用例属于某等价类成员还是属于边界值或是邻接边界值。等价类等价类1：少于1个记录等价类2：1到1000个记录等价类3：多于1000个记录测试用例测试用例1：0个记录 //等价类1成员且邻接边界值测试用例2：1个记录 //边界值测试用例3：2个记录 //邻接边界值测试用例4：100个记录 //等价类2的成员测试用例5：999个记录 //邻接边界值测试用例6：1000个记录 //边界值测试用例7：1001个记录 //等价类3成员且邻接边界值因果图因果图是借助图形来设计测试用例的一种系统方法。它适用于被测程序具有多种输入条件，程序的输出又依赖于输入条件的各种组合的情况。因果图是一种简化了的逻辑图，它能直观地表明程序输入条件（原因）和输出动作（结果）之间的相互关系。利用因果图产生测试用例的基本步骤分析软件规格说明书中，哪些是原因（即输入条件或输入条件的等价类），哪些是结果（即输出条件）并给每个原因和结果赋予一个标识。分析软件规格说明书中所描述的语义，找出原因与结果之间、原因与原因之间对应的是什么关系？根据这些关系画出因果图。由于语法或环境的限制，有些原因与原因之间、原因与结果之间的组合情况不可能出现。为表明这些特殊情况，在因果图上用一些记号标明约束或限制条件。把因果图转换为判断表把判断表的每一列拿出来作为依据，设计测试用例。在因果图中出现的基本符号通常在因果图中用 Ci 来表示原因，用Ei表示结果其基本符号如下图所示。其中各结点表示状态，可取值为 “0”或“1”。“0”表示某状态不出现，“1”表示某状态出现。主要的原因和结果之间的关系如下:- 恒等：表示原因与结果之间是一对一的对应关系。若原因出现，则结果出现。若原因不出现，则结果也不出现。- 非：表示原因与结果之间的一种否定关系。若原因出现，则结果不出现。若原因不出现，反而结果出现。- 或：表示若几个原因中有一个出现，则结果出现，而当这几个原因都不出现时，结果才不出现。- 与：表示若几个原因都出现，则结果才出现若几个原因中有一个不出现，结果就不出现。### 例设有一个处理单价为5角钱饮料自动售货机其规格说明为，若投入5角钱或1元钱的硬币 ，再按下橙汁或啤酒按钮，则相应的饮料就送出来；若售货机 没有零钱找，则一个显示零钱已找完的红灯亮，这时在投入1元硬币并按下按钮后，饮料不送出来而且1元硬币也退出来;若有零钱找，则应显示零钱找完的红灯灭， 在送出饮料的同时退还5角硬币。| 序号 | 原因 | 序号 | 结果 || :–: | :————: | :——: | :—————-: || 1 | 售货机有零钱找 | 2.1 | 售货机零钱找完灯亮 || 2 | 投入1元硬币 | 2.2 | 退还1元硬币 || 3 | 投入5角硬币 | 2.3 | 退还5角硬币 || 4 | 按下橙汁按钮 | 2.4 | 送出橙汁饮料 || 5 | 按下啤酒按钮 | 2.5 | 送出啤酒饮料 || 序号 | 中间结点 || :–: | :—————————–: || 11 | 投入1元硬币且按下饮料按钮 || 12 | 按下橙汁或啤酒的按钮 || 13 | 应当找5角零钱并且售货机有零钱找 || 14 | 钱已付请 |软件维护的定义软件维护是指在软件运行或维护阶段对软件产品所进行的修改。分为四类：改正性维护在软件交付使用后，由于开发时测试得不彻底或不完全，在运行阶段会暴露一些开发时未能测试出来的错误。为了识别和纠正软件错误，改正软件性能上的缺陷，避免实施中的错误使用，应当进行的诊断和改正错误的过程，这就是改正性维护。适应性维护随着计算机技术的飞速发展和更新换代，软件系统所需的外部环境或数据环境可能会更新和升级。为了使软件系统适应这种变化，需要对软件进行相应的修改，这种维护活动称为适应性维护。扩充与完善性维护在软件的使用过程中，用户往往会对软件提出新的功能与性能要求。为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性。这种情况下进行的维护活动叫做完善性维护。预防性维护采用先进的软件工程方法，对需要维护的软件或软件中的某一部分重新进行设计、编制和测试。软件的可维护性指纠正软件系统出现的错误和缺陷，以及为满足新的要求进行修改、扩充或压缩的容易程度。衡量软件质量的几个主要质量特性：可理解性：人们通过阅读源代码和相关文档，了解程序功能及其如何运行的容易程度。可靠性：表明一个程序按照用户的要求和设计目标，在给定的一段时间内正确执行的概率。可测试性：表明诊断和测试的容易程度。可修改性：表明程序容易修改的程度。可移植性：表明把程序从一种计算环境转移到另一种计算环境的难易程度。可重用性：指同一个软件（或软件成份）不做修改或稍加改动，就可以在不同环境中多次重复使用。软件再工程过程预防性维护也称为软件再工程逆向工程软件的逆向工程是分析程序，力图在比源代码更高的抽象层次上建立程序表示的过程，是一个设计恢复的过程，逆向工程工具可以从已有的程序中抽取数据结构、体系结构和程序设计信息。正向工程应用现代软件工程的概念、原理、技术和方法，重新开发现有的某个应用系统。软件再工程软件再工程是一个工程过程，它将逆向工程、重构和正向工程组合起来，旨在对现存的大量软件系统进行挖掘、整理，重新获得设计信息，用这些信息改建或重构现有的系统，以改进它的综合质量；或者得到有用的软件构件，对已有软件构件进行维护以延长其生存期。再工程的基础是系统理解，包括对运行系统、源代码、设计、分析、文档等的全面理解。但在很多情况下，由于各类文档的丢失，只能对源代码进行理解，即程序理解。典型的软件再工程过程模型定义了库存目录分析、文档重构、逆向工程、代码重构、数据重构和正向工程6类活动。]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
      </tags>
  </entry>
</search>
