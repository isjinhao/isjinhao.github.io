<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[04-单表DQL]]></title>
    <url>%2F2019%2F04-%E5%8D%95%E8%A1%A8DQL%2F</url>
    <content type="text"><![CDATA[数据准备12345678910111213141516171819create table product( pid int primary key, pname varchar(20), price double, category_id varchar(32));INSERT INTO product(pid,pname,price,category_id) VALUES(1,'联想',5000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(2,'海尔',3000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(3,'雷神',5000,'c001');INSERT INTO product(pid,pname,price,category_id) VALUES(4,'JACK JONES',800,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(5,'真维斯',200,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(6,'花花公子',440,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(7,'劲霸',2000,'c002');INSERT INTO product(pid,pname,price,category_id) VALUES(8,'香奈儿',800,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(9,'相宜本草',200,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(10,'面霸',5,'c003');INSERT INTO product(pid,pname,price,category_id) VALUES(11,'好想你枣',56,'c004');INSERT INTO product(pid,pname,price,category_id) VALUES(12,'香飘飘奶茶',1,'c005');INSERT INTO product(pid,pname,price,category_id) VALUES(13,'果9',1,NULL);简单查询查询表的所有字段信息：select * from 表名;查询表中某字段信息：select 字段1, 字段2 from 表名;去掉重复值：select distinct 字段1, 字段2, ... from 表名;若有多个字段则所有字段相等才被算为重复值。查询结果是表达式（运算查询）：将商品的价格+10元进行显示，select pname,price+10 from product;别名查询，使用的关键字是as（as可以省略的）：表别名：select * from product as p;列别名：select pname as pn from product;条件查询符号含义&gt; &lt; &lt;= &gt;= = &lt;&gt;!=大于、小于、大于(小于)等于、不等于BETWEEN …AND…显示在某一区间的值(含头含尾)(也可以是日期)IN(set)显示在in列表中的值，例：in(100,200)LIKE ‘张%’%代表零个或多个任意字符，_代表一个字符。例如：first_name like ‘_a%’IS NULL / IS NOT NULL判断为空/不为空and多个条件同时成立or多个条件任一成立not不成立，例：where not(salary&gt;100);例查询商品名称为“花花公子”的商品所有信息：SELECT * FROM product WHERE pname = &#39;花花公子&#39;查询价格为800商品：SELECT * FROM product WHERE price = 800查询价格不是800的所有商品：SELECT * FROM product WHERE price != 800SELECT * FROM product WHERE price &lt;&gt; 800SELECT * FROM product WHERE NOT(price = 800)查询商品价格大于60元的所有商品信息：SELECT * FROM product WHERE price &gt; 60;查询商品价格在200到1000之间所有商品：SELECT * FROM product WHERE price &gt;= 200 AND price &lt;=1000;SELECT * FROM product WHERE price BETWEEN 200 AND 1000;查询商品价格是200或800的所有商品：SELECT * FROM product WHERE price = 200 OR price = 800;SELECT * FROM product WHERE price IN (200,800);查询含有’霸’字的所有商品：SELECT * FROM product WHERE pname LIKE &#39;%霸%&#39;;查询以’香’开头的所有商品：SELECT * FROM product WHERE pname LIKE &#39;香%&#39;;查询第二个字为’想’的所有商品：SELECT * FROM product WHERE pname LIKE &#39;_想%&#39;;查询没有分类的商品：SELECT * FROM product WHERE category_id IS NULL;查询有分类的商品：SELECT * FROM prod quct WHERE category_id IS NOT NULL查询所有价格大于2000的电脑商品或者价格大于1000的服装商品：SELECT * FROM product WHERE (price &gt; 2000 AND category_id=&#39;c001&#39;) OR (price &gt;1000 AND category_id=&#39;c002&#39;);排序查询SELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;ASC： 升序 (默认)DESC：降序例：查询所有商品信息，使用价格排序(降序)：SELECT * FROM product ORDER BY price DESC;在价格排序(降序)的基础上，以分类排序(降序)：SELECT * FROM product ORDER BY price DESC, category_id DESC;显示商品的价格(去重复)，并排序(降序)：SELECT DISTINCT price FROM product ORDER BY price DESC;聚合查询聚合函数SELECT不仅可以作用于字段，还可以作用于聚合函数。count(…)：统计指定列不为NULL的记录行数；sum(…)：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；max(…)：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；min(…)：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；avg(…)：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；例：查询商品的总条数：SELECT COUNT(*) FROM product;查询价格大于200的商品总条数：SELECT COUNT(*) FROM product WHERE price &gt; 200;查询分类为’c001’的商品价格总和：SELECT SUM(price) FROM product WHERE category_id = &#39;c001&#39;;查询分类为’c002’商品的平均价格：SELECT AVG(price) FROM product WHERE category_id = &#39;c002&#39;;查询商品的最大价格和最小价格：SELECT MAX(price),MIN(price) FROM product;分组分组查询是指使用group by字句对查询信息进行分组。​ SELECT 字段1, 字段2… FROM 表名 GROUP BY 分组字段 HAVING 分组条件;HAVING：分组操作中的having子语句，是用于在分组后对数据进行过滤的，作用类似于where条件。与where的区别:having是在分组后对数据进行过滤。where是在分组前对数据进行过滤。having后面可以使用聚合函数过滤数据。where后面不可以使用聚合函数。例：统计各个分类商品的个数：SELECT category_id ,COUNT(*) FROM product GROUP BY category_id;统计各个分类商品的个数,且只显示个数大于1的信息：SELECT category_id, COUNT(*) FROM product GROUP BY category_id HAVING COUNT(*) &gt; 1;分页查询由于数据量很大，显示屏长度有限，因此对数据需要采取分页显示方式。例如数据共有30条，每页显示5条。格式：SELECT 字段1，字段2... FROM 表明 LIMIT M, N;M: 整数，表示从第几条索引开始，计算方式 （当前页-1）*每页显示条数N: 整数，表示查询多少条数据例：SELECT 字段1，字段2... FROM 表明 LIMIT 0,5;SELECT 字段1，字段2... FROM 表明 LIMIT 5,5;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-DDL与DML]]></title>
    <url>%2F2019%2F03-DDL%E4%B8%8EDML%2F</url>
    <content type="text"><![CDATA[操作数据库创建数据库create database 数据库名;例：CREATE DATABASE db1;create database 数据库名 charset 字符集;例：CREATE DATABASE db2 CHARSET utf8;删除数据库drop database 数据库名使用数据库查看数据库的定义信息show create database 数据库名;操作表创建表1234567CREATE TABLE &lt;表名&gt;( 字段名1 类型(长度) [列级完整性约束条件], 字段名2 类型(长度) [列级完整性约束条件], ... 字段名n 类型(长度) [列级完整性约束条件] [,&lt;表级完整性约束条件&gt;]);先不涉及约束条件，后面会有详细分析。1234CREATE TABLE category ( cid INT PRIMARY KEY, #分类ID cname VARCHAR(100) #分类名称);查看表查看数据库中的所有表：SHOW TABLES;查看表结构：DESC 表名;删除表drop table 表名修改表名rename table 表名 to 新表名;增改删增向表中插入某些字段：insert into 表 (字段1,字段2,字段3..) values (值1,值2,值3..);向表中插入所有字段，字段的顺序为创建表时的顺序：insert into 表 values (值1,值2,值3..);注意：值与字段必须对应，个数相同，类型相同值的数据大小必须在字段的长度范围内除了数值类型外，其它的字段类型的值必须使用引号引起。（建议单引号）如果要插入空值，可以不写字段，或者插入 null。改更新所有记录的指定字段：update 表名 set 字段名=值, 字段名=值, ...;更新符号条件记录的指定字段：update 表名 set 字段名=值, 字段名=值, ... where 条件;注意：列名的类型与修改的值要一致修改值得时候不能超过最大长度除了数值类型外，其它的字段类型的值必须使用引号引起删删除所有数据：delete from 表名;或者truncate table 表名;delete 一条一条删除，不清空auto_increment记录数。truncate 直接将表删除，重新建表，auto_increment将置为零，从新开始。删除某些数据：delete from 表名 where 条件操作表结构添加列：alter table 表名 add 列名 类型(长度) [约束];ALTER TABLE category ADD cdesc VARCHAR(20);删除列：alter table 表名 drop 列名;ALTER TABLE category DROP cdesc;修改列名：alter table 表名 change 旧列名 新列名 类型(长度) 约束;ALTER TABLE category CHANGE cdesc description VARCHAR(30);修改列的类型长度及约束：alter table 表名 modify 列名 类型(长度) 约束;ALTER TABLE category MODIFY cdesc VARCHAR(50) NOT NULL;修改表的字符集：alter table 表名 character set 字符集;ALTER TABLE category CHARACTER SET gbk;数据完整性指数据库中存储的数据是有意义的或正确的。实体完整性若属性A是基本关系R的主属性，则属性A不能取空值。参照完整性若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码相对应，则对于R中每个元组在F上的值必须为：或者取空值（S的每个属性值均为空值）。或者等于S中某个元组的主码值。EMP(E#, ESEX, D#) -参照关系； DEPT(D# ,DNAME,LOCATION) -被参照关系用户定义的完整性针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求。约束主键约束唯一标识一条记录的属性值。主键必须是唯一的值。主键列不能是 NULL 值。每个表都应该有且只能有一个主键。添加主键约束。方式一：创建表时，在字段描述处，声明指定字段为主键1234567CREATE TABLE Persons( Id_P int PRIMARY KEY, LastName varchar(255), FirstName varchar(255), Address varchar(255), City varchar(255));方式二：创建表时，在表级约束区域，声明指定字段为主键格式：[constraint 名称] primary key (字段列表)关键字constraint可以省略，如果需要为主键命名，constraint不能省略。字段列表需要使用小括号括住，如果有多字段需要使用逗号分隔。这时多个字段联合构成主键。1234567CREATE TABLE Persons( FirstName varchar(255), LastName varchar(255), Address varchar(255), City varchar(255), [CONSTRAINT pk_PersonID] PRIMARY KEY (FirstName,LastName));方式三：创建表之后，通过修改表结构，声明指定字段为主键ALTER TABLE Persons ADD [CONSTRAINT 名称] PRIMARY KEY (字段列表)1234567CREATE TABLE Persons( FirstName varchar(255), LastName varchar(255), Address varchar(255), City varchar(255));ALTER TABLE Persons ADD PRIMARY KEY (FirstName);撤销主键约束：ALTER TABLE Persons DROP PRIMARY KEY自动增长列设置某列的值自动增长。使用 auto_increment（自动增长列）关键字。自动增长列类型必须是整形。自动增长列必须为键(一般是主键)。添加自动增长：1234567CREATE TABLE Persons( P_Id int PRIMARY KEY AUTO_INCREMENT, LastName varchar(255), FirstName varchar(255), Address varchar(255), City varchar(255));添加数据时，可以不设置值，也可以设置成null，数据库将自动维护主键值：INSERT INTO Persons (FirstName,LastName) VALUES (&#39;Bill&#39;,&#39;Gates&#39;);INSERT INTO Persons (P_Id,FirstName,LastName) VALUES (NULL,&#39;Bill&#39;,&#39;Gates&#39;);修改起始值ALTER TABLE Persons AUTO_INCREMENT=100;非空约束约束不接受NULL值，意味着如果不向字段添加值，就无法插入新记录或者更新记录。添加方式方式一：创建表，下面的 SQL 语句强制 “Id_P” 列和 “LastName” 列不接受 NULL 值1234567CREATE TABLE Persons( Id_P int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Address varchar(255), City varchar(255));方式二：修改表结构ALTER TABLE student MODIFY LastName varchar(255) NOT NULL删除非空约束ALTER TABLE student MODIFY LastName varchar(255);唯一约束UNIQUE约束唯一标识数据库表中的每条记录。PRIMARY KEY拥有自动定义的UNIQUE约束。每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。添加唯一约束方式1：创建表时，在字段描述处，声明唯一1234567CREATE TABLE Persons( Id_P int UNIQUE, LastName varchar(255) NOT NULL, FirstName varchar(255), Address varchar(255), City varchar(255));方式2：创建表时，在约束区域，声明唯一12345678CREATE TABLE Persons( Id_P int, LastName varchar(255) NOT NULL, FirstName varchar(255), Address varchar(255), City varchar(255), CONSTRAINT 名称 UNIQUE (Id_P));方式3：创建表后，修改表结构，声明字段唯一ALTER TABLE Persons ADD [CONSTRAINT 名称] UNIQUE (Id_P);删除唯一约束ALTER TABLE Persons DROP INDEX 约束名称如果添加唯一约束时，没有设置约束名称，默认是当前字段的字段名。默认约束在添加数据中，如果该字段不指定值，采用默认值处理。添加方式方式一： 创建表，字段处声明1234567CREATE TABLE Persons( Id_P int, LastName varchar(255) NOT NULL, FirstName varchar(255), Address varchar(255) DEFAULT '北京', City varchar(255));方式二： 修改表结构ALTER TABLE Persons MODIFY Address VARCHAR(255) DEFAULT &#39;北京&#39;;删除方式ALTER TABLE Persons MODIFY Address VARCHAR(255);外键约束参照关系对应的表是从表。被参照关系对应的表是主表。声明外键约束创建表时添加。12345678CREATE TABLE Persons( Id_P int, LastName varchar(255) NOT NULL, FirstName varchar(255), Address varchar(255) DEFAULT &apos;北京&apos;, City varchar(255), [CONSTRAINT FK_DEPTNO] FOREIGN KEY (Address) REFERENCES CITY(Address));修改表结构alter table 从表 add [constraint 名称] foreign key (外键字段) references 主表 (主表主键);删除外键alter table 从表 drop foreign key 外键名称;备份 &amp; 恢复备份恢复&gt;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-MySQL环境安装]]></title>
    <url>%2F2019%2F02-MySQL%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装MySQLMySQL有两种安装方式，解压配置和安装程序安装。在这使用解压配置但是资源里有使用安装程序安装的教程。解压至指定目录解压至自己选定的目录，一般不选择系统盘。我是解压至D盘根目录：D:\mysql-5.5\。写配置文件123456789#设置字符集为utf8 character-set-server = utf8basedir = D:/mysql-5.5 #指定为自己选定的目录datadir = D:/mysql-5.5/data #指定为选定目录下的data文件夹[client] #设置客户端字符集default-character-set = utf8[WinMySQLadmin] Server = D:/mysql-5.5/bin/mysqld.exe #指定至mysqld.exe文件配置环境变量安装和配置在管理员下的cmd命令下进入%MYSQL_HOME%/bin目录执行mysqld -install。如果想要卸载服务执行命令mysqld -remove。启动服务net start mysql第一次进入mysql -u root。mysql&gt; update mysql.user set password=PASSWORD(‘root’) where User=’root’;mysql&gt; flush privileges;后续进入mysql -u username -p按提示输入密码退出exit停止服务net stop mysql查看编码集mysql&gt; show variables like ‘%char%’;1234567891011121314mysql&gt; show variables like &apos;%char%&apos;;+--------------------------+------------------------------+| Variable_name | Value |+--------------------------+------------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | D:\mysql-5.5\share\charsets\ |+--------------------------+------------------------------+8 rows in set (0.01 sec)编码集如图上表示编码集配置正确。安装SQLyogSQLyog是一个可视化操作数据库工具。解压后就可使用：点击SQLyog.exe连接数据库使用]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-Spring入门]]></title>
    <url>%2F2019%2F01-Spring%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Spring - 概述（00）Spring概述Spring是一个一站式框架。它为Java EE开发的三层架构中每一层都提供了解决方案Web层：Spring MVC；Service层：Spring的Bean管理，Spring声明式事务；DAO层：Spring的JDBC模板，Spring的ORM模块。（后期会用Mybatis替换Spring的DAO层）Spring下载Spring现在是在github上托管的开源项目：地址。Spring各版本下载：地址。Spring环境搭建我的Spring文集中使用的是Spring 4.2版本，下方这张图是Spring官方给的架构图，想运行Spring项目，必须得导入Core Container中的包，但是也需要日志包。## Spring初体验123public interface UserDao &#123; public void save();&#125;12345public class UserDaoImpl implements UserDao&#123; public void save() &#123; System.out.println("UserService执行了..."); &#125;&#125;123456789101112&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;!-- Spring的入门的配置==================== --&gt; &lt;bean name="userDao" class="com.isjinhao.Demo1.UserDaoImpl" &gt;&lt;/bean&gt; &lt;/beans&gt;12345678910111213141516171819import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123; //传统方法的获得UserDao对象 @org.junit.Test public void test1() &#123; UserDao dao = new UserDaoImpl(); dao.save(); &#125; //通过Spring获得UserDao对象 @org.junit.Test public void test2() &#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao bean = (UserDao)applicationContext.getBean("userDao"); bean.save(); &#125;&#125;开发的一个规则是在后期维护的时候少修改源代码。如果没有Spring我们更换UserDao的实现类，比如更换为UserMybatisDaoImpl，我们在源代码中就要改为UserDao dao = new UserMybatisDaoImpl();。但有了Spring之后就只需要修改配置文件中的class为xxx.UserMybatisDaoImpl，被Spring管理的类叫做bean。## DI（Dependency Injection）### 依赖关系1234567Class A&#123; &#125;Class B&#123; A a; public void xxx()&#123; &#125;&#125;如果在类B中使用到了类A，就说类B依赖类A，上图就是其中一种情况。### Spring解决依赖123public interface UserDao &#123; public void save();&#125;123456789101112public class UserDaoImpl implements UserDao&#123; private String name; public void save() &#123; System.out.println("UserService执行了..." + name); &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125;1234567891011121314&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;!-- Spring的入门的配置==================== --&gt; &lt;bean name="userDao" class="com.isjinhao.Demo1.UserDaoImpl"&gt; &lt;property name="name" value="isjinhao" /&gt; //name的值和属性名称相同 &lt;/bean&gt; &lt;/beans&gt;1234567891011import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123; //通过Spring获得UserDao对象 @org.junit.Test public void test2() &#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao dao = (UserDao)applicationContext.getBean("userDao"); dao.save(); &#125;&#125;所谓解决依赖，就是在使用时给其设置一个被依赖的对象，如果不使用Spring，设置name的值需要把dao转换为UserDaoImpl，再使用setName()方法，但是用了Spring我们就能在配置文件中设置，Spring帮我们完成设置。此时就叫做依赖注入。## ApplicationContext继承体系bean配置id &amp; namename和id的功能类似，作用如图：从语法上说name属性可以不唯一，而id必须唯一，但是实际使用时name标签和id标签通常都标识唯一值，而且优先使用name。初始化时执行的方法 &amp; 销毁的时候执行的方法init-method=””：指定的方法在bean被创建时执行。destroy-method=””：指定的方法在bean被销毁时创建的，但要求bean是单例的且手动关闭工厂。bean的作用域bean标签有一个属性scope=””，可以设置bean的作用范围，五种值如下：singleton ：默认的，Spring会采用单例模式创建这个对象。prototype ：多例模式。request ：应用在web项目中，Spring创建这个类以后，将这个类存入到request范围中。session ：应用在web项目中，Spring创建这个类以后，将这个类存入到session范围中。globalsession ：应用在web项目中，必须在porlet环境下使用。但是如果没有这种环境，相当于session。（笔者不懂，抄过来的…）]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-关系型数据库绪论]]></title>
    <url>%2F2019%2F01-%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%AA%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[数据、数据库、数据库管理系统数据：描述事物的符号记录称为数据，如文字、图形、图象、声音、学生的档案记录、货物的运输情况等。数据的含义称为数据的语义，数据与其语义是不可分的。数据库：数据按一定的方式组织、描述和存储后形成的数据集合叫做数据库。数据库具有三个特点：永久存储：不随程序的结束而结束。有组织：数据之间有一定的格式，可以通过格式知道数据所代表的的意义。可共享：数据库里的信息不是只为某一用户或某一程序所使用。数据库管理系统：数据库管理系统是位于用户与操作系统之间的一层用来管理数据库的软件。常用的数据库管理系统有MySQL、Oracle、Redis、MongoDB等。关系数据库系统数据库是由数据按某种形式组织所形成，按照不同的组织方式可以分为不同的类型。所以关系型数据库就是指以关系数学模型来组织数据的数据库，关系数学模型中以二维表的形式来描述数据。也就是一个关系对应一个二维表。实体-联系实体：客观存在并可相互区别的事物。二维表非首行。属性：实体所具有的某一特性。二维表的一格。码：唯一标识实体的属性。域：属性的取值范围。实体型：用实体名及其属性名集合来抽象和刻画同类实体。实体集：同型实体的集合称为实体集联系：现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系。SQLDDL、DML、DCL、DQL常见的关系数据库系统有MySQL、Oracle等，可以使用结构化查询语言（Structured Query Language，SQL）进行操作。不同的数据库生产厂商都支持SQL语句，但都有特有内容（称为方言）。SQL可分为四类：数据定义语言（Data Definition Language，DDL）：用来定义数据库中的对象：数据库，表，列等。关键字有create、alter、drop、 show等。数据操作语言（Data Manipulation Language，DML）：用来对数据库中表的记录进行更新。关键字有insert、delete、update等。数据查询语言（Data Query Language，DQL）：用来查询数据库中表的记录。关键字：select，from，where等。数据控制语言（Data Control Language，DCL）：用来定义数据库的访问权限和安全级别，及创建用户。关键字有grant、revoke等。SQL通用语法SQL语句可以单行或多行书写，以分号结尾，可使用空格和缩进来增强语句的可读性。MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。例如：SELECT * FROM user。使用/* ... */的方式完成注释。数据类型类型描述int整型double浮点型varchar变长字符串型（指定为10个字节长度，存储abc只占用3个字节）char定长字符串型（指定为10个字节长度，存储abc也占用10个字节）datetimeYYYY-MM-DD HH:MM:SS（1000-01-01 00:00:00~ 9999-12-31 23:59:59）实体型之间的联系一对一联系：如果对于实体集A中的每一个实体，实体集B中至多有一个实体与之联系，反之亦然，称实体集A与实体集B有一对一联系。记为1：1。一对多联系：如果对于实体集A中的每一个实体，实体集B中有n个实体（n≥0）与之联系，反之，对于实体集B中的每一个实体，实体集A中至多只有一个实体与之联系，称实体集A与实体B有一对多联系。记为1：n。多对多联系：如果对于实体集A中的每一个实体，实体集B中有n个实体（n≥0）与之联系，反之，对于实体集B中的每一个实体，实体集A中有m个实体（m≥0）与之联系，称实体集A与实体B有多对多联系。记为m：n。多对多联系能经由一个中间表拆分成两个一对多关系。Entity-Relationship ModelE-R图提供了表示实体型、属性和联系的方法。先把需求转化成E-R图，可以方便的化简和建表。实体型：用矩形表示，矩形框内写明实体名。属性：用椭圆形表示，并用无向边将其与相应的实体连接起来。联系：用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体连接起来，同时在无向边旁标上。联系的类型: 1：1、1：n或m：n。联系本身也是一种实体型，也可以有属性。如果一个联系具有属性，则这些属性也要用无向边与该联系连接起来。E-R图转换成关系转换原则：实体和联系分别转换为关系，再合并具有相同主键的关系。实体转换为关系：一个实体型 转换成 一个关系。实体型的名称 转换成 构成关系的名称。实体型的属性 转换成 构成关系的属性（也叫字段）。实体型的主键 转换成 关系的主键。联系转换为关系：一个联系 转换成 一个关系。与该联系相关联的各实体的码属性以及联系本身的属性 构成 关系的属性。联系转换为关系的码的取决于联系的类型。1：1联系，任一实体的码。1：n联系，n端实体的码。m：n联系，双方实体的码相同码的关系合并为一个关系。E-R图实例数据：科室：科名，科地址，科电话病房：病房号，床位号医生：姓名，职称，年龄，工作证病人：病历号，姓名，性别，诊断联系：一个科室有多个病房、多个医生一个病房只能属于一个科室一个医生只属于一个科室，但可负责多个病人的诊治一个病人的主管医生只有一个E-R图转换科室（科名，地址，电话）医生（医生名，职称，年龄，工作证号）病房（病房号，床位号）病人（病历号，姓名，性别，诊断）负责（床位号，科名）拥有（医生名，科名）诊治（病历号，医生名）合并科室（科名，地址，电话）医生（医生名，职称，科名，年龄，工作证号）病房（床位号，病房号，科名）病人（病历号，姓名，性别，诊断，医生名）]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven打包]]></title>
    <url>%2F2019%2FMaven%E6%89%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[可执行jar包123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;easy-learning-image&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;undertow.version&gt;1.4.21.Final&lt;/undertow.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;shade&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;transformers&gt; &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt; &lt;mainClass&gt;主类&lt;/mainClass&gt; &lt;/transformer&gt; &lt;/transformers&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件测试]]></title>
    <url>%2F2019%2F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[什么是软件测试使用人工或自动手段来运行或测定某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别。软件测试是根据软件开发各阶段的规格说明和程序的内部结构而精心设计一批测试用例，并利用这些测试用例去执行程序，以发现软件故障的过程。软件测试是一种软件质量保证活动，其动机是通过一些经济有效的方法，发现软件中存在的缺陷，从而保证软件质量。几个概念错误 Error：错误是针对人来说的，人非圣贤，孰能无过？缺陷 Bug：由于人为的错误，在软件中引入了Bug。故障 Fault：带有Bug的软件在某种条件下被激活，称为Fault。失效 Failure：如果没能及时解决Fault，便会导致失效。软件测试的原则不可能进行完全测试软件测试只能表明缺陷的存在，而不能证明产品已经没有缺陷软件产品中所存在的缺陷数与已发现的缺陷数成正比软件测试的杀虫剂效应由于测试人员的思路不尽相同，每个人测试的侧重点不同，由于都按照测试用例进行测试，但是测试用例一般仅描述系统的一些基本测试项，不会将所有的测试用例方方面面都写到，有时还需要测试人员的经验和素质。所以A测试某个产品用了七个工作日，第一天到第四天报出许多bug，但从第5天开始几乎报不出啥bug了。七天后换了B，B一下子又测试出一堆bug，不能说A的水平差，只能说该产品已经对A产生了抗药性，这就是测试学中的杀虫剂现象。所以在测试中每次轮流测试最好安排不同的测试人员进行不同模块测试工作，以避免杀虫剂现象。尽早测试的原则WHY SHOULD WE “FIX”BUGS ASAP?LIKE MANY LIVING CREATURES, BUGS GROW IN SIZE THROUGHOUT THEIR LIFE. IT IS DESIRABLE TO DISCOVER AND EXTERMINATE BUGS SOON AFTER CONCEPTION.回归测试的原则Regression: “when you fix one bug, you introduce several newer bugs.”软件测试的价值-微笑模型软件测试的内容软件测试过程单元测试针对函数或类中的方法进行的测试检查函数功能和函数内部实现是否和详细设计说明书相符驱动和桩假设现在项目组把任务分给了7个人，每个人负责实现一个模块。你负责的是B模块，你很优秀，第一个完成了编码工作，现在需要开展单元测试工作，先分析结构图：由于B模块不是最顶层模块，所以它一定不包含main函数（A模块包含main函数），也就不能独立运行。B模块调用了D模块和E模块，而目前D模块和E模块都还没有开发好，那么想让B模块通过编译器的编译也是不可能的。那么怎样才能测试B模块呢？需要做：写两个模块Sd和Se分别代替D模块和E模块（函数名、返回值、传递的参数相同），这样B模块就可以通过编译了。Sd模块和Se模块就是桩模块。写一个模块Da用来代替A模块，里面包含main函数，可以在main函数中调用B模块，让B模块运行起来。Da模块就是驱动模块。知识点：桩模块的使命除了使得程序能够编译通过之外，还需要模拟返回被代替的模块的各种可能返回值（什么时候返回什么值需要根据测试用例的情况来决定）。驱动模块的使命就是根据测试用例的设计去调用被测试模块，并且判断被测试模块的返回值是否与测试用例的预期结果相符集成测试针对单元、模块或者子系统间接口进行的测试检查接口和集成后的功能是否和概要设计说明书相符合在把各模块连接起来的时候，穿越模块接口的数据是否会丢失。案例案例一某软件公司测试人员在测试某法院办案办公系统时，先通过具有分配案件权限的用户登录，为某案件选择承办部门，测试人员故意为该案件选择了错误的承办部门，比如状态为立案侦查的案件，本应选择侦查部门作为承办部门，却选择了民事行政。结果当以民事行政的身份登录到系统时，却并没有发现该案件，再以具有分配案件权限的用户登录，也没有发现该案件。可以料想与该案件有关的记录已经被存入了数据库，但却无法取出。由于用户操作失误，引起了数据在模块间流转中发生了丢失，系统应该对这种操作失误进行处理，保证数据的完整性。一个模块的功能是否会对另一个模块的功能产生不利的影响。案例二电信系统中经常会发生一些异常话单，例如无主叫话单、无被叫话单、超长话单、超短话单、通话同时进行等错误的异常话单。测试人员要注意测试这些异常话单是否对电信计费无影响。当一个模块的功能对另一个模块有不良影响时，其中一个模块要进行处理。案例三某石油公司管理系统的地区数据库入库省数据库，在测试人员测试过程中发现，当地方数据库中某条记录有误时，省数据库的处理是将全部数据全都回滚，包括正确的记录，这样的处理方式显然是不合理的，当省数据库发现错误记录时，应告之地方数据库，而不是把所有的数据库回滚回去。others上面只是提到了集成测试中需要注意的一部分问题，还有：各个子功能组合起来，能否达到预期要求的父功能。全局数据结构是否有问题。单个模块的误差累积起来，是否会放大，从而达到不能接受的程度。模块间是否存在时序问题（实时系统）与资源竞争。接口接口用于不同单元、模块、子系统或者系统间进行信息交互。接口类型函数接口消息接口文件接口数据库接口共享内存接口类接口。。。集成测试策略大爆炸集成自顶向下集成自底向上集成确认测试对照软件需求规格说明书对软件产品进行评估以确认其是否满足软件需求测试内容包括：功能、性能、可移植性、兼容性、可维护性、人机接口等给出结论性评价合格不合格，给出缺陷清单系统测试针对集成后的整个系统进行的测试检查集成后的整个系统功能、性能、易用性等特性是否和需求规格说明书相符合系统类型桌面软件Web系统嵌入式系统移动应用开放平台应用浏览器扩展/插件验收测试针对系统在用户实际使用环境下使用进行的测试检查系统在实际使用环境下是否和用户需求相一致验收测试正式验收测试：第三方验收测试α测试：用户验收测试（开发环境、有人指导、受控）β测试：用户验收测试（实际环境、无人指导、不受控）软件测试模型瀑布模型V模型明确地表明了测试的不同级别，清晰地展示了软件测试与开发之间的关系每一测试阶段的前提和基础是对应开发阶段的文档W模型测试活动伴随整个软件开发生命周期测试对象不仅包括程序，还包括需求和设计阶段形成的各种文档H模型测试流程独立于其他流程其他流程包括开发、设计和评审等支持反复和迭代过程软件测试环境的搭建硬件环境软件环境网络环境数据准备测试工具软件质量度量外部质量和内部质量模型功能性适合性：功能有没有准确性：功能准不准互操作性：与其它系统交互安全保密性：信息安全、权限控制功能性依从性：是否符合标准可靠性成熟性：对软件内部错误处理能力容错性：对软件外部错误处理能力易恢复性：从故障或失效恢复的能力可靠性依从性：是否符合标准易用性易理解性：界面提示易学性：帮助易操作性：操作步骤数吸引性：外观、颜色易用性依从性：是否符合标准效率时间特性：花费多长时间资源利用性：占用多少内存、CPU效率依从性：是否符合标准维护性易分析性：容易定位缺陷易改变性：容易修改代码稳定性：内部接口稳定易测试性：容易被操作、观察维护性依从性：是否符合标准可移植性适应性：可以在各种环境下使用易安装性：容易在各种环境下安装共存性：可以与其它软件共存易替换性：很容易更换版本使用质量模型有效性在特定的使用环境下，用户执行任务时能否准确和完全的达到规定目标。生产率在特定使用环境下，用户为达到有效性消耗的资源，如时间、金钱等安全性在特定使用环境下，对用户人身财产产生伤害的风险级别满意度特定的使用环境下用户对软件使用的态度黑盒测试又称功能测试或基于规格说明的测试与软件具体实现无关，变化后原测试用例仍可使用可与软件实现同步进行，压缩项目总的开发时间用例设计系统业务熟悉模型-SFDPOT模型。Structure系统架构Function系统功能Data数据处理Platform平台支持Operation用户操作Time时间影响综合案例Structure：客户端和服务器端间通过UDP包和TCP包混合传输数据Function：登录、聊天、文件传输Data：聊天记录保存、在线状态更新Platform：支持Windows、Linux、AndroidOperation：用户以年轻人为主，且很多为非技术用户Time：用户会在不同时区登录和使用通用测试用例写作用例编号测试项目测试标题重要级别预置条件观察点检查点测试步骤预期结果用例编号F-01-001测试项目登录功能测试标题测试有效用户登录重要级别高预置条件用户事先没有登录或已经退出系统观察点系统主页检查点左上角登录标签显示内容测试步骤输入用户名admin和密码123后点击登录按钮预期结果进入系统主页并显示欢迎您：admin字样等价类划分法输入域的某个互不相交的子集并集等于整个输入域对测试的意义完备性无冗余性等价类划分有效等价类符合程序规格说明书有意义，合理的数据无效等价类不符合程序规格说明书无意义或者不合理的数据等价类划分原则按区间划分：区间内、区间外按数值划分：一个值一个按数值集合划分：集合内、集合外按限制条件或规则划分细分等价类等价类用例设计原则设计一个测试用例，使其尽可能多的覆盖所有尚未覆盖的有效等价类。重复这一步骤，使得有效等价类均被测试用例所覆盖。设计一个测试用例，使其只覆盖一个无效等价类。重复这一步骤使得所有无效等价类均被覆盖。案例某保险公司人寿保险的保费计算方式为：保费＝投保额×保险费率保险费率根据年龄、性别、婚姻状况和抚养人数的不同而有所不同，体现在不同年龄、性别、婚姻状况和抚养人数，点数设定不同，10点及10点以上保险费率为0.6%，10点以下保险费率为0.1%数据需求分析年龄：一位或两位非零整数，取值的有效范围为1-99。性别：一位英文字符，只能取 ‘M’或’F’ 值。婚姻：字符，只能取‘已婚’或‘未婚’。抚养人数：空白或字符‘无’或一位非零整数（1-9）点数 ：一位或两位非零整数，取值范围为8-19等价类划分输入输入条件有效等价类无效等价类年龄1-2位非0整数，有效范围为1-9920-39、40-59、1-19、60-99大于99小于1负数非数字性别一个英文字符，且只能取M或FM、F长度为1的其他英文字符长度大于1长度等于0非英文字符婚姻字符，只能取“已婚”或“未婚”“已婚”、“未婚”其他字符抚养人数空白或者字符“无”或1-9之间的一位整数空白、“无”、1-6、7-9除空白或“无”之外的其他字符小于1大于9测试用例用例编号年龄性别婚姻抚养人数预期输出127M已婚空白0.60%250F未婚无0.60%370M已婚10.10%427F未婚70.60%50M已婚空白年龄错误6100F未婚无年龄错误750男已婚4性别错误827M离婚7婚姻错误945F已婚没有抚养人数错误1062M未婚0抚养人数错误1130F已婚10抚养人数错误边界值分析法错误往往出现在边界处，如：&lt;写成&lt;=第一个、最后一个最小值、最大值开始、完成超过、未超过空、满最短/最长; 最快/最慢; 最高/最低相邻/最远程序含有n个变量。选择其中一个变量依次取min、min+、nom、max-、max。若采用健壮性边界值测试，另外增加min-和max+。其余变量取正常值，总共有4n+1 / 6n+1个测试用例。案例11-100之间的三条边构成何种三角形？案例2案例3对于方法int textSearch(char* txt, char* s)。txt和s均为字符串，返回s在txt中的起始位置，如果txt中不含s，返回-1。NoStxt1Laughter is good for the heart.2Laughter34good forLaughter is good for the heart.5LaughterLaughter is good for the heart.6aughterLaughter is good for the heart.7gLaughterLaughter is good for the heart.8heart.Laughter is good for the heart.9heartLaughter is good for the heart.10heart.dLaughter is good for the heart.因果图法因果图基本符号因果图约束符号因果图法测试用例设计步骤确定原因和结果（输入和输出）确定逻辑关系确定约束关系转换为决策表设计测试用例案例1输入第一个字符必须是#或者*，第二个字符必须是数字，在此情况下进行文件的修改。如果第一个字符不正确，给出信息N。如果第二个字符不正确，给出信息M。案例2若落点在棋盘外，则不移动棋子；若落点与起点不构成日字型，则不移动棋子；若绊马腿，则不移动棋子；若落点处有己方棋子，则不移动棋子；若不属于1-4条，且落点处无棋子，则移动棋子；若不属于1-4条，且落点处为对方棋子（非老将），则移动棋子并除去对方棋子；若不属于1-4条，且落点处为对方老将，则移动棋子，并提示战胜对方，游戏结束。原因棋盘内成日字绊马腿己方子无棋子对方子(非老将)对方将结果不动跳马吃掉对方棋子战胜决策表法适用于描述复杂的业务规则（输入输出较多，且制约关系比较多）条件桩条件项动作桩动作项案例NextDate(month, day, year)month, day, year都是整数、month:[1-12]、day:[1-31]、year:[1900-2050]动作A1：不可能A2：day加1A3：day复位为1A4：month加1A5：month复位为1A6：year加1条件决策表白盒测试控制流测试语句覆盖程序中的每个可执行语句至少被执行一次。流程图中的节点全部被覆盖。分支覆盖/判定覆盖程序中每个分支都至少获得一次“真”值和“假”值。流程图中的有向边全部被覆盖。谓词覆盖/条件覆盖每个复合谓词所包含的每一个原子谓词都至少获得一次“真”值和一次“假”值。分支谓词覆盖/判定条件覆盖是分支和谓词覆盖的交集。条件中的所有谓词可能取值至少执行一次。同时，所有分支的可能结果至少执行一次。复合谓词覆盖/条件组合覆盖不是简单地要求每个谓词都出现“真”与“假”两种结果，而是要求让这些结果的所有可能组合都至少出现一次。】路径覆盖覆盖程序中所有可能的执行路径。数据流测试单元测试的目标和任务模块独立执行通路测试：检查每一条独立执行路径的测试。保证每条语句被至少执行一次。模块局部数据结构测试：检查局部数据结构完整性。模块接口测试：检查模块接口是否正确。模块边界条件测试：检查临界数据处理的正确性。模块的各条错误处理通路测试：预见、预设的各种出错处理是否正确有效。静态测试不运行被测试程序，对代码通过检查、阅读进行分析。走查：采用讲解、讨论和模拟运行的方式进行的查找错误的活动。审查：采用讲解、提问方式进行，一般有正式的计划、流程和结果。主要方法采用缺陷检查表。评审：通常在审查会后进行，审查小组根据记录和报告进行评估。充分审查了所规定的代码，并且全部编码准则被遵守。审查中发现的错误已全部修改。走查与审查的比较：缺陷测试缺少copy构造函数造成申请内存的重复释放1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class base&#123;public:char *p;public : base()&#123; p = new char[strlen("default value") + 1]; strcpy(p, "default value"); printf("base constructor is calling\n"); &#125; /* base(base &amp;a)&#123; printf("base copy constructor is calling\n"); p = new char[strlen(a.p) + 1]; strcpy(p, a.p); &#125;*/ void setp(char *s)&#123; if(p!=NULL) delete[] p; p = new char[strlen(s)+1]; strcpy(p, s); &#125; ~base()&#123; if(p) &#123; delete[] p; p = NULL; &#125; printf("base deconstructor is calling\n"); &#125;&#125;;class derive:public base&#123;public: derive()&#123;&#125; derive(derive &amp;a) &#123; printf("derive copy constructor is calling\n"); &#125; &#125;;int main(int argc, char*argv[])&#123; derive c; c.setp("this is c"); derive b(c); printf("c: %s\n", c.p); printf("b: %s\n", b.p); return 0;&#125;集成测试集成测试主要关注问题模块间的数据传递是否正确？一个模块的功能是否会对另一个模块的功能产生错误的影响？全局数据结构是否有问题，会不会被异常修改？块组合起来的功能能否满足要求？集成后，各个模块的累积误差是否会扩大，是否达到不可接受的程度？集成测试的原则所有公共接口必须被测试到；关键模块必须进行充分测试；集成测试应当按一定层次进行；集成测试策略选择应当综合考虑质量、成本和进度三者之间的关系；集成测试应当尽早开始，并以概要设计为基础；在模块和接口的划分上，测试人员应该和开发人员进行充分沟通；当测试计划中的结束标准满足时，集成测试才能结束；当接口发生修改时，涉及到的相关接口都必须进行回归测试；集成测试应根据集成测试计划和方案进行，不能随意测试；项目管理者应保证测试用例经过审核；测试执行结果应当如实的记录。集成测试策略非渐增式集成BIG BANG：很难确定出错的真正位置、所在的模块、错误的原因。这种方法并不推荐在任何系统中使用，适合在规模较小的应用系统中使用。渐增式集成 INCREMENTAL：自顶向下 TOP-DOWN：自顶向下集成：大量桩模块的开发是困难的。且在测试过程中，由于桩模块代替了低层模块，无重要数据自上往下流动。自底向上 BOTTOM-UP：不需要开发桩模块；重要的UI部分最后才能进行测试；适合于OO system，Real-time system以及有严格性能要求的系统。三明治集成 SANDWICH：是一种混合增量式测试策略，综合了自顶向下和自底向上两种集成方法的优点，桩模块和驱动模块的开发都比较少。主要缺点是：在真正集成之前每一个独立的模块没有完全测试过。性能测试性能测试主要检验软件是否达到需求规格说明书中规定的各类性能指标，并满足一些性能相关的约束和限制条件。性能测试包括以下几个方面：评估系统的能力。测试中得到的负荷和响应时间等数据可以被用于验证所计划的模型的能力，并帮助做出决策。识别系统中的弱点。受控的负荷可以被增加到一个极端的水平并突破它，从而修复系统的瓶颈或薄弱的地方。系统调优。重复运行测试，验证调整系统的活动得到了预期的结果，从而改进性能，检测软件中的问题。性能测试方法基准法：响应时间并发用户数吞吐量性能计数器性能测试执行三个阶段：计划阶段定义目标并设置期望值收集系统和测试要求定义工作负载选择要收集的性能度量值标出要运行的测试并决定什么时候运行它们决定工具选项和生成负载编写测试计划，设计用户场景并创建测试脚本测试阶段做准备工作（如建立测试服务器或布置其他设备）运行测试收集数据分析阶段分析结果改变系统以优化性能设计新的测试压力测试压力测试（Stress Testing）是指模拟巨大的工作负荷，以查看系统在峰值使用情况下是否可以正常运行。压力测试是通过逐步增加系统负载来测试系统性能的变化，并最终确定在什么负载条件下系统性能处于失效状态，以此来获得系统性能提供的最大服务级别的测试。压力测试方法特点：压力测试是检查系统处于压力情况下的能力表现：比如，通过增加并发用户的数量，检测系统的服务能力和水平；通过增加文件记录数来检测数据处理的能力和水平等等。压力测试一般通过模拟方法进行：通常在系统对内存和CPU利用率上进行模拟，以获得测量结果。如将压力的基准设定为：内存使用率达到75%以上、CPU使用率达到75%以上，并在此观测系统响应时间、系统有无错误产生。除了对内存和CPU的使用率进行设定外，数据库的连接数量、数据库服务器的CPU利用率等等也都可以作为压力测试的依据。压力测试一般用于测试系统的稳定性：如果一个系统能够在压力环境下稳定运行一段时间，那么该系统在普遍的运行环境下就应该可以达到令人满意的稳定程度。在压力测试中，通常会考察系统在压力下是否会出现错误等方面的问题。压力测试与性能测试的联系与区别：压力测试是用来保证产品发布后系统能否满足用户需求，关注的重点是系统整体；性能测试可以发生在各个测试阶段，即使是在单元层，一个单独模块的性能也可以进行评估。压力测试是通过确定一个系统的瓶颈，来获得系统能提供的最大服务级别的测试。性能测试是检测系统在一定负荷下的表现，是正常能力的表现；而压力测试是极端情况下的系统能力的表现。压力测试和负载测试（Load Test）：负载测试是通过逐步增加系统工作量，测试系统能力的变化，并最终确定在满足功能指标的情况下，系统所能承受的最大工作量的测试。压力测试实质上就是一种特定类型的负载测试。压力测试和并发性测试：并发性测试是一种测试手段，在压力测试中可以利用并发测试来进行压力测试。压力测试方法：压力测试应该尽可能逼真的模拟系统环境。对于实时系统，测试者应该以正常和超常的速度输入要处理的事务从而进行压力测试。批处理的压力测试可以利用大批量的批事务进行，被测事务中应该包括错误条件。压力测试中使用事务获得途径：测试数据生成器；由测试小组创建的测试事务；原来在系统环境中处理过的事务。压力测试手段：重复（Repetition）测试：重复测试就是一遍又一遍地执行某个操作或功能，比如重复调用一个Web服务。压力测试的一项任务就是确定在极端情况下一个操作能否正常执行，并且能否持续不断地在每次执行时都正常。这对于推断一个产品是否适用于某种生产情况至关重要，客户通常会重复使用产品。重复测试往往与其它测试手段一并使用。并发（Concurrency）测试：并发是同时执行多个操作的行为，即在同一时间执行多个测试线程。例如，在同一个服务器上同时调用许多Web服务。并发测试原则上不一定适用于所有产品（比如无状态服务），但多数软件都具有某个并发行为或多线程行为元素，这一点只能通过执行多个代码测试用例才能得到测试结果。量级（Magnitude）增加：压力测试可以重复执行一个操作，但是操作自身也要尽量给产品增加负担。例如一个Web服务允许客户机输入一条消息，测试人员可以通过模拟输入超长消息来使操作进行高强度的使用，即增加这个操作的量级。这个量级的确定总是与应用系统有关，可以通过查找产品的可配置参数来确定量级。随机变化：该手段是指对上述测试手段进行随机组合，以便获得最佳的测试效果。压力测试执行：可以设计压力测试用例来测试应用系统的整体或部分能力。压力测试用例选取可以从以下几个方面考虑：输入待处理事务来检查是否有足够的磁盘空间；创造极端的网络负载；制造系统溢出条件；当应用系统所能正常处理的工作量并不确定时需要使用压力测试。压力测试意图通过对系统施加超负载事务量来达到破坏系统的目的。压力测试和在线应用程序非常类似，因为很难利用其他测试技术来模拟高容量的事务。压力测试的弱点在于准备测试的时间与在测试的实际执行过程中所消耗的资源数量都非常庞大。通常在应用程序投入使用之前这种消耗的衡量是无法进行的。容量测试所谓的容量测试（Volume Testing）是指，采用特定的手段测试系统能够承载处理任务的极限值所从事的测试工作。这里的特定手段是指，测试人员根据实际运行中可能出现极限，制造相对应的任务组合，来激发系统出现极限的情况。容量测试的目的容量测试的目的是使系统承受超额的数据容量来发现它是否能够正确处理，通过测试，预先分析出反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），确定系统在其极限值状态下是否还能保持主要功能正常运行。容量测试还将确定测试对象在给定时间内能够持续处理的最大负载或工作量。对软件容量的测试，能让软件开发商或用户了解该软件系统的承载能力或提供服务的能力，如电子商务网站所能承受的、同时进行交易或结算的在线用户数。知道了系统的实际容量，如果不能满足设计要求，就应该寻求新的技术解决方案，以提高系统的容量。有了对软件负载的准确预测，不仅能对软件系统在实际使用中的性能状况充满信心，同时也可以帮助用户经济地规划应用系统，优化系统的部署。容量测试与压力测试的区别与容量测试十分相近的概念是压力测试。二者都是检测系统在特定情况下，能够承担的极限值。然而两者的侧重点有所不同，压力测试主要是使系统承受速度方面的超额负载，例如一个短时间之内的吞吐量。容量测试关注的是数据方面的承受能力，并且它的目的是显示系统可以处理的数据容量。压力测试、容量测试和性能测试的区别更确切的说，压力测试可以看作是容量测试、性能测试和可靠性测试的一种手段，不是直接的测试目标。压力测试的重点在于发现功能性测试所不易发现的系统方面的缺陷，而容量测试和性能测试是系统测试的主要目标内容，也就是确定软件产品或系统的非功能性方面的质量特征，包括具体的特征值。容量测试和性能测试更着力于提供性能与容量方面的数据，为软件系统部署、维护、质量改进服务，并可以帮助市场定位、销售人员对客户的解释、广告宣传等服务。压力测试、容量测试和性能测试的测试方法相通，在实际测试工作中，往往结合起来进行以提高测试效率。一般会设置专门的性能测试实验室完成这些工作，即使用虚拟的手段模拟实际操作，所需要的客户端有时还是很大，所以性能测试实验室的投资较大。对于许多中小型软件公司，可以委托第三方完成性能测试，可以在很大程度上降低成本。]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven排除依赖]]></title>
    <url>%2F2019%2FMaven%E6%8E%92%E9%99%A4%E4%BE%9D%E8%B5%96%2F</url>
    <content type="text"><![CDATA[依赖重复时在启动项目的时候会报错，但大多数不影响使用。不过如果把Maven项目按普通方式打包时就会出现问题。所以依赖最好排除一下。排除依赖的写法在坐标里面（dependency）加入exclusions结点，exclusions里的exclusion是要排除的内容。1234567891011121314&lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;/exclusion&gt;&lt;/exclusions&gt;]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA的打包]]></title>
    <url>%2F2019%2FIDEA%E7%9A%84%E6%89%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[基本打包方式然后选择build。这样过后，我们能在classes文件夹下找到一个文件夹，文件夹里我们写的的包和第三方包。Maven打包Springboot项目pom.xml中加入插件：1234567891011&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jar包的动态加载及卸载]]></title>
    <url>%2F2019%2FJar%E5%8C%85%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%8D%B8%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[用springboot封装了一下。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115@RequestMapping("controller")@RestControllerpublic class Controller &#123; // 公司的一个调用dubbo服务的jar File innerServiceBus = new File(new File("").getCanonicalPath() + File.separator + "InnerServiceBus_4.3.0" + ".jar"); URLClassLoader loader = new URLClassLoader(new URL[]&#123;innerServiceBus.toURI().toURL()&#125;); public Controller() throws IOException &#123; &#125; @RequestMapping("invoke1") public Object invoke1( @RequestParam("service") String service, @RequestParam("method") String method, @RequestParam("jarName") String jarName) throws Exception &#123; // 加载传入的jar包 File file = new File(new File("").getCanonicalPath() + File.separator + jarName + ".jar"); URL url = file.toURI().toURL(); Class aClass1 = loader.getClass(); Method add = URLClassLoader.class.getDeclaredMethod("addURL", URL.class); add.setAccessible(true); add.invoke(loader, url); // 设置线程上下文类加载器 Thread.currentThread().setContextClassLoader(loader); // 加载 ServiceBus 类 Class&lt;?&gt; serviceBusClazz = loader.loadClass("dcloud.common.InnerServiceBus.ServiceBus"); // 构造serviceBus对象 Object serviceBus = serviceBusClazz.newInstance(); Method init = serviceBusClazz.getMethod("init"); init.invoke(serviceBus); // 获取dubbo传来的对象 Method locateService = serviceBusClazz.getMethod("locateService", String.class); Object serviceObject = locateService.invoke(serviceBus, service); Class clazz = serviceObject.getClass(); // 打印所有的方法 Method[] methods = clazz.getMethods(); for(Method m : methods)&#123; System.out.println(m); &#125; // 执行一个无参测试方法 // 如果是有参需要注意： // 如使用自己定义的类，必须使用同一类加载器进行加载。 // 比如有个cn.isjinhao.User类，在getDeclaredMethod的时候需要 // 传入：loader.loadClass("cn.isjinhao,User"). Method methoda = clazz.getDeclaredMethod(method); Object invoke = methoda.invoke(serviceObject); System.out.println(invoke); // 释放资源 loader.close(); ClassLoaderUtil.releaseLoader(loader); return null; &#125; @RequestMapping("invoke2") public Object invoke2( @RequestParam("service") String service, @RequestParam("method") String method, @RequestParam("jarName") String jarName) throws Exception &#123; // 重新创建一个 类加载器 loader = new URLClassLoader(new URL[]&#123;&#125;); //加载 两个jar包 File file = new File(new File("").getCanonicalPath() + File.separator + jarName + ".jar"); URL url = file.toURI().toURL(); Method add = URLClassLoader.class.getDeclaredMethod("addURL", URL.class); add.setAccessible(true); add.invoke(loader, url); add.invoke(loader, innerServiceBus.toURI().toURL()); // 设置线程上下文类加载器 Thread.currentThread().setContextClassLoader(loader); // 加载 ServiceBus 类 Class&lt;?&gt; serviceBusClazz = loader.loadClass("dcloud.common.InnerServiceBus.ServiceBus"); // 构造serviceBus对象 Object serviceBus = serviceBusClazz.newInstance(); Method init = serviceBusClazz.getMethod("init"); init.invoke(serviceBus); // 获取dubbo传来的对象 Method locateService = serviceBusClazz.getMethod("locateService", String.class); Object serviceObject = locateService.invoke(serviceBus, service); Class clazz = serviceObject.getClass(); // 打印所有的方法 Method[] methods = clazz.getMethods(); for(Method m : methods)&#123; System.out.println(m); &#125; // 执行一个无参测试方法 Method methoda = clazz.getDeclaredMethod(method); Object invoke = methoda.invoke(serviceObject); System.out.println(invoke); return null; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kettle的基本使用]]></title>
    <url>%2F2019%2Fkettle%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[最近实习被公司安排用kettle处理数据，所以写一篇记录一下kettle的基本使用方法。SQL1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586SELECT K.EQUIP_ID AS STATIONIDX, K.NAME AS STATIONNAME, STA_DAY, ISNULL( STANUM, 0 ), ISNULL( SPACENUM, 0 ), ISNULL( SIGNALNUM, 0 ), FNUM FROM ( SELECT A.STATIONIDX, B.STATIONNAME, &#123;3&#125; AS STA_DAY, SUM( CASE WHEN RESTRAIN_FLAG = 0 OR RESTRAIN_FLAG IS NULL THEN 1 ELSE 0 END ) AS NNUM, SUM( CASE WHEN RESTRAIN_FLAG = 0 OR RESTRAIN_FLAG IS NULL THEN 0 ELSE 1 END ) AS FNUM FROM MONITORSIGNAL.TBSIGNALBASIS_SX_&#123;&#123;2&#125;&#125; A /* 变量参数 + 循环*/ JOIN MONITORSIGNAL.TBSTATION_SX B ON A.STATIONIDX = B.STATIONIDX WHERE SIGNAL_TIME &gt;= &#123; 3 &#125; /* 占位参数 */ AND SIGNAL_TIME &lt; &#123; 4 &#125; GROUP BY A.STATIONIDX, B.STATIONNAME ) M LEFT JOIN ( SELECT st_id, count( * ) AS SPACENUM FROM ESDC_ODS.D5000_HISDB_OP_DEV_SX A JOIN MONITORSIGNAL.TBSTATION_SX B ON A.st_id = B.STATIONIDX WHERE OCCUR_TIME &gt;= &#123; 3 &#125; AND OCCUR_TIME &lt; &#123; 4 &#125; AND STATUS = 1 GROUP BY st_id ) N ON M.stationidx = N.st_id LEFT JOIN ( SELECT st_id, SUM( CASE WHEN STATUS = 19 THEN 1 ELSE 0 END ) AS STANUM, SUM( CASE WHEN STATUS = 7 THEN 1 ELSE 0 END ) AS SIGNALNUM FROM ESDC_ODS.D5000_HISDB_OP_YX_SX WHERE OCCUR_TIME &gt;= &#123; 3 &#125; AND OCCUR_TIME &lt; &#123; 4 &#125; AND (STATUS = 7 OR STATUS = 19) GROUP BY st_id ) O ON M.STATIONIDX = O.st_id JOIN ( SELECT DISTINCT EMS_EQUIP_ID, EQUIP_ID, NAME FROM SG_THEME.D5000_EMS_EQUIP_MAPPING I JOIN SG_THEME.SG_CON_SUBSTATION_B D ON I.EQUIP_ID = D.ID WHERE I.LX = 'SG_CON_SUBSTATION_B' ) K ON K.EMS_EQUIP_ID = M.STATIONIDX这个sql是真实业务场景下的一句SQL，emmm，比较长，但是很有代表性。下面就以这个sql解释知识点。基本知识union、连接、分组的字段必须在连接之时是按照升序排序的。按字符串处理之前必须是String类型，如果不是可以使用字段选择进行转换类型。记录集连接是两个表之间的连接，如果需要多个表做一个条件的连接使用multiway merge join。数字类型和字符串类型做连接时可能会出错，需要将转换数据类型后再做连接。JS脚本有些需要使用到处理的语句需要使用JS进行处理，比如上面的1CASE WHEN RESTRAIN_FLAG = 0 OR RESTRAIN_FLAG IS NULL THEN 1 ELSE 0 END ) AS NNUM从上一步获得的输入可以在JS中直接使用，但是一定要注意数据类型对不对，虽然JS是弱类型，但是最好还是在使用时处理一下，比如使用&#39;&#39;+XXX进行转字符串，在做其他操作。在脚本中用var定义的变量可以在下方的字段中被获取，获取之后就能作为输出字段输出。记住：JS脚本的执行过程是将上一步输入的每一行都使用执行一遍JS，然后将每次执行后的结果合并。占位参数如果某个表（设为A）输入的SQL语句需要使用使用其他表的数据，我们可以在其之前加上一个表（设为B），将B表的数据输入到A表中。此时需要使用到占位参数。B表：1234SELECT *,? as d3,? as d4 FROM MONITORSIGNAL.TBSIGNALBASIS_SX_2019_01 A WHERE SIGNAL_TIME &gt;= ?AND SIGNAL_TIME &lt; ? ORDER BY STATIONIDX;A表：1234567select lastexectime as STA_DAY, lastexectime + numtodsinterval(intervalvalue, 'minute') as D41, lastexectime as D32, lastexectime + numtodsinterval(intervalvalue, 'minute') as D42 from monitorsignal.tbdataetlconfig占位参数是按顺序匹配。两者的执行关系是：B表拿出每一行带入A表，A表依次执行，得到的所有数据在做合并拼接。变量参数占位参数的弊端是使用完就没了，上面所示的A表获得的四个字段在B表使用之后丢失，B表再传出的是其处理后的数据。所以如果我们需要跨几个操作使用就需要用到变量参数。变量的设置方式：上图所示实在自定义常量数据中定义了一个数据，JS处理之后设置为变量，实际上不使用JS处理也可以直接设置为变量。循环我们有时候需要做循环，比如再使用子表的时候，我们会对每个月的子表的分别就进行操作。这样就需要做一个循环，循环中只改变子表名。设置一个转换来获取变量，比如从表中查一列。并且放在结果中，这个结果个人理解就是一个缓冲区，别的转换能从这个结果中拿数据。在处理的时候再一行一行的拿数据。转换中需要设置一个阻塞，保证再使用到变量的时候此变量已被初始化。]]></content>
      <categories>
        <category>kettle</category>
      </categories>
      <tags>
        <tag>kettle</tag>
        <tag>etl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java邮件发送]]></title>
    <url>%2F2019%2FJava%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%2F</url>
    <content type="text"><![CDATA[Maven依赖12345&lt;dependency&gt; &lt;groupId&gt;javax.mail&lt;/groupId&gt; &lt;artifactId&gt;mail&lt;/artifactId&gt; &lt;version&gt;1.4.7&lt;/version&gt;&lt;/dependency&gt;不要修改版本号，这个版本之间的差异很大。代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970@Component@EnableConfigurationProperties(MailConfig.class)public class MailVerification &#123; // 收件人地址 private String recipientAddress; private String info; @Autowired private MailConfig mailconfig; public void sendVerCode(String info, String recipientAddress) throws Exception &#123; this.info = info; this.recipientAddress = recipientAddress; //1、连接邮件服务器的参数配置 Properties props = new Properties(); //设置用户的认证方式 props.setProperty("mail.smtp.auth", "true"); //设置传输协议 props.setProperty("mail.transport.protocol", "smtp"); //设置发件人的SMTP服务器地址 props.setProperty("mail.smtp.host", "smtp.163.com"); //2、创建定义整个应用程序所需的环境信息的 Session 对象 Session session = Session.getInstance(props); //设置调试信息在控制台打印出来 session.setDebug(false); //3、创建邮件的实例对象 Message msg = getMimeMessage(session); //4、根据session对象获取邮件传输对象Transport Transport transport = session.getTransport(); //设置发件人的账户名和密码 transport.connect(mailconfig.getSenderAccount(), mailconfig.getSenderPassword()); //发送邮件，并发送到所有收件人地址，message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人 transport.sendMessage(msg, msg.getAllRecipients()); //如果只想发送给指定的人，可以如下写法 //transport.sendMessage(msg, new Address[]&#123;new InternetAddress("xxx@qq.com")&#125;); //5、关闭邮件连接 transport.close(); &#125; /** * 获得创建一封邮件的实例对象 * * @param session * @return * @throws MessagingException * @throws AddressException */ private MimeMessage getMimeMessage(Session session) throws Exception &#123; // 创建一封邮件的实例对象 MimeMessage msg = new MimeMessage(session); // 设置发件人地址 msg.setFrom(new InternetAddress(mailconfig.getSenderAddress())); /** * 设置收件人地址（可以增加多个收件人、抄送、密送），即下面这一行代码书写多行 MimeMessage.RecipientType.TO:发送 * MimeMessage.RecipientType.CC：抄送 MimeMessage.RecipientType.BCC：密送 */ msg.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(recipientAddress)); msg.setRecipient(MimeMessage.RecipientType.CC, new InternetAddress(mailconfig.getSenderAddress())); msg.setSubject("航班管理系统验证码", "UTF-8"); // 设置邮件正文 msg.setContent("您好，您的验证码是： " + info + " ,请在30分钟内完成验证！", "text/html;charset=UTF-8"); // 设置邮件的发送时间,默认立即发送 msg.setSentDate(new Date()); return msg; &#125;&#125;配置文件12345678910111213141516171819202122232425262728293031@ConfigurationProperties(prefix = "as.email")public class MailConfig &#123; private String senderAddress; private String senderAccount; private String senderPassword; public String getSenderAddress() &#123; return senderAddress; &#125; public void setSenderAddress(String senderAddress) &#123; this.senderAddress = senderAddress; &#125; public String getSenderAccount() &#123; return senderAccount; &#125; public void setSenderAccount(String senderAccount) &#123; this.senderAccount = senderAccount; &#125; public String getSenderPassword() &#123; return senderPassword; &#125; public void setSenderPassword(String senderPassword) &#123; this.senderPassword = senderPassword; &#125;&#125;]]></content>
      <categories>
        <category>邮件发送</category>
      </categories>
      <tags>
        <tag>邮件发送</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7下mysql5.6安装和卸载]]></title>
    <url>%2F2019%2Fcentos7%E4%B8%8Bmysql5-6%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[安装卸载mariadb：yum remove maria*下载安装包文件：wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm安装rpm包：rpm -ivh mysql-community-release-el7-5.noarch.rpm安装mysql：yum install mysql-server启动 mysql 服务：systemctl start mysqld.service重启：systemctl restart mysqld.service停止：systemctl stop mysqld.service设置开机启动：systemctl enable mysqld.service设置密码：mysql -u rootuse mysql;update user set password=PASSWORD(&quot;这里输入root用户密码&quot;) where User=&#39;root&#39;;flush privileges;设置root远程主机登录：GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;密码&quot;;GRANT ALL PRIVILEGES ON *.* TO &#39;your username&#39;@&#39;%&#39; IDENTIFIED BY &#39;your password&#39;;设置全局编码集卸载查看MySQL的安装情况：rpm -qa|grep -i mysql停止服务：service mysql stop卸载第一步查询出来的所有结果：rpm -ev 名字 --nodeps查找mysql之前使用过的目录：find / -name mysql删除所有mysql之前使用过的所有目录删除配置文件：rm -rf /etc/my.cnf]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UML基础]]></title>
    <url>%2F2019%2FUML%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[objectAn object is an entity with a well-defined boundary and identity that encapsulates state and behavior.State is represented by attributes and relationships.Behavior is represented by operations, methods, and state machines.An Object Has StateThe state of an object is one of the possible conditions in which an object may exist.The state of an object normally changes over time.An Object Has BehaviorBehavior determines how an object acts and reacts.The visible behavior [bɪ’heɪvjə] of an object is modeled by the set of messages it can respond to (operations the object can perform).An Object Has IdentityEach object has a unique identity, even if the state is identical to that of another object.classA class is a description of a set of objects that share the same properties and behavior. An object is an instance of a class.The Relationship Between Classes and ObjectsA class is an abstract definition of an object. It defines the structure and behavior of each object in the class. It serves as a template for creating objects.Objects are grouped into classes.An object is an instance of a class.What Is an Operation?An operation is the implementation of a service that can be requested from any object of the class to affect behavior.A class may have any number of operations or none at all.Objects Need to CollaborateObjects are useless unless they can collaborate [kəˈlæbəreɪt] together to solve a problem.Each object is responsible for its own behavior and status.No one object can carry out every responsibility on its own.How do objects interact with each other?They interact through messages.What is a message?A specification of a communication between objects that conveys information with the expectation that activity will ensue(跟着发生)One object asks another object to perform an operation.What Is Abstraction?Abstraction can be defined as: Process allowing to focus on most important aspects while ignoring less important detailsAllows us to manage complexity by concentrating on essential aspects making an entity different from othersAbstractionEmphasizes relevant characteristics.Suppresses（抑制） other characteristics.What Is Encapsulation?Encapsulation means to design, produce, and describe software so that it can be easily used without knowing the details of how it works.Also known as information hidingAn analogy:When you drive a car, you don’t have know the details of how many cylinders(汽缸) the engine has or how the gasoline and air are mixed and ignited(点火).Instead you only have to know how to use the controls.Encapsulation allows objects to be viewed as ‘black boxes’It protects an object’s internal state from being corrupted by other objects.Also, other objects are protected from changes in the object implementation.隔离复杂度What Is Inheritance ?Inheritance [ɪnˈherɪtəns]—a way of organizing classesClasses with properties in common can be grouped so that their common properties are only defined once.增加了软件重用的机会PolymorphismPolymorphism—the same word or phrase can be mean different things in different contextsAnalogy（类比）: in English, bank can mean side of a river or a place to put moneyIn Java, two or more classes could each have a method called outputEach output method would do the right thing for the class that it was in.One output might display a number where as a different one might display a name.What Is Polymorphism?消息发送方不需要知道消息接收方属于那个子类同一类族的接收者可以按自己的方式处理消息同一类族的接收者可以按自己的方式处理同一个消息有多种对象可以按自己的方式处理相同的数据What is an Interface?An interface is a collection of operations that specify a service of a class or component.Interfaces formalize（正式化） polymorphismInterfaces support “plug-and-play(即插即用)” architectures小结类定义了对象群体的逻辑结构，包括属性和操作。系统运行时，类作为产生对象的模板，在物理层面是不存在的对象系统运行时必须为每一个需要的对象分配内存、保存数据对象存在于物理层面，每个对象都有自己的数据空间。所有的对象共享同一块代码空间属性Attribute ==状态state == 信息information操作operation == 方法method ==行为behaviour = = 职责responsibilityProcedural ProgrammingThis programming paradigm（范式） is essentially an abstraction of machine /assembly language.Program is organized around procedures.Focus on data structures, algorithms and sequencing of stepsPrograms = Algorithm + Data StructureAn algorithm is a set of instructions for solving a problemA data structure is a construct used to organize data in a specific way.Most computer languages, from early examples like FORTRAN and ALGOL to more recent languages like C and Ada have been imperative or procedural.Object-Oriented ProgrammingA design and programming techniqueSome terminology:object - usually a person, place or thing (a noun)method - an action performed by an object (a verb)type or class - a category of similar objects (such as automobiles)Objects have both data and methodsObjects of the same class have the same data elements and methodsObjects send and receive messages to invoke actionsC语言是一种面向过程的思维方式程序的运行“一切尽在掌握中”：从main()函数的逐条语句开始执行、调用了子程序就必须一层层返回，最终又返回main函数系统需要完成的功能，分配到各个子函数，由main函数统一调度比较面向过程侧重于考虑方法的编写（哪个方法做什么事，不考虑所涉及的数据在哪里）面向对象则致力于将数据和方法先做一个封装（分配一个对象做事，先考虑所需要的数据是否和它在一起）What is modeling?A model is an abstraction of things.Emphasizes relevant characteristics.Suppresses other characteristics.建模目的We build models to better understand the system we are developing.Modeling achieves four aims.模型帮助我们按照实际情况或按照我们所需要的样式对系统进行可视化模型允许我们详细说明系统的结构或行为模型给出了一个指导我们构造系统的模板模型对我们作出的决策进行文档化We build models of complex systems because we cannot comprehend such a system in its entirety.UMLUnified Modeling Language 统一建模语言作用：建立软件模型，可以用UML对软件密集型系统的制品（artifact：软件开发过程中产生的各种各样的产物）进行可视化、详述、构造和文档化。建模语言：提供统一的交流词汇和规则可视化: 通过标准图符构成图形来描述模型通用标准: 成为软件建模的标准语言,并且在其他领域也得到应用。UML的构成Building Blocks of the UMLThe vocabulary of the UML encompasses three kinds of building blocks:Things: the abstractions that are first-class citizens in a model;Relationships: relationships tie these things together;Diagrams: diagrams group interesting collections of things.Things in the UMLThere are four kinds of things in the UML:Structural things: class, interface, collaboration, use case, active class, component, nodeBehavioral things: interaction, state machine, activityGrouping things: packageAnnotational(注释) things: noteThese things are the basic object-oriented building blocks of the UML.Structural things in the UMLthe nouns of UML models.the mostly static parts of a model, either conceptual or physicalCollectively, the structural things are called classifiersStructural things - ClassA class is a description of a set of objects that share the same attributes, operations, relationships, and semantics(语义).A class is represented using a compartmented(间隔间) rectangleA class is comprised of three sections- The first section contains the class name- The second section shows the structure (attributes)- The third section shows the behavior (operations)Representing ObjectsAn object is represented as rectangles with underlined names##### Structural things - InterfaceAn interface is a collection of operations that specify a service of a class or component.Interfaces support “plug-and-play” architectures##### Structural things – Use Casea use case is a description of set of sequence of actions that a system performs that yields an observable result of value to a particular actor.A use case is used to structure(组织) the behavioral things in a model.A use case is realized by a collaboration.Graphically, a use case is rendered as an ellipse [ɪˈlɪps] with solid lines, usually including only its name.##### Structural things - CollaborationIn the context of a system‘s architecture, a collaboration allows you to name a conceptual chunk(大块) that encompasses both static and dynamic aspects.A collaboration names a society of classes, interfaces, and other elements that work together to provide some cooperative [kəʊ’ɒpərətɪv] behavior that’s bigger than the sum of all its parts.You use collaborations to specify the realization of use cases and operations, and to model the architecturally significant mechanisms of your system.A collaboration is also the specification of how an element, such as a classifier (including a class, interface, component, node, or use case) or an operation, is realized by a set of classifiers and associations playing specific roles used in a specific way.Graphically, a collaboration is rendered as an ellipse(椭圆) with dashed lines.##### Structural things – Active Classan active class is a class whose objects own one or more processes or threads and therefore can initiate control activity.Graphically, an active class is rendered as a class with double lines on the left and right; it usually includes its name, attributes, and operations.##### Structural things – ComponentA component is a modular part of the system design that hides its implementation behind a set of external interfaces.系统中遵从一组接口且提供其实现的物理的、可替换的部分。构件是物理抽象，可以替换的文件。类是逻辑抽象，包含属性和方法。逻辑抽象出来的东西用文件写出来，这些源文件就是构件。eg：##### Structural things – Nodea node is a physical element that exists at run time and represents a computational resource, generally having at least some memory and, often, processing capability.A set of components may reside（安置、居住） on a node and may also migrate from node to node.Graphically, a node is rendered as a cube, usually including only its name.#### Behavioral things in the UMLthe verbs of UML models.the mostly dynamic parts of a modelthree primary kinds- Among a set of objects: interaction- For an object: state machine- The sequence of steps: activity##### Behavioral things - Interactionan interaction is a behavior that comprises（包括） a set of messages exchanged among a set of objects within a particular context to accomplish a specific purpose.An interaction involves（包含、涉及） a number of other elements, including messages, action sequences (the behavior invoked by a message), and links (the connection between objects).Graphically, a message is rendered as a directed line, almost always including the name of its operation.&gt; What Is an Interaction Diagram?An interaction diagram shows an interaction, consisting of a set of objects and their relationships, including the messages that may be dispatched（派遣，分发） among them.It models the dynamic aspects of a system.&gt; What Is a Sequence Diagram?A sequence diagram is an interaction diagram that emphasizes the time ordering of messages.The diagram shows- The objects participating in the interaction.- The sequence of messages exchanged.&gt; What Is a Communication Diagram?A communication diagram emphasizes the organization of the objects that participate in an interaction.The communication diagram shows- The objects participating in the interaction.- Links( physical or conceptual connection among objects) between the objects.- Messages passed between the objects.##### Behavioral things - State machinea state machine is a behavior that specifies the sequences of states an object or an interaction goes through during its lifetime in response to events, together with its responses to those events.A state machine involves a number of other elements, including states, transitions, events, and activities.Graphically, a state is rendered as a rounded rectangle, usually including its name and its substates（子状态）, if any（如果有）.Behavioral things - Activityan activity is a behavior that specifies the sequence of steps a computational process performsIn an activity, the focus is on the flows among steps without regard to which object performs each step.A step of an activity is called an action.Graphically, an action is rendered as a rounded rectangle with a name indicating its purpose. States and actions are distinguished by their different contexts.#### Grouping things in the UML##### Grouping things - Package- Grouping things are the organizational parts of UML models.- Structural things, behavioral things, and even other grouping things may be placed in a package.- Unlike components (which exist at run time), a package is purely conceptual (meaning that it exists only at development time).- Graphically, a package is rendered as a tabbed folder, usually including only its name and, sometimes, its contents.#### Annotational things in the UML##### Annotational things - NoteAnnotational things are the explanatory(解释性的) parts of UML models.These are the comments（解释） you may apply to describe, illuminate（阐释）, and remark about any element in a model.There is one primary kind of annotational thing, called a note.A note is simply a symbol for rendering constraints and comments attached to an element or a collection of elements.Graphically, a note is rendered as a rectangle with a dog-eared corner, together with a textual or graphical comment.### Relationships in the UMLThere are four kinds of relationships in the UML:- Association- Dependency- Generalization- Realization#### What Is an AssociationThe semantic relationship between two or more classes that specifies connections among their instances- A structural relationship, specifying that objects of one thing are connected to objects of another#### Relationships: DependencyA relationship between two model elements where a change in one may cause a change in the other.Non-structural, “using” relationship.#### Relationships: GeneralizationA relationship among classes where one class shares the structure and/or behavior of one or more classesDefines a hierarchy of abstractions in which a subclass inherits from one or more superclasses- Single inheritance- Multiple inheritancean “is-a-kind of” relationship#### Relationships: RealizationOne classifier serves as the contract that the other classifier agrees to carry out### Diagrams in the UMLThe UML1.x includes nine such diagrams:- Use-case diagrams: to illustrate requirement.- Class diagrams: to illustrate logical structure.- Object diagrams: to illustrate objects and links.- State diagrams: to illustrate behavior.- Component diagrams: to illustrate physical structure of the software.- Deployment diagrams: to show the mapping of software to hardware configurations.- Interaction diagrams (i.e., collaboration and sequence diagrams): to illustrate behavior.- Activity diagrams: to illustrate the flow of events in a use-case.A diagram is a view into a modelA model is a complete description of a system from a particular perspective## 规则命名规定对要素(事物)、关系、图命名。例如：student为一个类的名字范围UML成员所定义的内容起作用的上下文环境。可视性UML成员能被其他成员引用的方式。三种：- public（+）：公共- protected（#）：保护- private（-）：私有完整性保证事物正确、一致地相互联系。执行运行或模拟动态模型的含义是什么## UML的公共机制UML的公共机制有：- 规范说明- 修饰- 通用划分- 扩展机制### 规格说明，pecificationUML对每一个元素都有确定的图形表示符号，但对该图形符号还有语法、语义的文字说明。例如，Actor：参与者，UML表示为：### 修饰，adornment图形符号表示一个元素的主要特征，此外，可以加上修饰，表示该元素的其它特征。例如：矩形框表示一个类，有类名，属性，操作等。但也可增加“可视性” 等修饰。### 通用划分（common division）一种保证不同抽象概念层次的机制。有两种通用划分的形式：抽象-实例：例如，类-对象，用例-具体用例接口-实现：接口表示约定，实现表示对约定的实施## Extension mechanism of the UML- Stereotype- Tagged value- Constraint### Extension mechanism - StereotypesA stereotype is an extension of the vocabulary of the UML, allowing you to create new kinds of building blocks similar to existing ones but specific to your problem.Stereotypes must be based on certain existing types or classes in the metamodel. Stereotypes may extend the semantics, but not the structure of pre-existing types and classes. Certain stereotypes are predefined in the UML, others may be user defined.### Extension mechanism - Tagged ValuesMany kinds of elements have detailed properties that do not have a visual notation. In addition, users can define new element properties using the tagged value mechanism.A tagged value is an extension of the properties of a UML element, allowing you to create new information in that element’s specification.A tagged value is a keyword-value pair that may be attached to any kind of model element. The keyword is called a tag.Common examples of tagged values are：- {Author = (Dave,Ron)}- {Version Number = 3}- {Location = d:\java\uml\examples}- {Location = Node: Middle Tier}### Extension mechanism - ConstraintA constraint is an extension of the semantics of a UML elements, allowing you to add new rules or to modify existing ones.Constraints may be written as free-form text. If you want to specify your semantics more precisely, you can use the UML’s Object Constraint Language (OCL).### 小结- Modeling Comments - use notes- Modeling New Building Blocks - use stereotype.- Modeling New Properties - use tagged values.- Modeling New Semantics - use constraint## UML的4+1视图## UML可以用在系统开发的各个阶段- 业务模型：业务用例图，活动图，状态图，实体图；- 需求模型：用例图，活动图，状态图等- 逻辑模型：类图，交互图，活动图，状态图等- 设计模型：类图，交互图，活动图，状态图等- 实现模型：构件图等- 测试模型：用例图，类图，交互图等## 用例A sequence of actions a system performs that yields an observable result of value to a particular actorUML中用例用椭圆表示，使用动宾结构或主谓结构命名。### 用例的特点- 用例从使用系统的角度描述系统中的信息，即站在系统外部查看系统功能，不反映功能的实现方式。- 用例描述用户提出的一些可见需求，对应一个具体的用户目标。- 用例反映系统与用户的一次交互过程，应该具有交互的信息的传递。- 用例是对系统行为的描述，属于UML的动态建模部分。- 通过读卡机，储户插入ATM卡- ATM系统从卡上读取银行ID、帐号、并验证帐号。- 储户键入密码，系统检验密码。- 储户按确认键，输入取款金额。- ATM把帐号和取款金额传递给银行系统，取回帐户余额。- ATM输出现金，并显示帐户余额。- ATM记录事务到日志文件。## What Is an Actor- Actors are not part of the system.- Actors represent roles a user of the system can play(扮演).- They can represent a human, a machine, or another system.- They can actively interchange（交换） information with the system.- They can be a giver of information.- They can be a passive recipient of information.Actors are EXTERNAL.### 参与者参与者(actor)是指系统以外的、需要使用系统或与系统交互的事物，包括: 人、设备、外部系统等。其它译名有: 活动者、执行者、行动者等。例，一个银行业务系统中的参与者：1. 客户：从系统获取信息并执行金融交易2. 管理人员：创建系统的用户，获取并更新信息3. 厂商：接受作为转账支付结果的资金4. Mail系统：与系统交互，发送或接收邮件An actor represents a role that a human, hardware device, or another system can play.UML中的Actor实际上是一个版型化的类, 可以有三种表示形式：由于Actor实际上是一个类, 因此它们之间可以存在一定的关系,如：## 脚本脚本(scenario)在UML中指贯穿用例的一条单一路径，用来显示用例中的正常和特殊情况。系统在某个特定的执行期内所发生的一系列事件。其它译名：情景、场景、情节、剧本。每个用例有一系列脚本，包括一个主要脚本，以及几个次要脚本。相对于主要脚本，次要脚本描述了执行路径中的异常或可选择的情况。## 用例之间的关系用例与参与者之间：关联(association)关系。用例之间的关系有：泛化(generalization)、包含(include)、扩展(extend)等。### 关联关系参与者与用例之间是关联关系，表示参与者与用例之间具有使用，交互信息的关联。### 泛化关系泛化关系代表一般与特殊的关系，与继承类似。在泛化关系中，子用例继承了父用例的行为和含义，子用例也可以增加新的行为和含义或覆盖父用例中的行为和含义。### 包含关系包含关系是指一个用例（基本用例）的行为包含了另一个用例（包含用例）的行为。包含关系是依赖关系的版型。### 扩展关系扩展关系的基本含义与泛化关系类似，但对扩展用例有更多限制, 即基本用例必须声明若干“扩展点”，扩展用例只能在扩展点上增加行为和含义，以扩展到新用例。扩展关系是依赖关系版型。### 关系比较- 扩展关系的基本用例是 well formed 的。一个基本用例执行时，可以执行或不执行扩展用例。- 包含关系的基本用例可以不是或是 well formed 的。执行基本用例时，一定会执行包含用例。- 需要重复处理两个或多个用例时吗，可以考虑包含关系。- 处理正常行为的变型且只是偶而描述时，可以考虑只使用泛化关系。- 处理正常行为的变型且希望采用更多控制方式时，可以在基本用例中设置扩展点，使用扩展关系。## 用例的描述- 用例描述是指对一个用例的功能进行的文字描述，是参与者与系统交互动作序列的说明。- 用例描述才是用例的主要部分，是后续的交互图分析和类图分析必不可少的部分。- 用例采用自然语言描述参与者与系统的交互行为，要易于理解，其读者是开发人员、用户、项目经理、测试人员等。### 错误描述### 正确描述### 用例规约的主要组成- 用例名称- 用例标识- 涉及的参与者- 描述- 用例的规格说明- 前置条件 PreConditions- 后置条件 PostConditions- 正常事件流 Flow of events- 备选事件流 Alternate flow- 其它- 非功能需求、设计约束、尚存在的问题#### 前置、后置条件-1- 前置条件约束在用例开始前系统的状态- 把它们看做是看门人，它阻止参与者触发该用例直到满足所有条件- 说明在用例触发之前什么必须为真- 后置条件约束用例执行后系统的状态- 用例执行后什么必须为真- 对于有多个事件流的用例，则应该有多个后置条件#### 事件流描述要点- 只书写“可观测”的语句、- 系统通过ADO建立数据库连接，传送SQL查询语句，从“商品表”查询商品的详细信息……- 系统按照查询条件搜索商品的详细信息- 使用主动语句- 句子必须以参与者或系统作为主语- 出纳员接收顾客的付款—顾客的付款数可能高于商品总额- 出纳员录入顾客所付的现金总额- 系统显示出应找还给顾客的余额，打印付款收据- 不要涉及界面细节- 会员从下拉框中选择类别- 会员在相应文本框中输入查询条件- 会员点击“确定”按钮- 分支和循环- 分支：参与者的选择- 分支：另一条成功线路- 分支：系统进行验证- 循环：直接描述## 寻找用例的方法- start with actors, then identify what they want to do What functions will the actor want from the system- 系统是否存储和检索信息- Are any actors notified when the system changes ?- Are there external events that notify the system ?- 哪个参与者触发了活动？Which actors trigger activity ?## 用例的常见问题分析### 用例的粒度问题对于一个目标系统进行用例分析后得到的用例数目有多少比较合适?- 用例要有路径，路径要有步骤；而这一切都是可观测的- 最常犯错误：粒度过细，陷入功能分解。过细的粒度，一般都会导致技术语言的描述，而不再是业务语言。如把步骤当用例，或者把系统活动当用例。## 用例模型- 用例模型包括：- 系统边界- 参与者- 用例- 用例图- 用例描述- 是面向对象设计的输入- 是开发部门与顾客之间的合同- 是软件设计部门与软件工程师之间的合同- 是开发部门领导、非直接开发人员，了解系统的主要信息来源## 交互图的概念- 交互图(interaction)：用来描述对象之间及对象与参与者之间的动态协作关系，以及协作过程中行为次序的图形文档。- 交互图的类型：顺序图，协作图- 交互图的作用：用于描述用例的行为，显示该用例中所涉及的对象和这些对象之间的消息传递情况。## 顺序图的概念顺序图(sequence diagram)：用来描述为了完成确定事务，对象之间按照时间进行消息交互的顺序关系。### 对象及命名### 生命线表示对象存在的时间，对象下面一条虚线表示。### 控制焦点(Focus of Control, FOC)小矩形，表示这个时间段内对象将执行操作。#### 激活期- 休眠的对象收到一个消息时，开始活动，称为激活- 激活的对象要么执行自己的代码，要么在等待另一个对象的返回- 激活期外，对象处在休眠期，什么事都不做，但它仍然存在，等待消息的激活### 消息带箭头的连线，表示对象之间传输的信息。#### 消息解释对象之间传输的信息。消息有以下类型：##### 调用消息（procedure call）- 调用消息(也称为同步消息)的发送者把控制传递给接收者，然后停止活动，等到消息接收者放弃或返回控制。- 调用消息必有一个与之配对的返回消息, 但是可以不用画出.#### 异步消息异步消息的发送者通过消息把信号传递给接收者，然后继续自己活动，不等待接收者返回消息或控制。#### 返回消息返回消息表示从过程调用返回。如果是从过程调用返回，则返回消息是隐含的，可以不画出来。对于非过程调用，如果有返回消息，必须画出来。#### 消息的语法格式- display (x,y) 简单消息- p:= find (specs) 嵌套消息，消息带返回值、- [x&lt;0]5: invert (x,color) 条件消息- [i:=1..n]: update() 循环消息### 建立顺序图1. 从用例中识别交互过程;2. 识别参与交互过程的对象;3. 为每一个对象设置生命线,并确定对象的存在期限;哪些对象存在于整个交互过程，哪些对象在交互过程中被创建和销毁。4. 从引发交互的初始消息开始,在对象生命线上依次画出交互的消息;### Use Case：Register New Member1. The customer fills out an application form containing the customer’s name, address and phone number and gives this to the clerk.2. The clerk issues a request to add a new member.3. The system asks for data about the new member.4. The clerk enters the data into the system.5. Reads in data, and if the member can be added, generates an identification number for the member and remembers information about the member. Informs the clerk if the member was added and outputs the member’s name, address, phone and id.6. The clerk gives the user his identification number.### Use Case：Adding New Book1. The library receives a shipment of books from the publisher2. The clerk issues a request to add a new book.3. The system asks for the identifier, title, and author name of the book.4. The clerk generates the unique identifier, enters the identifier, title, and author name of a book.5. The system attempts to enter the information in the catalog and informs the clerk about the result. It then asks if the clerk wants to enter information about another book.6. The clerk answers in the affirmative or in the negative.7. If the answer is in the affirmative, the system goes to Step 3. Otherwise, it exits.## 用例：借书- 参与者：图书管理员- 事件流：1. 管理员进入图书借阅界面，用例开始。2. 管理员输入借书证上的读者编号。3. 系统检验借书证合法性吗，如果正确,则显示借阅者(姓名、学院、年级等信息)及其以前所借图书的信息。- A1：借书证编码有错。- A2: 如果该借阅者所借图书已经超期，则提示，本次拒借。4. 管理员输入图书条码。5. 系统显示所借图书的信息。6. 管理员确认借书，系统保存借书信息（包括时间，读者号，图书编号等）。7. 用例结束。## 协作图- 协作图的概念：用来描述系统的行为是如何由系统的成分协作实现的图，各对象之间消息联系的结构关系。- 协作图样式和元素：### 建立协作图1. 从用例中识别交互过程;2. 识别参与交互过程的对象;3. 确定对象之间的链，以及链上的消息;4. 从引发交互的初始消息开始,将随后每个消息附在相应的链上;### 顺序图与协作图的异同- 顺序图和协作图都属于交互图,用来描述对象之间的动态关系。- 顺序图强调消息的时间顺序，协作图强调参与交互的对象的组织关系。- 顺序图和协作图在语义上是等价的，两者可以相互转换。#### 写出Class A伪代码## 图书馆还书处理的交互图用例：还书参与者：图书管理员事件流：- 管理员进入图书借阅界面，用例开始。- 系统要求输入读者编号及所还图书的条码。管理员输入相应信息。- 系统显示所还图书的图书、读者信息、借书记录信息。- 图书管理员确认还书（登记还书时间）。- 用例结束。### 识别交互过程读者在还书时，先由管理员把借书证上的读者编号及所借图书的图书编号扫描给系统，系统接收到这个信息，则显示这个该读者信息,以及这本书的信息、借书记录信息。管理员确认还书,则系统登记还书信息，并返回还书成功信息，还书过程完成。### 画图## 类的概念类的定义：类(class): 具有相似结构、行为和关系的一组对象。缩略表示：## 类的版型### 边界类边界类位于系统与外界的交界处,承担系统与外界的信息交互功能。边界类处在用例图中，参与者与用例的关联处，可以根据用例图发现边界类。### 实体类实体类对应着现实中的客观实物，用来保存信息，一般对应着数据表、文件等。实体类可以从现实中存在的客观事物，以及需要持久存放的信息两方面来发现。### 控制类控制类负责其他类工作的类，控制调控的作用。一个用例中最少会有一个控制类，用来控制用例中的事件顺序，也可以在多个用例之间共用。控制类较少接收消息，发出较多(控制)消息。## 类之间的关系### 关联模型元素之间的一种语义联系,它是对具有共同的结构特性、行为特性、关系和语义的链接（link，对象之间物理上或概念上的连接）的描述。关联可以分为单向关联，双向关联。#### 关联的特性- 关联名：用来描述关联的作用。- 关联的角色：关联的两端可以以某种角色参与关联。- 关联的多重性：表示可以有多少个对象参与该关联。- 关联类：通过关联类描述关联的属性，操作，及其它信息。- 增加关联类的准则- 有某个属性与关联相关- 关联类的实例具有依赖于关联的生命期- 两个概念之间有多对多关联，并且存在与关联自身相关的信息- ##### 关联的约束通过约束加强关联的含义。例如，“帐户”不能同时与“人”和“公司”有关联。- 限定关联通过限定符(qualifier)来规定关联的限定关系。#### 关联的种类- 一元(自返)关联- 二元关联- 三元关联三元关联是功能齐全的关联，可以有关联类。- 多元关联编程语言不能表示多元关联，需要提升为一个类### 聚集和组合#### 聚集聚集(aggregation): 表示类之间一种松散的整体与部分的组成关系，是一种特殊的关联。#### 组合组合(composition)：表示类之间一种紧密的整体与部分的组成关系，也是一种特殊的关联。#### 聚集与组合的区别- 聚集松散，组合紧密- 一个部分事物对象可以属于多个聚集对象,但一个部分事物对象仅能属于一个组合对象- 聚集的对象生命周期可以不同,但组合对象则是同存同亡。### 泛化泛化(generalization)：表示事物之间的一般与特殊的关系；也可以称为继承关系。泛化关系除了表示类与类之间的关系之外，还可以表示参与者、用例、包、构件、接口等建模元素之间的关系。### 依赖依赖(dependency): 表示两个元素X、Y，如果X的变化必然导致Y的变化，则称Y依赖X。依赖关系不仅限于类，用例、包、构件之间都可以存在依赖关系。 如果类A和类B有关联关系，那么就有依赖关系。只表示出关联关系，不用表示出依赖关系。依赖关系本身不生成专门的实现代码。### 派生属性和派生关联派生属性和派生关联的概念：可以从其它属性或关联计算推演得到的属性和关联。在派生的名字前面加/，以示区别。派生容易产生不一致，应注意。#### 抽象类和接口抽象类：只有声明，没有具体实现，不能实例化；接口：不包含属性，只有方法声明## 类图类图(Class Diagram): 是由类，相关建模元素（接口、包），及其关系构成的图，用来描述类之间的静态关系。类图在系统中处在核心位置。也是UML中最为重要的一种图。售票系统的类图：顾客可多次订票，但每一次订票只能由一个顾客来执行。有两种订票方式：个人票或套票；前者只是一张票，后者包括多张票。每一张票不是个人票就是套票中的一张，但是不能又是个人票又是套票中的一张。每场演出都有多张票可供预定，每张票对应一个唯一的座位号。每次演出用剧目名、日期和时间来标识。### 类图的抽象层次在系统的不同开发阶段，类图可以具有不同的抽象程度。随着开发的深入，类图应该越来越详细、具体。可以分为：概念层，说明层，实现层。### 构造类图#### 寻找类的方法- 根据用例描述中的名词确定候选类。- 根据边界类、控制类和实体类的划分来帮助发现类。- 参考设计模式来确定类。- 根据软件开发过程的指导寻找类。#### 构造类图时注意- 不要试图使用所有的符号，20％的建模元素能满足80％的建模需求。- 不要过早陷入细节, 根据不同阶段，采用不同层次类图，逐步细化。- 构造完成要将模型与目标问题对照验证其是否合理，是否反应了应用领域的实际情况。## 对象图&gt; 对象图的概念对象图表示一组对象及其它们之间的联系。对象是系统的详细状态在某一时刻的快照，通常用来表示复杂类图的一个实例。&gt; 说明- 对象图并不在任何时间都是必须的；- Rose2003不支持对象图。## 类的关系具有四种- 关联：表示类中对象之间的链接关系- 组成：表示事物之间的整体和部分关系，（聚合，组合）- 泛化：表示事物的一般和特殊关系- 依赖：事物之间的因果关系## 状态图状态图(state chart diagram)：用来描述一个特定的对象所有可能的状态，以及由于各种事件的发生而引起的状态之间的转移和变化。## 状态图的要素—–状态### 概念是指对象在其生命周期中，满足某些条件、执行某些活动、或等待某些事件时的一个状况（时间段）。### 状态的表示和要素- 状态的表示：用圆角的矩形框表示状态。- 状态的要素：包括状态名，进入/退出动作、内部转移，子状态等。eg:### 状态的类型初态、终态、中间状态、组合状态、历史状态等。一个状态图只能有一个初态，但是结束状态可能有多个，也可以没有终态。#### 组合状态和子状态嵌套在另一个状态中的状态称为子状态;包含子状态的状态称为组合状态.#### 历史状态历史状态是伪状态, 其目的是记住从组合状态中退出时所处的子状态, 当再次进入组合状态时, 可以直接进入这个子状态, 而不是再从组合状态的初态开始.- 浅(shallow)历史状态，只记住最外层组合状态的历史- 深(deep)历史状态, 可以记住任意深度的组合状态的历史.## 状态图的要素—–转移转移(transition): 是一个状态向另外一个状态的转换（瞬时变化）。转移是两种状态之间的一种关系，表示对象将在第一个状态执行一定的动作，并在某个特定事件发生且满足某个特定的警戒条件时进入第二个状态。转移的格式：event-name [‘(‘parameters’)’] [‘[’guard-condition’]’] [’/’action]对于一个给定的状态，最终只能产生一个转移，因此从一个状态出发的几个转移之间应该是互斥的，包括：事件不同；事件相同但警戒条件互斥。## 状态图的要素—–事 件### 概念事件(event)：是指在确定的时间和位置所发生的对于对象起作用的事情。事件的发生将引起一些动作，使对象发生状态的转移。动作（action）：动作是对象类中一个操作的执行，动作具有原子性和不可中断特性。### 描述事件名称[参数表]- 字符串，常为接收对象类中的一个操作。- 事件的形式参数，可以省略### 事件的类型- 调用事件(call event)：是表示对操作的调用- 变化事件(change event)：因满足某种条件（参量变化）而引起的事件，变化条件用when表示。(由满足布尔表达式而引起的事件，不断测试表达式，直到表达式为真)- 时间事件：满足某一时间表达式而引起的事件,时间事件用after,when表示。## 状态图的作用用来描述一个对象在其生命周期中所表现出来的状态和行为。当在系统建模过程中需要描述某个事物或对象的不同状态，以及状态之间转移的事件和动作时，用状态图。 但状态图并不是对每一个对象都需要的。## 如何绘制状态图1. 选择对象与视点2. 寻找主要的状态3. 确定状态之间的转移（换）4. 细化状态内的活动与转换5. 用组合状态来展开细节## 活动图活动图(activity diagram)是UML的动态视图之一，用来描述系统的工作流程和并发行为。活动图是状态图的一个变体，活动图中一个活动结束后将立即进入下一个活动（不需要事件的触发）。### 使用活动图- 活动图的用途是对人类组织的现实世界中的工作流程建模。- 也可以对具体操作建模，用于描述计算过程的细节。- 活动图有助于理解系统高层活动的执行行为，而不涉及建立交互图所必须的消息传送细节。- 软件公司可以用活动图对一个软件的开发过程建模；- 会计师事务所可以用活动图对任意数目的财务往来进行建模；- 贸易公司可以用活动图对订单批准过程进行建模；- 科研人员还可以对诸如求Fibonacci数列第n个数的数值之类的操作进行建模。## 活动图的要素### 活动是活动图主要结点,用两边为弧的条形框表示,中间填活动名 。### 活动流（控制流）描述活动之间的有向关系，反映一个活动向另外一个活动之间的转移。用带箭头的实线表示。### 分支表示从一个活动按照某种条件转移到几个不同的活动。### 分叉和汇合表示并发的同步行为，用同步杆表示。分叉表示一个控制流被多个控制流替代，替代后的控制流是并发的。汇合与分叉含义相反。### 泳道是活动图中的区域划分，每一个泳道代表一个责任区域。一个泳道中包括一组相关活动。### 对象流反映活动与对象之间的依赖关系，表示对象对活动的作用或活动对对象的影响，用依赖关系表示。## 活动图的用途活动图具有广泛地用途,在软件建模中,活动图可以用来：- 描述工作流：也被称为业务流程，通常对于涉及众多参与者的非常复杂的业务流程建模，简单的业务流程，用例文本就够用了。总之，分析理解用例。- 用户下订单后，填写收货信息，选择支付方式，如果用户想要取消订单或订单超过了时限则该订单取消，否则系统处理付款，生成送货单，然后由供应商发货，修改订单项状态，然后等所有的订单项全都送货完毕，这样一笔订单就完成了。-描述算法流程例绘制一张活动图，描述登录电子邮件系统的细节。状态图与活动图的比较都是对系统的动态行为建模描述对象不同状态图：描述对象状态及状态之间的转移；活动图：描述从活动到活动的控制流。使用场合不同状态图：描述对象在其生命期中的行为状态变化；状态图中的动作和事件对应类模型中对象上的操作。活动图：描述工作流程的过程变化。分析用例、理解涉及多个用例的工作流程等。OOADWhat is Analysis ?Analysis is investigation of the problem and requirements, rather than a solution.For example, if a new online trading system is desired,how will it be used? What are its functions?requirements analysis ：an investigation of the requirementsWhat is design?Design is a conceptual solution that fulfills the requirements 概念性的、满足 需求的解决方案Design is a conceptual solution that fulfills the requirements。What is OOAfinding and describing the objects or concepts in the problem domainWhat is OODdefining software objects and how they collaborate to fulfill the requirementsFor example, Airplane example of object and class discoveryOOAin the case of the flight information system, some of the concepts include：Plane, Flight, and Pilot.OODa Plane software object may have a tailNumber attribute and a getFlightHistory() method.OOAD Simple ExampleRudimentary（最基本的过程） processDice game exampleStep1: Use CasePlayer is requested to roll the dice.System presents results:If the dice face value totals (&gt;=)seven, player wins; otherwise, player losesStep2: Domain ModelOOA的结果体现在领域模型中，显示重要的领域概念或者对象What is domain model?a visual representation of conceptual classes or real-situation(真实) objects in a domain.Domain models have also been called conceptual models , domain object models, and analysis object models.有哪些概念类呢？Step3: InteractionsAssignment of responsibilities among objectsSequence or Communication diagrams在现实里，是Player扔的骰子。在软件设计中，由DiceGame 对 象 扔 骰 子dice (给Dice 对象发送一个消息)。 软件设计需要从真实世界的事物中获取一些灵感、启发，但是，不能完全模仿真实世界。Step4: Design Class Diagrams (DCD)Software classes（软件类） with methods according to responsibilities and attributes according to visibilitythe domain model showing real-world classesthis diagram shows software classesObject Oriented AnalysisIdentifying objects 识别对象Organising the objects: 组织对象classifying the objects identified, so similar objects can later be defined in the same class.Identifying relationships between objects: 定义对象之间的关系this helps to determine inputs and outputs of an object.Defining operations of the objects: 定义对象的操作the way of processing data within an object.Also known as ‘responsibility assignment’这一步，主要在设计阶段完成Defining objects internally: 定义对象内部细节information held within the objects.名词法定义概念名词法定义概念类The system controls a recycling machine for returnable bottles, cans and crates. The machine can be used by several customers at the same time and each customer can return all three types of item on the same occasion. The system has to check, for each item, what type has been returned.The system will register how many items each customer returns and when the customer asks for a receipt, the system will print out what was deposited , the value of the returned items and the total return sum that will be paid to the customer.recycling machinebottles, cans, and cratesmachinecustomers, customertypes of item, item, type, returned itemssystemreceipt(收据)return sum分析模型法用于描述系统规格说明一个健壮、稳定的模型，必须与实现环境无关实现环境的任何变化，不会影响到系统的逻辑结构分析模型能够关注到系统的信息、行为、展示（输入/出）等特性特性：Behaviour - Information - PresentationThe model is defined in information - behaviour - presentationspace.分析模型的语义An entity object models information that shows the state of a system. This information is often used to record the effects of operations and therefore is related to the behaviors of the system.A boundary/interface object models inputs and outputs and operations that process them.A control object models functionality/operations regarding to validate and decide whether to process and pass information from the interface object to the entity object or the way around.分析模型的使用Identifying interface objectsfunctions directly related to actorsIdentifying entity objectsinformation used in an use case and functions of processing the informationIdentifying control objectsfunctions that link interface objects and entity objects1.4 分析模型案例：废品回收机Identifying interface objects：Printer Customer PanelIdentifying entity objectsCrate, Bottle, CanDeposit itemReceipt basisIdentifying control objectsDeposit item receiverCRCClasses (of objects) 类Responsibilities (of the objects in each class) 职责Collaborations (with objects in other classes) 协作In UML, these will be examples of “associations”Domain ModelsA domain model is a representation of real-world conceptual classesnot a representation of software components.not a set of diagrams describing software classes,not software objects with responsibilities.A domain model is a visual representation of conceptual classes or real-world objects in a domain of interestThey have also been called conceptual models, domain object models, and analysis object models.Domain Modeling GuidelinesA Common Mistake in Identifying Conceptual ClassesPerhaps the most common mistake when creating a domain model is to represent something as an attribute when it should have been a concept.A rule of thumb (经验法则)to help prevent this mistake is:If we do not think of some conceptual class X as a number or text in the real world, X is probably a conceptual class, not an attribute.As an example, should store be an attribute of Sale, or a separate conceptual class Store?In the real world, a store is not considered a number or text - the term suggests a legal entity, an organization, and something occupies space. Therefore, Store should be a concept.As another example, consider the domain of airline reservations. Should destination be an attribute of Flight, or a separate conceptual class Airport?In the real world, a destination airport is not considered a number or text—it is a massive thing that occupies space. Therefore, Airport should be a concept.What are System Sequence Diagrams?A system sequence diagram (SSD) is a picture that shows, for a particular scenario of a use case, the events that external actors generate, their order and inter-system （与系统交互）eventsAll systems are treated as a black box; the emphasis of the diagram is events that cross the system boundary from actors to systemsGuidelineDraw an SSD for a main success scenario of each use case, and frequent or complex.alternative scenariosThe Relationship between SSDs and Use Cases?Why draw SSD?Basically, a software system reacts to three things:external events from actors (humans or computers),timer events,faults or exceptions (which are often from external sources).It is useful to know what, precisely, are the external input events— the system events. They are an important part of analyzing system behaviorBefore proceeding to a detailed design of how a software application will work, it is useful to investigate and define its behavior as a “black box.“System behavior is a description of what a system does, without explaining how it does it.One part of that description is a system sequence diagram(SSD)Other parts include the use cases and system operation contractsWhat is Contract?(契约)Example : enterItemOperation: enterItem(itemID:ItemID,quantity:integer)Cross References: Process SalePreconditions: There is a sale underwayPostconditions:A SalesLineItem instance sli was created(instance creation)sli was associated with current Sale(association formed)sli.quantity became quantity(attribute modification)Sli was associated with a ProductDescription, based on itemID match (association formed)分层架构可以做到关注分离（separation of concerns），减少耦合和依赖性，增强内聚性封装和分解了相关的复杂性某些层可以被替换（例如UI层）较低层可以被复用通过逻辑划分，有助于团队开发Designing Objects(对象设计)Static modeling (Design Class Diagram, Package)Dynamic modeling (Sequence and Communication Diagram)Principles of responsibility assignmentDesign PatternGRASPGeneral Responsibility Assignment software patterns.Doing responsibilities of an object include:doing something itself, such as creating an object or doing a calculationinitiating action in other objectscontrolling and coordinating activities in other objectsKnowing responsibilities of an object include:knowing about private encapsulated dataknowing about related objectsknowing about things it can derive or calculateFor example“a Sale is responsible for creating SalesLineItems” (a doing),“a Sale is responsible for knowing its total” (a knowing).GRASPGRASP - CreatorProblem:Who creates an A?SolutionAssign class B the responsibility to create an instance of class A if one of these is true (the more the better):B “contains” or compositely aggregates A.B records A.B closely uses A.B has the initializing data for A.GRASP - Information ExpertProblem:What is a basic principle by which to assign responsibilities to objects?SolutionAssign a responsibility to the class that has the information needed to fulfill it.GRASP - Low CouplingProblem:How to reduce the impact of change?SolutionAssign responsibilities so that (unnecessary) coupling remains low.Use this principle to evaluate alternatives.DiscussionWhat is Coupling ？面向对象语言中，TypeX到TypeY耦合的常见形式？GRASP - ControllerProblem:What first object beyond the UI layer receives and coordinates (“controls”) a system operation?SolutionAssign the responsibility to an object representing one of these choices:Represents the overall “system,” a “root object,” a device that the software is running within, or a major subsystem (these are all variations of a facade controller). 外观控制器Represents a use case scenario within which the system operation occurs (a use case or session controller)，Handler. 会话控制器GRASP - High CohesionProblem:How to keep objects focused, understandable, and manageable, and as a side effect, support Low Coupling?SolutionAssign responsibilities so that cohesion remains high.Use this to evaluate alternatives.OO设计的原则开闭原则(Open/Closed Principle, OCP)Liskov替换原则(Liskov Substitution Principle, LSP)依赖倒置原则(Dependency Inversion Principle, DSP)接口分离原则(Interface Segregation Principle, ISP)GoF设计模式的分类创建型：抽象了创建对象的过程，使得系统不依赖于系统中的对象是如何创建、组合和表示的。例如：Factory method, Singleton.结构型：描述如何组合类和对象。例如：Adapter，Façade行为型：描述算法和对象间职责的分配。主要考虑对象之间的通信方式。例如：Iterator, Visitor]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高德API使用-查询市内公交]]></title>
    <url>%2F2019%2F%E9%AB%98%E5%BE%B7API%E4%BD%BF%E7%94%A8-%E6%9F%A5%E8%AF%A2%E5%B8%82%E5%86%85%E5%85%AC%E4%BA%A4%2F</url>
    <content type="text"><![CDATA[POJOlocation.java1234567891011121314151617181920212223242526272829package pojo;public class Location &#123; private String key; private String location; private String city; public String getLocation() &#123; return location; &#125; public void setLocation(String location) &#123; this.location = location; &#125; public String getCity() &#123; return city; &#125; public void setCity(String city) &#123; this.city = city; &#125; public String getKey() &#123; return key; &#125; public void setKey(String key) &#123; this.key = key; &#125; @Override public String toString() &#123; return "Location [key=" + key + ", location=" + location + ", city=" + city + "]"; &#125;&#125;RoutePojo.java12345678910111213141516171819202122232425262728293031package pojo;import java.util.List;public class RoutePojo &#123; private long time; // 秒 private double cost; // 元 private List&lt;SegmentPojo&gt; segments; // 分段信息 public long getTime() &#123; return time; &#125; public void setTime(long time) &#123; this.time = time; &#125; public double getCost() &#123; return cost; &#125; public void setCost(double cost) &#123; this.cost = cost; &#125; public List&lt;SegmentPojo&gt; getSegments() &#123; return segments; &#125; public void setSegments(List&lt;SegmentPojo&gt; segments) &#123; this.segments = segments; &#125; @Override public String toString() &#123; return "RoutePojo [time=" + time + ", cost=" + cost + ", segments=" + segments + "]"; &#125;&#125;SegmentPojo.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package pojo;/** * 一段路径。RoutePojo的一段，有步行、公交、地铁 * @author ISJINHAO */public class SegmentPojo &#123; private String type; private String start; private String end; private String vias; private String name; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getType() &#123; return type; &#125; public void setType(String type) &#123; this.type = type; &#125; public String getStart() &#123; return start; &#125; public void setStart(String start) &#123; this.start = start; &#125; public String getEnd() &#123; return end; &#125; public void setEnd(String end) &#123; this.end = end; &#125; public String getVias() &#123; return vias; &#125; public void setVias(String vias) &#123; this.vias = vias; &#125; @Override public String toString() &#123; return "SegmentPojo [type=" + type + ", start=" + start + ", end=" + end + ", vias=" + vias + "]"; &#125;&#125;查询经纬度，由经纬度查询市内公交package test;import java.util.ArrayList;import java.util.List;import org.apache.http.HttpEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.util.EntityUtils;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import pojo.Location;import pojo.RoutePojo;import pojo.SegmentPojo;public class GaoDeUtils &#123; private static CloseableHttpClient httpClient = HttpClientBuilder.create().build(); /** * @param origin * 起点经纬度 * @param dst * 终点经纬度 * @param city * 城市名 * @param strategy * 0：最快捷模式; 1：最经济模式; 2：最少换乘模式; 3：最少步行模式; 5：不乘地铁模式 * @param dateTime（可选） * 日期时间，格式：2014-03-19 22:34 * @return */ public static RoutePojo cityInnerGuide(String origin, String dst, String city, String strategy, String... dateTime) &#123; String url = "https://restapi.amap.com/v3/direction/transit/integrated?strategy=" + strategy + "&amp;origin=" + origin + "&amp;destination=" + dst + "&amp;key=d4393e4b379c905601d89f62b8c0c0aa&amp;city=" + city; // 处理日期时间 int argsNum = dateTime.length; if (argsNum &gt; 1) &#123; return null; &#125; else if (argsNum == 1) &#123; url = url + "&amp;date=" + dateTime[0].split(" ")[0] + "&amp;time=" + dateTime[0].split(" ")[1]; &#125; // 创建Get请求 HttpGet httpGet = new HttpGet(url); // 响应模型 CloseableHttpResponse response = null; try &#123; // 由客户端执行(发送)Get请求 response = httpClient.execute(httpGet); // 从响应模型中获取响应实体 HttpEntity responseEntity = response.getEntity(); if (responseEntity == null) return null; // 整个结果 JSONObject result = JSON.parseObject(EntityUtils.toString(responseEntity)); // 和路径有关的信息 JSONObject routes = result.getJSONObject("route"); // 查询出来的路径个数// int ways = Integer.parseInt(result.getString("count")); // 所有路径的详细信息 JSONArray transits = routes.getJSONArray("transits"); // for (int i = 0; i &lt; ways; i++) &#123; // 一条路径 JSONObject route = (JSONObject) transits.get(0); RoutePojo rp = new RoutePojo(); // 此路径的花费 rp.setCost(Double.valueOf(route.getString("cost"))); // 此路径的时间 rp.setTime(Long.valueOf(route.getString("duration"))); // 每条路径的分段 JSONArray segments = (JSONArray) route.get("segments"); // 每条路径经过的 段数 int segmentsSize = segments.size(); List&lt;SegmentPojo&gt; segList = new ArrayList&lt;&gt;(); for (int j = 0; j &lt; segmentsSize; j++) &#123; // 每个子段。每个子段都包含三种方式：步行、地铁、公交。地铁和公交不会同时存在。 JSONObject path = (JSONObject) segments.get(j); // 解析 步行 SegmentPojo segWalking = new SegmentPojo(); segWalking.setType("WALKING"); // 如果需要换乘，解析为JSONObject。如果不需要换乘解析为JSONArray try &#123; JSONObject walking = path.getJSONObject("walking"); JSONArray steps = walking.getJSONArray("steps"); int stepSize = steps.size(); String instructions = ""; for (int k = 0; k &lt; stepSize; k++) &#123; JSONObject step = (JSONObject) steps.get(k); String instruction = step.getString("instruction"); instructions = instructions + "`" + instruction; &#125; segWalking.setVias(instructions.substring(1)); &#125; catch (Exception e) &#123; segWalking.setVias("在此站换乘！"); &#125; segList.add(segWalking); // 解析 出租车 // JSONArray taxi = path.getJSONArray("taxi"); int flag = 0; // 如果是公交车，解析为JSONArray，不是公交车，解析为JSONObject try &#123; path.getJSONArray("exit"); &#125; catch (Exception e) &#123; flag = 1; &#125; SegmentPojo segBus = new SegmentPojo(); // 获得bus和sub的信息，字段都是 bus JSONObject bus = path.getJSONObject("bus"); JSONArray buslinesHelp = (JSONArray) bus.getJSONArray("buslines"); if (buslinesHelp.size() &lt; 1) &#123; break; &#125; JSONObject buslines = (JSONObject) buslinesHelp.get(0); JSONArray viaStops = buslines.getJSONArray("via_stops"); // 处理bus和sub的公交经停 String vias = ""; int viaSize = viaStops.size(); for (int k = 0; k &lt; viaSize; k++) &#123; JSONObject stop = (JSONObject) viaStops.get(k); vias = vias + "`" + stop.getString("name"); &#125; if (vias.length() &gt; 0) segBus.setVias(vias.substring(1)); // 设置公交路线 segBus.setName(buslines.getString("name")); // 处理公交车 if (flag == 0) &#123; segBus.setType("BUS"); // 设置起点 JSONObject departureStop = buslines.getJSONObject("departure_stop"); segBus.setStart(departureStop.getString("name")); // 设置终点 JSONObject arrivalStop = buslines.getJSONObject("arrival_stop"); segBus.setEnd(arrivalStop.getString("name")); segList.add(segBus); &#125; else if (flag == 1) &#123; segBus.setType("SUB"); JSONObject exitObject = path.getJSONObject("exit"); // 设置起点 JSONObject departureStop = buslines.getJSONObject("departure_stop"); // 不用换站使用JSONArray解析，换站使用JSONObject解析 try &#123; JSONObject entranceObject = path.getJSONObject("entrance"); segBus.setStart(departureStop.getString("name") + "`" + entranceObject.getString("name")); &#125; catch (Exception e) &#123; segBus.setStart(departureStop.getString("name") + "`在此站换乘！"); &#125; // 设置终点 JSONObject arrivalStop = buslines.getJSONObject("arrival_stop"); segBus.setEnd(arrivalStop.getString("name") + "`" + exitObject.getString("name")); segList.add(segBus); &#125; &#125; rp.setSegments(segList); return rp; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; /** * * @param keyWords * 关键字，务必尽量准确 * @param types * 所有地点：all 交通运输类：150000 机场类：150100 火车站类：150200 公交车：150700 地铁类 150500 * 轻轨类：150600 * @param city * 限定查询的城市 * @return */ public static Location getLocation(String keyWords, String types, String city) &#123; Location loc = new Location(); loc.setKey(keyWords); String url = "https://restapi.amap.com/v3/place/text?keywords=" + keyWords + "&amp;city=" + city + "&amp;key=d4393e4b379c905601d89f62b8c0c0aa&amp;offset=1&amp;page=1&amp;extensions=all"; if (!"all".equals(types)) &#123; url = url + "&amp;types=" + types; &#125; // 创建Get请求 HttpGet httpGet = new HttpGet(url); // 响应模型 CloseableHttpResponse response = null; try &#123; // 由客户端执行(发送)Get请求 response = httpClient.execute(httpGet); // 从响应模型中获取响应实体 HttpEntity responseEntity = response.getEntity(); if (responseEntity == null) return null; JSONObject result = JSON.parseObject(EntityUtils.toString(responseEntity)); System.out.println(result); if ("0".equals(result.getString("count"))) return null; // 获得第一个poi JSONObject poi = (JSONObject) result.getJSONArray("pois").get(0); // 经纬度 String location = poi.getString("entr_location"); // 结构化城市名：省（直辖市）`市（直辖市）`县区 String structureName = poi.getString("pname") + "`" + poi.getString("cityname") + "`" + poi.getString("adname"); loc.setLocation(location); loc.setCity(structureName); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; if("[]".equals(loc.getLocation())) return null; return loc; &#125;&#125;]]></content>
      <categories>
        <category>高德API</category>
      </categories>
      <tags>
        <tag>高德API</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件开发文档用图]]></title>
    <url>%2F2019%2F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E7%94%A8%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[系统流程图表达的是数据在系统各部件之间流动的情况，但不表达对数据进行加工处理的控制过程。基本思想：用图形符号以黑盒子形式描绘组成系统的每个部件（程序，文档，数据库，人工过程等），表达数据在系统各部件之间流动的情况。符号装配厂供货流程图某装配厂有一座存放零件的仓库，仓库中现有的各种零件的数量以及每种零件的库存量临界值等数据记录在库存清单主文件中。当仓库中零件数量有变化时，应该及时修改库存清单主文件，如果哪种零件的库存量少于它的库存量临界值，则应该报告给采购部门以便订货，规定每天向采购部门送一次订货报告。该装配厂使用一台小型计算机处理更新库存清单主文件和产生订货报告的任务。零件库存量的每一次变化称为一个事务，由放在仓库中的CRT终端输入到计算机中；系统中的库存清单程序对事务进行处理，更新存储在磁盘上的库存清单主文件，并且把必要的订货信息写在磁带上。最后，每天由报告生成程序读一次磁带，并且打印出订货报告。人工销售教材流程图计算机售书系统流程图e-r图https://isjinhao.github.io/2019/01-%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%AA%E8%AE%BA/数据流图符号通过图形的方法，从数据传递和数据处理的角度，刻画数据流从输入到输出的移动变换过程。数据流三个重要属性：数据流名字数据组成流向银行取款过程的数据流图数据流程图分层顶层流图仅包含一个数据处理，它代表被开发系统。它的输入流是该系统的输入数据，输出流是系统所输出数据底层流图是指其数据处理不需再做分解的数据流图，它处在最底层中间层流图则表示对其上层父图的细化。它的每一数据处理可能继续细化，形成子图商场业务处理系统的分层数据流图商场进货时，先发订货单给供应商，供应商收到订货单，将商品发给商场，商场货到付款，供应商收款后，将收据发给商场；当顾客到商场采购商品时，先下购物订单，商场查询库存中是否有此种商品，若有则发货给顾客；若没有，则向供应商订货，货到之后再销售给顾客；顾客收到货物之后付款，商场开收据给顾客；商场对货物的管理方面要求知道每种货物详细的销售情况。绘制L0层数据流图首先从问题的描述中提取数据流图中的源（终）点、数据处理、数据流和数据存储四种成份。分析源（终）点：将商场的购、销业务系统看成一个整体，外部的与这个系统有交往的对象（机构、人员、或外部系统）是“供应商，和“顾客”，二者是商场购销系统源点和终点。分析数据处理：在顶层数据流图的处理中，用一个整体来表示分析数据流：供应商方 $\rightarrow$ 商场：发货单、货款收据顾客 $\rightarrow$ 商场：订单、货款商场 $\rightarrow$ 供货商：订货单、货款商场 $\rightarrow$ 顾客：货物、收据分析数据存储库存信息暂存订单（缺货订单）采购订单商品销售历史资金帐目绘制L1层数据流图商店业务处理的主要数据处理是销售、采购、会计三大数据处理，三者之间的数据流：销售 $\rightarrow$ 采购：订货通知销售 $\rightarrow$ 会计：收款单会计 $\rightarrow$ 销售：收据采购 $\rightarrow$ 销售：到货通知采购 $\rightarrow$ 会计：付款单绘制L2层数据流图销售细化采购细化教务管理系统某校准备开发一个学生成绩管理系统。在该系统中，教务人员录入学生信息、课程信息和成绩信息，学生可以随时查询自己所选课程的成绩。由于学生成绩属于敏感信息，系统必须提供必要的安全措施以防非法存取。绘制L0层数据流图源点终点：教务人员（源点）；学生（终点）数据处理：将系统当成一个整体“学生成绩管理”数据流：学生信息、课程信息和成绩；（教务人员录入时）查询请求、查询结果（学生查询时）数据文件：成绩文件、学生文件、课程文件。教务人员维护学生信息和课程信息，并登录学生的选课成绩；学生查询自己的成绩单。绘制L1层数据流图“学生信息”是教务人员需要录入的一个信息，因此加入一个加入“录入学生信息” ；同样得到“录入课程信息”、“登记成绩”两个数据处理。另外，数据流“查询请求”和“查询结果”应该由数据处理“查询成绩”来完成。对第 0 层 DFD 的加工“学生成绩管理“进行展开。数据处理：录入学生信息录入课程信息登记学生成绩查询学生成绩数据存储：增加这些数据流对应的数据存储，即“学生”、“课程”和“成绩” ，最后得到如图所示的第 1 层 DFD 。绘制L2层数据流图继续分解第 1 层 DFD 中的加工“查询学生成绩”数据处理：分解为“合法性检查”和“查询成绩”数据文件：合法的查询条件状态转换图语法在状态图中：初态用实心圆表示；终态用一对同心圆（内圆为实心圆）表示。中间状态用圆角矩形表示，可以用两条水平横线把它分成上、中、下3个部分。上面部分为状态的名称（必须）；中间部分为状态变量的名字和值（可选）；下面部分是活动表（可选）。活动表的语法格式事件名(参数表)/动作表达式。在活动表中经常使用下述3种标准事件：entry, exit和do。entry事件指定进入该状态的动作；exit事件指定退出该状态的动作；do事件则指定在该状态下的动作。活动表中的动作表达式描述应做的具体动作。事件表达式的语法事件说明［守卫条件］／动作表达式其中事件说明的语法为：事件名(参数表)。举例结构图模块关系一个方框表示一个模块；一个模块指向另一个模块的箭头或直线，表示前一模块对后一模块的调用；调用直线边的小箭头，表示调用时从一个模块传给另一个模块的数据，也指出了传送方向。四种模块从下属模块取得数据，经过处理，再传入上级模块从上级模块获得数据，经过处理，再传送给下属模块加工模块。从上级模块获得数据，经过处理，转换成其他形式，再送回上级模块对所有下属模块进行协调和管理的模块医院管理系统选择/循环调用变换型SCDFD第一级分解后 SC 的数据流传入分支的分解传出分支的分解中心加工分支的分解事务型SCDFD分解系统设置控制器分解密码处理控制器程序流程图符号(a) 选择(分支)； (b) 注释； (c) 预先定义的处理； (d) 多分支； (e) 开始或停止； (f) 准备； (g) 循环上界限； (h) 循环下界限； (i) 虚线； (j) 省略符； (k) 并行方式； (l) 处理； (m) 输入输出； (n) 连接； (o) 换页连接； (p) 控制流例子盒图符号例子PAD图符号顺序(先执行P1后执行P2)；选择(IF C THEN P1 ELSE P2);CASE型多分支；WHILE型循环(WHILE C DO P);UNTIL型循环(REPEAT P UNTIL C)；语句标号；定义PAD 描述的示例判定表例子检查发货单判定表判定树程序图从流程图导出程序图]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件工程和项目管理]]></title>
    <url>%2F2019%2F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[软件危机软件危机指在计算机软件的开发和维护过程中，所遇到的一系列严重问题。软件危机主要包括的问题：如何开发软件如何维护软件软件危机的典型表现：发费用和进度难以估算和控制，大大超过预期的资金和规定日期软件需求分析不够充分，用户不满意“已经完成”的软件系统。软件质量难于保证软件维护困难难以改正程序中的错误难以根据用户的需要在原有程序中增加一些新的功能。通常没有保留适当的文档资料。文档的作用：软件开发管理人员：用于管理和评价软件开发工程的进展状况软件开发人员：用于开发人员对各个阶段的工作都进行周密思考、全盘权衡、从而减少返工。并且可在开发早期发现错误和不一致性，便于及时加以纠正软件维护人员：软件维护的依据开发成本逐年上升，软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势。产生软件危机的原因软件本身的特点软件与硬件不同抽象性。软件生产没有明显的制造过程，难以衡量开发进展，也难以控制软件质量。问题的隐蔽性。没有硬件的磨损、老化问题，但存在开发早期在分析、设计阶段的错误，修改难度较大。软件与一般程序不同软件远比一般程序规模庞大，复杂性高。而复杂性包括实际问题的复杂性和程序逻辑结构的复杂性。大型软件开发既有技术问题，还有社会问题。如：开发团队成员分工合作、技术与管理的矛盾、软件开发人员对软件应用的领域知识的了解。包括的社会因素有：组织机构、体制、管理方式、观念、人的心理素质等。软件开发与维护的方法不正确对用户需求的获取不正确用户的原因分析人员的原因，对分析人员的要求：沟通能力、归纳总结能力、经验。软件开发不是编写程序。一个完整的软件产品由一整套完整的配置组成，程序只是其中的一个组成部分。软件开发过程包括多个阶段，每个阶段的产品都是最终的完整的软件产品的一部分。软件开发只要依靠个别编程高手就能完成。轻视软件维护。软件维护约占软件费用55%-75%，包括修改软件运行的错误；对软件进行改进和功能扩充。其他产生软件危机的原因软件开发尚未完全摆脱手工艺的开发方式。软件成本相当昂贵，主要依靠大量复杂的、高强度的脑力劳动。软件的开发和运行常常受到计算机系统的限制，对计算机系统有着不同程度的依赖性。软件的本质特性复杂性一致性软件不能独立存在，需要依附于一定的环境（如硬件、网络以及其他软件）软件必须遵从认为的惯例并适应已有的技术和系统软件需要随接口不同而改变，随时间推移而变化，而这些变化是不同人设计的结果可变性：软件需要不断的进行调整来满足用户的需求不可见性软件是一种“看不见，摸不着”的逻辑实体，不具有空间的形体特征。开发人员可以直接看到程序代码，但是源代码并不是软件本身。软件是以机器代码的形式运行，但是开发人员无法看到源代码是如何执行的。软件开发面临的挑战消除软件危机的途径彻底消除“软件就是程序”的错误观念。充分认识到软件开发是一种组织良好、管理严密、各类人员协同配合、共同完成的工程项目，不是个人独立的劳动。推广和使用在实践中总结出来的软件开发的成功技术和方法。开发和使用更好的软件工具“软件工程”的方法理论是摆脱软件危机的一个主要出路。即按工程化的原则和方法组织软件开发工作是有效的，是摆脱软件危机的一个主要出路。软件开发的误区只要是编程高手，即使是不懂软件工程，也能编出很好的软件。软件是服务于大众，却是由个性化的开发人员完成的。如果个性化太强，程序就无法阅读，其他人员也就无法维护。例：国内 80 年代涌现出来的众多汉字操作系统均是由编程高手完成的。只要拥有一套讲述如何开发软件的书籍，并了解了书中的标准与示例，就可以解决软件开发中遇到的任何问题。软件是用来解决现实问题的，现实问题的特殊性对规范提出了挑战（要进行适应）。软件技术是发展的，没有祖传秘方。就像拥有食谱并不能成为名厨一样，软件开发需要实践。只要拥有最好的开发工具、最好的计算机，一定能做出优秀的软件。硬件环境只是必要条件，人才是充分条件，软件是人在一定的约束条件下创造出来的。因人因事而异。软件开发时，如果进度慢，落后于计划，可以增加更多的程序员来解决。Brook法则：当人数增加后，项目所需的工作量将不成比例的增加。因为需要增加管理、协调、通信等工作。软件的定义软件 = 程序 + 数据 + 文档软件：计算机可以接受的一系列指令，运行时可以提供所要求的功能和性能。数据：使得程序能够适当地操作信息的数据结构文档：描述程序的研制过程、方法和使用的图文资料。软件工程1968 年，第一届NATO会议：为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用完善的工程原理。1993 年，IEEE/CS：将系统化的、规范的、可度量的方法应用于软件的开发、运行和维护的过程，即将工程化应用于软件中。软件工程便是对上述提到的各种方法的研究。另一个角度的看软件工程本质特性软件工程关注于大型程序的构造。软件工程的中心课题是控制复杂性主要考虑：如何分解和集成。为什么要分解： G .Miller（美国认知心理学家乔治·米勒）, “7±2 ” 原则，即短时间内人的记忆广度大约为7±2个单位。比如在记忆圆周率的时候只能记忆7±2位，超过这个范围需要分组记忆。软件经常变化开发软件的效率非常重要和谐地合作是开发软件的关键软件必须有效地支持它的用户在软件工程领域中是由具有一种文化背景的人替具有另一种文化背景的人创造产品扩展定义：软件 = 知识＋程序 + 数据 + 文档软件工程的基本原理用分阶段的生命周期计划严格管理坚持进行阶段评审实行严格的产品控制基线：基线（baseline）控制采用现代程序设计技术结果应能清楚地审查开发小组的人员应该少而精承认不断改进软件工程实践的必要性软件工程方法学软件工程包括“管理”和“技术”两方面内容：管理：对人、财、物的合理使用和配置；技术：指软件开发中采用的方法、工具和过程。软件工程方法学：通常把在软件生命周期全过程中使用的一整套技术方法的集合称为方法学（methodology），也称为范型（paradigm）。三要素软件工程过程：规定了完成各项任务的工作步骤。软件工程方法：完成软件开发的各项任务的技术方法，为软件开发提供了“如何做”的技术。如项目计划与估算、软件系统需求分析、数据结构、系统总体结构的设计、算法过程的设计、编码、测试以及维护等。软件工程工具：计算机辅助软件工程 CASE（computer Aided sottware Engineering），为软件工程方法提供自动或半自动的软件支撑环境。软件工程方法软件工程方法学思想传统方法学采用结构化技术（结构化分析、结构化设计和结构化实现）来完成软件开发的各项任务；把软件生命周期划分为若干个阶段，按顺序完成每个阶段的任务；每个阶段开始和结束都有严格的标准，对任何两个相邻的阶段而言，前一个阶段的结束标准就是后一阶段的开始标准；每一个阶段结束之前都必须进行正式严格的技术审查和管理复审优点分解任务，分工合作，降低整个软件开发工程的困难；采用科学的管理技术和良好的技术方法对每个阶段成果都进行严格的审查。保证了软件的质量。缺点把数据和操作人为地分离成两个独立的部分，增加了软件开发与维护的难度。面向对象方法学模拟人类习惯的思维方式，使开发软件的方法与过程尽可能接近人类认识世界解决问题的方法与过程，从而使描述问题的问题空间（也称为问题域）与实现解法的解空间（也称为求解域）在结构上尽可能一致。要点如下：把对象（object）作为融合了数据及在数据上的操作行为的统一的软件构件。把所有对象都划分成类（class ）。按照父类（或称为基类）与子类（或称为派生类）的关系，把若干个相关类组成一个层次结构的系统（也称为类等级）。对象彼此间仅能通过发送消息互相联系。和传统方法学的区别是：传统方法学强调自顶向下顺序地完成软件开发的各阶段任务。面向对象方法是主动地多次反复迭代的演化过程。软件生命周期软件定义时期确定软件开发工程必须完成的总目标；确定工程的可行性；导出实现工程目标应该采用的策略及系统必须完成的功能；估计完成该项工程需要的资源和成本，并且制定工程进度表。通常分为问题定义、可行性研究和需求分析三个阶段。问题定义阶段要解决的问题是什么？可行性研究阶段对于上一个阶段所确定的问题有行得通的解决办法吗？需求分析为了解决这个问题，目标系统必须做什么。用正式文档准确地记录对目标系统的需求，这份文档通常称为规格说明书（specification）。软件开发时期具体设计和实现前一个时期定义的软件，通常分为四个阶段。总体设计（概要设计）根据需求分析，设计软件的体系结构；定义结构中的组成模块。详细设计（模块设计）对每个模块要完成的工作进行具体的描述，为源程序编写打下基础。编写设计说明书，提交评审。与总体设计统称系统设计。程序编写（Coding, Programming）把软件设计转换成计算机可以接受的程序代码。软件测试（Testing）按规定的各项需求，逐项进行有效性测试，决定已开发的软件是否合格，能否交付用户使用，包括单元测试和组装测试。与程序编写统称系统实现。运行维护（软件维护）时期使软件持久的满足用户的需要，包括：改正性维护：运行中发现了软件中的错误需要修正。适应性维护：为了适应变化了的软件工作环境，需做适当变更。完善性维护：当用户有新的要求时，应该及时改进软件以满足用户的要求。预防性维护: 即修改软件为将来的维护活动预先做准备。软件过程软件过程是为了获得高质量软件所需要完成的一系列任务的框架，它规定了完成各项任务的工作步骤。软件过程描述为了开发出客户需要的软件，什么人（who）、在什么时候（when）、做什么事（what）以及怎样（how）做这些事以实现某一个特定的具体目标。通常用软件生命周期模型来描述。ISO 9000的定义：使用资源将输入转化为输出的活动所构成的系统。 “系统”是相互关联或相互作用的一组要素。软件生命周期模型指软件项目从需求定义直至软件经使用后废弃为止，跨越整个生存周期的系统开发、运作和维护所实施的全部过程、活动和任务的结构框架。瀑布模型从上一阶段接受本阶段的工作对象，作为输入；利用输入，完成本阶段活动的内容。本阶段的工作成果作为输出传入下一阶段。实际的瀑布模型增加了一个评审活动，评审每个阶段完成的活动，若得到确认，则进行下一阶段的活动；否则返回前一阶段，甚至更前阶段返工。特点阶段间具有顺序性和依赖性。推迟实现的观点。质量保证的观点。优点可强迫开发人员采用规范的方法；严格地规定了每个阶段必须提交的文档；要求每个阶段的所有产品都必须经过质量保证小组的仔细验证；缺点无法解决软件需求不明确或不准确的问题；可能导致最终开发的产品不能真正满足用户需要。瀑布模型比较适合开发需求明确的软件。快速原型模型原型是快速实现和运行的早期版本，反映最终系统部分重要特性。常见的原型实例：人机界面；系统主要功能。快速原型就是快速开发一个能用的版本再后期修改。获得用户的基本需求说明，据此快速建立一个小型软件系统。用户试用，对其评价；开发人员按照用户的意见快速地修改原型系统，获得新的原型版本，再请用户试用，如此反复，直到满足用户的要求；用户确认原型系统之后，开发人员据此书写规格说明文档，进行下一步开发。优点通常能反映用户真实需求；软件产品的开发基本上是线性顺序进行的。增量（渐增）模型把软件产品作为一系列的增量构件来设计、编码、集成和测试。每个构件由多个相互作用的模块构成，并且能够完成特定的功能。使用增量模型时，第一个阶段的增量构件往往实现软件的基本需求，提供最核心的功能；后面的增量构架逐渐添加系统的功能。注意事项增量构件规模适中；分解的约束条件是当把新构件集成到现有软件中时，所形成的产品必须是可测试的；软件体系必须是开放的，即在对现有系统添加新增量构件时，不能破坏系统原有功能。优点能在较短的时间内，提供可完成部分工作的初步产品给用户；用户有较为充裕的时间学习和适应新产品。缺点对开发人员技术能力要求较高，要求能从系统整体出发正确划分增量构件，并进行分别开发，最后能很好地集成这些构件。一种风险更大的增量模型有可能提高开发速度，但需要密切地监控整个开发过程，否则会有构件无法集成到一起的风险。螺旋模型大型软件开发面临的重要问题：软件风险，如：产品交付给用户之后，用户不满意；开发进度落后，开发成本超出预算；产品完成前关键的开发人员跳槽；在产品投人市场前，竞争对手发布了一个功能相近，价格更低的软件 …构建原型能使某些类型的风险降到最低。优点强调可选方案和约束条件，有利于已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标；减少了过多测试（浪费资金）或测试不足（产品故障多）所带来的风险；维护是一个周期，与开发并没有本质区别缺点需要开发人员具有相当丰富的风险评估经验和专门知识；进行风险分析的费用可能较大。适合大型软件开发。各种模型的比较模型优点缺点瀑布模型规范，文档驱动系统可能不满足客户真正的需求快速原型克服了瀑布型的缺点增量模型开发早期回报明确，易于维护要求开放的软件体系结构螺旋模型风险驱动，适用于大型项目开发风险分析人员需要有经验且经过充分训练软件工程工具软件开发的基本策略软件复用利用已有的软件制品，直接组装或合理修改形成新的软件系统，从而提高开发效率和产品质量，降低维护成本。软件复用不仅仅是代码复用，函数库、类库、模板（文档、网页）、设计模式、组件、框架。分而治之软件工程是一项解决问题的工程活动，通过对问题进行研究分析，将一个复杂的问题分解成可以理解并能够处理的若干小问题，然后再逐个解决。逐步演进软件开发应该遵循软件的客观规律，不断进行迭代式增量开发，最终交付符合客户价值的产品。优化折中软件工程师应该把优化当成一种责任，不断改进和提升软件质量；但是优化是一个多目标的最优决策，在不可能使所有目标都得到优化时，需要进行折中实现整体最优。ISO9126 质量模型功能性适合性：当软件你在指定条件下使用，其满足明确和隐含要求功能的能力。准确性：软件提供给用户功能的精准度能不能满足要求互操作性：软件与其他系统进行交互的能力安全性：软件保护信息和数据的安全能力可靠性成熟性：软件产品避免因软件中错误开发而导致失效的能力容错性：软件防止外部接口错误扩散而导致系统失效的能力可恢复性：系统失效后，重新恢复原有功能和性能的能力易用性易理解性：软件显示的信息要清晰、准确且易懂，使用户能够快速理解软件。易学习性：软件使用户能学习其应用的能力易操作性：软件产品使用户能易于操作和控制它的能力。吸引性：软件具有的某些独特的、能让用户眼前一亮的属性。效率时间特性：在规定的条件下，软件产品执行其功能时能够提供适当的响应时间效和处理时间以及吞吐率的能力。资源利用：软件系统在完成用户指定的业务请求所消耗的系统资源，诸如CPU占有率、内存占有率、网络带宽占有率等。可维护性易分析性：软件提供辅助手段帮助开发人员定位缺陷原因并判断出修改之处。易改变性：软件产品使得指定的修改容易实现的能力。稳定性：软件产品避免由于软件修改而造成意外结果的能力。易测试性：软件提供辅助性手段帮助测试人员实现其测试意图。可移植性适应性：软件产品无需做任何相应变动就能适应不同运行环境的能力。易安装性：在平台变化后成功安装软件的难易程度共存性：软件产品在公共环境与其共享资源的其他系统共存的能力。替换性：软件系统的升级能力，包括在线升级、打补丁升级等。可行性研究的目的说明该软件开发项目的实现在技术上、经济上和社会条件上的可行性；评述为合理地达到开发目标可能选择的各种方案。用最小的代价在尽可能短的时间内确定问题是否能够并且值得解决。可行性研究最根本任务是对以后的行动方针提出建议，一般占预期工程总成本的 5%-10%。可行性研究的基本内容技术可行性：使用现有的技术能实现这个系统吗？主要考虑：开发风险；资源；相关技术的发展经济可行性：这个系统的经济效益能超过它的开发成本吗？系统经济效益 = 新系统增加的收入＋ 新系统节省的费用考虑：成本——效益分析、长期的公司经营策略、对其他单位或产品的影响、开发所需的成本和资源、潜在的市场前景操作可行性：系统的操作方式在用户组织内行得通吗？其他：法律可行性、社会效应、管理问题等技术可行性对系统的性能、可靠性、可维护性以及生产率等方面的信息进行评价。通过技术可行性的分析，将为新系统提交技术可行性评估。以指明为完成系统的功能和性能需要什么技术？需要哪些材料、方法、算法、或者过程等。技术可行性分析方法：数学模型和优化技术、概率和统计、排队论、控制论等方法。经济可行性进行成本效益分析，评估项目的开发成本。操作可行性一个地区、一个行业乃至一个国家计算机应用发展的客观道路及规律客观发展规律，各阶段是不能超越的结合实际分析本单位、本部门、本行业的实际情况，参照国内外经验教训，实事求是地规划本企业信息系统的发展。可行性研究的任务可行性研究的目的是建立目标系统的逻辑模型。通常软件软件开发项目是要实现目标系统的物理模型，即确定待开发软件系统的系统元素，并将功能和数据结构分配到这些系统元素中。它是软件实现的基础。但是目标系统的物理模型是由它的逻辑模型经实例化，即具体到某个业务领域而得到的。与物理模型不同，逻辑模型忽视机制和细节，只描述系统要完成的功能和要处理的数据。为此，该阶段的主要任务是，借助于当前系统的逻辑模型导出目标系统的逻辑模型，也就是解决目标系统“做什么”的问题。其实系统的开发过程就是根据需要解决的问题，建立一个有信息技术支撑、与解决问题相关的、数据处理的、可运行的计算机模型。具体模型到逻辑模型举例可行性研究的定义了解客户的要求及现实环境，从技术、经济和社会因素等三方面研究并论证本软件项目的可行性，编写可行性研究报告，制定初步项目开发计划。可行性分析的描述手段：系统流程图、数据流图可行性研究报告功能说明软件项目的实现在技术上、经济上和社会因素上的可行性，评述为合理地达到开发目标可供选择的各种可能的实现方案，说明并论证所选定实施方案的理由。成本／效益分析从经济角度分析开发一个特定的新系统是否划算，帮助客户负责人作出是否投资的决定。主要包括成本估计和成本效益分析。成本估计包括开发成本和运行成本开发成本代码行技术：根据经验和历史数据，估算实现一个功能需要多少源程序行数，用每行代码的平均成本乘以行数。任务分解技术：将软件开发工程分解成若干个相对独立的任务，分别估算，然后累加得出总成本。按阶段分解按功能分解自动估计成本技术：采用自动估计成本的软件工具，需要有长期搜集的大量历史数据为基础，并需要良好的数据库系统支持。运行成本取决于系统的操作费用（操作人员数、工作时间、消耗的物资等）和维护费用。需求定义需求是人们要解决的问题某个问题或达到某种目的的需要。是系统或其组成部分为满足某种书面规定（合同、标准、规范等）所要具备的能力。需求将作为系统开发、测试、验收、提交的正式文档的依据。需求的内容需求是系统为满足客户期望的目标而完成的行为需求要体现出对问题领域的清晰理解给出系统的使用场景和上下文需求定义涵盖如下内容为什么要设计此系统系统由谁使用系统要做什么系统涉及哪些信息对解决方案有什么额外补充如何使用该系统质量需要达到何种程度需求内容来源干系人：干系人是任何和系统有关的人，如：资方、客户、系统用户、领域专家、项目研发团队。识别干系人可以从以下几个方面来判别：产品谁来用、输入谁提供、输出谁要、谁监管、影响谁、奖励谁、惩罚谁。业务过程：对现有业务过程的分析有助于识别业务问题并改进找出并列举当前业务过程中的问题分析问题的本质，可能是遗漏的，可能不好用，可能有新需求分析改进的机会分析改进的实质组织规章制度：分析规章制度有益于确定业务规则和约束条件业务规则：描述对业务过程的要求，如支撑系统的业务过程的结构、控制、行为效果约束：对系统开发过程的管理限制，主要涉及经济、政治、技术和环境四个方面，具体包括项目资源、时间、目标环境级现有系统：分析现有系统有助于了解未来系统的工作数据需求分析软件需求指用户对所开发的软件在功能、性能、环境、可靠性等各方面的要求。需求分析主要回答待开发的系统必须“做什么”，并用 《 需求规格说明书 》 的形式准确、详细、规范地表达出来。需求分析阶段，系统分析员的主要关注点是“做什么（ what ) ” ，不是“怎样做（ how）”；需求分析阶段，系统分析员应该给出软件需求规格书。需求分析的任务确定对系统的综合要求分析系统的数据要求导出系统的逻辑模型修正系统开发计划确定对系统的综合要求功能需求。指定系统必须提供的服务。性能需求。指定系统必须满足的定时约束或容量约束等。可靠性和可用性需求。应定量指定。出错处理需求。指环境错误，非系统本身的错误。接口需求。常见的接口需求：用户接口需求；硬件接口需求；软件接口需求；通信接口需求。常见的约束：精度；工具和语言约束；设计约束；应该使用的标准；应该使用的硬件平台。逆向需求。指定系统不应该做什么，将来可能提出的要求。分析建模结构化分析（Structured Analysis，SA）是面向数据流进行分析的方法，主要建立以下几种模型：实体关系图（Entity-Relationship Diagram，E-R图）来创建数据模型，描述系统中所有重要的数据对象；数据流图（Data Flow Diagram，DFD）：用来创建功能模型，描述了信息流和数据转换；状态转换图（State-Transition Diagram，STD）用来创建行为模型，描述系统状态如何响应外部事件，而进行转换。面向对象分祈方法（OOA）所建立的摸型对象模型（Object model）：定义实体，描述系统的静态结构，定义“对谁做”动态模型（Dynamic model）：描述对象之间的交互过程，规定“何时做”功能模型（Functional model） ：描述内部数据的处理，指明系统应“做什么”数据词典DD 是对数据流图中包含的所有元素的定义的集合，使得每个图形元素的名字都有一个精确的、严格的定义。数据流图和词典结合在一起，能清楚地表达数据处理的要求，构成了“需求说明书”定义数据的方法举例北京某高校可用的电话号码有以下几类：校内电话号码由4位数字组成，第1位数字不是0；校外电话又分为本市电话和外地电话两类，拨校外电话需先拨0，若是本市电话则再接着拨8位数字(第1位不是0)，若是外地电话则拨3位区码再拨8位电话号码(第1位不是0)。请用定义数据字典的方法，定义上述的电话号码。电话号码 = [校内电话号码|校外电话号码]校内电话号码 = 非零数字+ 3 位数字 //后面继续定义校外电话号码 = [本市号码|外地号码]本市号码 = 数字零+8位数字外地号码 = 数字零+3位数字+8位数字非零数字 = [1|2|3|4|5|6|7|8|9]数字零＝03位数字＝3{数字}3 //3至3个数字8位数字 = 非零数字+7位数字7位数字 = 7{数字}7数字＝[0|1|2|3|4|5|6|7|8|9]DD定义数据流数据流名：说明：简要介绍作用即它产生的原因和结果。数据流来源：来自何方。数据流去向：去向何处。数据流组成：数据结构。数据量流通量：数据量，流通量数据流定义数据流：购物单别名：无简述：学生购书时填写的项目来源：学生去向：审查并开发票组成：学号+姓名+书号+数量数据流量：1000次/周高峰值：开学期间1000次/天DD定义数据元素数据元素，又叫数据项，指数据处理中最小的，不可再分的单位。描述包括：数据元素名类型：数字（离散值，连续值），文字（编码类型）长度取值范围相关的数据元素及数据结构举例数据元素名：商品编号别名：描述：唯一的描述库存库清单中一个特定商品的关键域定义：商品编号 = 8 {字符} 8位置：订货报表订货信息库存清单DD定义数据存储数据文件名：简述：存放的是什么数据输入数据：输出数据：数据文件组成：数据结构存储方式：顺序，直接，关键码存取频率：举例数据文件名：库存记录别名：无简述：存放库存所有可供货物的信息组成：货物名称+编号+生产厂家+单价+库存量组织方式：索引文件，以货物编号为关键字查询要求：要求能立即查询DD定义数据处理处理名编号：DFD中的编号激活条件处理逻辑：此处理的子项执行频率例子数据处理名：登记报名单编号：1激活条件：收到报告单数据处理组成：1.1：检查报告单1.2：编准考证号1.3：登记考生执行频率：2000次/日软件设计的目标软件需求：解决“做什么”。软件设计：解决“怎么做”。软件设计的任务：以软件需求规格说明书为依据，着手实现软件的需求，并将设计的结果反映在“设计规格说明书”文档中。软件设计的重要性：是软件开发阶段的第一步，最终影响软件实现的成败和软件维护的难易程度。软件设计的两个阶段第一阶段：概要设计（总体设计）根据软件需求，设计软件系统结构和数据结构，确定程序的组成模块及模块之间的相互关系。回答“概括地说，系统应该如何实现？”。其重要性是：站在全局高度，从较抽象的层次上分析对比多种可能的系统实现方案和软件结构，从中选出最佳方案和最合理的软件结构，从而用较低成本开发出较高质量的软件系统。第二阶段：详细设计（过程设计）确定模块内部的算法和数据结构；选定某种过程的表达形式来描述各种算法；产生精确描述各模块程序过程的详细文档，并进行评审。SA和SD概要设计的任务制定规范：为软件开发小组制定在进行软件设计，应该共同遵守的标准，以便协调组内各员的工作。设计软件系统结构（简称软件结构）将系统按功能划分成模块确定每个模块的功能确定模块之间的调用关系确定模块之间的接口，即模块之间传递的信息评价模块结构的质量处理方式设计功能设计：确定实现功能法，评估算法的性能．性能设计：确定实现性能需求必须的算法和模块间的控制方式数据结构及数据库设计可靠性设计编写概要设计文档概要设计评审软件设计的过程软件设计的原理模块化采取自顶向下的方式，逐层把软件系统划分成若干可单独命名和可编址的部分，即“ 模块” ，每个模块完成一个特定的子功能；所有模块按某种方法组成一个整体，完成整个系统所要求的功能。软件系统就是通过这些模块的组合来实现。模块化是在逻辑和无理上将整个系统分解成多个更小的部分，其实质是“分而治之”，即将一个复杂问题分解成若干个简单问题，然后再逐个解决。自顶向下，逐步求精的基本思想将功能、信息的说明分为多个层次，最高层也最抽象 ― 仅仅只是概念性地描述功能或信息，不提供功能的内部工作情况或信息的内部结构；设计者从最高层开始，仔细推敲，进行功能和信息的细化，给出下层实现的细节；随着每个后续细化逐步的完成，提供越来越多的细节，最终得出用程序设计语言表达的程序。模块独立系统分解的目标：高内聚、低耦合。内聚性是一个模块或子系统内部的依赖程度。如果一个模块或子系统含有许多彼此相关的元素，并且它们执行类似任务，那么其内聚性比较高；如果一个模块或子系统含有许多彼此不相关的元素，其内聚性就比较低。耦合性是两个模块或子系统之间依赖关系的强度。如果两个模块或 子系统是松散耦合的，二者相互独立，那么当其中一个发生变化时对另一个产生的影响就很小；如果两个模块或子系统是紧密耦合的，其中一个发生变化就可能对另一个产生较大影响。耦合性也称块间的联系。是对软件系统结构中，各模块间相互联系紧密程度的一种度量。无直接藕合两个模块没有直接关系，模块独立性最强。数据耦合属松散耦合。一模块访问另一模块时，通过数据参数交换输入、输出信息。控制藕合模块之间传递的是控制信息（如开关、标志、名字等），控制被调用模块的内部逻辑。特征耦合两个模块通过传递数据结构加以联系，或都与一个数据结构有关系，则称这两个模块间存在特征耦合。可能出现的情况：当把整个数据结构作为参数传递时，被调用的模块虽然只需要使用其中的一部分数据元素，但实际可以使用的数据多于它真正需要的数据，这将导致对数据访问失去控制。“住户情况”是一个数据结构，图中模块都与此数据结构有关。“计算水费”和“计算电费”本无关，由于引用了此数据结构产生依赖关系。公共环境耦合一组模块引用同一个公用数据区（也称全局数据区、公共数据环境）。公共数据区指：全局数据结构。共享通讯区。内存公共覆盖区等公共耦合存在的问题：软件可理解性降低诊断错误困难软件可维护性差软件可靠性差内容耦合有下列情况之一的。是最不好的耦合形式！控制耦合改为数据耦合将被调用模块内的判定上移到调用模块中进行被调用模块分解成若干单一功能模块特征耦合修改为数据耦合内聚性巧合内聚块内各组成成份在功能上是互不相关的。逻辑内聚把几种相关功能（逻辑上相似的功能）组合在一模块内，每次调用由传给模块的参数确定执行哪种功能。时间内聚模块完成的功能必须在同一时间内执行，这些功能只因时间因素关联在一起。如：]初始化系统模块系统结束模块、紧急故障处理模块等过程内聚模块内各处理成分相关，且必须以特定次序执行。通信内聚模块内各部分使用相同的输入数据，或产生相同的输出结果。顺序内聚模块完成多个功能，各功能都在同一数据结构上操作，每一功能有唯一入口。功能内聚模块仅包括为完成某个功能所必须的所有成分。模块所有成分共同完成一个功能，缺一不可。启发规则改进软件结构，提高模块独立性：通过模块分解或合并，降低耦合提高内聚模块规模适中：在考虑模块的独立性同时，为了增加可理解性，模块的大小最好在 50-150 条语句左右，可以用 1-2 页打印纸打印，便于人们阅读与研究。模块过大：可理解程度下降模块过小：开销大于有效操作系统接口复杂深度、宽度、扇出和扇入适中将模块的影响限制在控制范围内：使任一模块的作用域在其控制域内作用域是指受模块内一个判定影响的所有模块的集合控制域是指这个模块本身及其所有的下属模块的集合模块 C 的控制范围： C 、 D 、 E 、 F 、 G 、 H 。如果模块 C 作出的决策影响了模块 L ，L超出了 C 的控制范围降低模块接口的复杂性：接口传递信息应简单且和模块功能一致。模块的接口要简单、清晰、含义明确，便于理解，易于实现、测试与维护。设计单入口单出口的模块：不要使模块间出现内容耦合。模块功能可预测：如果一个模块可以当作一个黑盒子，相同输入产生相同输出，其功能为可预测的。若模块带有内部“存储器”，其功能可能是不可预测的，难理解、难测试、难维护。单一的模块具有高内聚。但模块功能过分局限，可使用范围将过分狭窄，缺乏灵活性和扩充性。描绘软件结构的图形具层次图和 HIPO 图描述软件的层次结构。层次图中，一个方框代表一个模块，方框间的连线表示调用关系。 HIPO图=层次图+ IPO 图结构图…结构程序设计经典定义：如果一个程序的代码块仅仅通过顺序、选择和循环这 3 种基本控制结构进行连接，而且每个代码块只有一个入口和一个出口，则称这个程序是结构化的。比较全面的定义：结构程序设计是尽可能少用 GOTO 语句的程序设计方法，最好仅仅在检测出错误时才使用 GOTO 语句，而且应该总是使用前向的 GOTO 语句。SP主要原则使用语言中的顺序、选择、重复等有限的基本控制结构表示程序逻辑。选用的控制结构只准许有一个入口和一个出口。复杂结构应该用基本控制结构进行组合嵌套来实现。严格控制 GOTO 语句，仅在下列情形才可使用。用一个非结构化的程序设计语言去实现一个结构化的构造。在某种可以改善而不是损害程序可读性的情况下。五种基本的结构化控制结构控制流图符号“ O ”为程序图的结点，表示一个或多个无分支的语句；箭头为边，表示控制流的方向。边和结点圈定的封闭范围叫做区域。程序图的基本元素从图论的观点看，它是一个可以用 G = &lt; N , E ＞来表示的有向图。其中：N一结点；E一有向边，指明程序的流程；包含条件的结点称为判定结点；环路复杂性V ( G ) ＝流图中区域数（包括图外区域）V ( G ) ＝判定结点数＋ 1V ( G )= E - N + 2编码选择程序设计语言从软件工程的角度，根据程序设计语言发展的历程，大致分为 4 类：第一代语言：从属于机器的语言第二代语言：汇编语言第三代语言：高级程序设计语言第四代语言（4GL）编码风格编码风格是指一个人编制程序时所表现出来的特点、习惯、逻辑思路等。良好编码风格包括：程序内部应该有很好的文档：如标识符、注释良好，程序文档结构易读易理解。数据说明应易于理解和维护语句结构尽可能简单直观输入输出风格遵守人机界面设计准则效率满足用户需求即可软件测试的基础什么是软件测试？是为了发现错误而执行程序的过程。发现错误是为了更正错误，最终得到一个高质量的软件系统。软件测试的对象：整个软件定义、开发周期的产品测试用例：通常指测试数据和预期的输出结果软件测试存在的矛盾用户希望通过软件测试暴露软件中隐藏的错误和缺陷，以考虑是否可接受该产品。软件开发者希望通过软件测试表明软件产品中不存在错误，已正确地实现了用户的要求。软件测试目的测试是为了发现错误而执行程序的过程好的测试用例是极可能发现至今为止尚未发现的错误的测试方案；成功的测试是发现了至今未发现的错误的测试总之，测试的目的是以最少的时间和人力，系统地找出软件中潜在的各种错误和缺陷；测试附带的收获是它能证明软件的功能和性能与需求说明相符合。注意：测试不能表明软件中不存在错误，它只能说明软件中存在错误。软件测试的准则所有测试都能追溯到用户需求应该远在测试开始之前就制定出测试计划应该把 Pareto原理应用到软件测试中群集现象： 80 ％的错误可能是由 20 ％的模块造成的从“小规模”测试开始，逐步过渡到“大规模”测试穷举测试是不可能的测试只能证明程序有错，不能证明程序没有错误应由独立的第三方从事测试工作测试步骤单元（模块）测试：检查各各程序模块是否有错误，能发现编码和详细设计的错误。集成测试（子系统和系统测试）：测试模块（子系统）接口，发现软件设计和需求说明的错误。确认（验收）测试：检查软件是否满足用户的需要以及文档资料是否完整、准确平行运行：同时运行新、旧系统单元测试模块接口测试在单元测试的开始，应对通过被测模块的数据流进行测试。测试项目：调用本模块的输入参数是否正确；本模块调用子模块时，输入给子模块的参数是否正确；输出给标准函数的参数是否正确；全局量的定义和用法在各摸块中是否一致；与外部设备的输入输出是否正确局部数据结构测试测试项目：不正确或不一致的数据类型说明使用尚未赋值或尚未初始化的变量错误的初始值或错误的缺省值变量名拼写错或书写错不一致的数据类型全局数据对模块的影响重要的执行通路测试白盒测试错误处理测试着重测试以下可能发生的错误：出错的措述是否难以理解出错的描述是否能够对错误定位显示的错误与实际的错误是否相符对错误条件的处理正确与否在对错误进行处理之前，错误条件是否已经引起系统的干预等边界测试重点检查刚好等于、大于或小于边界值的数据;对运行时间有要求的模块，还要专门进行关键路径测试，以确定最坏情况下和平均意义下影响模块运行时间的因素。代码审查人工测试源程序。参与者：程序的设计者、编写者、测试者没有直接参与系统开发，但有力的程序员。方法：研究设计说明书，一起审查程序代码如何实现设计，从中发现问题。注意：通常代码审查和机器测试结合使用。计算机测试单元测试通常在编码阶段进行。常用机器测试，即通过运行模块发现问题。两个重要概念：驱动程序（ driver ) ：相当于被测试模块的“主程序”，接收测试数据，把这些数据传送给被测试的模块，并且输出相关结果。存根程序（stub）：代替被测试模块所调用的模块。不需要具有子模块所有功能，但不允许什么事情也不做。集成测试在单元测试之后，将模块组装成系统，为发现并排除模块在连接中可能出现的问题，而进行的测试。需要考虑：模块连接时穿越模块接口的数据是否会 丢失；一个模块对另一个模块是否会产生不利的影响；各子功能组合起来，能 否达到预期要求的父功能全局数据结构是否有问题；单个模块的误差累积起来，是 否会放大至不能接受的程度。集成测试的两种方式非渐增式组装方式对每个模块分别进行单元测试，再把所有模块组装成一个完整的系统进行的测试，从而得到要求的软件系统。渐增式组装方式先对模块进行单元测试，然后将测试后的模块逐步组装成较大的系统；在组装的过程中边连接边测试，以发现连接过程中产生的问题；最后组装成为要求的软件系统。自顶向下的渐增方式将模块按系统程序结构，沿控制层次自顶向下进行组装。不需要驱动模块，需要存根模块自底向上结合的渐增方式从程序模块结构最底层的模块开始组装和测试。不再需要存根程序，需要驱动模块。组合策略：把低层模块组合成实现某个特定的软件子功能的族；用驱动程序协调测试数据的输入和输出;对由模块组成的子功能族进行测试;去掉驱动程序，没软件结构自下向上移动，把子功能族组合起来形成更大的子功能族。混合渐增测试衍变的自顶向下的增殖测试：先对输入／输出模块和引入新算法模块进行测试；再自底向上组装成为功能相当完整且相对独立的子系统；然后由主模块开始自顶向下进行增殖测试。自底向上 - 自顶向下的增殖测试：先对含读操作的子系统自底向上直至根结点模块进行组装和测试；再对含写操作的子系统做自顶向下的组装与测试。确认测试又称有效性测试。验证软件的功能、性能及其它特性是否与用户的要求一致。确认测试的基础 ：软件需求规格说明书确认测试的主要工作：有效性测试与软件配置审查主要参与人员：以用户为主确认测试范围通常采用黑盒测试，验证被测软件是否满足用户需求。测试计划：包括测试种类及进度安排；测试步骤：描述具体的测试用例测试目的：确定软件的特性是否与需求相符；所有的文档都是正确且便于使用；其它软件需求。测试结果：与预期的结果相符；与预期的结果不符：要提交一份问题报告。软件配置复查目的：保证软件配置的所有成分都齐全；各方面的质量都符合要求；具有维护阶段所必需的细节；而且已经编排好分类的目录。应当严格遵守用户手册和操作手册中规定的使用步骤，以便检查这些文档资料的完整性和正确性。α测试和β测试α测试：由用户在开发环境下进行的测试。主要评价软件产品的:FLURPS(即功能、局域化、可使用性、可靠性、性能和支持）β测试：由最终用户在实际使用环境下进行的测试，这些用户定期返回有关错误信息给开发者。注意：只有当α测试达到一定的可靠程度时，才开始β测试。自盒测试技术白盒测试执行的要求：对程序模块的所有独立的执行路径至少测试一次对所有的逻辑判定，取“真”与取“假”的两种情况都至少测试一次；在循环的边界和运行界限内执行循环体；测试内部数据结构的有效性。逻辑覆盖语句覆盖使得每一可执行语句至少执行一次。判定覆盖运行被测程序，使得程序中每个判断的取真分支和取假分支至少经历一次。条件覆盖使得程序中每个判断的每个条件的可能取值至少执行一次。判定一条件覆盖使得判断中每个条件的所有可能取值至少执行一次，每个判断中的每个分支至少执行一次。即同时满足判断覆盖和条件覆盖。条件组合覆盖使得每个判断的所有可能的条件取值组合至少执行一次。点覆盖如果连通图G的子图G′是连通的，而且包含G的所有结点，则称G′是G的点覆盖。点覆盖标准和语句覆盖标准是相同的。边覆盖要求选取足够多测试数据，使得程序执行路径至少经过流图中每条边一次。通常边覆盖和判定覆盖是一致的。路径覆盖覆盖程序中所有可能的路径。控制结构测试基本路径测试以环形复杂度为基础，导出基本可执行路径集合，设计测试用例的方法。测试用例要保证程序的每个可执行语句至少执行一次。步骤由程序流程图导出程序控制流图，并计算其环路复杂度：确定程序的独立路径什么是独立路径？流图中，一条独立路径是至少包含一条在其它独立路径中从未有过的边的路径。独立路径条数是确保程序中，每个可执行语句至少能被执行一次所必需的测试用例数目的上界。独立路径条数＝程序环路复杂性 V ( G )黑盒测试技术黑盒测试主要是为了发现以下错误：是否有不正确或遗漏了的功能？能否正确地接受输入？能否正确的输出结果？是否有数据结构错误或外部数据库访问错误？性能上是否能够满足要求？是否有初始化或终止性错误？几种黑盒测试技术：等价类划分边界值分析错误推测法因果图等价划分把所有可能的输入数据（包括有效或无效的），划分成若干数据类（等价类），然后从每个数据类中选取少数有代表性的数据做为测试用例。这种方法完全不考虑程序的内部结构，只依据程序的规格说明来设计测试用例。步骤1：划分等价类等价类是指输入数据的子集合。在该子集合中，各输入数据对于发现程序中的错误都是等效的。根据程序功能说明，确定有效和无效的等价类等价类划分原则若规定了取值范围，或输入值的个数，则可以确立一个有效等价类和两个无效等价类。如果规定了输入数据的一组值，而且程序要对每种输入数据分别处理，则可为每种输入值确立一个有效等价类，此外针对这组值确立一个无效等价类，它是所有不允许的输入值的集合。若规定了输入值的集合，或者是规定了“必须如何”的条件，则可确立一个有效等价类和一个无效等价类。如果规定输入数据为整型，则可划分出正整、零和负整数三个有效类，其他数据为无效类如果程序处理对象是表格，则应使用空表、含一项和多项的表。如果确知，已划分的等价类中各元素在程序中的处理方式不同，则应将此等价类进一步划分成更小的等价类。步骤2：根据等价类设计测试用例在确立了等价类之后，建立等价类表，列出所有划分出的等价类。测试用例的选择原则为每一个等价类规定一个唯一编号；设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖的有效等价类，重复这一步，直到所有的有效等价类都被覆盖为止；设计一个新的测试用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复这一步，直到所有的无效等价类都被覆盖为止。某报表处理系统系统规定日期由年、月的 6 位数字字符组成，前 4 位代表年，后两位代表月。设日期限制在 1990 年 1 月至 1999 年 12 月，即系统只能对该段时期内的报表进行处理。如果用户输入的日期不在此范围内，则显示输入错误。现用等价类划分法设计测试用例，来测试程序的“日期检查功能”。为合理等价类设计测试用例不合理等价类设计测试用例边界值分析边界是指，对于输入和输出等价类而言，稍高和稍低于其边界值的一些特定情况。经验得知，大量的错误是发生在输入或输出范围的边界上，而不是在输入范围的内部。边界值分析方法思想：确定边界之后，选取正好等于、刚刚大于或刚刚小于边界的值做为测试数据，而不是选取等价类中典型值或任意值做为测试数据。通常总是与等价划分技术联合使用，是等价划分方法的补充。假设一个数据库产品规范要求该产品能够处理从1到1000中间的任何数量的记录。请首先为其划分等价类，并利用等价类划分和边界值分析技术为其设计测试用例，并说明每个测试用例属于某等价类成员还是属于边界值或是邻接边界值。等价类等价类1：少于1个记录等价类2：1到1000个记录等价类3：多于1000个记录测试用例测试用例1：0个记录 //等价类1成员且邻接边界值测试用例2：1个记录 //边界值测试用例3：2个记录 //邻接边界值测试用例4：100个记录 //等价类2的成员测试用例5：999个记录 //邻接边界值测试用例6：1000个记录 //边界值测试用例7：1001个记录 //等价类3成员且邻接边界值因果图因果图是借助图形来设计测试用例的一种系统方法。它适用于被测程序具有多种输入条件，程序的输出又依赖于输入条件的各种组合的情况。因果图是一种简化了的逻辑图，它能直观地表明程序输入条件（原因）和输出动作（结果）之间的相互关系。利用因果图产生测试用例的基本步骤分析软件规格说明书中，哪些是原因（即输入条件或输入条件的等价类），哪些是结果（即输出条件）并给每个原因和结果赋予一个标识。分析软件规格说明书中所描述的语义，找出原因与结果之间、原因与原因之间对应的是什么关系？根据这些关系画出因果图。由于语法或环境的限制，有些原因与原因之间、原因与结果之间的组合情况不可能出现。为表明这些特殊情况，在因果图上用一些记号标明约束或限制条件。把因果图转换为判断表把判断表的每一列拿出来作为依据，设计测试用例。在因果图中出现的基本符号通常在因果图中用 Ci 来表示原因，用Ei表示结果其基本符号如下图所示。其中各结点表示状态，可取值为 “0”或“1”。“0”表示某状态不出现，“1”表示某状态出现。主要的原因和结果之间的关系如下:恒等：表示原因与结果之间是一对一的对应关系。若原因出现，则结果出现。若原因不出现，则结果也不出现。非：表示原因与结果之间的一种否定关系。若原因出现，则结果不出现。若原因不出现，反而结果出现。或：表示若几个原因中有一个出现，则结果出现，而当这几个原因都不出现时，结果才不出现。与：表示若几个原因都出现，则结果才出现若几个原因中有一个不出现，结果就不出现。例设有一个处理单价为5角钱饮料自动售货机其规格说明为，若投入5角钱或1元钱的硬币 ，再按下橙汁或啤酒按钮，则相应的饮料就送出来；若售货机 没有零钱找，则一个显示零钱已找完的红灯亮，这时在投入1元硬币并按下按钮后，饮料不送出来而且1元硬币也退出来;若有零钱找，则应显示零钱找完的红灯灭， 在送出饮料的同时退还5角硬币。序号原因序号结果1售货机有零钱找2.1售货机零钱找完灯亮2投入1元硬币2.2退还1元硬币3投入5角硬币2.3退还5角硬币4按下橙汁按钮2.4送出橙汁饮料5按下啤酒按钮2.5送出啤酒饮料序号中间结点11投入1元硬币且按下饮料按钮12按下橙汁或啤酒的按钮13应当找5角零钱并且售货机有零钱找14钱已付请软件维护的定义软件维护是指在软件运行或维护阶段对软件产品所进行的修改。分为四类：改正性维护在软件交付使用后，由于开发时测试得不彻底或不完全，在运行阶段会暴露一些开发时未能测试出来的错误。为了识别和纠正软件错误，改正软件性能上的缺陷，避免实施中的错误使用，应当进行的诊断和改正错误的过程，这就是改正性维护。适应性维护随着计算机技术的飞速发展和更新换代，软件系统所需的外部环境或数据环境可能会更新和升级。为了使软件系统适应这种变化，需要对软件进行相应的修改，这种维护活动称为适应性维护。扩充与完善性维护在软件的使用过程中，用户往往会对软件提出新的功能与性能要求。为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性。这种情况下进行的维护活动叫做完善性维护。预防性维护采用先进的软件工程方法，对需要维护的软件或软件中的某一部分重新进行设计、编制和测试。软件的可维护性指纠正软件系统出现的错误和缺陷，以及为满足新的要求进行修改、扩充或压缩的容易程度。衡量软件质量的几个主要质量特性：可理解性：人们通过阅读源代码和相关文档，了解程序功能及其如何运行的容易程度。可靠性：表明一个程序按照用户的要求和设计目标，在给定的一段时间内正确执行的概率。可测试性：表明诊断和测试的容易程度。可修改性：表明程序容易修改的程度。可移植性：表明把程序从一种计算环境转移到另一种计算环境的难易程度。可重用性：指同一个软件（或软件成份）不做修改或稍加改动，就可以在不同环境中多次重复使用。软件再工程过程预防性维护也称为软件再工程逆向工程软件的逆向工程是分析程序，力图在比源代码更高的抽象层次上建立程序表示的过程，是一个设计恢复的过程，逆向工程工具可以从已有的程序中抽取数据结构、体系结构和程序设计信息。正向工程应用现代软件工程的概念、原理、技术和方法，重新开发现有的某个应用系统。软件再工程软件再工程是一个工程过程，它将逆向工程、重构和正向工程组合起来，旨在对现存的大量软件系统进行挖掘、整理，重新获得设计信息，用这些信息改建或重构现有的系统，以改进它的综合质量；或者得到有用的软件构件，对已有软件构件进行维护以延长其生存期。再工程的基础是系统理解，包括对运行系统、源代码、设计、分析、文档等的全面理解。但在很多情况下，由于各类文档的丢失，只能对源代码进行理解，即程序理解。典型的软件再工程过程模型定义了库存目录分析、文档重构、逆向工程、代码重构、数据重构和正向工程6类活动。]]></content>
      <categories>
        <category>软件项目管理</category>
      </categories>
      <tags>
        <tag>软件项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring-data-redis]]></title>
    <url>%2F2019%2Fspring-data-redis%2F</url>
    <content type="text"><![CDATA[配置properties1234567redis.host=redis.port=6379redis.pass=redis.database=0redis.maxIdle=300redis.maxWait=3000redis.testOnBorrow=trueapplicationContext-redis.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;context:property-placeholder location="classpath*:properties/*.properties" /&gt; &lt;!-- redis 相关配置 --&gt; &lt;bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"&gt; &lt;property name="maxIdle" value="$&#123;redis.maxIdle&#125;" /&gt; &lt;property name="maxWaitMillis" value="$&#123;redis.maxWait&#125;" /&gt; &lt;property name="testOnBorrow" value="$&#123;redis.testOnBorrow&#125;" /&gt; &lt;/bean&gt; &lt;bean id="JedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:host-name="$&#123;redis.host&#125;" p:port="$&#123;redis.port&#125;" p:password="$&#123;redis.pass&#125;" p:pool-config-ref="poolConfig" /&gt; &lt;bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"&gt; &lt;property name="connectionFactory" ref="JedisConnectionFactory" /&gt; &lt;property name="keySerializer"&gt; &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer" /&gt; &lt;/property&gt; &lt;property name="valueSerializer"&gt; &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer" /&gt; &lt;/property&gt; &lt;property name="hashKeySerializer"&gt; &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer" /&gt; &lt;/property&gt; &lt;property name="hashValueSerializer"&gt; &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer" /&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt;测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108import java.util.List;import java.util.Set;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations="classpath*:spring/applicationContext-redis.xml")public class MySpringDataJedis &#123; @Autowired private RedisTemplate redisTemplate; @Test public void test01() &#123; // 设置String redisTemplate.boundValueOps("user").set("张三丰"); // 取String String str = (String)redisTemplate.boundValueOps("user").get(); System.out.println(str); // 删除 redisTemplate.delete("user"); &#125; @Test public void test02() &#123; // 设置Set redisTemplate.boundSetOps("nameset").add("曹操"); redisTemplate.boundSetOps("nameset").add("刘备"); redisTemplate.boundSetOps("nameset").add("孙权"); // 获取Set Set&lt;String&gt; nameset = redisTemplate.boundSetOps("nameset").members(); for(String e : nameset) System.out.println(e); // 删除值 redisTemplate.boundSetOps("nameset").remove("孙权"); // 获取Set nameset = redisTemplate.boundSetOps("nameset").members(); for(String e : nameset) System.out.println(e); // 删除 redisTemplate.delete("nameset"); &#125; @Test public void test03() &#123; // 右压栈：新加入的元素放在右端 redisTemplate.boundListOps("namelist1").rightPush("刘备"); redisTemplate.boundListOps("namelist1").rightPush("关羽"); redisTemplate.boundListOps("namelist1").rightPush("张飞"); List&lt;String&gt; list = redisTemplate.boundListOps("namelist1").range(0, 10); for(String e : list) System.out.println(e); // 左压栈：新加入的元素放在左端 redisTemplate.boundListOps("namelist2").leftPush("刘备"); redisTemplate.boundListOps("namelist2").leftPush("关羽"); redisTemplate.boundListOps("namelist2").leftPush("张飞"); list = redisTemplate.boundListOps("namelist1").range(0, 10); for(String e : list) System.out.println(e); // 从索引从 0开始 String s = (String) redisTemplate.boundListOps("namelist1").index(1); System.out.println(s); // 移出指定个数的 某值 redisTemplate.boundListOps("namelist1").remove(1, "刘备"); list = redisTemplate.boundListOps("namelist1").range(0, 10); for(String e : list) System.out.println(e); // 删除 redisTemplate.delete("namelist1"); redisTemplate.delete("namelist2"); &#125; @Test public void test04() &#123; redisTemplate.boundHashOps("namehash").put("a", "唐僧"); redisTemplate.boundHashOps("namehash").put("b", "悟空"); redisTemplate.boundHashOps("namehash").put("c", "八戒"); redisTemplate.boundHashOps("namehash").put("d", "沙僧"); Set s = redisTemplate.boundHashOps("namehash").keys(); System.out.println(s); List values = redisTemplate.boundHashOps("namehash").values(); System.out.println(values); // 根据KEY提取值 Object object = redisTemplate.boundHashOps("namehash").get("b"); System.out.println(object); // 根据KEY移除值 redisTemplate.boundHashOps("namehash").delete("c"); &#125;&#125;]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机体系结构]]></title>
    <url>%2F2019%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[github的速度太慢，请耐心等待一下…]]></content>
      <categories>
        <category>体系结构</category>
      </categories>
      <tags>
        <tag>体系结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-Maven-Dubbo搭建SOA开发环境]]></title>
    <url>%2F2019%2FSSM-Maven-Dubbo%E6%90%AD%E5%BB%BASOA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[整体结构安装zookeeper第一步：安装 jdk把 zookeeper 的压缩包上传到 linux 系统。解压缩压缩包进入 zookeeper 目录，创建 data 文件夹。进入 conf 目录 ，把 zoo_sample.cfg 改名为 zoo.cfg打开 zoo.cfg , 修改 data 属性：dataDir=%zookeepe_home%/datazookeeper 服务启动：./zkServer.sh start服务关闭：./zkServer.sh stop查看状态：./zkServer.sh status创建工程pom工程：parent、managerjar工程：common、dao、interface、pojowar工程：service、web其中interface和service是聚合在manager下的（new maven module），manager、dao、interface、pojo、web是独立的Maven工程的（mew maven project）。除parent外所有的project的父工程都是parent。工程配置文件parent：用来管理整个项目的版本lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-parent&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;!-- 集中定义依赖版本号 --&gt; &lt;properties&gt; &lt;junit.version&gt;4.12&lt;/junit.version&gt; &lt;spring.version&gt;4.2.4.RELEASE&lt;/spring.version&gt; &lt;pagehelper.version&gt;5.0.0&lt;/pagehelper.version&gt; &lt;servlet-api.version&gt;2.5&lt;/servlet-api.version&gt; &lt;dubbo.version&gt;2.8.4&lt;/dubbo.version&gt; &lt;zookeeper.version&gt;3.4.7&lt;/zookeeper.version&gt; &lt;zkclient.version&gt;0.1&lt;/zkclient.version&gt; &lt;mybatis.version&gt;3.2.8&lt;/mybatis.version&gt; &lt;mybatis.spring.version&gt;1.2.2&lt;/mybatis.spring.version&gt; &lt;mybatis.paginator.version&gt;1.2.15&lt;/mybatis.paginator.version&gt; &lt;mysql.version&gt;5.1.32&lt;/mysql.version&gt; &lt;druid.version&gt;1.0.9&lt;/druid.version&gt; &lt;commons-fileupload.version&gt;1.3.1&lt;/commons-fileupload.version&gt; &lt;freemarker.version&gt;2.3.23&lt;/freemarker.version&gt; &lt;activemq.version&gt;5.11.2&lt;/activemq.version&gt; &lt;security.version&gt;3.2.3.RELEASE&lt;/security.version&gt; &lt;solrj.version&gt;4.10.3&lt;/solrj.version&gt; &lt;ik.version&gt;2012_u6&lt;/ik.version&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!-- Spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- dubbo相关 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;$&#123;zookeeper.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;$&#123;zkclient.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.28&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javassist&lt;/groupId&gt; &lt;artifactId&gt;javassist&lt;/artifactId&gt; &lt;version&gt;3.11.0.GA&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;version&gt;1.10&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Mybatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.miemiedev&lt;/groupId&gt; &lt;artifactId&gt;mybatis-paginator&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.paginator.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MySql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt; &lt;artifactId&gt;fastdfs&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 文件上传组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 缓存 --&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.8.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt; &lt;version&gt;1.7.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;$&#123;freemarker.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-all&lt;/artifactId&gt; &lt;version&gt;$&#123;activemq.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 身份验证 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt; &lt;version&gt;4.1.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt; &lt;version&gt;4.1.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.penggle&lt;/groupId&gt; &lt;artifactId&gt;kaptcha&lt;/artifactId&gt; &lt;version&gt;2.3.2&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-cas&lt;/artifactId&gt; &lt;version&gt;4.1.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.jasig.cas.client&lt;/groupId&gt; &lt;artifactId&gt;cas-client-core&lt;/artifactId&gt; &lt;version&gt;3.3.3&lt;/version&gt; &lt;!-- 排除log4j包冲突 --&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!-- solr客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.solr&lt;/groupId&gt; &lt;artifactId&gt;solr-solrj&lt;/artifactId&gt; &lt;version&gt;$&#123;solrj.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.janeluo&lt;/groupId&gt; &lt;artifactId&gt;ikanalyzer&lt;/artifactId&gt; &lt;version&gt;$&#123;ik.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpcore&lt;/artifactId&gt; &lt;version&gt;4.4.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;4.5.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;dom4j&lt;/groupId&gt; &lt;artifactId&gt;dom4j&lt;/artifactId&gt; &lt;version&gt;1.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;xml-apis&lt;/groupId&gt; &lt;artifactId&gt;xml-apis&lt;/artifactId&gt; &lt;version&gt;1.4.01&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt; &lt;plugins&gt; &lt;!-- java编译插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.2&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;!-- 配置Tomcat插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt;pojo：不用依赖其他的任何包123456789&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-parent&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;china-software-cup-pojo&lt;/artifactId&gt;&lt;/project&gt;common：提供工具类，依赖pojo12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-parent&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;china-software-cup-common&lt;/artifactId&gt; &lt;!-- 工具类工程: 1,抽取公共坐标 2,存放工具类 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javassist&lt;/groupId&gt; &lt;artifactId&gt;javassist&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 文件上传组件 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpcore&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;dom4j&lt;/groupId&gt; &lt;artifactId&gt;dom4j&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;xml-apis&lt;/groupId&gt; &lt;artifactId&gt;xml-apis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-pojo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;dao：依赖pojo和common123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-parent&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;china-software-cup-dao&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!-- Mybatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.miemiedev&lt;/groupId&gt; &lt;artifactId&gt;mybatis-paginator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- MySql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- pojo --&gt; &lt;dependency&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-pojo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!-- common --&gt; &lt;dependency&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-common&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;manager：配置tomcat插件，依赖dao12345678910111213141516171819202122232425262728293031323334353637383940&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-parent&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;china-software-cup-manager&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;modules&gt; &lt;module&gt;china-software-cup-interface&lt;/module&gt; &lt;module&gt;china-software-cup-service&lt;/module&gt; &lt;/modules&gt; &lt;!-- 后台管理聚合父工程: 1,抽取子工程公共坐标 2,聚合管理子工程(统一打包,部署,启动) 父工程: tomcat插件 9000 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-dao&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;!-- 配置Tomcat插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;!-- 服务启动端口:从9000开始 --&gt; &lt;port&gt;9000&lt;/port&gt; &lt;!-- /把项目发布tomcat服务器ROOT目录下.--&gt; &lt;path&gt;/&lt;/path&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt;interface：依赖pojo123456789101112131415161718&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-manager&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;china-software-cup-interface&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-pojo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;service：依赖pojo12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-manager&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;china-software-cup-service&lt;/artifactId&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;!-- service: 1,spring 2,dao 3,pojo 4,common 5,发布服务:dubbo,zookeeper --&gt; &lt;dependencies&gt; &lt;!-- Spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- dubbo相关 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-interface&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-pojo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;web：依赖interface12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-parent&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;china-software-cup-web&lt;/artifactId&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;!-- 运营商表现层: 1,servlet 2,服务接口 3,spring 4,引入服务:dubbo,zookeeper --&gt; &lt;dependencies&gt; &lt;!-- Spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- dubbo相关 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;china-software-cup-interface&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;!-- 配置Tomcat插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;!-- 前台启动端口:从8080开始 --&gt; &lt;port&gt;8080&lt;/port&gt; &lt;!-- /把项目发布tomcat服务器ROOT目录下. --&gt; &lt;path&gt;/&lt;/path&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;service的web.xml12345678910111213141516171819202122&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5"&gt; &lt;display-name&gt;china-software-cup-service&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!-- 加载spring容器 --&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath*:spring/applicationContext*.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;/web-app&gt;web的web.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5"&gt; &lt;display-name&gt;china-software-cup-web&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt;DAO层配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"&gt; &lt;!-- 加载配置文件 --&gt; &lt;context:property-placeholder location="classpath*:properties/*.properties" /&gt; &lt;!-- 数据库连接池 --&gt; &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"&gt; &lt;property name="url" value="$&#123;jdbc.url&#125;" /&gt; &lt;property name="username" value="$&#123;jdbc.username&#125;" /&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;" /&gt; &lt;property name="driverClassName" value="$&#123;jdbc.driver&#125;" /&gt; &lt;property name="maxActive" value="10" /&gt; &lt;property name="minIdle" value="5" /&gt; &lt;/bean&gt; &lt;!-- 配置 Mybatis的工厂 --&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;!-- 数据源 --&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;!-- 配置pojo别名 --&gt; &lt;property name="typeAliasesPackage" value="csc.pojo"&gt;&lt;/property&gt; &lt;!-- 配置分页插件 --&gt; &lt;property name="plugins"&gt; &lt;array&gt; &lt;bean class="com.github.pagehelper.PageInterceptor"&gt; &lt;property name="properties"&gt; &lt;!--使用下面的方式配置参数，一行配置一个 --&gt; &lt;value&gt;helperDialect=mysql&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/array&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="csc.mapper" /&gt; &lt;/bean&gt;&lt;/beans&gt;service层配置12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;!-- 指定Dubbo发布服务的端口 --&gt; &lt;dubbo:protocol name="dubbo" port="20881"&gt;&lt;/dubbo:protocol&gt; &lt;!-- 服务的名称 --&gt; &lt;dubbo:application name="china-software-cup-service"/&gt; &lt;!-- 指定注册中心 --&gt; &lt;dubbo:registry address="zookeeper://59.110.143.226:2181"/&gt; &lt;!-- 发布服务器 --&gt; &lt;dubbo:annotation package="csc.service.impl" /&gt; &lt;!-- 配置服务端 超时时间30秒 --&gt; &lt;dubbo:provider timeout="30000"&gt;&lt;/dubbo:provider&gt;&lt;/beans&gt;web层配置123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;context:property-placeholder location="classpath:config/application.properties" /&gt; &lt;mvc:annotation-driven&gt; &lt;mvc:message-converters register-defaults="true"&gt; &lt;bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"&gt; &lt;property name="supportedMediaTypes" value="application/json"/&gt; &lt;property name="features"&gt; &lt;array&gt; &lt;value&gt;WriteMapNullValue&lt;/value&gt; &lt;value&gt;WriteDateUseDateFormat&lt;/value&gt; &lt;/array&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/mvc:message-converters&gt; &lt;/mvc:annotation-driven&gt; &lt;!-- 放行静态资源 --&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!-- 引用dubbo 服务 --&gt; &lt;dubbo:application name="china-software-cup-web" /&gt; &lt;dubbo:registry address="zookeeper://59.110.143.226:2181"/&gt; &lt;dubbo:annotation package="csc.controller" /&gt; &lt;!-- 配置消费端超时时间 30秒 --&gt; &lt;dubbo:consumer timeout="30000"&gt;&lt;/dubbo:consumer&gt;&lt;/beans&gt;dubbo配置提供服务的是service，服务消费者是web。service配置1234567891011121314&lt;!-- 指定Dubbo发布服务的端口 --&gt;&lt;dubbo:protocol name="dubbo" port="20881"&gt;&lt;/dubbo:protocol&gt;&lt;!-- 服务的名称 --&gt;&lt;dubbo:application name="china-software-cup-service"/&gt; &lt;!-- 指定注册中心，ip是自己zookeeper的ip --&gt;&lt;dubbo:registry address="zookeeper://59.110.143.226:2181"/&gt;&lt;!-- 发布服务器 --&gt;&lt;dubbo:annotation package="csc.service.impl" /&gt; &lt;!-- 配置服务端 超时时间30秒 --&gt;&lt;dubbo:provider timeout="30000"&gt;&lt;/dubbo:provider&gt;web配置12345&lt;!-- 引用dubbo 服务 --&gt;&lt;dubbo:application name="china-software-cup-web" /&gt;&lt;!-- ip是自己zookeeper的ip --&gt;&lt;dubbo:registry address="zookeeper://59.110.143.226:2181"/&gt;&lt;dubbo:annotation package="csc.controller" /&gt;执行流程]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring的AOP(注解方式)]]></title>
    <url>%2F2019%2FSpring%E7%9A%84AOP-%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[配置和注解IOC一样，也需要在配置文件中配置信息，让Spring知道AOP使用注解方式进行。12&lt;!-- 打开注解方式的AOP --&gt;&lt;aop:aspectj-autoproxy /&gt;入门使用@Aspect、@Before、@AfterReturning、@Around注解1234567891011121314151617181920212223&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;&lt;!-- 打开注解方式的AOP --&gt;&lt;aop:aspectj-autoproxy /&gt;&lt;bean id="userDao" class="com.spring.annotation.UserDaoImpl"&gt;&lt;/bean&gt;&lt;bean id="myAspectJ" class="com.spring.annotation.MyAspectJ"&gt;&lt;/bean&gt;&lt;/beans&gt;12345678910111213141516public class UserDaoImpl implements UserDao &#123; public void delete() &#123; System.out.println("简简单单的删除"); &#125; public Integer delete(String userId, Double type) &#123; System.out.println("delete : " + userId); System.out.println("delete : " + type); return 100; &#125; public Boolean delete(Double type, String userId) &#123; System.out.println("delete : " + userId + " " + type); return true; &#125;&#125;123456789101112131415161718192021222324252627282930313233343536373839import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;/* 标识这个类是切面类 */@Aspectpublic class MyAspectJ &#123; /** * 前置增强，value表达式和xml方式一致 */ @Before(value="execution(void com.spring.annotation.UserDaoImpl.delete())") public void before() &#123; System.out.println("before"); &#125; /** * 后置增强，value表达式和xml方式一致 */ @AfterReturning(value="execution(Boolean com.spring.annotation.UserDaoImpl.delete(java.lang.Double, java.lang.String))", returning="ret") public void after(Boolean ret) &#123; System.out.println(ret); System.out.println("after"); &#125; @Around(value="execution(Integer com.spring.annotation.UserDaoImpl.delete(java.lang.String, java.lang.Double))") public Integer around(ProceedingJoinPoint pjp) throws Throwable &#123; Object[] args = pjp.getArgs(); for(Object o : args) System.out.println(o); //执行切点 Integer proceed = (Integer)pjp.proceed(); return proceed; &#125;&#125;1234567891011import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao ud = (UserDao)ac.getBean("userDao"); Integer delete = ud.delete("HelloWorld", 11.0); System.out.println(delete); &#125;&#125;切入点注解在上面的代码中，把注解加在通知的上面，类似于xml方式的123&lt;aop:aspect ref="myAspectJ"&gt; &lt;aop:around method="around" pointcut-ref="cut1" /&gt;&lt;/aop:aspect&gt;但是这样的话后期修改很麻烦，所以使用注解完成类似于下面，可以通过id添加通知的操作。1&lt;aop:pointcut expression="execution(Integer com.spring.aopxml.UserDaoImpl.delete(..))" id="cut1"/&gt;12345678910111213141516@Around(value="MyAspectJ.cut1")public Integer around(ProceedingJoinPoint pjp) throws Throwable &#123; Object[] args = pjp.getArgs(); for(Object o : args) System.out.println(o); //执行切点 Integer proceed = (Integer)pjp.proceed(); return proceed;&#125;/* * 不能使用属性 */@Pointcut(value="execution(Integer com.spring.annotation.UserDaoImpl.delete(java.lang.String, java.lang.Double))")private void cut1() &#123;&#125;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高校选课数据库范式分解]]></title>
    <url>%2F2019%2F%E9%AB%98%E6%A0%A1%E9%80%89%E8%AF%BE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F%E5%88%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[课程信息高校的课程一般都分为必须课和选修课，其中选修课又分为一定的类别，博主所在的中国民航大学课程信息如下：选修专业选修公共选修必修数据通过爬虫从选课系统爬下来的数据如下表所示：上课时间中每个分号分隔的是一个上课的时间段。比如2`7`8`3`12;3`9`10`3`12指的是有两个上课的时间段，其中第一个时间段是第3-12周中周2的7、8节，第二个时间段是第3-12周中周3的9、10节。有的课有不同的上课时间指的是这个课有多个教学班表设计]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring的事务管理]]></title>
    <url>%2F2019%2FSpring%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[Spring事务管理API结构PlatformTransactionManager、TransactionStatus和TransactionDefinition是Spring事务管理的三个顶层接口。PlatformTransactionManagerSpring事务管理器的接口是org.springframework.transaction.PlatformTransactionManager，如上图所示，Spring并不直接管理事务，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，也就是将事务管理的职责委托给Hibernate或者JDBC等持久化机制所提供的相关框架的事务来实现。我们进入到 PlatformTransactionManager 接口，查看源码：TransactionStatus这个接口描述的是一些处理事务提供简单的控制事务执行和查询事务状态的方法，在回滚或提交的时候需要应用对应的事务状态。获得方式就是PlatformTransactionManager的getTransaction(TransactionDefinition)。TransactionDefinition上面讲到的事务管理器接口PlatformTransactionManager通过getTransaction(TransactionDefinition definition)方法来得到事务，这个方法里面的参数是TransactionDefinition类，这个类就定义了一些基本的事务属性。 事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面：隔离级别是否只读：由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段。事务超时传播行为：后续详解传播行为当具有事务的方法被另一个具有事务方法调用时，必须指定事务应该如何传播。PROPAGATION_REQUIRED ：required , 必须。默认值，A如果有事务，B将使用该事务；如果A没有事务，B将创建一个新的事务。PROPAGATION_SUPPORTS：supports ，支持。A如果有事务，B将使用该事务；如果A没有事务，B将以非事务执行。PROPAGATION_MANDATORY：mandatory ，强制。A如果有事务，B将使用该事务；如果A没有事务，B将抛异常。PROPAGATION_REQUIRES_NEW ：requires_new，必须新的。如果A有事务，将A的事务挂起，B创建一个新的事务；如果A没有事务，B创建一个新的事务。PROPAGATION_NOT_SUPPORTED ：not_supported ,不支持。如果A有事务，将A的事务挂起，B将以非事务执行；如果A没有事务，B将以非事务执行。PROPAGATION_NEVER ：never，从不。如果A有事务，B将抛异常；如果A没有事务，B将以非事务执行。PROPAGATION_NESTED ：nested ，嵌套。A和B底层采用保存点机制，形成嵌套事务。隔离级别ISOLATION_DEFAULT：使用后端数据库默认的隔离级别ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读ISOLATION_READ_COMMITTED：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从ACID的隔离级别，确保阻止脏读、不可重复读以及幻读，也是最慢的事务隔离级别，因为它通常是通过完全锁定事务相关的数据库表来实现的编程式事务123456package com.tx.demo1;public interface AccountDao &#123; public void outMoney(String from ,Double money); public void inMoney(String to ,Double money);&#125;123456789101112131415161718package com.tx.demo1;import org.springframework.jdbc.core.support.JdbcDaoSupport;//JdbcDaoSupport是Spring为我们提供的简便Jdbc模板开发的类public class AccountDaoImpl extends JdbcDaoSupport implements AccountDao &#123; @Override public void outMoney(String from, Double money) &#123; this.getJdbcTemplate().update("update account set money = money - ? where name = ?", money,from); &#125; @Override public void inMoney(String to, Double money) &#123; this.getJdbcTemplate().update("update account set money = money + ? where name = ?", money ,to); &#125;&#125;1234567package com.tx.demo1;public interface AccountService &#123; public void transfer(String from,String to,Double money); &#125;12345678910111213141516171819202122232425262728293031323334353637package com.tx.demo1;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.support.TransactionCallbackWithoutResult;import org.springframework.transaction.support.TransactionTemplate;public class AccountServiceImpl implements AccountService &#123; // 注入DAO: private AccountDao accountDao; public void setAccountDao(AccountDao accountDao) &#123; this.accountDao = accountDao; &#125; // 注入事务管理的模板：这个类应用于编程式事务 private TransactionTemplate trsactionTemplate; public void setTrsactionTemplate(TransactionTemplate trsactionTemplate) &#123; this.trsactionTemplate = trsactionTemplate; &#125; @Override public void transfer(final String from, final String to, final Double money) &#123; trsactionTemplate.execute(new TransactionCallbackWithoutResult() &#123; @Override protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) &#123; accountDao.outMoney(from, money); int d = 1/0; accountDao.inMoney(to, money); &#125; &#125;); &#125;&#125;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt; &lt;!-- 配置Service============= --&gt; &lt;bean id="accountService" class="com.tx.demo1.AccountServiceImpl"&gt; &lt;property name="accountDao" ref="accountDao"/&gt; &lt;property name="trsactionTemplate" ref="transactionTemplate"/&gt; &lt;/bean&gt; &lt;!-- 配置DAO================= --&gt; &lt;bean id="accountDao" class="com.tx.demo1.AccountDaoImpl"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- 配置连接池和JDBC的模板 --&gt; &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; &lt;!-- 配置C3P0连接池=============================== --&gt; &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="driverClass" value="$&#123;jdbc.driverClass&#125;"/&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;"/&gt; &lt;property name="user" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;/bean&gt; &lt;!-- 配置平台事务管理器 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- 配置事务管理的模板 --&gt; &lt;bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate"&gt; &lt;property name="transactionManager" ref="transactionManager"/&gt; &lt;/bean&gt;&lt;/beans&gt;XML方式声明式事务修改AccountServiceImpl：1234567891011121314151617181920package com.tx.demo2;public class AccountServiceImpl implements AccountService &#123; private AccountDao accountDao; public void setAccountDao(AccountDao accountDao) &#123; this.accountDao = accountDao; &#125; @Override public void transfer( String from, String to, Double money) &#123; accountDao.outMoney(from, money); int d = 1/0; accountDao.inMoney(to, money); &#125;&#125;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt; &lt;!-- 配置Service============= --&gt; &lt;bean id="accountService" class="com.tx.demo2.AccountServiceImpl"&gt; &lt;property name="accountDao" ref="accountDao"/&gt; &lt;/bean&gt; &lt;!-- 配置DAO================= --&gt; &lt;bean id="accountDao" class="com.tx.demo2.AccountDaoImpl"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- 配置连接池和JDBC的模板 --&gt; &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; &lt;!-- 配置C3P0连接池=============================== --&gt; &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="driverClass" value="$&#123;jdbc.driverClass&#125;"/&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;"/&gt; &lt;property name="user" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;/bean&gt; &lt;!-- 配置事务管理器=============================== --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- 配置事务的增强=============================== --&gt; &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;tx:attributes&gt; &lt;!-- * 表示所有方法 --&gt; &lt;tx:method name="*" propagation="REQUIRED" read-only="false" isolation="DEFAULT"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- aop的配置 --&gt; &lt;aop:config&gt; &lt;aop:pointcut expression="execution(* com.tx.demo2.AccountServiceImpl.*(..))" id="pointcut1"/&gt; &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/&gt; &lt;/aop:config&gt;&lt;/beans&gt;注解方式声明式事务修改AccountServiceImpl：1234567891011121314151617181920212223242526package com.tx.demo3;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;@Transactional(isolation=Isolation.DEFAULT,propagation=Propagation.REQUIRED)public class AccountServiceImpl implements AccountService &#123; // 注入DAO: private AccountDao accountDao; public void setAccountDao(AccountDao accountDao) &#123; this.accountDao = accountDao; &#125; @Override public void transfer( String from, String to, Double money) &#123; accountDao.outMoney(from, money); int d = 1/0; accountDao.inMoney(to, money); &#125;&#125;1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt; &lt;!-- 配置Service============= --&gt; &lt;bean id="accountService" class="com.tx.demo3.AccountServiceImpl"&gt; &lt;property name="accountDao" ref="accountDao"/&gt; &lt;/bean&gt; &lt;!-- 配置DAO================= --&gt; &lt;bean id="accountDao" class="com.tx.demo3.AccountDaoImpl"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- 配置连接池和JDBC的模板 --&gt; &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; &lt;!-- 配置C3P0连接池=============================== --&gt; &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="driverClass" value="$&#123;jdbc.driverClass&#125;"/&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;"/&gt; &lt;property name="user" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;/bean&gt; &lt;!-- 配置事务管理器=============================== --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- 开启注解事务================================ --&gt; &lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;&lt;/beans&gt;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring的AOP-xml方式]]></title>
    <url>%2F2019%2FSpring%E7%9A%84AOP-xml%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[AOP概念AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。AOP的术语连接点（join point）可以被拦截到的点，或者说可以被增强的方法，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，其他语言或框架中的连接点还可以是字段或者构造器。切入点（point cut）真正被拦截到的连接点，比如我们可以对增删查改方法进行拦截来记录日志，但是实际开发中只需要知道对数据库进行了哪些update操作，而忽视查询操作，此时增删改方法就是切入点，而查询方法不是。通知（advice）指拦截到切入点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类。引介（Introduction）值类方面的增强，它描述的是一个过程，比如在类中动态的增加一个方法。目标（target）被增强的对象，也即被代理的对象，比如对对象userDao进行增强，则userDao就是目标。织入（Weaving）将advice应用到目标的过程。代理对象（Proxy）AOP的底层是使用动态技术的，所以代理对象就是Spring为我们提供的增强后的对象。切面（Aspect）类是对物体特征的抽象，切面就是对横切关注点的抽象使用Spring的AOP我们之前虽然一共介绍了八个术语，但是在借助Spring之后只有三个过程是我们编写的：编写目标类编写切面类织入编写目标类1234567891011package test.dao;public interface TestDao &#123; void save(); void update(); void delete(); void insert();&#125;123456789101112131415161718192021222324252627import org.springframework.stereotype.Service;import test.dao.TestDao;@Servicepublic class TestDaoImpl implements TestDao &#123; @Override public void save() &#123; System.out.println("save"); &#125; @Override public void update() &#123; System.out.println("update"); &#125; @Override public void delete() &#123; System.out.println("delete"); &#125; @Override public void insert() &#123; System.out.println("insert"); &#125;&#125;编写切面类1234567package test.aop;public class MyAspectXML &#123; public void checkPri() &#123; System.out.println("校验权限..."); &#125;&#125;织入123456789101112131415161718&lt;!-- 配置 扫描 @Service --&gt;&lt;context:component-scan base-package="test.dao" /&gt;&lt;!-- 配置切面类：将切面类交给Spring来管理 --&gt;&lt;bean id="myAspect" class="test.aop.MyAspectXML"&gt;&lt;/bean&gt;&lt;!-- 通过AOP的配置完成对目标类产生代理 --&gt;&lt;aop:config&gt; &lt;!-- 表达式配置哪些类的哪些方法需要进行增强 --&gt; &lt;aop:pointcut expression="execution(* test.dao.impl.TestDaoImpl.save(..))" id="pointcut1"/&gt; &lt;!-- 将切面类的方法应用在指定的pointcut上 --&gt; &lt;aop:aspect ref="myAspect"&gt; &lt;aop:before method="checkPri" pointcut-ref="pointcut1"/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt;测试12345678910111213141516171819202122232425262728293031package test;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import test.dao.TestDao;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:applicationContext-service.xml")public class Demo1 &#123; @Autowired private TestDao testDao; @Test public void test() &#123; testDao.insert(); testDao.save(); testDao.update(); testDao.delete(); &#125; &#125;通知的类型前置通知在目标方法之前进行操作。可以获得切入点信息。123public void checkPri(JoinPoint joinPoint) &#123; System.out.println(joinPoint);&#125;后置通知在目标方法之后进行操作。可以获得目标方法的返回值。123public void writeLog(Object str) &#123; System.out.println(str);&#125;12&lt;aop:pointcut expression="execution(* test.dao.impl.TestDaoImpl.delete(..))" id="pointcut2"/&gt;&lt;aop:after-returning method="writeLog" pointcut-ref="pointcut2" returning="str"/&gt;配置中的returning对应的属性值必须和切面类方法的参数名相同。环绕通知在目标方法执行之前和之后进行操作。123456789public Object around(ProceedingJoinPoint joinPoint) throws Throwable&#123; System.out.println(&quot;目标方法执行前...&quot;); //相当于执行目标程序 Object object = joinPoint.proceed(); System.out.println(&quot;目标方法执行后...&quot;); return object;&#125;12&lt;aop:pointcut expression="execution(* test.dao.impl.TestDaoImpl.update(..))" id="pointcut3"/&gt;&lt;aop:around method="around" pointcut-ref="pointcut3"/&gt;异常通知在程序出现异常的时候进行的操作。可以获得异常信息，throwing的属性值和参数名一致1&lt;aop:after-throwing method="" pointcut-ref="" throwing="ex"/&gt;123public void afterThrowing(Throwable ex) &#123; ex.printStackTrace();&#125;最终通知无论代码是否有异常总是会执行。1&lt;aop:after method="" pointcut-ref=""/&gt;表达式的书写由于Spring切面粒度最小是达到方法级别，而execution表达式可以用于明确指定方法返回类型，类名，方法名和参数名等与方法相关的部件，并且在Spring中，大部分需要使用AOP的业务场景也只需要达到方法级别即可，因而execution表达式的使用是最为广泛的。如下是execution表达式的语法：1execution([modifiers-pattern] ret-type-pattern declaring-type-pattern.name-pattern(param-pattern) throws-pattern?)modifiers-pattern：方法的可见性，如public，protected；ret-type-pattern：方法的返回值类型，如int，void等；declaring-type-pattern：方法所在类的全路径名，如com.spring.Aspect；name-pattern：方法名类型，如buisinessService()；param-pattern：方法的参数类型，如java.lang.String；throws-pattern：方法抛出的异常类型，如java.lang.Exception；例子12execution (public * com.spring.service.BusinessObject.businessService(java.lang.String,..))上述切点表达式将会匹配使用public修饰，返回值为任意类型，并且是com.spring.BusinessObject类中名称为businessService的方法，方法可以有多个参数，但是第一个参数必须是java.lang.String类型的方法。上述示例中我们使用了..通配符，关于通配符的类型，主要有两种：*通配符，该通配符主要用于匹配单个单词，或者是以某个词为前缀或后缀的单词。如下示例表示返回值为任意类型，在com.spring.service.BusinessObject类中，并且参数个数为零的方法：1execution(* com.spring.service.BusinessObject.*())下述示例表示返回值为任意类型，在com.spring.service包中，以Business为前缀的类，并且是类中参数个数为零方法：1execution(* com.spring.service.Business*.*())..通配符，该通配符表示0个或多个项，主要用于declaring-type-pattern和param-pattern中，如果用于declaring-type-pattern中，则表示匹配当前包及其子包，如果用于param-pattern中，则表示匹配0个或多个参数。如下示例表示匹配返回值为任意类型，并且是com.spring.service包及其子包下的任意类的名称为businessService的方法，而且该方法不能有任何参数：1execution(* com.spring.service..*.businessService())这里需要说明的是，包路径service...businessService()中的..应该理解为延续前面的service路径，表示到service路径为止，或者继续延续service路径，从而包括其子包路径；后面的.businessService()，这里的*表示匹配一个单词，因为是在方法名前，因而表示匹配任意的类。如下示例是使用..表示任意个数的参数的示例，需要注意，表示参数的时候可以在括号中事先指定某些类型的参数，而其余的参数则由..进行匹配：1execution(* com.spring.service.BusinessObject.businessService(java.lang.String,..))]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RPC]]></title>
    <url>%2F2019%2FRPC%2F</url>
    <content type="text"><![CDATA[RPCRemote Procedure Call，远程过程调用。如下图将服务A想将计算的功能让服务B来实现，服务B计算完成后再把数据返回服务A，两个服务在两个不同的机子上。最简单的实现方法是服务B暴露一个借口，让A可以去访问。如使用http或者是直接使用TCP/UDP。那每次调用时，是不是都需要写一串发起http请求的代码呢？比如httpClient.sendRequest…之类的，能不能像本地调用一样，去发起远程调用，让使用者感知不到远程调用的过程呢，像这样：12345@Referenceprivate Calculator calculator;...calculator.add(1,2);...这就可以使用代理模式+IOC来做。通过Spring注入calculator对象，注入时，如果扫描到对象加了@Reference注解，那么就给它生成一个代理对象，将这个代理对象放进容器中。而这个代理对象的内部，就是通过httpClient来实现RPC远程过程调用的。完整的RPC过程，都可以用下面这张图来描述RPC要解决的两个问题：解决分布式系统中，服务之间的调用问题。远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑。RMIRMI是Java提供的一种访问远程对象的协议，是已经实现好了的，可以直接用了。给一个小案例：1234567891011121314151617181920212223242526272829303132333435package pojo;import java.io.Serializable;public class User implements Serializable &#123; private static final long serialVersionUID = -8400949180923337013L; private String id; private String name; private int age; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125;&#125;12345678910package service;import java.rmi.Remote;import java.rmi.RemoteException;import pojo.User;public interface UserService extends Remote &#123; public User getUserById(String id)throws RemoteException;&#125;1234567891011121314151617181920212223242526package service.impl;import java.rmi.RemoteException;import java.rmi.server.UnicastRemoteObject;import service.UserService;import pojo.User;public class UserServiceImpl extends UnicastRemoteObject implements UserService &#123; private static final long serialVersionUID = 6222175854495075991L; public UserServiceImpl() throws RemoteException &#123; super(); &#125; @Override public User getUserById(String id) &#123; User user=new User(); user.setId(id); user.setAge(100); user.setName("測试"); return user; &#125;&#125;1234567891011121314151617181920212223242526272829303132package test;import java.net.MalformedURLException;import java.nio.channels.AlreadyBoundException;import java.rmi.Naming;import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import service.UserService;import service.impl.UserServiceImpl;public class Server &#123; public static void main(String[] args) &#123; try &#123; UserService userService = new UserServiceImpl(); // 注冊通讯端口 LocateRegistry.createRegistry(6600); // 注冊通讯路径 Naming.rebind("rmi://127.0.0.1:6600/userService", userService); System.out.println("Service Start!"); &#125; catch (RemoteException e) &#123; System.out.println("创建远程对象发生异常！"); e.printStackTrace(); &#125; catch (AlreadyBoundException e) &#123; System.out.println("发生反复绑定对象异常！"); e.printStackTrace(); &#125; catch (MalformedURLException e) &#123; System.out.println("发生URL畸形异常！"); e.printStackTrace(); &#125; &#125;&#125;12345678910111213141516171819package test;import java.rmi.Naming;import pojo.User;import service.UserService;public class Client &#123; public static void main(String[] args) &#123; try &#123; // 调用远程对象，注意RMI路径与接口必须与server配置一致 UserService userService = (UserService) Naming.lookup("rmi://127.0.0.1:6600/userService"); User user = userService.getUserById("1245"); System.out.println(user.getName()); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125;&#125;参考https://www.cnblogs.com/mfmdaoyou/p/6816797.html]]></content>
      <categories>
        <category>Java分布式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>分布式系统开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-NIO]]></title>
    <url>%2F2019%2FJava-NIO%2F</url>
    <content type="text"><![CDATA[概述服务器程序只需要一个线程就能同时负责接收客户的连接、接收各个客户发送的数据，以及向各个客户发送响应数据。服务器程序的处理流程如下：12345678while(一直等待，直到有接收连接就绪事件、读就绪事件或写就绪事件发生)&#123; //阻塞 if(有客户连接) 接收客户的连接; //非阻塞 if(某个Socket的输入流中有可读数据) 从输入流中读数据; //非阻塞 if(某个Socket的输出流可以写数据) 向输出流写数据; //非阻塞&#125;以上处理流程采用了轮询的工作方式，当某一种操作就绪，就执行该操作，否则就察看是否还有其他就绪的操作可以执行。线程不会因为某一个操作还没有就绪，就进入阻塞状态，一直傻傻的在那里等待这个操作就绪。SelectorSelector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。Selector的创建通过调用Selector.open()方法创建一个Selector，如下：1Selector selector = Selector.open();向Selector注册通道为了将Channel和Selector配合使用，必须将channel注册到selector上。通过SelectableChannel.register()方法来实现，如下：12channel.configureBlocking(false);SelectionKey key = channel.register(selector, Selectionkey.OP_READ);与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。注意register()方法的第二个参数。这是一个“interest集合”，意思是在通过Selector监听Channel时对什么事件感兴趣。可以监听四种不同类型的事件：SelectionKey.OP_ACCEPT：接收连接就绪事件，表示服务器监听到了客户连接，服务器可以接收这个连接了。常量值为16SelectionKey.OP_CONNECT：连接就绪事件，表示客户与服务器的连接已经建立成功。常量值为8。SelectionKey.OP_READ：读就绪事件，表示通道中已经有了可读数据，可以执行读操作了。常量值为1。SelectionKey.OP_WRITE：写就绪事件，表示已经可以向通道写数据了。常量值为4。以上常量分别占居不同的二进制位，因此可以通过二进制的或运算“|”，来将它们进行任意组合。总结来说：通道触发了一个事件意思是该事件已经就绪。所以，某个channel成功连接到另一个服务器称为“连接就绪”。一个serverSocketChannel准备好接收新进入的连接称为“接收就绪”。一个有数据可读的通道可以说是“读就绪”。等待写数据的通道可以说是“写就绪”。SelectionKey在上一小节中，当向Selector注册Channel时，register()方法会返回一个SelectionKey对象。这个对象包含了一些你感兴趣的属性：interest集合ready集合ChannelSelector附加的对象（可选）interest集合就像向Selector注册通道一节中所描述的，interest集合是你所选择的感兴趣的事件集合。可以通过SelectionKey读写interest集合，像这样：1234int interestSet = selectionKey.interestOps();boolean isInterestedInAccept = (interestSet &amp; SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT；// 其他的也类似...ready集合ready 集合是通道已经准备就绪的操作的集合。在一次选择（Selection）之后，你会首先访问这个ready set。Selection将在下一小节进行解释。可以这样访问ready集合：intreadySet = selectionKey.readyOps();可以用像检测interest集合那样的方法，来检测channel中什么事件或操作已经就绪。但是，也可以使用以下四个方法，它们都会返回一个布尔类型：1234selectionKey.isAcceptable();selectionKey.isConnectable();selectionKey.isReadable();selectionKey.isWritable();Channel + Selector从SelectionKey访问Channel和Selector很简单。如下：12Channel channel = selectionKey.channel();Selector selector = selectionKey.selector();附加的对象可以将一个对象或者更多信息附着到SelectionKey上，这样就能方便的识别某个给定的通道。例如，可以附加 与通道一起使用的Buffer，或是包含聚集数据的某个对象。使用方法如下：12selectionKey.attach(theObject);Object attachedObj = selectionKey.attachment();还可以在用register()方法向Selector注册Channel的时候附加对象。如：1SelectionKey key = channel.register(selector, SelectionKey.OP_READ, theObject);通过Selector选择通道一旦向Selector注册了一或多个通道，就可以调用几个重载的select()方法。这些方法返回你所感兴趣的事件（如连接、接受、读或写）已经准备就绪的那些通道。换句话说，如果你对“读就绪”的通道感兴趣，select()方法会返回读事件已经就绪的那些通道。下面是select()方法：int select()：阻塞到至少有一个通道在你注册的事件上就绪了。int select(long timeout)：和select()一样，除了最长会阻塞timeout毫秒(参数)。int selectNow()：不会阻塞，不管什么通道就绪都立刻返回（此方法执行非阻塞的选择操作。如果自从前一次选择操作后，没有通道变成可选择的，则此方法直接返回零。）。select()方法返回的int值表示有多少通道已经就绪。亦即，自上次调用select()方法后有多少通道变成就绪状态。如果调用select()方法，因为有一个通道变成就绪状态，返回了1，若再次调用select()方法，如果另一个通道就绪了，它会再次返回1。如果对第一个就绪的channel没有做任何操作，现在就有两个就绪的通道，但在每次select()方法调用之间，只有一个通道就绪了。selectedKeys()一旦调用了select()方法，并且返回值表明有一个或更多个通道就绪了，然后可以通过调用selector的selectedKeys()方法，访问“已选择键集（selected key set）”中的就绪通道。如下所示：1Set selectedKeys = selector.selectedKeys();当像Selector注册Channel时，Channel.register()方法会返回一个SelectionKey 对象。这个对象代表了注册到该Selector的通道。可以通过SelectionKey的selectedKeySet()方法访问这些对象。可以遍历这个已选择的键集合来访问就绪的通道。如下：123456789101112131415Set selectedKeys = selector.selectedKeys();Iterator keyIterator = selectedKeys.iterator();while(keyIterator.hasNext()) &#123; SelectionKey key = keyIterator.next(); if(key.isAcceptable()) &#123; // a connection was accepted by a ServerSocketChannel. &#125; else if (key.isConnectable()) &#123; // a connection was established with a remote server. &#125; else if (key.isReadable()) &#123; // a channel is ready for reading &#125; else if (key.isWritable()) &#123; // a channel is ready for writing &#125; keyIterator.remove();&#125;这个循环遍历已选择键集中的每个键，并检测各个键所对应的通道的就绪事件。注意每次迭代末尾的keyIterator.remove()调用。Selector不会自己从已选择键集中移除SelectionKey实例。必须在处理完通道时自己移除。下次该通道变成就绪时，Selector会再次将其放入已选择键集中。SelectionKey.channel()方法返回的通道需要转型成你要处理的类型，如ServerSocketChannel或SocketChannel等。SocketChannel打开 SocketChannel下面是SocketChannel的打开方式：12SocketChannel socketChannel = SocketChannel.open();socketChannel.connect(new InetSocketAddress(&quot;127.0.0.1&quot;, 20000));关闭 SocketChannel1socketChannel.close();ServerSocketChannelJava NIO中的 ServerSocketChannel 是一个可以监听新进来的TCP连接的通道, 就像标准IO中的ServerSocket一样。ServerSocketChannel类在 java.nio.channels包中。打开 ServerSocketChannel通过调用 ServerSocketChannel.open() 方法来打开ServerSocketChannel，如：1ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();关闭 ServerSocketChannel通过调用ServerSocketChannel.close() 方法来关闭ServerSocketChannel，如：1serverSocketChannel.close();监听新进来的连接通过 ServerSocketChannel.accept() 方法监听新进来的连接。当 accept()方法返回的时候,它返回一个包含新进来的连接的 SocketChannel。因此, accept()方法会一直阻塞到有新连接到达。通常不会仅仅只监听一个连接,在while循环中调用 accept()方法，如下面的例子：123456while(true)&#123; SocketChannel socketChannel = serverSocketChannel.accept(); //do something with socketChannel...&#125;当然，也可以在while循环中使用除了true以外的其它退出准则。非阻塞模式ServerSocketChannel可以设置成非阻塞模式。在非阻塞模式下，accept() 方法会立刻返回，如果还没有新进来的连接,返回的将是null。 因此，需要检查返回的SocketChannel是否是null，如：12345678910111213ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();serverSocketChannel.socket().bind(new InetSocketAddress(9999));serverSocketChannel.configureBlocking(false);while(true)&#123; SocketChannel socketChannel = serverSocketChannel.accept(); if(socketChannel != null)&#123; //do something with socketChannel... &#125;&#125;服务器使用NIO向客户端Echo数据的例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134package com.core;import java.io.BufferedInputStream;import java.io.FileInputStream;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.ClosedChannelException;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel;import java.nio.charset.Charset;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.Scanner;import java.util.Set;public class EchoSeverZJH &#123; private Selector selector; private ServerSocketChannel serverSocketChannel; private int port = 8000; private Charset charset = Charset.forName("utf-8"); private List&lt;String&gt; list = new ArrayList&lt;&gt;(); private int num; public EchoSeverZJH()&#123; try &#123; selector = Selector.open(); serverSocketChannel = ServerSocketChannel.open(); serverSocketChannel.configureBlocking(false); serverSocketChannel.socket().setReuseAddress(true); serverSocketChannel.socket().bind(new InetSocketAddress(port)); &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; System.out.println("服务器开启成功... : " + new Date()); list.add("一共有18018条航班数据"); try (Scanner cin = new Scanner(new BufferedInputStream(new FileInputStream("copy")))) &#123; String line = null; while(cin.hasNext()) &#123; line = cin.nextLine(); list.add(line); &#125; list.add("no data"); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; num = list.size(); System.out.println("数据已准备好... : " + new Date()); &#125; public void service()&#123; try &#123; serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); &#125; catch (ClosedChannelException e) &#123; e.printStackTrace(); &#125; while (true) &#123; //没有连接就会阻塞 int n = 0; try &#123; n = selector.select(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; if (n == 0) continue; Set&lt;SelectionKey&gt; readkeys = selector.selectedKeys(); Iterator&lt;SelectionKey&gt; iterator = readkeys.iterator(); while (iterator.hasNext()) &#123; SelectionKey key = iterator.next(); if(!key.isValid()) &#123; iterator.remove(); continue; &#125; if (key.isAcceptable()) &#123; accept(key); &#125; if (key.isWritable()) &#123; send(key); &#125; iterator.remove(); &#125; &#125; &#125; // 处理接收连接就绪事件 private void accept(SelectionKey key)&#123; // 返回一个对象 SocketChannel socketChannel; try &#123; socketChannel = serverSocketChannel.accept(); System.out.println("收到了客户端连接，来自 ： " + socketChannel.getRemoteAddress()); socketChannel.configureBlocking(false); //注册到selector socketChannel.register(selector, SelectionKey.OP_WRITE, 0); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; // 处理写就绪事件 private void send(SelectionKey key)&#123; SocketChannel socketChannel = (SocketChannel) key.channel(); int index = (int)key.attachment(); key.attach((index + 1) % num); String line = list.get(index); ByteBuffer outputBuffer = charset.encode(line + "\r\n"); while (outputBuffer.hasRemaining()) &#123; try &#123; socketChannel.write(outputBuffer); &#125; catch (IOException e) &#123; key.cancel(); try &#123; System.out.println(socketChannel.getRemoteAddress() + " 断开连接----"); socketChannel.socket().close(); socketChannel.close(); outputBuffer.clear(); break; &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; e.printStackTrace(); &#125; &#125; &#125; public static void main(String[] args)&#123; new EchoSeverZJH().service(); &#125;&#125;1234567891011121314151617181920212223242526272829303132333435package com.core;import java.io.IOException;import java.net.InetAddress;import java.net.Socket;import java.util.Scanner;public class ReadFromSocket&#123; public static void main(String[] args) &#123; Socket socket = null; Scanner sc = null; try &#123; socket = new Socket(InetAddress.getByName("127.0.0.1"), 8000); String line = null; sc = new Scanner(socket.getInputStream()); line = sc.nextLine(); System.out.println(line); while (sc.hasNext()) &#123; Thread.sleep(1000); line = sc.nextLine(); System.out.println(line); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;finally &#123; try &#123; socket.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; sc.close(); &#125; &#125;&#125;Selector维护的集合对上面的代码有一个很大的疑问，即服务器端为什么要进行iterator.remove();。解答这个问题之前我们先来理一下思路：服务器端有一个ServerSocketChannel，它绑定了端口号，且设置为非阻塞模式，它先向Selector中注册：serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);。ServerSocketChannel在注册的时候指定的事件是：OP_ACCEPT`，表示接收连接就绪事件，即服务器在监听客户连接。每一个注册到selector上的channel都会被加入一个集合（key set），这个集合可以通过selector.keys()方法返回。然后判断已经准备好的连接n = selector.select();有几个，如果等于0则表示没有准备好的连接，此时需要continue。其中，已经准备好的连接可以按如下获得：Set&lt;SelectionKey&gt; readkeys = selector.selectedKeys();。即所有已经准备好channel都在一个集合（selected-key）中。但是selected-key本身并不是线程安全的，所以在处理的时候需要判断其是不是已经合法的，比如如果客户端中断了访问，则不能在传输数据，即其实不合法的。同时，每个都撤销的channel都在cancelled-key set中，但是所关联channel还没有被撤销登记。其不能够被直接返回，但也一定是key set的子集。所以我们移出的其实只是已准备好的channel的key。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-Channel和Buffer]]></title>
    <url>%2F2019%2FJava-Channel%E5%92%8CBuffer%2F</url>
    <content type="text"><![CDATA[ChannelJava NIO的通道类似流，但又有些不同：既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。通道可以异步地读写。通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。java.nio.channels.Channel接口只声明了两个方法：close()：关闭通道。isOpen()：判断通道是否打开。通道在创建时被打开，一旦关闭通道，就不能重新打开它。Channel的实现这些是Java NIO中最重要的通道的实现：FileChannel：从文件中读写数据。DatagramChannel：能通过UDP读写网络中的数据。SocketChannel：能通过TCP读写网络中的数据。ServerSocketChannel：可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。BufferJava NIO中的Buffer用于和NIO通道进行交互。如你所知，数据是从通道读入缓冲区，从缓冲区写入到通道中的。缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。为了理解Buffer的工作原理，需要熟悉它的三个属性：capacity：作为一个内存块，Buffer有一个固定的大小值，叫“capacity”。你只能往对应的Buffer里写capacity个byte、long，char等类型。一旦Buffer满了，需要将其清空（通过读数据或者清除数据）才能继续写数据往里写数据。position：当你写数据到Buffer中时，position表示当前的位置。初始的position值为0，当一个byte、long等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为capacity – 1。当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，position会被重置为0. 当从Buffer的position处读取数据时，position向前移动到下一个可读的位置。limit：写模式下，Buffer的limit表示你最多能往Buffer里写多少数据，此时limit等于Buffer的capacity。当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）Buffer的实现Java NIO 有以下Buffer类型ByteBufferMappedByteBufferCharBufferDoubleBufferFloatBufferIntBufferLongBufferShortBufferBuffer详解在我们刚才的说明中提到了写模式和读模式，但是实际上这只是被强行赋予的，即JDK中并没有说法，这么说只是为了更方便的理解，所以下面我们来解读一下Buffer的API及怎么在两种模式之间进行切换。需要指出：写模式指的是想Buffer写入，读模式是从Buffer里读出。Buffer的分配要想获得一个Buffer对象首先要进行分配。 每一个Buffer类都有一个allocate方法。下面是一个分配48字节capacity的ByteBuffer的例子。ByteBuffer buf = ByteBuffer.allocate(48);这是分配一个可存储1024个字符的CharBuffer：CharBuffer buf = CharBuffer.allocate(1024);刚获得的Buffer默认是写模式。### 向Buffer中写数据写数据到Buffer有两种方式：- 从Channel写到Buffer：int bytesRead = inChannel.read(buf); //read into buffer- bytesRead指读出的数据大小。当bytesRead为-1时表示缓存区中不再有数据。- 通过Buffer的put()方法写到Buffer里：buf.put(127);- put()：相对写。向缓冲区的当前位置写入一个单元的数据，写完后把位置加1。- put(int index)：绝对写。向参数index指定的位置写入一个单元的数据。12345678910111213141516171819202122232425262728293031323334package com.test;import java.io.RandomAccessFile;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;import java.nio.charset.Charset;public class Demo1 &#123; private static Charset charset = Charset.forName("UTF-8"); public static void main(String[] args) throws Exception &#123; /** * test_in是有数据的文件，用于被读入至Java程序 */ RandomAccessFile fileIn = new RandomAccessFile("test_in", "rw"); FileChannel inChannel = fileIn.getChannel(); ByteBuffer buf = ByteBuffer.allocate(48); int bytesRead = inChannel.read(buf); while (bytesRead != -1) &#123; System.out.println("Read " + bytesRead); buf.flip(); //写模式切换为读模式 System.out.println(charset.decode(buf).toString()); buf.clear(); bytesRead = inChannel.read(buf); &#125; fileIn.close(); &#125;&#125;inChannel.read(buf);之后，buf.flip();之前Buffer的状态：向Channel中写数据12345678910111213141516171819202122232425262728293031323334353637package com.test;import java.io.RandomAccessFile;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;import java.nio.charset.Charset;public class Demo2 &#123; private static Charset charset = Charset.forName("UTF-8"); public static void main(String[] args) throws Exception &#123; /** * test_in是有数据的文件，用于被读入至Java程序 * test_out中没有数据，用于Java程序的写出 */ RandomAccessFile fileIn = new RandomAccessFile("test_in", "rw"); RandomAccessFile fileOut = new RandomAccessFile("test_out", "rw"); FileChannel inChannel = fileIn.getChannel(); FileChannel outChannel = fileOut.getChannel(); ByteBuffer buf = ByteBuffer.allocate(48); int bytesRead = -1; do &#123; bytesRead = inChannel.read(buf); System.out.println("Read " + bytesRead); buf.flip(); //写模式切换为读模式 outChannel.write(buf); buf.clear(); &#125;while(bytesRead != -1); fileIn.close(); fileOut.close(); &#125;&#125;buf.flip();之后，outChannel.write(buf);之前Buffer的状态。测试limit1234567891011121314151617181920212223242526272829303132333435363738package com.test;import java.io.RandomAccessFile;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;import java.nio.charset.Charset;public class Demo2 &#123; private static Charset charset = Charset.forName("UTF-8"); public static void main(String[] args) throws Exception &#123; /** * test_in是有数据的文件，用于被读入至Java程序 * test_out中没有数据，用于Java程序的写出 */ RandomAccessFile fileIn = new RandomAccessFile("test_in", "rw"); RandomAccessFile fileOut = new RandomAccessFile("test_out", "rw"); FileChannel inChannel = fileIn.getChannel(); FileChannel outChannel = fileOut.getChannel(); ByteBuffer buf = ByteBuffer.allocate(48); int bytesRead = -1; do &#123; bytesRead = inChannel.read(buf); System.out.println("写模式下： " + buf.limit()); buf.flip(); //写模式切换为读模式 System.out.println("读模式下： " + buf.limit()); outChannel.write(buf); buf.clear(); &#125;while(bytesRead != -1); fileIn.close(); fileOut.close(); &#125;&#125;rewind()方法Buffer.rewind()将position设回0，所以你可以重读Buffer中的所有数据。limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。clear()与compact()方法一旦读完Buffer中的数据，需要让Buffer准备好再次被写入。可以通过clear()或compact()方法来完成。如果调用的是clear()方法，position将被设回0，limit被设置成 capacity的值。换句话说，Buffer被清空了。Buffer中的数据并未清除。如果Buffer中有一些未读的数据，调用clear()方法，数据将“被遗忘”，意味着不再有任何标记会告诉你哪些数据被读过，哪些还没有。如果Buffer中仍有未读的数据，且后续还需要这些数据，但是此时想要先先写些数据，那么使用compact()方法。compact()方法将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit属性依然像clear()方法一样，设置成capacity。现在Buffer准备好写数据了，但是不会覆盖未读的数据。mark()与reset()方法通过调用Buffer.mark()方法，可以标记Buffer中的一个特定位置。之后可以通过调用Buffer.reset()方法将position置于这个位置。equals()与compareTo()方法equals()当满足下列条件时，表示两个Buffer相等：有相同的类型（byte、char、int等）。Buffer中剩余的byte、char等的个数相等。Buffer中所有剩余的byte、char等都相同。如你所见，equals只是比较Buffer的一部分，不是每一个在它里面的元素都比较。实际上，它只比较Buffer中的剩余元素。compareTo()方法compareTo()方法比较两个Buffer的剩余元素(byte、char等)， 如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：第一个不相等的元素小于另一个Buffer中对应的元素 。所有元素都相等，但第一个Buffer比另一个先耗尽（第一个Buffer的元素个数比另一个少）。Scatter/Gatherscatter：分散，从Channel中读取是指在读操作时将读取的数据写入多个buffer中。因此，Channel将从Channel中读取的数据“分散（scatter）”到多个Buffer中。Scattering Reads是指数据从一个channel读取到多个buffer中。如下图描述：12345678910111213141516171819202122232425package com.test;import java.io.RandomAccessFile;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;import java.nio.charset.Charset;public class Demo3 &#123; private static Charset charset = Charset.forName("UTF-8"); public static void main(String[] args) throws Exception &#123; RandomAccessFile file = new RandomAccessFile("test_in", "rw"); FileChannel channel = file.getChannel(); ByteBuffer header = ByteBuffer.allocate(6); ByteBuffer body = ByteBuffer.allocate(64); ByteBuffer[] bufferArray = &#123; header, body &#125;; long read = channel.read(bufferArray); System.out.println(read); header.flip(); body.flip(); System.out.println(charset.decode(header).toString()); System.out.println(charset.decode(body).toString()); &#125;&#125;read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer，当一个buffer被写满后，channel紧接着向另一个buffer中写。Scattering Reads在移动下一个buffer前，必须填满当前的buffer，这也意味着它不适用于动态消息（消息大小不固定）。换句话说，如果存在消息头和消息体，消息头必须完成填充（例如 128byte），Scattering Reads才能正常工作。gather：聚集，写入Channel是指在写操作时将多个buffer的数据写入同一个Channel，因此，Channel 将多个Buffer中的数据“聚集（gather）”后发送到Channel。Gathering Writes是指数据从多个buffer写入到同一个channel。如下图描述：123456789101112131415161718192021222324252627package com.test;import java.io.RandomAccessFile;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;public class Demo4 &#123; public static void main(String[] args) throws Exception &#123; RandomAccessFile fileOut = new RandomAccessFile("test_out", "rw"); FileChannel channelOut = fileOut.getChannel(); ByteBuffer header = ByteBuffer.allocate(6); ByteBuffer body = ByteBuffer.allocate(64); header.put("陈".getBytes()); body.put("钰琪是个大可爱".getBytes()); ByteBuffer[] bufferArray = &#123; header, body &#125;; header.flip(); body.flip(); channelOut.write(bufferArray); fileOut.close(); &#125;&#125;通道之间的数据传输在Java NIO中，如果两个通道中有一个是FileChannel，那你可以直接将数据从一个channel传输到另外一个channel。transferFrom()FileChannel的transferFrom()方法可以将数据从源通道传输到FileChannel中（这个方法在JDK文档中的解释为将字节从给定的可读取字节通道传输到此通道的文件中）。下面是一个简单的例子：123456789101112131415161718192021222324package com.test;import java.io.RandomAccessFile;import java.nio.channels.FileChannel;public class Demo5 &#123; public static void main(String[] args) throws Exception &#123; RandomAccessFile fromFile = new RandomAccessFile("test_in", "rw"); FileChannel fromChannel = fromFile.getChannel(); RandomAccessFile toFile = new RandomAccessFile("test_out", "rw"); FileChannel toChannel = toFile.getChannel(); long position = 0; long count = fromChannel.size(); toChannel.transferFrom(fromChannel, position, count); fromFile.close(); toFile.close(); &#125;&#125;transferTo()将数据从FileChannel传输到其他的channe中。下面是一个简单的例子：123456789101112131415161718192021222324package com.test;import java.io.RandomAccessFile;import java.nio.channels.FileChannel;public class Demo6 &#123; public static void main(String[] args) throws Exception &#123; RandomAccessFile fromFile = new RandomAccessFile("test_in", "rw"); FileChannel fromChannel = fromFile.getChannel(); RandomAccessFile toFile = new RandomAccessFile("test_out", "rw"); FileChannel toChannel = toFile.getChannel(); long position = 0; long count = fromChannel.size(); fromChannel.transferTo(position, count, toChannel); fromFile.close(); toFile.close(); &#125;&#125;参考http://ifeve.com/Java-Channel和Buffer-all/]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[方法功能的增强]]></title>
    <url>%2F2019%2F%E6%96%B9%E6%B3%95%E5%8A%9F%E8%83%BD%E7%9A%84%E5%A2%9E%E5%BC%BA%2F</url>
    <content type="text"><![CDATA[引言方法功能的增强是开发时常做的事情，当官方或者第三方提供的API不能满足我们的需要时，可以在原有API的基础上加上我们自定义的功能来实现需求。常见的功能增强的方式有三种：继承、装饰者模式、动态代理。准备工作以最近看的某码农培训班的视频结合自己的理解给出个例子来理解。现在有一个很火的概念：无人驾驶。假设无人驾驶的标准是Oracle公司制定的，Google想使用Java语言来开发无人驾驶系统，那么首先它需要创建一个类实现Oracle公司提供的无人驾驶的接口（接口为AIDriving，类为GoogleAIDriving）。AIDriving1234public interface AIDriving &#123; public void start(); //无人驾驶汽车启动的方法 public void stop(); //无人驾驶汽车停止的方法&#125;GoogleAIDriving12345678public class GoogleAIDriving implements AIDriving &#123; public void start() &#123; System.out.println("Google汽车启动了..."); &#125; public void stop() &#123; System.out.println("Google汽车停止了..."); &#125;&#125;继承这个时候国内某汽车制造公司（设为A公司）想使用Google提供的无人驾驶系统。但是Google提供的系统不太适合我国国情，所以A公司的工程师就想在Google系统的基础上进行定制。他们选择的方式是继承GoogleAIDriving，创建一个自己的类：A1GoogleAIDriving。12345678910public class A1GoogleAIDriving extends GoogleAIDriving&#123; public void start() &#123; System.out.println("在中国启动汽车"); super.start(); &#125; public void stop() &#123; System.out.println("在中国停止汽车"); super.stop(); &#125;&#125;装饰者模式但理想很美好，现实很残忍。GoogleAIDriving被定义为一个final类（不能被继承），这个是可以理解的，因为如果GoogleAIDriving不是一个final类，任何继承GoogleAIDriving的类都可以对其start()、stop()方法进行覆盖，如果覆盖时出现bug就可能会出现大问题。所以像启动、停止这种核心功能是不允许汽车制造商随意修改的。A公司的工程师就想到了使用装饰者模式来增强功能（设类为A2GoogleAIDriving）。装饰者模式该怎么做呢？首先，装饰类得和被装饰类实现相同的接口，即AIDriving；第二，在装饰类中定义一个AIDriving类型的属性，即AIDriving car；第三，有一个参数为AIDriving类型的构造函数，即A2GoogleAIDriving(AIDriving car)；第四，装饰类的每个方法都要调用被装饰类相应的方法；第五，使用第三步中的构造函数创建装饰类；第六，在装饰类的方法中自定义功能。创建装饰类123456789101112131415public class A2GoogleAIDriving implements AIDriving &#123; private AIDriving car; public A2GoogleAIDriving(AIDriving car) &#123; this.car = car; &#125; public void start() &#123; System.out.println("在中国启动汽车..."); car.start(); &#125; public void stop() &#123; System.out.println("在中国停止汽车..."); car.stop(); &#125;&#125;调用装饰类12345678910public class Test &#123; public static void main(String[] args) &#123; GoogleAIDriving car = new GoogleAIDriving(); A2GoogleAIDriving aCar = new A2GoogleAIDriving(car); aCar.start(); /* Console : 在中国启动汽车... Google汽车启动了... */ &#125;&#125;动态代理A公司工程师正沉浸在胜利到来前的喜悦中，突然他们发现AIDriving接口有1000个方法，所以在装饰类中其他不需要加入自定义动能的998个方法我们也要调用。这一看就不是一个好的解决方案，A公司的某大佬就想起来动态代理。动态代理的详细讲解请见这里。动态代理中可以使用反射技术得到方法的信息，如果是start()或者stop()方法就加上自定义的功能，其他方法直接执行。A3GoogleAIDriving123456789101112131415161718192021222324252627public class A3GoogleAIDriving&#123; private AIDriving car; public A3GoogleAIDriving(AIDriving car) &#123; this.car = car; &#125; public AIDriving getIns() &#123; AIDriving a3GoogleAIDriving = (AIDriving)Proxy.newProxyInstance( GoogleAIDriving.class.getClassLoader(), GoogleAIDriving.class.getInterfaces(), new InvocationHandler() &#123; public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; if(method.getName().equals("start") &amp;&amp;method.getParameterTypes().length == 0) &#123; System.out.println("在中国启动汽车..."); return method.invoke(car, args); &#125;else if (method.getName().equals("stop") &amp;&amp;method.getParameterTypes().length == 0) &#123; System.out.println("在中国停止汽车..."); return method.invoke(car, args); &#125; return method.invoke(car, args); &#125; &#125;); return a3GoogleAIDriving; &#125;&#125;执行A3GoogleAIDriving123456789101112public static void main(String[] args) throws Exception &#123; GoogleAIDriving car = new GoogleAIDriving(); A3GoogleAIDriving a3GoogleAIDriving = new A3GoogleAIDriving(car); AIDriving ins = a3GoogleAIDriving.getIns(); ins.start(); ins.stop(); /* Console : 在中国启动汽车... Google汽车启动了... 在中国停止汽车... Google汽车停止了... */&#125;三种方式总结分析了三种方式的功能增强，各位大腿是不是被小码农带入了一个误区：后者比前者更好？按照存在即合理的解释，肯定不是这样的。相反，三种方法中继承却是最常见的增强方式，因为它结构简单、易于理解。而后两种都是设计模式，一般在大型软件开发时才会用到。而且对于装饰者模式和动态代理的区别是：装饰者模式一般用于增强功能，动态代理一般用于拦截对方法的请求。装饰者模式解决Web开发乱码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import java.io.UnsupportedEncodingException;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;/** * @ClassName: RequestEncodingUtils * @Description: TODO(解决request乱码的工具类) * @author 詹金浩 * @date 2018年3月11日 下午2:27:04 */public class RequestEncodingUtils extends HttpServletRequestWrapper &#123; private HttpServletRequest request; private Boolean isEncoded = false; public RequestEncodingUtils(HttpServletRequest request) &#123; super(request); this.request = request; &#125; @Override public Map&lt;String, String[]&gt; getParameterMap() &#123; String method = request.getMethod(); Map&lt;String, String[]&gt; parameterMap = request.getParameterMap(); //处理Post请求 if(method.equalsIgnoreCase("post")) &#123; try &#123; request.setCharacterEncoding("utf-8"); parameterMap = request.getParameterMap(); &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; &#125;else if (method.equalsIgnoreCase("get")) &#123; //处理Get请求 //保证编码只被执行一次 if(!isEncoded) &#123; for(String key : parameterMap.keySet()) &#123; String []values = parameterMap.get(key); if(values != null) &#123; for(int i = 0; i &lt; values.length; i++) &#123; try &#123; values[i] = new String(values[i].getBytes("ISO-8859-1"),"utf-8"); &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; &#125; isEncoded = true; &#125; return parameterMap; &#125; @Override public String[] getParameterValues(String name) &#123; Map&lt;String, String[]&gt; parameterMap = this.getParameterMap(); String []values = parameterMap.get(name); return values; &#125; @Override public String getParameter(String name) &#123; String []values = getParameterValues(name); return values!=null?values[0]:null; &#125;&#125;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import java.io.IOException;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import com.sys.utils.RequestEncodingUtils;/** * @ClassName: GlobalEncoding * @Description: TODO(解决全局编码的filter) * @author 詹金浩 * @date 2018年3月10日 下午10:26:09 */@WebFilter("/*")public class GlobalEncoding implements Filter &#123; /** * Default constructor. */ public GlobalEncoding() &#123; // TODO Auto-generated constructor stub &#125; public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; response.setContentType("text/html;charset=UTF-8"); RequestEncodingUtils myRequest = new RequestEncodingUtils((HttpServletRequest)request); chain.doFilter(myRequest, response); &#125; /** * @see Filter#destroy() */ public void destroy() &#123; // TODO Auto-generated method stub &#125; /** * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain) */ /** * @see Filter#init(FilterConfig) */ public void init(FilterConfig fConfig) throws ServletException &#123; // TODO Auto-generated method stub &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态代理]]></title>
    <url>%2F2019%2F%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[理解代理代理这个词对于广告满天飞的现代社会应该是很常见了，和它具有相同意义还有中介、经纪人等词。我们就以找影视明星拍片为例来理解代理。假如你有一个很好的剧本，现在想找A明星来做主角，可以两种方式：第一种是直接找A明星本人，第二种是找A明星的经纪人。但是明星的主要功能是拍戏，如果诸如报酬、档期、宣传等工作也让A明星来负责，势必会减少他/她的拍戏时间，所以更好的方式是去寻求他/她的经纪人，让经纪人来做这些拍戏以外的工作。但同时经济人也得有和明星A一样的功能，比如A会演戏、唱歌、跳舞，那么经纪人也得有这些功能，只不过经纪人的功能是让明星A去完成的，经纪人本身只提供这种服务的接口。而我们所说的明星A便是目标对象，经纪人便是代理对象。对于Java中的代理，假如有一个方法（设为M1）的功能是把UTF-8编码下的字符转化成GBK编码下的字符。那么这个方法的功能就是进行转化、对于判断传入的是不是UTF-8编码下的字符这种事情应该传入之前就处理完成，所以这时候就要有一个代理方法（设为M2）在M1执行之前做个处理。当然M1执行完毕之后也可能存在M3进行一些处理。代理对象的要点代理对象存在的价值主要用于拦截对目标对象的访问。代理对象应该具有和目标对象相同的方法。动态代理在我们刚才的解释中，每个目标对象都要有一个实在的代理对象，这在实际开发中是很耗费精力的一件事，但如果说能在程序运行期间给我们动态生成一个代理对象可以大大减小编写的代码的压力。所以动态代理的概念就是：不用手动编写一个代理对象，不需要编写与目标对象相同的方法，运行时在内存中动态生成代理对象（字节码对象级别的代理对象）。JDK提供的动态代理JDK1.5之后为我们提供了用于专用于动态生成代理对象的类：java.lang.reflect.Proxy。有一个很重要的静态方法：12static Object newProxyInstance (ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHander h)在解释参数之前，我们先看一个接口InvocationHander，JDK对它的解释是：Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the method of its invocation handler.（每个代理实例都有一个关联的调用处理程序。当在代理实例上调用方法时，将方法调用编码并调度到其调用处理程序的方法。） 它只有一个invoke()方法。我们之后执行时真正起作用的也是这个方法。public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;对newProxyInstance()方法参数的解释在下面的例子中。明星接口12345public interface BrightStar &#123; public void sing(); public String dancing(); public String ShootFilm(String filmName);&#125;A明星类1234567891011121314public class StarA implements BrightStar&#123; @Override public void sing() &#123; System.out.println("A is singing..."); &#125; @Override public String dancing() &#123; return "Hai cao wu"; &#125; @Override public String ShootFilm(String filmName) &#123; return filmName; &#125;&#125;测试动态代理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public class Test &#123; public static void main(String[] args) &#123; StarA starA = new StarA(); BrightStar newProxyInstance = (BrightStar)Proxy.newProxyInstance( //代理类的类加载器，获取目标类加载器即可 StarA.class.getClassLoader(), //代理类应该实现的接口，由于代理类和目标类需要继承相同的接口，使用目标类的接口即可 StarA.class.getInterfaces(), //使用匿名内部类传入InvocationHandler的实例 new InvocationHandler() &#123; /* * proxy：传入代理对象。 * method：被执行的方法。 * args：传入的参数。 * 例子： newProxyInstance.ShootFilm("我不是药神"); * proxy：newProxyInstance； method：ShootFilm； args："我不是药神" */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; //执行前的操作 System.out.println("before"); Object invoke = method.invoke(starA, args); //执行后的操作 System.out.println("after"); return invoke; &#125; &#125;); //调用方法 newProxyInstance.sing(); System.out.println("------------------------------------"); String dancing = newProxyInstance.dancing(); System.out.println(dancing); System.out.println("------------------------------------"); String film = newProxyInstance.ShootFilm("我不是药神"); System.out.println(film); /* Console : before A is singing... after ------------------------------------ before after Hai cao wu ------------------------------------ before after 我不是药神 */ &#125;&#125;下面介绍一个经典案例，使用动态代理解决Web工程的全局编码问题。前端代码1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;title&gt;Insert_Title_Here&lt;/title&gt; &lt;/head&gt; &lt;style&gt; &lt;/style&gt; &lt;body&gt; &lt;!--主体部分--&gt; &lt;h2&gt;get方式&lt;/h2&gt; &lt;form action="/ProxySolveCoding/test" method="get"&gt; &lt;input name="name" type="text"/&gt; &lt;input type="submit" value="提交"/&gt; &lt;/form&gt; &lt;h2&gt;post方式&lt;/h2&gt; &lt;form action="/ProxySolveCoding/test" method="post"&gt; &lt;input name="name" type="text"/&gt; &lt;input type="submit" value="提交"/&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;Servlet1234567891011121314@WebServlet("/test")public class Test extends HttpServlet &#123; private static final long serialVersionUID = 1L; public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String name = request.getParameter("name"); System.out.println(name); &#125; public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125;&#125;filter12345678910111213141516171819202122232425262728293031@WebFilter(urlPatterns="/*")public class FilterCoding implements Filter &#123; public void init(FilterConfig filterConfig) throws ServletException &#123; &#125; public void destroy() &#123; &#125; public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; final HttpServletRequest req = (HttpServletRequest)request; HttpServletRequest proReq = (HttpServletRequest)Proxy.newProxyInstance( req.getClass().getClassLoader(), req.getClass().getInterfaces(), new InvocationHandler() &#123; public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; if(method.getName().equalsIgnoreCase("getParameter")) &#123; String gm = req.getMethod(); if(gm.equalsIgnoreCase("get")) &#123; //处理get方式的请求 String before = (String) method.invoke(req, args); System.out.println(before); String after = new String(before.getBytes("iso-8859-1"), "utf-8"); return after; &#125;else &#123; //处理post形式的请求 req.setCharacterEncoding("utf-8"); &#125; &#125; return method.invoke(req, args); &#125; &#125;); chain.doFilter(proReq, response); &#125;&#125;JDK动态代理的特点能被代理的对象必须存在接口，否则会报错。且被增强的方法一定是在接口中有相同的方法签名。因为它生成代理对象的方式是拿到类的所有接口，然后根据这些接口和我们实现的InvocationHandler中的invoke()动态创建一个对象。Cglib概述是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。它是第三方实现的，所以需要导入jar包。特点和JDK提供的动态代理相比，Cglib更加灵活，不需要类上存在接口，因为它生成代理对象是通过现有的类派生出一个子类，在子类中加入我们新的条件。所以被代理的类不能使用final修饰。使用的例子123public interface UserDao &#123; void save();&#125;1234567891011121314import org.springframework.beans.factory.annotation.Value;public class UserDaoImpl implements UserDao &#123; @Value("HelloWorld") private String name; public void save() &#123; System.out.println("保存..."); &#125; public void talk() &#123; System.out.println("接口中没有我"); &#125; public String toString() &#123; return "UserDaoImpl [name=" + name + "]"; &#125;&#125;1234567891011121314151617181920212223242526272829303132333435363738394041import java.lang.reflect.Method;import com.spring.secondday.UserDao;import com.spring.secondday.UserDaoImpl;import net.sf.cglib.proxy.Enhancer;import net.sf.cglib.proxy.MethodInterceptor;import net.sf.cglib.proxy.MethodProxy;public class CglibProxy &#123; private UserDao ud; public CglibProxy(UserDao ud) &#123; this.ud = ud; &#125; public UserDaoImpl getProxy()&#123; Enhancer en = new Enhancer(); en.setSuperclass(ud.getClass()); en.setCallback(new MethodInterceptor() &#123; //proxy：被代理的对象 m：被增强的方法 args：方法所需的参数 methodProxy：增强后的方法 public Object intercept(Object proxy, Method m, Object[] args, MethodProxy methodProxy) throws Throwable &#123; System.out.println("before"); Object super1 = methodProxy.invokeSuper(proxy, args); System.out.println("after"); return super1; &#125; &#125;); UserDaoImpl proxy = (UserDaoImpl)en.create(); return proxy; &#125; public static void main(String[] args) &#123; UserDaoImpl ud = new UserDaoImpl(); UserDaoImpl proxy = new CglibProxy(ud).getProxy(); /*Console: before 接口中没有我 after */ proxy.talk(); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[策略模式]]></title>
    <url>%2F2019%2F%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[本文转至：https://blog.csdn.net/u011240877/article/details/52346671作者基于网络小说的套路，讲解了用代码如何实现“如何用固定套路写小说”先定义一个故事梗概接口 Synopsis ，里面设定了主要情节不幸的开始突然有天遇到神人/捡到神器以弱胜强，暂露光芒开挂似的升级超快组团刷怪九死一生（主角怎么也死不了）功成名就 + 妻妾成群1234567891011121314151617181920212223242526272829303132333435363738394041/** * 网络玄幻小说的故事梗概接口 * 固定的一些套路 * Created by zhangshixin on 8/27/2016. */public interface Synopsis &#123; /** * 穷困潦倒的开始 */ void badStart(); /** * 突然有天遇到神人/捡到神器，实力大涨 */ void adventure(); /** * 在一场战斗中以弱胜强 */ void winABattle(); /** * 从此飞速成长 */ void growFast(); /** * 组团刷怪,经历九死一生（主角怎么也死不了） */ void manyFights(); /** * 最终功成名就，妻妾成群 */ void succeed(); /** * 组合起来就是小说内容 */ void getContent();&#125;有了梗概剩下的就是填内容了，我们分别创建两个具体小说类 StoryA 、 StoryB故事 A ，跳舞的恶魔法则123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * 故事 A ，恶魔法则 * Created by zhangshixin on 8/27/2016. */public class StoryA implements Synopsis &#123; private String mName; public StoryA(String name) &#123; mName = name; &#125; @Override public void badStart() &#123; System.out.println(mName + " 无故穿越，因为没有魔法能力，成为将军家的废物，不受待见。"); &#125; @Override public void adventure() &#123; System.out.println(mName + " 因为意外来到恶魔岛，在恶魔岛上遇见了恶魔的仆人，获得了一直想要的使用魔法的能力"); &#125; @Override public void winABattle() &#123; System.out.println(mName + " 协助辰皇子夺得了帝国的权力，成为郁金香公爵"); &#125; @Override public void growFast() &#123; System.out.println(mName + " 先后在曾曾曾祖母、恶魔仆人、圣骑士、魔导师的帮助下飞速成长"); &#125; @Override public void manyFights() &#123; System.out.println(mName + " 建立魔法学院和魔法学会，与魔法工会分庭抗礼。坐拥西北十万雄兵，歼灭西北军团，打退草原人，带领人类全族击退北方的异族军队。"); &#125; @Override public void succeed() &#123; System.out.println(mName + " 娶了女皇为妻子，成为罗兰帝国的英雄。"); &#125; @Override public void getContent() &#123; badStart(); adventure(); winABattle(); growFast(); manyFights(); succeed(); &#125;&#125;故事 B ，萧鼎的诛仙1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * 故事 B ,诛仙 * Created by zhangshixin on 8/27/2016. */public class StoryB implements Synopsis &#123; private String mName; public StoryB(String name) &#123; mName = name; &#125; @Override public void badStart() &#123; System.out.println(mName + " 全村被屠，投入青云七脉中人数最少的大竹峰。"); &#125; @Override public void adventure() &#123; System.out.println(mName + " 在一次伐竹过程中，为追一只三眼灵猴，入青云山深处得到了烧火棍。"); &#125; @Override public void winABattle() &#123; System.out.println(mName + " 在七脉会武中侥幸进了前 4，和陆雪琪等人一起万蝠古窟历练。"); &#125; @Override public void growFast() &#123; System.out.println(mName + " 在魔教十年，深得鬼王器重和真传。"); &#125; @Override public void manyFights() &#123; System.out.println(mName + " 经历无数战斗，先是为鬼王卖命，后来与鬼王大战。"); &#125; @Override public void succeed() &#123; System.out.println("天地不仁，以万物为刍狗。 " + mName +" 最后成为最有资格拥有天书的人。"); &#125; @Override public void getContent() &#123; badStart(); adventure(); winABattle(); growFast(); manyFights(); succeed(); &#125;&#125;故事梗概、具体内容都有了，剩下的就是量产了123456789101112131415161718192021222324252627282930313233/** * 写小说 * Created by zhangshixin on 8/28/2016. */public class WriteNovel &#123; private Synopsis mSynopsis; //故事梗概 private String mMainActorName; //主角名称 /** * 梗概、内容都差不多确定后，换个名称就是另一部小说 * @param mainName */ public WriteNovel(String mainName)&#123; switch (mainName)&#123; case "张小凡": mSynopsis = new StoryB(mainName); break; case "杜维": mSynopsis = new StoryA(mainName); break; default: mSynopsis = new StoryB(mainName); break; &#125; &#125; /** * 获取小说内容 */ public void getNovelDetail()&#123; mSynopsis.getContent(); &#125;&#125;客户端只要输入主角名称，就可以得到一部小说，比如写一部类似诛仙的小说，主角名称为张拭心12345@Testpublic void testGetNovelDetail() throws Exception &#123; WriteNovel writeNovel = new WriteNovel("张拭心"); writeNovel.getNovelDetail();&#125;我们可以把 WriteNovel 类中的 default 设置为 StoryB ，即 诛仙：12345678public WriteNovel(String mainName)&#123; switch (mainName)&#123; //...省略掉不关键的内容 default: mSynopsis = new StoryB(mainName); break; &#125;&#125;假如现在需求变了，要写一部穿越的小说，主角还是 张拭心，这时只需修改 WriteNovel 中的 default 设置为 StoryA ，即 恶魔法则 即可，客户端不需要修改1234567891011121314151617/** * 梗概、内容都差不多确定后，换个名称就是另一部小说 * @param mainName */public WriteNovel(String mainName)&#123; switch (mainName)&#123; case &quot;张小凡&quot;: mSynopsis = new StoryB(mainName); break; case &quot;杜维&quot;: mSynopsis = new StoryA(mainName); break; default: mSynopsis = new StoryA(mainName); break; &#125;&#125;我们将公共的情节提取到梗概接口 Synopsis 中，然后创建不同的故事类，写小说时WriteNovel 中有一个接口的引用，根据客户端传入主角名称创建不同的实现类。其实这就是传说中的 策略模式。只要遇到很多 if-else 或者有很多 case 的 switch，就可以考虑使用策略模式了，将这些行为独立的封装起来，可以在公共类中消除条件语句。在实践中，只要听到需要在不同情况下应用不同的业务，就可以考虑使用策略模式来封装这种变化的可能性。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[requset的get开头无参方法测试]]></title>
    <url>%2F2019%2Frequset%E7%9A%84get%E5%BC%80%E5%A4%B4%E6%97%A0%E5%8F%82%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[笔者一直都对request.get*()方法觉得迷惑，分不清返回的到底是什么东西。所以做个测试：12345678910111213141516171819202122232425262728293031323334353637383940414243444546package test;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet("/test")public class Test extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; System.out.println(request.getRequestURL().toString()); System.out.println(request.getRequestURI().toString()); System.out.println(request.getServletPath()); System.out.println(request.getServerPort()); System.out.println(request.getScheme()); System.out.println(request.getRemoteUser()); System.out.println(request.getRemotePort()); System.out.println(request.getRemoteHost()); System.out.println(request.getRemoteAddr()); System.out.println(request.getQueryString()); System.out.println(request.getProtocol()); System.out.println(request.getPathTranslated()); System.out.println(request.getAuthType()); System.out.println(request.getCharacterEncoding()); System.out.println(request.getContentLength()); System.out.println(request.getContentLengthLong()); System.out.println(request.getContentType()); System.out.println(request.getContextPath()); System.out.println(request.getLocalAddr()); System.out.println(request.getLocalName()); System.out.println(request.getLocalPort()); System.out.println(request.getMethod()); System.out.println(request.getPathInfo()); &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125;客户端IP：10.5.70.87服务器IP：10.5.69.2041234567891011121314151617181920212223242526getAuthType : nullgetCharacterEncoding : nullgetContentLength : -1getContentLengthLong : -1getContentType : nullgetContextPath : /Test-URI //webapps下的项目文件夹名称getLocalAddr : 10.5.69.204 //相对Web应用来说是Local，对B/S结构来说是SgetLocalName : DESKTOP-OI1K2LH //S的名称getLocalPort : 80 //S的端口号getMethod : GETgetPathInfo : nullgetPathTranslated : nullgetProtocol : HTTP/1.1getQueryString : id=10getRemoteAddr : 10.5.70.87 //B/S的B的地址getRemoteHost : 10.5.70.87getRemotePort : 52897 //B的端口号getRemoteUser : nullgetRequestedSessionId : nullgetRequestURI : /Test-URI/test //相对于项目的地址getScheme : http //协议类型getServerName : 10.5.69.204getServerPort : 80getServletPath : /test //Servlet映射的地址getAttributeNames : java.util.Collections$3@1994a730getRequestURL : http://10.5.69.204/Test-URI/test //浏览器中输入地址]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[File和Path和Files]]></title>
    <url>%2F2019%2FFile%E5%92%8CPath%E5%92%8CFiles%2F</url>
    <content type="text"><![CDATA[File构造123456789public File(String filepath);绝对路径:以盘符开头的路径相对路径:相对当前项目的根目录public File(String parent, String child);public File(File parent,String child);public File(URI uri);123456789101112public class Demo1 &#123; public static void main(String[] args) &#123; File aFile; try &#123; aFile = new File(new URI("file:///https://isjinhao.github.io/2019/Maven%E5%9F%BA%E7%A1%80/%E4%BC%A0%E7%BB%9F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91.png")); System.out.println(aFile.getName());// false &#125; catch (URISyntaxException e) &#123; e.printStackTrace(); &#125; &#125;&#125;获取方法123456789public String getAbsolutePath();//获取绝对路径public String getName();//获取当前File对象的名字public String getPath();//获取创建File对象时 传递的路径public long length();//获取表示文件的File对象的占用的字节数//如果是文件夹的File对象,返回目录本身的大小,不是目录及其所有孩子的大小创建和删除创建方法创建文件1public boolean createNewFile();//创建一个新的文件(只能是文件,不能是文件夹),返回是否创建成功创建文件夹1public boolean mkdir();//创建一个新的文件夹,返回是否创建成功判断方法判断File对象所表示的文件在OS中是否存在1public boolean exists(); //返回该File 对象是否存在判断是否是文件1public boolean isFile();//返回是否是文件判断是否是文件夹1public boolean isDirectory();//返回是否是文件夹删除方法1public boolean delete();//删除文件或者文件夹。可以删除的是单个文件,或者空文件夹File类的list和listFiles方法123public String[] list();public File[] listFiles();//只能列出当前文件夹下的一级子文件或者子文件夹文件过滤123456789101112131415161718192021222324252627package file;import java.io.File;import java.io.FileFilter;public class Demo2 &#123; public static void main(String[] args) &#123; File fileDir = new File("D:\\blog\\isjinhao\\source\\_posts\\04-进程管理"); //列出file下所有file对象 MyFileFilter ff = new MyFileFilter(); File[] files = fileDir.listFiles(ff); for (File file : files) &#123; System.out.println(file); &#125; &#125;&#125;class MyFileFilter implements FileFilter&#123; @Override public boolean accept(File pathname) &#123; String name = pathname.getName(); if(name.endsWith(".png") || name.endsWith(".PNG")) return true; return false; &#125;&#125;PathPath是JDK7中表达路径的一个新方式，在Path中，它把文件的路径看做几个部件组成的，比如/usr/develop/tomcat可以被看出两个部件组成：/usr和/develop/tomcat，当然也可以看做三个部件/usr、/develop和/tomcat组成的。以根部件开始的是绝对路径，在类Unix系统中是\，在Windows系统中是C:\等。API获得Path通过Paths的静态方法：static Path get(String first, String ... more);public static Path get(URI uri);通过连接给定的字符串创建一个路径。按当前路径解析路径Path resolve(Path other);Path resolve(String other);如果other是绝对路径，那么返回other；否则，返回通过连接this和other获得路径。12345678910111213public class PathTest &#123; public static void main(String[] args) &#123; Path path1 = Paths.get("D:\\", "data.csv"); Path path2 = Paths.get("test\\test", "选修课数据修改.csv"); Path path3 = path1.resolve(path2); Path path4 = path2.resolve(path1); System.out.println(path3); //D:\data.csv\test\test\选修课数据修改.csv System.out.println(path4); //D:\data.csv &#125;&#125;按当前路径解析路径Path resolveSibling(Path other);Path resolveSibling(String other);如果other是绝对路径，那么返回other；否则，返回通过连接this的父路径和other获得路径。按相对路径进行解析12345678910111213import java.nio.file.Path;import java.nio.file.Paths;public class PathTest &#123; public static void main(String[] args) &#123; Path path1 = Paths.get("D:\\", "data.csv"); Path path2 = Paths.get("D:\\test\\test", "选修课数据修改.csv"); Path path3 = path2.relativize(path1); System.out.println(path3); //返回相对于path2的path1的绝对路径 &#125;&#125;其他API移除诸如.和..等的冗余元素：Path normalize();返回和当前路径相等价的绝对路径：Path toAbsolutePath();返回父路径（没有时返回null）：Path getParent();返回该路径的最后一个部件：Path getFileName();返回该路径的根部件（没有时返回null）：Path getRoot();由Path创建一个File对象：File toFile();Files处理小型文本文件public static byte[] readAllBytes(Path path) throws IOException12345678910public static void main(String[] args) &#123; try &#123; byte[] bytes = Files.readAllBytes(Paths.get("filestest")); String string = new String(bytes, "UTF-8"); System.out.println(string); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;&#125;public static List&lt;String&gt; readAllLines(Path path) throws IOException123456public static void main(String[] args) throws Exception &#123; List&lt;String&gt; lines = Files.readAllLines(Paths.get("filestest")); Iterator&lt;String&gt; iterator = lines.iterator(); while(iterator.hasNext()) System.out.println(iterator.next());&#125;public static Path write(Path path, byte[] bytes, OpenOption... options) throws IOException123public static void main(String[] args) throws Exception &#123; Files.write(Paths.get("filestest"), "深陷琪中，钰罢不能".getBytes(), StandardOpenOption.APPEND);&#125;获得IO流public static InputStream newInputStream(Path path, OpenOption... options)public static OutputStream newOutputStream(Path path, OpenOption... options)public static BufferedReader newBufferedReader(Path path, Charset cs)public static BufferedReader newBufferedReader(Path path)替换FileFiles.exists()Files.exists()方法检查给定的Path在文件系统中是否存在。可以创建在文件系统中不存在的Path实例。例如，如果您计划创建一个新目录，您首先要创建相应的Path实例，然后创建目录。由于Path实例可能指向，也可能没有指向文件系统中存在的路径，你可以使用Files.exists()方法来确定它们是否存在(如果需要检查的话)。这里是一个Java Files.exists()的例子：1234Path path = Paths.get(&quot;data/logging.properties&quot;);boolean pathExists = Files.exists(path, new LinkOption[]&#123; LinkOption.NOFOLLOW_LINKS &#125;);这个例子首先创建一个Path实例指向一个路径，我们想要检查这个路径是否存在。然后，这个例子调用Files.exists()方法，然后将Path实例作为第一个参数。注意Files.exists()方法的第二个参数。这个参数是一个选项数组，它影响Files.exists()如何确定路径是否存在。在上面的例子中的数组包含LinkOption.NOFOLLOW_LINKS，这意味着Files.exists()方法不应该在文件系统中跟踪符号链接，以确定文件是否存在。Files.createDirectory()Files.createDirectory()方法，用于根据Path实例创建一个新目录：123456789Path path = Paths.get(&quot;data/subdir&quot;);try &#123; Path newDir = Files.createDirectory(path);&#125; catch(FileAlreadyExistsException e)&#123; // 目录已经存在&#125; catch (IOException e) &#123; // 其他发生的异常 e.printStackTrace();&#125;第一行创建表示要创建的目录的Path实例。在try-catch块中，用路径作为参数调用Files.createDirectory()方法。如果创建目录成功，将返回一个Path实例，该实例指向新创建的路径。如果该目录已经存在，则是抛出一个java.nio.file.FileAlreadyExistsException。如果出现其他错误，可能会抛出IOException。例如，如果想要的新目录的父目录不存在，则可能会抛出IOException。父目录是您想要创建新目录的目录。因此，它表示新目录的父目录。Files.copy()Files.copy()方法从一个路径拷贝一个文件到另外一个目录，这里是一个Java Files.copy()例子：1234567891011Path sourcePath = Paths.get(&quot;data/logging.properties&quot;);Path destinationPath = Paths.get(&quot;data/logging-copy.properties&quot;);try &#123; Files.copy(sourcePath, destinationPath);&#125; catch(FileAlreadyExistsException e) &#123; // 目录已经存在&#125; catch (IOException e) &#123; // 其他发生的异常 e.printStackTrace();&#125;首先，该示例创建一个源和目标Path实例。然后，这个例子调用Files.copy()，将两个Path实例作为参数传递。这可以让源路径引用的文件被复制到目标路径引用的文件中。如果目标文件已经存在，则抛出一个java.nio.file.FileAlreadyExistsException异常。如果有其他错误，则会抛出一个IOException。例如，如果将该文件复制到不存在的目录，则会抛出IOException。重写已存在的文件可以强制Files.copy()覆盖现有的文件。这里有一个示例，演示如何使用Files.copy()覆盖现有文件。1234567891011Path sourcePath = Paths.get(&quot;data/logging.properties&quot;);Path destinationPath = Paths.get(&quot;data/logging-copy.properties&quot;);try &#123; Files.copy(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);&#125; catch(FileAlreadyExistsException e) &#123; // 目标文件已存在&#125; catch (IOException e) &#123; // 其他发生的异常 e.printStackTrace();&#125;请注意Files.copy()方法的第三个参数。如果目标文件已经存在，这个参数指示copy()方法覆盖现有的文件。Files.move()Java NIO Files还包含一个函数，用于将文件从一个路径移动到另一个路径。移动文件与重命名相同，但是移动文件既可以移动到不同的目录，也可以在相同的操作中更改它的名称。是的,java.io.File类也可以使用它的renameTo()方法来完成这个操作，但是现在已经在java.nio.file.Files中有了文件移动功能。这里有一个Java Files.move()例子：123456789Path sourcePath = Paths.get(&quot;data/logging-copy.properties&quot;);Path destinationPath = Paths.get(&quot;data/subdir/logging-moved.properties&quot;);try &#123; Files.move(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);&#125; catch (IOException e) &#123; //移动文件失败 e.printStackTrace();&#125;首先创建源路径和目标路径。源路径指向要移动的文件，而目标路径指向文件应该移动到的位置。然后调用Files.move()方法。这会导致文件被移动。请注意传递给Files.move()的第三个参数。这个参数告诉Files.move()方法来覆盖目标路径上的任何现有文件。这个参数实际上是可选的。如果移动文件失败，Files.move()方法可能抛出一个IOException。例如，如果一个文件已经存在于目标路径中，并且您已经排除了StandardCopyOption.REPLACE_EXISTING选项，或者被移动的文件不存在等等。Files.delete()Files.delete()方法可以删除一个文件或者目录。下面是一个Java Files.delete()例子：12345678Path path = Paths.get(&quot;data/subdir/logging-moved.properties&quot;);try &#123; Files.delete(path);&#125; catch (IOException e) &#123; // 删除文件失败 e.printStackTrace();&#125;首先，创建指向要删除的文件的Path。然后调用Files.delete()方法。如果Files.delete()由于某种原因不能删除文件(例如，文件或目录不存在)，会抛出一个IOException。文件搜索Files.walkFileTree()Files.walkFileTree()方法包含递归遍历目录树的功能。walkFileTree()方法将Path实例和FileVisitor作为参数。Path实例指向您想要遍历的目录。FileVisitor在遍历期间被调用。在我解释遍历是如何工作之前，这里我们先了解FileVisitor接口:12345678910111213public interface FileVisitor &#123; public FileVisitResult preVisitDirectory( Path dir, BasicFileAttributes attrs) throws IOException; public FileVisitResult visitFile( Path file, BasicFileAttributes attrs) throws IOException; public FileVisitResult visitFileFailed( Path file, IOException exc) throws IOException; public FileVisitResult postVisitDirectory( Path dir, IOException exc) throws IOException &#123;&#125;您必须自己实现FileVisitor接口，并将实现的实例传递给walkFileTree()方法。在目录遍历过程中，您的FileVisitor实现的每个方法都将被调用。如果不需要实现所有这些方法，那么可以扩展SimpleFileVisitor类，它包含FileVisitor接口中所有方法的默认实现。这里是一个walkFileTree()的例子：12345678910111213141516171819202122232425Files.walkFileTree(path, new FileVisitor&lt;Path&gt;() &#123; @Override public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException &#123; System.out.println(&quot;pre visit dir:&quot; + dir); return FileVisitResult.CONTINUE; &#125; @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException &#123; System.out.println(&quot;visit file: &quot; + file); return FileVisitResult.CONTINUE; &#125; @Override public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException &#123; System.out.println(&quot;visit file failed: &quot; + file); return FileVisitResult.CONTINUE; &#125; @Override public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException &#123; System.out.println(&quot;post visit directory: &quot; + dir); return FileVisitResult.CONTINUE; &#125;&#125;);FileVisitor实现中的每个方法在遍历过程中的不同时间都被调用:在访问任何目录之前调用preVisitDirectory()方法。在访问一个目录之后调用postVisitDirectory()方法。调用visitFile()在文件遍历过程中访问的每一个文件。它不会访问目录-只会访问文件。在访问文件失败时调用visitFileFailed()方法。例如，如果您没有正确的权限，或者其他什么地方出错了。这四个方法中的每个都返回一个FileVisitResult枚举实例。FileVisitResult枚举包含以下四个选项:CONTINUE 继续TERMINATE 终止SKIP_SIBLING 跳过同级SKIP_SUBTREE 跳过子级通过返回其中一个值，调用方法可以决定如何继续执行文件。CONTINUE继续意味着文件的执行应该像正常一样继续。TERMINATE终止意味着文件遍历现在应该终止。SKIP_SIBLINGS跳过同级意味着文件遍历应该继续，但不需要访问该文件或目录的任何同级。SKIP_SUBTREE跳过子级意味着文件遍历应该继续，但是不需要访问这个目录中的子目录。这个值只有从preVisitDirectory()返回时才是一个函数。如果从任何其他方法返回，它将被解释为一个CONTINUE继续。文件搜索这里是一个用于扩展SimpleFileVisitor的walkFileTree()，以查找一个名为README.txt的文件:123456789101112131415161718192021Path rootPath = Paths.get(&quot;data&quot;);String fileToFind = File.separator + &quot;README.txt&quot;;try &#123; Files.walkFileTree(rootPath, new SimpleFileVisitor&lt;Path&gt;() &#123; @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException &#123; String fileString = file.toAbsolutePath().toString(); //System.out.println(&quot;pathString = &quot; + fileString); if(fileString.endsWith(fileToFind))&#123; System.out.println(&quot;file found at path: &quot; + file.toAbsolutePath()); return FileVisitResult.TERMINATE; &#125; return FileVisitResult.CONTINUE; &#125; &#125;);&#125; catch(IOException e)&#123; e.printStackTrace();&#125;递归删除目录Files.walkFileTree()也可以用来删除包含所有文件和子目录的目录。Files.delete()方法只会删除一个目录，如果它是空的。通过遍历所有目录并删除每个目录中的所有文件(在visitFile())中，然后删除目录本身(在postVisitDirectory()中)，您可以删除包含所有子目录和文件的目录。下面是一个递归目录删除示例:123456789101112131415161718192021Path rootPath = Paths.get(&quot;data/to-delete&quot;);try &#123; Files.walkFileTree(rootPath, new SimpleFileVisitor&lt;Path&gt;() &#123; @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException &#123; System.out.println(&quot;delete file: &quot; + file.toString()); Files.delete(file); return FileVisitResult.CONTINUE; &#125; @Override public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException &#123; Files.delete(dir); System.out.println(&quot;delete dir: &quot; + dir.toString()); return FileVisitResult.CONTINUE; &#125; &#125;);&#125; catch(IOException e)&#123; e.printStackTrace();&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java-文件处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-正则表达式]]></title>
    <url>%2F2019%2FJava-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[概述正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。但是上面的叙述，对于之前没有接触过正则表达式的人还是很迷，我们打个比方，有一串字符：123xyz234和一个模式：*^*，我们假设*表示任意长度的由数字组成的字符串，^表示任意长度的由英文字符表示的字符串，那么我们就可以说这个字符串能匹配上这个模式。因为123可以匹配上*，xyz可以匹配上^，234可以匹配上*。同样的，假如我们再有一个模式：*^，我们用这个模式在字符串中提取，可以提取出来：123、123x、123xyz、234 等等，但是不能提取出来z234、123xyz234。因为我们能提取出来的都是符合这个模式的，这个模式就是正则表达式。语法不同的语言在正则表达式上的语法是有差距的，但是相同点远远大于不同点。我们在这使用Java语言中正则表达式。不过正则表达式的语法非常难记，在这也是举例出一些常用的语法，具体使用还是得查文档。最简单的正则表达式在我们刚才的举例中可以看出正则表达式其实就是一种匹配规则，那么每个字符串也都是一种匹配规则（这种规则只能匹配其自身）。比如下面的split()方法是按照正则表达式把字符串分割，我们传入的一个字符串就是一个正则表达式。123456789101112public class RegTest &#123; public static void main(String[] args) &#123; String testStr = "1234567890"; /** * Splits this string around matches of the given regular expression. */ String[] split = testStr.split("67"); //testStr中只有67能匹配split()方法中传入的67，所以按67进行分隔，同时67被删除 System.out.println(Arrays.deepToString(split)); &#125;&#125;和正则表达式有关的类虽然上个例子我们并没有使用到正则表达式相关的类，但这并不表明正则表达式就是一个字符串这么简单，在split()方法的内部还是调用了正则表达式相关的方法。123public String[] split(String regex) &#123; return split(regex, 0);&#125;Pattern类：一个Pattern表示一个正则表达式。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式字符串作为它的第一个参数。Matcher类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。PatternSyntaxException：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。现在我们使用正则表达式有关的类来完成上面的例子：12345678910public class RegTest &#123; public static void main(String[] args) &#123; String testStr = "1234567890"; Pattern pattern = Pattern.compile("67"); String[] split = pattern.split(testStr); System.out.println(Arrays.deepToString(split)); &#125;&#125;PatternSyntaxException 式一个异常类，但是不强制处理正则表达式的异常，所以这里可加可不加。Matcher的用法请继续看下去。匹配在上面我们测试的是正则表达式的分割作用，但是这并不是一个很好的学习正则表达式的例子。所以下面我们将采用匹配方法来学习正则表达式，先给一个小例子。123456789public class RegTest &#123; public static void main(String[] args) &#123; String testStr = "1234567890"; boolean matches = Pattern.matches("67", testStr); System.out.println(matches); &#125;&#125;这里的输出结果肯定是false了，因为这是两个不同的字符串，自然无法被匹配。字符类[abc] ：a、b 或 c（简单类）[^abc] ：任何字符，除了 a、b 或 c（否定）[a-zA-Z] ：a 到 z 或 A 到 Z，两头的字母包括在内（范围）[a-d[m-p]] ：a 到 d 或 m 到 p：[a-dm-p]（并集）[a-z&amp;&amp;[def]] ：d、e 或 f（交集）[a-z&amp;&amp;[^bc]] ：a 到 z，除了 b 和 c：[ad-z]（减去）[a-z&amp;&amp;[^m-p]] ：a 到 z，而非 m 到 p：[a-lq-z]（减去）123456789public class RegTest &#123; public static void main(String[] args) &#123; String testStr = "123"; Pattern.matches("[123][123][123]", testStr); //true Pattern.matches("[^123][123][123]", testStr); //false &#125;&#125;预定义字符类. ：任何字符（与行结束符可能匹配也可能不匹配）\d ：数字：[0-9]\D ：非数字： [^0-9]\s ：空白字符：[ \t\n\x0B\f\r]\S ：非空白字符：[^\s]\w ：单词字符：[a-zA-Z_0-9]\W ：非单词字符：[^\w]12345678public class RegTest &#123; public static void main(String[] args) &#123; String testStr = "123"; System.out.println(Pattern.matches("\\d\\d\\d", testStr)); //true System.out.println(Pattern.matches("\\w\\w\\w", testStr)); //true &#125;&#125;数量词X?： X存在一次或一次也没有X* ：X存在零次或多次X+ ：X存在一次或多次X{n} ：X存在恰好 n 次X{n,} ：X存在至少 n 次X{n,m} ：X存在至少 n 次，但是不超过 m 次123456789public class RegTest &#123; public static void main(String[] args) &#123; String testStr = "123"; boolean matches = Pattern.matches("[123]&#123;3&#125;", testStr); //true System.out.println(matches); &#125;&#125;查找子串查找子串需要使用到Pattern和Mather[flid=1415279, ffid=BK-2898-20180922-A, frtt=20180922210700, frlt=20180923000300][flid=1417032, ffid=OD-689-20180923-D, fatt=2401, stat=BOR, ista=BOR]123456789101112131415public class RegTest &#123; public static final String FFID = "((ffid=)&#123;1&#125;)\\w&#123;2&#125;-\\w&#123;3,6&#125;-\\d&#123;8&#125;-\\w"; public static void main(String[] args) &#123; String str = "[flid=1415279, ffid=BK-2898-20180922-A, frtt=20180922210700, frlt=20180923000300][flid=1417032, ffid=OD-689-20180923-D, fatt=2401, stat=BOR, ista=BOR]"; Pattern pattern = Pattern.compile(FFID); Matcher matcher = pattern.matcher(str); //循环找出全部的匹配子串 while(matcher.find()) &#123; System.out.println(matcher.group(0)); &#125; &#125;&#125;//ffid=BK-2898-20180922-A//ffid=OD-689-20180923-Dmarcher.group()必须和find()方法配合使用，也就是说find()是真正在字符串中搜索模式的方法（搜索到返回真，否则返回假），但是marcher.group()是将其输出的方法。组在正则表达式中，每个小括号()括起来的一个子模式是一个组，如(&quot;W(or)(ld!)&quot;中，有两个组or和ld!。在我们方才的例子中，matcher.group(0)的0指的就是matcher关联的模式，但是如果是matcher.group(1)指的就是(ffid=)。12345678910111213141516public class Demo1 &#123; public static final String FFID = "((ffid=)&#123;1&#125;)\\w&#123;2&#125;-\\w&#123;3,6&#125;-\\d&#123;8&#125;-\\w"; public static void main(String[] args) &#123; String str = "[flid=1415279, ffid=BK-2898-20180922-A, frtt=20180922210700, frlt=20180923000300][flid=1417032, ffid=OD-689-20180923-D, fatt=2401, stat=BOR, ista=BOR]"; Pattern pattern = Pattern.compile(FFID); Matcher matcher = pattern.matcher(str); //循环找出全部的匹配子串 System.out.println(matcher.groupCount()); while(matcher.find()) &#123; System.out.println(matcher.group(1)); &#125; &#125;&#125;//flid=//flid=正在表达式实例https://www.cnblogs.com/fozero/p/7868687.html。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven配置SSM环境详解]]></title>
    <url>%2F2019%2FMaven%E9%85%8D%E7%BD%AESSM%E7%8E%AF%E5%A2%83%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[配置web.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5"&gt; &lt;display-name&gt;ssm-maven-template&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;session-config&gt; &lt;!-- 单位分钟 --&gt; &lt;session-timeout&gt;30&lt;/session-timeout&gt; &lt;/session-config&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;*.action&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- 解决post乱码 --&gt; &lt;filter&gt; &lt;filter-name&gt;encoding&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encoding&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt;&lt;/web-app&gt;web.xml没有什么好说的，就是将SSM的配置文件加载进去。21行的&lt;servlet&gt;&lt;/servlet&gt;是加载进入SpringMVC的配置文件，可以理解成controller层的配置文件。34行的&lt;context-param&gt;是加载进去service层和dao层的配置文件。配置springmvc.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd"&gt; &lt;mvc:default-servlet-handler /&gt; &lt;!-- 配置扫描 器 --&gt; &lt;context:component-scan base-package="cn.template.controller"/&gt; &lt;!-- 配置处理器映射器 适配器 --&gt; &lt;mvc:annotation-driven&gt; &lt;mvc:message-converters register-defaults="true"&gt; &lt;!-- 配置Fastjson支持 --&gt; &lt;bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"&gt; &lt;property name="supportedMediaTypes"&gt; &lt;list&gt; &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt; &lt;value&gt;application/json&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="features"&gt; &lt;list&gt; &lt;value&gt;WriteMapNullValue&lt;/value&gt; &lt;value&gt;QuoteFieldNames&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/mvc:message-converters&gt; &lt;/mvc:annotation-driven&gt; &lt;!-- 配置视图解释器 jsp --&gt; &lt;bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/"/&gt; &lt;property name="suffix" value=".jsp"/&gt; &lt;/bean&gt; &lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt; &lt;!-- 设置上传文件的最大尺寸为5MB --&gt; &lt;property name="maxUploadSize"&gt; &lt;value&gt;5242880&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 拦截器 --&gt;&lt;!-- &lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path="/**" /&gt; &lt;bean class="cn.template.Interceptor.AutoLoginInterceptor" /&gt; &lt;/mvc:interceptor&gt; &lt;/mvc:interceptors&gt; --&gt; &lt;/beans&gt;在springmvc.xml中主要配置的是controller层的扫描器，视图解析器，文件上传插件，拦截器等和用户交互相关的配置。SpringMVC默认使用Jackson包来处理json，但是个人一般喜欢使用阿里巴巴的fastjson，所以在此配置文件中将fastjson配置进去。配置applicationContext-*.xmlapplicationContext-dao.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd"&gt; &lt;!-- 配置 读取properties文件 jdbc.properties --&gt; &lt;context:property-placeholder location="classpath:jdbc.properties" /&gt; &lt;!-- 配置 数据源 --&gt; &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt; &lt;property name="driverClassName" value="$&#123;jdbc.driver&#125;" /&gt; &lt;property name="url" value="$&#123;jdbc.url&#125;" /&gt; &lt;property name="username" value="$&#123;jdbc.username&#125;" /&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;" /&gt; &lt;/bean&gt; &lt;!-- 配置 Mybatis --&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;!-- 数据源 --&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;!-- 配置pojo别名 --&gt; &lt;property name="typeAliasesPackage" value="cn.template.pojo"&gt;&lt;/property&gt; &lt;!-- 加载mybatis的全局配置文件 --&gt; &lt;property name="plugins"&gt; &lt;array&gt; &lt;bean class="com.github.pagehelper.PageInterceptor"&gt; &lt;property name="properties"&gt; &lt;!--使用下面的方式配置参数，一行配置一个 --&gt; &lt;value&gt;helperDialect=mysql&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/array&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 扫描mapper--&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="cn.template.mapper" /&gt; &lt;/bean&gt;&lt;/beans&gt;dao层配置文件配置和数据库相关的信息。本人在写项目的时候只使用过mysql，所以这一部分的配置仅可以保证针对mysql生效。数据库连接池：阿里巴巴的druid配置mybatis及其分页插件配置自动扫描接口applicationContext-service.xml1234567891011121314151617181920212223242526&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd"&gt; &lt;!-- 配置 扫描 @Service --&gt; &lt;context:component-scan base-package="cn.template.service" /&gt; &lt;/beans&gt;applicationContext-transaction.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd"&gt; &lt;!-- 事务管理器 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;!-- 数据源 --&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;/bean&gt; &lt;!-- 配置通知 --&gt; &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;tx:attributes&gt; &lt;!-- 增删改加入事物控制 --&gt; &lt;tx:method name="save*" propagation="REQUIRED"/&gt; &lt;tx:method name="insert*" propagation="REQUIRED"/&gt; &lt;tx:method name="delete*" propagation="REQUIRED"/&gt; &lt;tx:method name="update*" propagation="REQUIRED"/&gt; &lt;!-- 查询方法(只读)不用事物控制 --&gt; &lt;tx:method name="find*" propagation="SUPPORTS" read-only="true"/&gt; &lt;tx:method name="get*" propagation="SUPPORTS" read-only="true"/&gt; &lt;tx:method name="select*" propagation="SUPPORTS" read-only="true"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 配置aop切面 --&gt; &lt;aop:config&gt; &lt;aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.template.service.impl.*.*(..))"/&gt; &lt;/aop:config&gt;&lt;/beans&gt;配置pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;ssm-maven-template&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;properties&gt; &lt;spring.version&gt;4.2.4.RELEASE&lt;/spring.version&gt; &lt;mybatis.version&gt;3.2.7&lt;/mybatis.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.10&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 配置支持事物的事务管理器applicationContext-transaction.xml中 org.springframework.jdbc.datasource.DataSourceTransactionManager --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MyBatis依赖包 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MyBatis-Spring整合包 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 通用Mapper依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper&lt;/artifactId&gt; &lt;version&gt;3.3.6&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MyBatis_PageHelper分页依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;5.0.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- JSTL --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mysql-connector --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.18&lt;/version&gt; &lt;/dependency&gt; &lt;!-- servlet-api和jsp-api --&gt; &lt;dependency&gt; &lt;groupId&gt;servletapi&lt;/groupId&gt; &lt;artifactId&gt;servletapi&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt; &lt;!-- 指明只在编译中有效(因为发布过程中Tomcat等容器已经包含了该jar包，导致冲突) --&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.16&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;/dependency&gt; &lt;!-- slf4j到log4j的转接包,才能看到sql语句打印(依赖了log4j，不用单独配置上述log4j) --&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt; &lt;/dependency&gt; &lt;!-- fastjson --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.4&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;port&gt;8080&lt;/port&gt; &lt;path&gt;/template&lt;/path&gt; &lt;uriEncoding&gt;utf-8&lt;/uriEncoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- 资源文件拷贝插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;2.7&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt;&lt;/project&gt;坐标没有什么好说的，主要是不产生依赖问题就行。但是插件必须要解释一下：tomcat7-maven-plugin：可以将tomcat内嵌到web项目中，直接运行webapp项目。有了这个插件才可以使用tomcat7:run命令。maven-resources-plugin：这是资源拷贝插件。在原始的maven项目中，我们使用tomcat7:run运行项目之后会如上图所示，将src/main/java目录下的java文件编译至target目录下的classes目录下。但是我们的mapper.xml文件虽然和mapper.java文件放在同一目录下，但是仍然不会被拷贝至classes目录下。所以我们需要加入此插件将src/main/java下的mapper.xml文件拷贝至classer目录下。不过加入这个插件后，此插件替代了默认的拷贝方式，及src/main/resources不会再被拷贝至classes目录下，所以我们需要指定src/main/resources下的配置文件拷贝过去。参考源码：https://github.com/isjinhao/ssm-maven-template]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>JavaWeb</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven基础]]></title>
    <url>%2F2019%2FMaven%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[概述Maven是Apache下的一个纯Java开发的开源项目，它是一个项目管理工具，使用Maven对项目进行构建和依赖管理等。所以下面就会介绍什么是项目构建，什么是依赖管理，以及使用Maven来做的好处。项目构建项目构建是指一个项目从编写源代码到编译、测试、运行、打包、部署、运行的过程。在传统的项目构建中流程图如下：但是上面的开发适应于小型项目开发，对于大型项目开发，使用Maven给我们提供的规范可以更好更快的开发。依赖管理如果一个项目，需要使用第三方jar包才能运行，我们就说这个项目依赖了这些第三方jar包。比如：使用SSM框架开发OA系统，则此OA依赖SSM框架。在原始开发的过程中，我们是手动添加jar包进去，这样太过麻烦，使用Maven，可以通过配置的方式自动获取jar包并且添加进去。安装官网下载地址：http://maven.apache.org/download.cgi下载之后解压到不含中文字符和特殊符号的路径下。再配置环境变量：然后把%MAVEN_HOME%\bin\配置进Path中。再CMD中输入 mvn -v测试是否安装成功。Maven仓库Maven能通过配置的方式添加第三方jar包，是因为它可以自动把指定位置的jar包导入仓库中，这些指定位置就是Maven的仓库。在Maven中有三种仓库：本地仓库，私服和中央仓库。中央仓库是Maven团队维护的市面上常用的jar包的集合，平时所用的jar包都能在这个中央仓库中找到。私服指的是在团队开发或公司中，维护一个内网下的中央仓库，所有人使用的jar包都从这个仓库中获取，保证所有人用的开发版本是一致的。本地仓库就是在我们自己的计算机中维护一个仓库，自己在开发的时候都使用这个仓库中的jar包。Maven项目在查找jar包的顺序：本地 -&gt; 私服 -&gt; 中央仓库。但是无论的jar包的来源是什么，项目最终都是在本地仓库中寻找jar包。如果本地仓库找不到jar包的时候可以去这个网站寻找，然后贴在pom.xml的&lt;dependencies&gt;&lt;dependencies&gt;中，再update project就可以了。Maven仓库的配置建一个保存jar包的文件夹。在%MAVEN_HOME%\conf\settings.xml中配置图片中最后一行，位置是自己的本地仓库。修改JDK版本在%MAVEN_HOME%\conf\settings.xml中的&lt;/profiles&gt;便签里配置：123456789101112&lt;profile&gt; &lt;id&gt;jdk-1.8&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt; &lt;/profile&gt;Eclipse配置Maven安装Maven更换配置文件更新索引更换镜像Maven默认的镜像是国外站点的镜像。换成阿里云的镜像访问较快。修改setting.xml文件。12345678 &lt;mirrors&gt;&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt;重建索引Window -&gt; Show View -&gt; Other -&gt; Maven Repositories。Maven项目开发Maven项目的目录规范就像Java项目有它的目录规范，Dynamic Web项目有它的项目规范，Maven项目自然也有他自己的项目规范。Eclipse开发Maven项目new的时候选择Maven Project。勾选create a simple project…。这步一定要做，否则构建出来的Maven不完整。选择Next后必填项是Group Id 和 Artifact Id，前者一般写域名的后置，如：com.xxx，后者是项目名。需要注意的是Packaging，这里有三种选择，jar、pom和war，jar指的是Java Project，pom用于工程的继承，父工程一般打成pom包，war包指的是Java Web项目。本次测试使用war包。创建项目后，右击项目 -&gt; Java EE Tools -&gt; Generate Deployment Descriptor Stub新建项目后。我们在Java Resource/src/main/java中写Java代码。在src/main/webapp中写jsp代码。Hello.java1234567891011121314151617181920import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet(urlPatterns="/hello")public class Hello extends HttpServlet &#123; public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.getWriter().write("hello haohao..."); request.getRequestDispatcher("/NewFile.jsp").forward(request, response); &#125; public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doGet(request, response); &#125; &#125;NewFile.jsp123456789101112&lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; hello&lt;/body&gt;&lt;/html&gt;pom.xml1234567891011121314151617181920212223242526272829303132333435363738394041&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cn.isjinhao&lt;/groupId&gt; &lt;artifactId&gt;course-selection-help&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;4.0.1&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;port&gt;8080&lt;/port&gt; &lt;path&gt;/helloworld2&lt;/path&gt; &lt;uriEncoding&gt;utf-8&lt;/uriEncoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;使用tomcat7:run运行运行时如果报：No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?，请参考这篇文章：https://blog.csdn.net/lslk9898/article/details/73836745启动后发现访问时会报错此时需要注意Maven的依赖范围，所以我们需要继续看下去。Maven依赖范围什么是依赖范围?maven 项目不同的阶段引入到classpath中的依赖是不同的，例如，编译时，maven 会将与编译相关的依赖引入classpath中，测试时，maven会将测试相关的的依赖引入到classpath中，运行时，maven会将与运行相关的依赖引入classpath中，而依赖范围就是用来控制依赖于这三种classpath的关系。依赖范围在pom.xml中如何体现？pom文件如下配置：123456&lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.7&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;其scope标签就是依赖范围的配置，默认是compile，可选配置有test、provided、runtime、system、import。6个中最常用的是前四个。编译依赖范围（compile）该范围就是默认依赖范围，此依赖范围对 于编译、测试、运行三种classpath都有效，举个简单的例子，假如项目中有spring-core的依赖，那么spring-core不管是在编译，测试，还是运行都会被用到，因此spring-core必须是编译范围（构件默认的是编译范围，所以依赖范围是编译范围的无须显示指定）测试依赖范围（test）顾名思义就是针对于测试的，使用此依赖范围的依赖，只对测试classpath有效，在编译主代码和项目运行时，都将无法使用该依赖，最典型的例子就是 Junit, 构件在测试时才需要，所以它的依赖范围是测试，因此它的依赖范围需要显示指定为&lt;scope&gt;test&lt;/scope&gt;，当然不显示指定依赖范围也不会报错，但是该依赖会被加入到编译和运行的classpath中,造成不必要的浪费 。已提供依赖范围（provided）使用该依赖范围的maven依赖，只对编译和测试的classpath有效，对运行的classpath无效，典型的例子就是servlet-api， 编译和测试该项目的时候需要该依赖，但是在运行时，web容器已经提供的该依赖，所以运行时就不再需要此依赖，如果不显示指定该依赖范围，并且容器依赖的版本和maven依赖的版本不一致的话，可能会引起版本冲突，造成不良影响。运行时依赖范围（runtime）使用该依赖范围的maven依赖，只对测试和运行的classpath有效，对编译的classpath无效，典型例子就是JDBC的驱动实现，项目主代码编译的时候只需要JDK提供的JDBC接口，只有在测试和运行的时候才需要实现上述接口的具体JDBC驱动。之前问题的解决把pom.xml文件中的runtime修改为provided。Maven命令右击项目在Run As中可以看到build、clean、generate-sources、install、和test命令，但是build一个就可以完成整个Maven项目的发布，其他的只是把常用的Maven项目发布的重甲过程提取出来。但是eclipse中命令不是很完整，所以我们进入maven工程的根目录执行命令。compile把src/main/java下的文件编译成class文件，并输出到target目录下。test执行src/test/java下的单元测试类。在src/test/java下创建类：12345678package cn.isjinhao.test;public class Test &#123; @org.junit.Test public void demo() &#123; System.out.println("demo1"); &#125; &#125;这时需要注意两点。一个是要配置pom.xml文件：scope一定不能写test。123456&lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;第二个是需要配置更新工程：右击项目 -&gt; Maven -&gt; Update Project。clean删除target目录中我们生成的文件。packageweb工程打成jar包，java工程打成war包。install执行install将使用maven打包发布到本地仓库。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
        <tag>项目构建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-网络编程]]></title>
    <url>%2F2019%2FJava-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[InetAddressThis class represents an Internet Protocol (IP) address.获得本机IP地址获得本地IP地址InetAddress iaddress = InetAddress.getLocalHost();但是这个函数有问题，因为这个函数的原理是通过获取本机的hostname，然后对此hostname做解析，从而获取IP地址的。那么问题来了，如果在本机的/etc/hosts文件里对这个主机名指向了一个错误的IP地址，那么InetAddress.getLocalHost就会返回这个错误的IP地址。当然如果你的hostname是到DNS去解析的，碰巧DNS上的信息也是错的，也同样是悲惨结局。InetAddress是由两部分组成的，一部分是getHostName()，一部分是getHostAddress()。获得本机所有的IP地址1234567891011121314151617181920212223242526272829/** * 获取机器所有网卡的IP（ipv4） */public static List&lt;String&gt; getLocalIP() &#123; List&lt;String&gt; ipList = new ArrayList&lt;String&gt;(); InetAddress ip = null; try &#123; Enumeration&lt;NetworkInterface&gt; netInterfaces = (Enumeration&lt;NetworkInterface&gt;) NetworkInterface.getNetworkInterfaces(); while (netInterfaces.hasMoreElements()) &#123; NetworkInterface ni = (NetworkInterface) netInterfaces.nextElement(); // 遍历所有ip Enumeration&lt;InetAddress&gt; ips = ni.getInetAddresses(); while (ips.hasMoreElements()) &#123; ip = (InetAddress) ips.nextElement(); if (null == ip || "".equals(ip)) &#123; continue; &#125; String sIP = ip.getHostAddress(); if(sIP == null || sIP.indexOf(":") &gt; -1) &#123; continue; &#125; ipList.add(sIP); &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return ipList;&#125;获取其他主机的IP地址对象InetAddress otherInetAddress = InetAddress.getByName(&quot;www.baidu.com&quot;);123456789101112131415public static void main(String[] args) throws UnknownHostException &#123; //1.获取本地主机 InetAddress iaddress = InetAddress.getLocalHost(); System.out.println(iaddress); //打印 InetAddress对象 默认格式: 用户名/IP地址 //2.获取主机名 String hostName = iaddress.getHostName(); //3.获取主机IP地址 String ip = iaddress.getHostAddress(); System.out.println(hostName); System.out.println(ip); //3.获取其他主机的IP地址对象 InetAddress otherInetAddress = InetAddress.getByName("www.baidu.com"); System.out.println(otherInetAddress);&#125;UDPUDP通信需要两个类的支持：数据的发送接收器：DatagramSocket数据包类：DatagramPacket123456789101112131415161718192021222324252627282930313233343536import java.io.IOException;import java.net.DatagramPacket;import java.net.DatagramSocket;import java.net.InetAddress;import java.net.SocketException;public class UDPReceiver &#123; public static void main(String[] args) throws IOException &#123; // TODO Auto-generated method stub //1.创建DatagramSocket对象, //强调:接收端必须指定一个端口号 DatagramSocket ds = new DatagramSocket(12345); while(true)&#123; //2.直接创建一个DatagramPacket对象 byte[] bs = new byte[1024]; DatagramPacket dp = new DatagramPacket(bs, bs.length); //3.接收 System.out.println("等待发送端发送数据...."); ds.receive(dp);//这个方法具有等待功能,等待发送端发送过来的数据 System.out.println("接收数据成功!!"); //获取发送端的地址 InetAddress sendAddress = dp.getAddress(); System.out.println("发送端是:"+sendAddress.getHostAddress()); //获取真正的数据 byte[] data = dp.getData(); //获取发送端 发来了多少字节 int len = dp.getLength(); //打印数据 String receiveMsg = new String(data, 0, len); System.out.println("发送端说:"+receiveMsg); &#125; //4.关闭资源（程序运行结束之后是需要关闭资源的，但是我们的程序是一个死循环，此句永不会执行，所以不能加关闭） //ds.close(); &#125;&#125;1234567891011121314151617181920212223242526import java.net.DatagramPacket;import java.net.DatagramSocket;import java.net.InetAddress;import java.util.Scanner;public class UDPSender &#123; public static void main(String[] args) throws Exception &#123; Scanner sc = new Scanner(System.in); //1.创建DatagramSocket对象 DatagramSocket ds = new DatagramSocket(); while(true)&#123; //2.创建DatagramPacket对象 //存储 发送的数据,对方的IP,端口号 System.out.println("请输入您要发送的数据:"); String sendMsg = sc.nextLine(); byte[] bs = sendMsg.getBytes(); //IP地址:127.0.0.1 代表本机,本地回环地址 DatagramPacket dp = new DatagramPacket(bs,bs.length,InetAddress.getByName("127.0.0.1"),12345); //3.发送 ds.send(dp); System.out.println("发送数据成功!!!");//192.168.146.72 &#125; //4.关闭资源（程序运行结束之后是需要关闭资源的，但是我们的程序是一个死循环，此句永不会执行，所以不能加关闭） //ds.close(); &#125;&#125;TCP12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;/** * TCP服务器:(ServerSocket) 步骤: * * 1.创建一个ServerSocket对象,必须绑定一个端口,这个端口必须和客户端连接的端口一致 * * 2.调用server的accept()方法,获取到底哪一个客户端连接的服务器 * * 3.通过刚刚获取到的客户端对象 调用getInputStream()方法 * * 4.通过输入流调用read方法,读取客户端写过来的数据 * * 5.关闭资源 * */public class ServerDemo &#123; public static void main(String[] args) throws IOException &#123; // 1.创建一个ServerSocket对象,必须绑定一个端口,这个端口必须和客户端连接的端口一致 ServerSocket server = new ServerSocket(12345); // 2.获取到 哪一个 客户端连接的我 System.out.println("等待客户端连接..."); Socket client = server.accept();// 此方法也具有等待功能,等待某一个客户端连接 // 打印一些和客户端有关信息 String ip = client.getInetAddress().getHostAddress(); System.out.println("小样,抓到你了:" + ip); // 3.获取输入流,实际上是客户端写数据时的输出流 InputStream in = client.getInputStream(); // 4.读取数据 byte[] bs = new byte[1024]; int len = in.read(bs); // 打印 System.out.println("客户端说:" + new String(bs, 0, len)); // 5.要向客户端 回写数据,告诉客户端您的信息我已经收到了 OutputStream out = client.getOutputStream(); out.write("您的消息已经收到...".getBytes()); System.out.println("给客户端反馈的信息发送成功!!!"); // 关闭资源 server.close(); client.close(); in.close(); &#125;&#125;1234567891011121314151617181920212223242526272829303132333435363738import java.io.IOException;import java.io.InputStream;import java.net.Socket;/** * * 使用TCP协议的客户端(Socket类) 步骤: 1.创建一个客户端对象(注意:指定这个Socket要连接的服务器的IP和端口) * * 2.从客户端对象中获取 输出流:getOutputStream() * * 3.调用输出流的Write方法写数据到服务器即可 * * 4.关闭资源 * */public class ClientDemo &#123; public static void main(String[] args) throws IOException &#123; // 1.创建一个客户端对象(注意:指定这个Socket要连接的服务器的IP和端口) /* * 这个构造方法干了很多事情: a.自动去连接服务器 b.自动进行三次握手,建立连接 c.自动为连接中创建两个流 */ Socket client = new Socket("127.0.0.1", 12345); // 2.从客户端对象中获取 输出流:getOutputStream() // OutputStream out = client.getOutputStream(); // 3.调用输出流的Write方法写数据到服务器即可 // out.write("How are you".getBytes()); client.getOutputStream().write("How are you".getBytes()); System.out.println("给服务器发送数据成功!!"); // 4.读取服务器 发送过来的反馈信息 InputStream in = client.getInputStream(); byte[] bs = new byte[1024]; int len = in.read(bs); System.out.println("服务器响应:" + new String(bs, 0, len)); // 关闭资源 client.close(); &#125;&#125;文件传输案例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;public class FileUploadServer &#123; public static void main(String[] args) throws IOException &#123; // TODO Auto-generated method stub //1.创建ServerSocket对象,绑定一个端口 ServerSocket server = new ServerSocket(12345); while(true)&#123; //2.获取哪一个客户端连接的服务器 System.out.println("等待客户端连接..."); final Socket client = server.accept(); //开启一个线程,和clinet进行交互 new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; // TODO Auto-generated method stub System.out.println("小样:"+client.getInetAddress().getHostAddress()); //3.获取输入流,读取客户端发来数据 InputStream in = client.getInputStream(); //4.创建文件的输出流,把数据写到文件中 String picName = "D:\\"+System.currentTimeMillis()+".png"; FileOutputStream fos = new FileOutputStream(picName); //5.循环 从输入流读取客户端数据, 写入到文件中 byte[] bs = new byte[1024]; int len = 0; while((len=in.read(bs))!=-1)&#123; fos.write(bs, 0, len); &#125;//1小时 System.out.println("客户端的文件已经保存完毕,可以查看了"+picName); //6.告知客户端,文件真的真的真的上传成功 try &#123; Thread.sleep(10000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; OutputStream out = client.getOutputStream(); out.write("您的文件真的真的真的上传成功".getBytes()); client.close(); in.close(); out.close(); fos.close(); &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125;).start(); &#125; //6.关闭 // server.close(); &#125;&#125;12345678910111213141516171819202122232425262728293031323334import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.Socket;public class FileUploadClient &#123; public static void main(String[] args)throws IOException &#123; //1.创建Socket对象,连接服务器 Socket client = new Socket("127.0.0.1", 12345); System.out.println("连接服务器成功.."); //2.获取输出流,把数据写向服务器 OutputStream out = client.getOutputStream(); //3.创建文件的输入流,读取本地的文件数据 FileInputStream fis = new FileInputStream("C:\\Users\\ISJINHAO\\Desktop\\我.jpg"); //4.循环,读取本地文件,写到服务器 byte[] bs = new byte[1024]; int len = 0; while((len=fis.read(bs))!=-1)&#123; out.write(bs, 0, len); &#125; //关闭输出流 client.shutdownOutput(); //5.获取服务器反馈的信息 InputStream in = client.getInputStream(); byte[] bs1 = new byte[1024]; int len1 = in.read(bs1); System.out.println("服务器说:"+new String(bs1,0,len1)); //6关闭 client.close(); out.close(); fis.close(); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-IO流]]></title>
    <url>%2F2019%2FJava-IO%E6%B5%81%2F</url>
    <content type="text"><![CDATA[输入流概述InputStream是字节输入流的根类，Reader是字符输入流的根类。我们所说的输入输出都是相对Java程序而言的，所以输入是把外存中的数据读取到内存中。而分成两个根类的原因是在流的基本单位是字节，但是Java字符使用UTF-16编码，在UTF-16编码中，绝大部分字符是双字节的，所以单独划分一个类别来表示字符输入流。InputStream概述InputStream是字节输入流，常用的直接实现类有ByteArrayInputStream和FileInputStream，前者是把某byte数组指定为数据源，后者是把文件作为数据源。API12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697import java.io.ByteArrayInputStream;import java.io.FileInputStream;import java.io.InputStream;public class Test &#123; public String test; public static void main(String[] args) throws Exception &#123; byte []bs = new byte[100]; for(int i = 0; i &lt; 100; i++) bs[i] = (byte)i; //以字节数组为数据源 InputStream isb = new ByteArrayInputStream(bs); //以文件为数据源 InputStream isf = new FileInputStream("E:\\video\\10 IO流-基础\\视频\\avi\\10.01_IO流的概述和分类.avi"); /** * 两个的演示API相同，但是字节数组更直观，所以使用字节数组作为数据源演示 */ /** * 读取当前数据源的下一个字节数据并返回： * Console: * 0 * 1 */ System.out.println(isb.read()); System.out.println(isb.read()); /** * 跳过指定字节的数据 * Console: * 4 */ isb.skip(2); System.out.println(isb.read()); /** * 还可以读取的字节数 * Console: * 95 */ System.out.println(isb.available()); /** * 尽可能把数据读入temps中，即如果数据字节数大于数组容量，数组会被读满， * 小于数据源数据会全部读进去， 返回真正读取的字节数 * Console: * 5 6 7 8 9 10 11 12 13 14 * 10 */ byte []temps = new byte[10]; int read = isb.read(temps); for(byte e : temps) System.out.print(e + " "); System.out.println("\n" + read); /** * read(byte[] b, int off, int len) * 从off位置开始开始读入len个字节的数据到b中，返回真正读取的字节数 * Console: * 5 6 7 8 9 10 11 12 13 14 * 10 */ int read2 = isb.read(temps, 3, 2); for(byte e : temps) System.out.print(e + " "); System.out.println("\n" + read2); /** * mark(int readlimit) &amp; reset() * 再调用reset()之后，会返回最近的一次被mark的位置， * 传入的参数：readLimit是说系统会保证在readLimit * 个字节之内不会使mark失效，超过这个字节之后就不再保证了 * Console: * 17 */ isb.mark(isb.available()); isb.read(); isb.reset(); System.out.println(isb.read()); /** * 查看当前流是否支持mark和reset。 * Console: * true */ System.out.println(isb.markSupported()); /** * 关闭此流并且释放系统资源 */ isb.close(); &#125;&#125;FilterInputStream这个类直译是过滤输入流，但是在Java中过滤的目的是为了增强某些功能，所以我更喜欢叫他增强输入流。虽然它不是抽象类，但是它却不能直接使用，因为它所有的属性和方法都是protected的，它有一个常用的实现类：BufferedInputStream。这个类的增强的功能就是采用开辟缓存区的方式使输入流读取数据能更快。123456789101112131415161718192021222324252627import java.io.BufferedInputStream;import java.io.FileInputStream;import java.io.InputStream;public class Test2 &#123; public static void main(String[] args) throws Exception &#123; InputStream is = new FileInputStream("E:\\video\\10 IO流-基础\\视频\\avi\\10.01_IO流的概述和分类.avi"); long begin1 = System.currentTimeMillis(); while(is.read() != -1) &#123;&#125; long end1 = System.currentTimeMillis(); System.out.println(end1 - begin1); InputStream bis = new BufferedInputStream(new FileInputStream("E:\\video\\10 IO流-基础\\视频\\avi\\10.01_IO流的概述和分类.avi")); long begin2= System.currentTimeMillis(); while(bis.read() != -1) &#123;&#125; long end2 = System.currentTimeMillis(); System.out.println(end2 - begin2); /** * Console: * 23175 * 53 */ is.close(); bis.close(); &#125;&#125;Reader概述这个类是处理字符文件的根类。它的常用实现类有FileReader和CharArrayReader。同样的，如果要加快读取速度，使用带缓冲区的BufferedReader类。API12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import java.io.CharArrayReader;import java.io.FileReader;import java.io.Reader;public class Test2 &#123; public static void main(String[] args) throws Exception &#123; char []strs = new char[26]; for(int i = 0; i &lt; 26; i++) strs[i] = (char)(i + 97); //以文件作为数据源 Reader fr = new FileReader("D:\\a.txt"); //以字符数组作为数据源 Reader car = new CharArrayReader(strs); /** * 为了方便，数据源使用字符数组 */ /** * 读取单个字符，并返回相应的int值 * Console: * a */ int read = car.read(); System.out.println((char)read); /** * 尽可能读取到字符数组，并返回真实读取的字符数。如果数组容量小于数据源字符个数 * 数组会被全部读满，否则读至数据源结尾。 * Console: * b c d e f g h i j k * 10 */ char []temps = new char[10]; int read2 = car.read(temps); for(char e : temps) System.out.print(e + " "); System.out.println("\n" + read2); /** * read(char[] cbuf, int off, int len) * 从字符数组的off位置开始，读入长度为len的数据进入，返回真正读取的字符数、 * Console: * b c d l m g h i j k * 2 */ int read3 = car.read(temps, 3, 2); for(char e : temps) System.out.print(e + " "); System.out.println("\n" + read3); /** * skip(long n) * mark(int readAheadLimit) * reset() * markSupported() * * 和InputStream一致 */ &#125;&#125;InputStreamReaderInputStreamReader是 a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset。它有且只有FileReader这个子类，所以FileReader实现从文件中读取的方法是从把文件按字节读入后按照指定编码规则进行解码，默认是平台解码集。输出流概述OutputStream是字节输出流的根类，Writer是字符输出流的根类。我们所说的输入输出都是相对Java程序而言的，所以输出是把内存中的数据读取到外存中。而分成两个根类的原因是在流的基本单位是字节，但是Java字符使用UTF-16编码，在UTF-16编码中，绝大部分字符是双字节的，所以单独划分一个类别来表示字符输出流。OutputStream概述OutputStream是字节输出流，常用的直接实现类是FileOutputStream，它把文件作为数据输出位置。如果想加快输出效率，使用BufferedOutputStream。API1234567891011121314151617181920212223242526272829303132333435363738394041import java.io.FileOutputStream;import java.io.OutputStream;public class Test3 &#123; public static void main(String[] args) throws Exception &#123; //如果不存在这个文件，会自动创建 OutputStream fos = new FileOutputStream("D:\\aa.txt"); /** * write(int b)：将指定的字节写入此输出流。 */ fos.write(97); /** * flush()：刷新缓冲区，让write的数据真正写入磁盘文件 */ fos.flush(); /** * write(byte[] b)：将 b.length 个字节从指定的 byte 数组写入此输出流。 */ byte []bs = new byte[5]; for(int i = 0; i &lt; 5; i++) bs[i] = (byte) ((i % 26) + 97); fos.write(bs); fos.flush(); /** * void write(byte[] b, int off, int len) * 将指定 byte数组中从off开始的 len个字节写入此输出流。 */ fos.write(bs, 2, 2); fos.flush(); /** * close()：释放资源 */ fos.close(); &#125;&#125;Writer概述这个类是写入字符文件的根类。它的常用实现类是FileWriter。同样的，如果要加快读取速度，使用带缓冲区的BufferedWriter类。API12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import java.io.FileWriter;import java.io.Writer;public class Test4 &#123; public static void main(String[] args) throws Exception &#123; //指定一个输出位置，如果不存在会自动创建 Writer w = new FileWriter("d:\\bbb.txt"); //写入单个字符 w.write(97); //写入字符串 w.write("bcd"); //写入字符串的某一部分 w.write("defgf", 1, 2); //写入字符数组 char []temps = &#123;'g', 'h'&#125;; w.write(temps); //写入字符数组的某一部分 w.write(temps, 1, 1); w.flush(); w.close(); /** * File: * abcdefghh */ //流被关闭之后是不能再被打开的，重新开启输出一个流，向其中写入数据会覆盖原有 //数据，如果我们想继续之前的写，可以使用追加方法，不过append方法虽然翻译过来叫住追加 //但是它不是追加，它的作用和write()差不多。 w = new FileWriter("d:\\bbb.txt"); //写入一个字符 w.append('|'); //写入一个字符串 w.append("abc"); //写入字符串的某一部分 w.append("def", 1, 2); w.flush(); w.close(); /** * File: * |abce */ //字符流追加数据可以在构造方法中指定写入数据为追加数据 w = new FileWriter("d:\\bbb.txt", true); w.write("aaa"); w.flush(); w.close(); /** * File: * |abceaaa */ &#125;&#125;InputStreamReaderOutputStreamReader是a bridge from character streams to byte streams:Characters written to it are encoded into bytes using a specified charset。它有且只有FileWriter这个子类，所以FileWriter实现从写入文件的方法是从把字符按编码规则编码成字节数据后写入文件，默认是平台编码集。打印流PrintStream和PrintReader是为了方便输出而产生的两个流，前者是java.io.FilterOutputStream的子类，后者是java.io.Writer的子类。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import java.io.BufferedWriter;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.io.OutputStreamWriter;import java.io.PrintStream;import java.io.PrintWriter;import java.io.Writer;import java.nio.file.Files;import java.nio.file.Paths;import java.nio.file.StandardOpenOption;public class TestPrintStream &#123; public static void main(String[] args) throws IOException &#123; OutputStream stream = Files.newOutputStream(Paths.get("test"), StandardOpenOption.WRITE); /** * 设置true之后，当输出字节数组、println方法或写入换行符或字节（'\n'）后，将自动调用flush方法 */ /** * PrintStream打印的所有字符都使用平台的默认字符编码转换为字节 */ PrintStream printStream = new PrintStream(stream, true); /** * 指定转化为字节数组的编码集后使用指定的编码集 */ printStream.write("陈钰琪 ".getBytes("GBK")); /** * ture表示是追加 */ /** * GBK指定输出时按GBK编码集转化成字节数组 */ Writer writer = new OutputStreamWriter(new FileOutputStream("test", true), "GBK"); /** * true表示自动刷新，但只有println, printf, or format方法才能触发自动刷新 */ PrintWriter printWriter = new PrintWriter(writer, true); printWriter.write("钰琪是个小可爱"); printWriter.flush(); printWriter.close(); /** * BufferedWriter writer = Files.newBufferedWriter(Paths.get("test"), StandardOpenOption.WRITE, StandardOpenOption.APPEND); PrintWriter printWriter = new PrintWriter("test", "GBK"); printWriter.write("钰琪是个小可爱"); printWriter.close(); writer.close(); 这段代码无法进行追加...讲道理应该是可以追加的... */ &#125;&#125;RandomAccessFileRandomAccessFile是Java的IO流体系中功能最丰富的文件内容访问类，既可以读取文件内容，也可以向文件输出数据。与普通的输入/输出流不同的是，RandomAccessFile支持跳到文件任意位置读写数据，RandomAccessFile对象包含一个记录指针，用以标识当前读写处的位置，当程序创建一个新的RandomAccessFile对象时，该对象的文件记录指针对于文件头（也就是0处），当读写n个字节后，文件记录指针将会向后移动n个字节。除此之外，RandomAccessFile可以自由移动该记录指针。RandomAccessFile包含两个方法来操作文件记录指针：long getFilePointer()：返回文件记录指针的当前位置void seek(long pos)：将文件记录指针定位到pos位置RandomAccessFile类在创建对象时，除了指定文件本身，还需要指定一个mode参数，该参数指定RandomAccessFile的访问模式，该参数有如下四个值：r：以只读方式打开指定文件。如果试图对该RandomAccessFile指定的文件执行写入方法则会抛出IOExceptionrw：以读取、写入方式打开指定文件。如果该文件不存在，则尝试创建文件rws：以读取、写入方式打开指定文件。相对于rw模式，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备，默认情形下（rw模式下）,是使用buffer的，只有cache满的或者使用RandomAccessFile.close()关闭流的时候儿才真正的写到文件（其没有flush方法）rwd：与rws类似，只是仅对文件的内容同步更新到磁盘，而不修改文件的元数据文件系统中的数据分为数据和元数据。数据是指普通文件中的实际数据，而元数据指用来描述一个文件的特征的系统数据，诸如访问权限、文件拥有者以及文件数据块的分布信息(inode…)等等。读文件1234567891011121314151617181920212223242526272829303132333435import java.io.IOException;import java.io.RandomAccessFile; public class Test &#123; public static void main(String[] args) &#123; String fileName = "test"; //文件内容：陈钰琪好可爱 RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(fileName, "r"); System.out.println("RandomAccessFile的文件指针初始位置:" + raf.getFilePointer()); raf.seek("陈钰琪".getBytes().length); byte[] bbuf = new byte[1024]; int hasRead = 0; while ((hasRead = raf.read(bbuf)) &gt; 0) &#123; System.out.print(new String(bbuf, 0, hasRead)); &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; try &#123; if (raf != null) &#123; raf.close(); &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125;&#125;追加文件RandomAccessFile先获取文件的长度，再将指针移到文件的末尾，再将要插入的内容插入到文件。12345678910111213141516171819202122232425262728293031323334import java.io.IOException;import java.io.RandomAccessFile; public class Test &#123; public static void main(String[] args) &#123; String filename = "test"; //文件内容：陈钰琪好可爱 RandomAccessFile raf = null; try &#123; String[] arrays = new String[] &#123; "Hello Hadoop", "Hello Spark", "Hello Hive" &#125;; raf = new RandomAccessFile(filename, "rw"); raf.seek(raf.length()); raf.write("追加内容:\n".getBytes()); for (String arr : arrays) &#123; raf.write((arr + "\n").getBytes()); &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; try &#123; if (raf != null) &#123; raf.close(); &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125;&#125;文件中间插入RandomAccessFile如果向文件的指定的位置插入内容，则新输出的内容会覆盖文件中原有的内容。如果需要向指定位置插入内容，程序需要先把插入点后面的内容读入缓冲区，等把需要的插入数据写入文件后，再将缓冲区的内容追加到文件后面。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.cauc.chat;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.RandomAccessFile; public class Test &#123; public static void main(String[] args) &#123; String fileName = "test"; Long pos = (long) "陈钰琪".getBytes().length; String insertContent = "可爱可爱可爱啊"; FileInputStream fis = null; FileOutputStream fos = null; RandomAccessFile raf = null; try &#123; raf = new RandomAccessFile(fileName, "rw"); File tmp = File.createTempFile("tmp", null); tmp.deleteOnExit(); fis = new FileInputStream(tmp); fos = new FileOutputStream(tmp); raf.seek(pos); byte[] bbuf = new byte[64]; int hasRead = 0; while ((hasRead = raf.read(bbuf)) &gt; 0) &#123; fos.write(bbuf, 0, hasRead); &#125; raf.seek(pos); raf.write("\n插入内容:\n".getBytes()); raf.write((insertContent + "\n").getBytes()); while ((hasRead = fis.read(bbuf)) &gt; 0) &#123; raf.write(bbuf, 0, hasRead); &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally &#123; try &#123; if (fis != null) &#123; fis.close(); &#125; if (fos != null) &#123; fos.close(); &#125; if (raf != null) &#123; raf.close(); &#125; &#125; catch (IOException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java网络编程</tag>
        <tag>JavaIO流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[thread和synchronized]]></title>
    <url>%2F2019%2Fthread%E5%92%8Csynchronized%2F</url>
    <content type="text"><![CDATA[按照时间发展呢的顺序，Java中是先出现了synchronized（since 1.0），再出现了Lock（since 5.0）。这是由于synchronized有一定的不足，所以才出现了Lock来更好的完成同步操作。synchronized在Java中，每一个对象都拥有一个锁标记（monitor），也称为监视器，我们可以使用synchronized关键字来标记一个方法或者代码块，当某个线程调用该对象的synchronized方法或者访问synchronized代码块时，这个线程便获得了该对象的锁，其他线程暂时无法访问这个方法，只有等待这个方法执行完毕或者代码块执行完毕，这个线程才会释放该对象的锁，其他线程才能执行这个方法或者代码块。synchronized方法：123public synchronized void insert()&#123; &#125;普通方法获得当前对象的锁，即this的锁。静态方法获得类的字节码对象的锁。synchronized代码块123synchronized(synObject) &#123; &#125;对于synchronized方法或者synchronized代码块，当出现异常时，JVM会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。条件对象当一个线程进入临界区后却发现某一条件被满足之后它才能执行，比如在银行转账时，A向B账户转账，但是当A账户获得锁后，发现账户中没有钱，需要等待C账户给其转账之后其才能给B账户转账，这时它就需要释放锁，进入等待状态，并且当其的账户余额能保证向B转完账后不为负数这个条件时才能转账，同时当此条件被满足时其他线程需要通知等待的线程让其进入运行状态。方法如下：synchronized方法123456public synchronized void test()&#123; if(条件x不满足) wait(); if(条件x被满足) notify() or notifyAll() //唤醒等待在条件x上的线程&#125;synchronized代码块123456synchronized(synObject) &#123; if(条件x不满足) wait(); if(条件x被满足) notify() or notifyAll() //唤醒等待在条件x上的线程&#125;但是如果还有一个条件可以迫使线程进入等待状态，在编程时只能将其也等待在条件x上，这就是其不足之一。需要注意：对于synchronized方法或者synchronized代码块，当出现异常时，JVM会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。LockLock接口定义的方法如下：12345678public interface Lock &#123; void lock(); void lockInterruptibly() throws InterruptedException; boolean tryLock(); boolean tryLock(long time, TimeUnit unit) throws InterruptedException; void unlock(); Condition newCondition();&#125;tryLock()方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。Lock接口的典型使用方法如下：123456789Lock lock = ...;lock.lock();try&#123; //处理任务&#125;catch(Exception ex)&#123; &#125;finally&#123; lock.unlock(); //释放锁&#125;ReentrantLock翻译为是“可重入锁”，意思是如果锁具备可重入性，则称作为可重入锁。像synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举个简单的例子，当一个线程执行到某个synchronized方法时，比如说method1，而在method1中会调用另外一个synchronized方法method2，此时线程不必重新去申请锁，而是可以直接执行方法method2。按不同的分类，还有一类锁是中断锁，顾名思义，就是可以相应中断的锁。在Java中，synchronized就不是可中断锁，而Lock是可中断锁。如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class Test &#123; private Lock lock = new ReentrantLock(); public static void main(String[] args) &#123; Test test = new Test(); MyThread thread0 = new MyThread(test); MyThread thread1 = new MyThread(test); thread0.start(); thread1.start(); try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; thread1.interrupt(); &#125; public void insert(Thread thread) throws InterruptedException&#123; lock.lockInterruptibly(); //注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出 try &#123; System.out.println(thread.getName()+"得到了锁"); long startTime = System.currentTimeMillis(); for(;;) &#123; if(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE) break; /* * 插入数据 */ &#125; &#125; finally &#123; System.out.println(Thread.currentThread().getName()+"执行finally"); lock.unlock(); System.out.println(thread.getName()+"释放了锁"); &#125; &#125;&#125; class MyThread extends Thread &#123; private Test test = null; public MyThread(Test test) &#123; this.test = test; &#125; @Override public void run() &#123; try &#123; test.insert(Thread.currentThread()); &#125; catch (InterruptedException e) &#123; System.out.println(Thread.currentThread().getName()+"被中断"); &#125; &#125;&#125;在这段代码中，如果线程1首先获得锁，其会一直运行下去，此时线程0得不到锁就会永远等待下去。但是如果线程0首先获得锁，其会一直运行下去，所以此时线程1得不到锁，但是在主线程中线程1启用了interrupt()方法，而lockInterruptibly()可以响应中断。thread的状态yield()12// JDK原型public static native void yield();A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint.当yield()成功的时候会自动放弃时间片，转入就绪状态，然后和其它线程进行CPU的争夺。join()join方法有三个重载版本：123join()join(long millis) //参数为毫秒join(long millis,int nanoseconds) //第一参数为毫秒，第二个参数为纳秒假如在main线程中，调用thread.join方法，则main方法会等待thread线程执行完毕或者等待一定的时间。如果调用的是无参join方法，则等待thread执行完毕，如果调用的是指定了时间参数的join方法，则等待一定的时间。join的实现123456789101112131415161718192021222324public final synchronized void join(long millis) throws InterruptedException &#123; long base = System.currentTimeMillis(); long now = 0; if (millis &lt; 0) &#123; throw new IllegalArgumentException("timeout value is negative"); &#125; if (millis == 0) &#123; while (isAlive()) &#123; wait(0); &#125; &#125; else &#123; while (isAlive()) &#123; long delay = millis - now; if (delay &lt;= 0) &#123; break; &#125; wait(delay); now = System.currentTimeMillis() - base; &#125; &#125;&#125;join是使用wait来实现的，如果线程仍然活着，则等待对应的时间。当调用线程（设为A）执行到其他线程（设为B）的join()方法时，A阻塞在线程B的this对象（线程B本身），如第12行或第20行所示。从代码上我们看不出来什么时候notify线程A，但是JDK注释上描述：As a thread terminates the this.notifyAll method is invoked.笔者也是在此知道，当一个线程结束时会通知所有在其上等待的线程。interrupt() 和 isInterrupted()interrupt()是一个线程中断的方法，本人只在Java网络编程这门课的实验里用过一次。其可以使得处于阻塞状态的线程抛出一个异常，也就说，它可以用来中断一个正处于阻塞状态的线程。1234567891011121314151617181920212223242526272829303132package test;import java.io.IOException;public class Test &#123; public static void main(String[] args) throws IOException &#123; Test test = new Test(); MyThread thread = test.new MyThread(); thread.start(); try &#123; Thread.currentThread().sleep(2000); &#125; catch (InterruptedException e) &#123; &#125; thread.interrupt(); &#125; class MyThread extends Thread&#123; @Override public void run() &#123; try &#123; System.out.println("进入睡眠状态"); Thread.currentThread().sleep(10000); System.out.println("睡眠完毕"); &#125; catch (InterruptedException e) &#123; System.out.println("得到中断异常"); &#125; System.out.println("run方法执行完毕"); &#125; &#125;&#125;配合isInterrupted()能够中断正在运行的线程，因为调用interrupt方法相当于将中断标志位置为true，那么可以通过调用isInterrupted()判断中断标志是否被置位来中断线程的执行。比如下面这段代码：12345678910111213141516171819202122232425public class Test &#123; public static void main(String[] args) throws IOException &#123; Test test = new Test(); MyThread thread = test.new MyThread(); thread.start(); try &#123; Thread.currentThread().sleep(2000); &#125; catch (InterruptedException e) &#123; &#125; thread.interrupt(); &#125; class MyThread extends Thread&#123; @Override public void run() &#123; int i = 0; while(!isInterrupted() &amp;&amp; i &lt; Integer.MAX_VALUE)&#123; System.out.println(i+" while循环"); i++; &#125; &#125; &#125;&#125;但是以上的暂停程序运行的方法可以被替换为如下代码：1234567891011121314class MyThread extends Thread&#123; private volatile boolean isStop = false; @Override public void run() &#123; int i = 0; while(!isStop)&#123; i++; &#125; &#125; public void setStop(boolean stop)&#123; this.isStop = stop; &#125;&#125;volatile的目的是禁止指令重排。参见：https://isjinhao.github.io/2019/volatile/#moreinterrupted()Tests whether the current thread has been interrupted. The interrupted status of the thread is cleared by this method. In other words, if this method were to be called twice in succession, the second call would return false (unless the current thread were interrupted again, after the first call had cleared its interrupted status and before the second call had examined it).A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false.每个线程都有一个中断状态位：isInterrupted(boolean ClearInterrupted)：传入true重置状态位，传入false不重置状态位。返回此方法执行完成前线程中断状态位的状态。interrupt()：将中断状态位设置为true。isInterrupted()：查看当前状态位但是不影响状态位，内部实现原理isInterrupted(false)。interrupted()：重置当前线程状态位（即如果状态位是true，则设置为false），内部实现原理isInterrupted(true)。参考：https://blog.csdn.net/zhuyong7/article/details/80852884参考https://www.cnblogs.com/dolphin0520/p/3920357.htmlJava核心技术卷1]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7软件安装和JavaWeb环境搭建]]></title>
    <url>%2F2019%2Fcentos7%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%92%8CJavaWeb%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[由于Linux各发行版对软件安装工具的不同支持，导致Linux软件安装是相对很麻烦的事情，由于本人目前只使用过Centos7，所以借着搭建JavaWeb开发环境把Centos7的软件安装总结一下。不过在这之前需要先了解一下wget。wget下载单个文件wget url。如wget www.baidu.com，得到百度站点的首页html文件。下载并改变文件名选项：-O。后台下载选项：-b。应用于下载文件非常大的时候。断点续传选项：-c。对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。限速下载选项：--limit。如wget --limit-rate=30k www.baidu.com。下载多个文件选项：-i。首先，保存一份下载链接文件。但是在文件中需要完整的路径名，比如不能直接使用www.baidu.com，需要使用https://www.baidu.com。如以下是文件urls中的两个url。下载时使用wget -i urls即可。更多参考https://www.cnblogs.com/semonxv/p/3816366.html源码包解压即用源码包解压即用是最简单的一种方式。如安装tomcat的时候，我们先获得压缩包：wget https://www-us.apache.org/dist/tomcat/tomcat-8/v8.5.39/bin/apache-tomcat-8.5.39.tar.gz解压：tar -zxvf apache-tomcat-8.5.39.tar.gz然后进入apache-tomcat-8.5.39\bin\运行startup.sh就可以使用。源码包解压配置环境变量刚才不需要配置环境变量是因为，我们在运行war包的时候可以将包放入webapps中，在运行bin目录下的startup.sh。如果我们想一个软件在任何位置都能运行就需要配置环境变量，比如jdk。获得jdk的安装包不能再使用官网上的url并执行wget url来获取，因为oracle的官方网站有限制。所以我们需要先下载jdk，再上传到服务器上。上传服务器之后解压即可。Linux配置环境变量时就是修改/etc/profile文件。JAVA_HOME指向解压的JDK目录。12export JAVA_HOME=/usr/jdk1.8.0_201export PATH=$JAVA_HOME/bin:$ANT_HOME/bin:$PATH修改完配置文件后使用命令刷新：source /etc/profilerpmrpm是由红帽公司开发的软件包管理方式，使用rpm我们可以方便的进行软件的安装、查询、卸载、升级等工作。但是rpm软件包之间的依赖性问题往往会很繁琐，尤其是软件由多个rpm包组成时。一般过程：找到相应的软件包，比如soft.version.rpm，下载到本机某个目录；打开一个终端，su 成root用户；cd soft.version.rpm所在的目录；输入rpm -ivh soft.version.rpmYumYum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。安装Mysql在centos7中一般默认安装了MariaDB。这是mysql的一个开源分支。为了避免这个分支对我们安装mariadb产生影响，我们先卸载这个东西：yum remove maria*。获得mysql5.7的Repository的rpm安装包：wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm安装下载的rpm：yum -y install mysql57-community-release-el7-10.noarch.rpm。安装mysql：yum install mysql-server配置Mysql启动：systemctl start mysqld然后在/var/log/mysqld.log文件中会自动生成一个随机的密码，我们需要先取得这个随机密码，以用于登录 MySQL 服务端：cat /var/log/mysqld.log | grep password登录：mysql -u root -p修改密码：alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;hilX0U!9i3_6&#39;;设置密码永不过期：ALTER USER &#39;root&#39;@&#39;localhost&#39; PASSWORD EXPIRE NEVER;设置root可以在远程访问：grant all privileges on *.* to root@&quot;%&quot; identified by &quot;new password&quot;;设置root可以在本地访问：grant all privileges on *.* to root@&quot;localhost&quot; identified by &quot;new password&quot;;刷新配置：flush privileges;退出：exit解封阿里云3306端口。密码策略：https://blog.csdn.net/hello_world_qwp/article/details/79551789Mysql相关命令启动：systemctl start mysqld查看状态：service mysqld status停止：service mysqld stop重启：service mysqld restartmake安装解压执行“./configure”命令为编译做好准备；执行“make”命令进行软件编译；执行“make install”完成安装；执行“make clean”删除安装时产生的临时文件。Cmake安装CMake是一种跨平台编译工具，比make更为高级，使用起来要方便得多。CMake主要是编写CMakeLists.txt文件，然后用cmake命令将CMakeLists.txt文件转化为make所需要的makefile文件，最后用make命令编译源码生成可执行程序或共享库（so，shared object）。因此CMake的编译基本就两个步骤：cmakemakecmake 指向CMakeLists.txt所在的目录，例如cmake .. 表示CMakeLists.txt在当前目录的上一级目录。cmake后会生成很多编译的中间文件以及makefile文件，所以一般建议新建一个新的目录，专门用来编译，例如12345mkdir buildcd buildcmake ..//等cmake结束makemake根据生成的makefile文件，编译程序。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo上传图片]]></title>
    <url>%2F2019%2FHexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[步骤找到Hexo下的_config.yml里的post_asset_folder，把这个选项从false改成true。在博客根目录下执行一个下载上传图片插件的命令npm install hexo-asset-image --save。插件地址：https://github.com/dangxuandev/hexo-asset-image之后再使用hexo new xxx就会在_post目录下生成xxx.md文件和xxx目录。在xxx.md文件中要插入图片时，先要把所要插入的图片放在生成的同名文件夹下。利用markdown的语法将文件引入文章中。提交到github上时就可以有图片了。Bug修复插件有一个bug，使用时可能会出现如下问题：12345678910111213141516171819202122TypeError: Cannot read property &apos;replace&apos; of undefinedat Object. (D:\blog\isjinhao\node_modules\hexo-asset-image\index.js:31:38)at initialize.exports.each (D:\blog\isjinhao\node_modules\hexo-asset-image\node_modules\cheerio\lib\api\traversing.js:293:24)at Hexo. (D:\blog\isjinhao\node_modules\hexo-asset-image\index.js:29:16)at Hexo.tryCatcher (D:\blog\isjinhao\node_modules\bluebird\js\release\util.js:16:23)at Hexo. (D:\blog\isjinhao\node_modules\bluebird\js\release\method.js:15:34)at Promise.each.filter (D:\blog\isjinhao\node_modules\hexo\lib\extend\filter.js:63:65)at tryCatcher (D:\blog\isjinhao\node_modules\bluebird\js\release\util.js:16:23)at Object.gotValue (D:\blog\isjinhao\node_modules\bluebird\js\release\reduce.js:155:18)at Object.gotAccum (D:\blog\isjinhao\node_modules\bluebird\js\release\reduce.js:144:25)at Object.tryCatcher (D:\blog\isjinhao\node_modules\bluebird\js\release\util.js:16:23)at Promise._settlePromiseFromHandler (D:\blog\isjinhao\node_modules\bluebird\js\release\promise.js:512:31)at Promise._settlePromise (D:\blog\isjinhao\node_modules\bluebird\js\release\promise.js:569:18)at Promise._settlePromise0 (D:\blog\isjinhao\node_modules\bluebird\js\release\promise.js:614:10)at Promise._settlePromises (D:\blog\isjinhao\node_modules\bluebird\js\release\promise.js:694:18)at _drainQueueStep (D:\blog\isjinhao\node_modules\bluebird\js\release\async.js:138:12)at _drainQueue (D:\blog\isjinhao\node_modules\bluebird\js\release\async.js:131:9)at Async._drainQueues (D:\blog\isjinhao\node_modules\bluebird\js\release\async.js:147:5)at Immediate.Async.drainQueues [as _onImmediate] (D:\blog\isjinhao\node_modules\bluebird\js\release\async.js:17:14)at runCallback (timers.js:705:18)at tryOnImmediate (timers.js:676:5)at processImmediate (timers.js:658:5)这是插件的index.js文件中存在bug，把node_modules/hexo-asset-image/index.js的内容修改为：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061'use strict';var cheerio = require('cheerio');// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123; return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split('.');hexo.extend.filter.register('after_post_render', function(data)&#123; var config = hexo.config; if(config.post_asset_folder)&#123; var link = data.permalink; if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3) var beginPos = getPosition(link, '/', 1) + 1; else var beginPos = getPosition(link, '/', 3) + 1; // In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html". var endPos = link.lastIndexOf('/') + 1; link = link.substring(beginPos, endPos); var toprocess = ['excerpt', 'more', 'content']; for(var i = 0; i &lt; toprocess.length; i++)&#123; var key = toprocess[i]; var $ = cheerio.load(data[key], &#123; ignoreWhitespace: false, xmlMode: false, lowerCaseTags: false, decodeEntities: false &#125;); $('img').each(function()&#123; if ($(this).attr('src'))&#123; // For windows style path, we replace '\' to '/'. var src = $(this).attr('src').replace('\\', '/'); if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp; !/^\s*\//.test(src)) &#123; // For "about" page, the first part of "src" can't be removed. // In addition, to support multi-level local directory. var linkArray = link.split('/').filter(function(elem)&#123; return elem != ''; &#125;); var srcArray = src.split('/').filter(function(elem)&#123; return elem != '' &amp;&amp; elem != '.'; &#125;); if(srcArray.length &gt; 1) srcArray.shift(); src = srcArray.join('/'); $(this).attr('src', config.root + link + src); console.info&amp;&amp;console.info("update link as:--&gt;"+config.root + link + src); &#125; &#125;else&#123; console.info&amp;&amp;console.info("no src attr, skipped..."); console.info&amp;&amp;console.info($(this)); &#125; &#125;); data[key] = $.html(); &#125; &#125;&#125;);]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[canvas把摄像头拍摄到的视频保存为图片]]></title>
    <url>%2F2019%2Fcanvas%E6%8A%8A%E6%91%84%E5%83%8F%E5%A4%B4%E6%8B%8D%E6%91%84%E5%88%B0%E7%9A%84%E8%A7%86%E9%A2%91%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[截图123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8" /&gt; &lt;title&gt;&lt;/title&gt; &lt;script src="bootstrap/jquery-3.2.1.min.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="bootstrap/css/bootstrap.min.css"&gt;&lt;/script&gt; &lt;script src="bootstrap/holder.min.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;script type="application/javascript"&gt; window.onload=function() &#123; let video = document.getElementById("video"); /** * constraints：打开摄像头时约束，下面的约束对video没有约束，它选择设备的默认摄像头，但是禁止了音频 */ let constraints = &#123; video: &#123;&#125;, audio : false &#125;; let promise; if(navigator.mediaDevices.getUserMedia)&#123; //最新标准API promise = navigator.mediaDevices.getUserMedia(constraints); &#125; else if (navigator.webkitGetUserMedia)&#123; //webkit内核浏览器 promise = navigator.webkitGetUserMedia(constraints); &#125; else if (navigator.mozGetUserMedia)&#123; //Firefox浏览器 promise = navagator.mozGetUserMedia(constraints); &#125; else if (navigator.getUserMedia)&#123; //旧版API promise = navigator.getUserMedia(constraints); &#125; promise.then(function (MediaStream) &#123; video.srcObject = MediaStream; video.play(); &#125;); &#125; &lt;/script&gt; &lt;body&gt; &lt;video class="myvideo" style="border-radius: 10%;" id="video" autoplay="autoplay" &gt;&lt;/video&gt; &lt;button id="b"&gt;画图&lt;/button&gt; &lt;canvas id="myCanvas"&gt;&lt;/canvas&gt; &lt;/body&gt; &lt;script type="text/javascript"&gt; var btn = document.getElementById("b"); btn.onclick =function()&#123; var c=document.getElementById("myCanvas"); ctx=c.getContext('2d'); ctx.drawImage(video, 0, 0, 270, 135); &#125; &lt;/script&gt;&lt;/html&gt;转化为file此标题中说的file是表单中&lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; /&gt;。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8" /&gt; &lt;title&gt;&lt;/title&gt; &lt;script src="bootstrap/jquery-3.2.1.min.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="bootstrap/css/bootstrap.min.css"&gt;&lt;/script&gt; &lt;script src="bootstrap/holder.min.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;script type="application/javascript"&gt; window.onload=function() &#123; let video = document.getElementById("video"); /** * constraints：打开摄像头时约束，下面的约束对video没有约束，它选择设备的默认摄像头，但是禁止了音频 */ let constraints = &#123; video: &#123;&#125;, audio : false &#125;; let promise; if(navigator.mediaDevices.getUserMedia)&#123; //最新标准API promise = navigator.mediaDevices.getUserMedia(constraints); &#125; else if (navigator.webkitGetUserMedia)&#123; //webkit内核浏览器 promise = navigator.webkitGetUserMedia(constraints); &#125; else if (navigator.mozGetUserMedia)&#123; //Firefox浏览器 promise = navagator.mozGetUserMedia(constraints); &#125; else if (navigator.getUserMedia)&#123; //旧版API promise = navigator.getUserMedia(constraints); &#125; promise.then(function (MediaStream) &#123; video.srcObject = MediaStream; video.play(); &#125;); &#125; function getBase64() &#123; //获得Canvas对象 var cas = document.getElementById("myCanvas"); var ctx = cas.getContext("2d"); let video = document.getElementById("video"); ctx.drawImage(video, 0, 0, 500, 400); var data = cas.toDataURL('image/png', 0.1); //1表示质量(无损压缩) return data; &#125; //'file' 等价于 浏览本地文件上传时本地文件的名字 function dataURLtoFile(dataurl, filename = 'file')&#123; dataurl = dataurl + ""; var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n); while(n--)&#123; u8arr[n] = bstr.charCodeAt(n); &#125; return new File([u8arr], filename, &#123;type:mime&#125;); &#125; &lt;/script&gt; &lt;body&gt; &lt;video id="video" autoplay="autoplay" &gt;&lt;/video&gt; &lt;button id="b"&gt;画图&lt;/button&gt; &lt;canvas id="myCanvas" width="500px" height="500px"&gt;&lt;/canvas&gt; &lt;/body&gt; &lt;script type="text/javascript"&gt; var btn = document.getElementById("b"); btn.onclick =function()&#123; console.log(dataURLtoFile(getBase64())); &#125; &lt;/script&gt;&lt;/html&gt;源码https://github.com/isjinhao/html5-handle-img]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[非阻塞同步]]></title>
    <url>%2F2019%2F%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[非阻塞同步互斥同步最主要的问题就是进行线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步（Blocking Synchronization）。 从处理问题的方式上说，互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施（例如加锁），那就肯定会出现问题，无论共享数据是否真的会出现竞争，它都要进行加锁（这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁）、 用户态核心态转换、 维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。 随着硬件指令集的发展，我们有了另外一个选择：基于冲突检测的乐观并发策略，通俗地说，就是先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就再采取其他的补偿措施（最常见的补偿措施就是不断地重试，直到成功为止），这种乐观的并发策略的许多实现都不需要把线程挂起，因此这种同步操作称为非阻塞同步（Non-Blocking Synchronization）。为什么使用乐观并发策略需要“硬件指令集的发展”才能进行呢？因为我们需要操作和冲突检测这两个步骤具备原子性，靠什么来保证呢？如果这里再使用互斥同步来保证就失去意义了，所以我们只能靠硬件来完成这件事情，硬件保证一个从语义上看起来需要多次操作的行为只通过一条处理器指令就能完成，这类指令常用的有：测试并设置（Test-and-Set）获取并增加（Fetch-and-Increment）交换（Swap）比较并交换（Compare-and-Swap，下文称CAS）加载链接/条件存储（Load-Linked/Store-Conditional，下文称LL/SC）。其中，前面的3条是20世纪就已经存在于大多数指令集之中的处理器指令，后面的两条是现代处理器新增的，而且这两条指令的目的和功能是类似的。 在IA64、 x86指令集中有cmpxchg指令完成CAS功能，在sparc-TSO也有casa指令实现，而在ARM和PowerPC架构下，则需要使用一对ldrex/strex指令来完成LL/SC的功能。CAS指令需要有3个操作数，分别是内存位置（在Java中可以简单理解为变量的内存地址，用V表示）、 旧的预期值（用A表示）和新值（用B表示）。 CAS指令执行时，当且仅当V符合旧预期值A时，处理器用新值B更新V的值，否则它就不执行更新，但是无论是否更新了V的值，都会返回V的旧值，上述的处理过程是一个原子操作。在JDK 1.5之后，Java程序中才可以使用CAS操作，该操作由sun.misc.Unsafe类里面的compareAndSwapInt()和compareAndSwapLong()等几个方法包装提供，虚拟机在内部对这些方法做了特殊处理，即时编译出来的结果就是一条平台相关的处理器CAS指令，没有方法调用的过程。由于Unsafe类不是提供给用户程序调用的类（Unsafe.getUnsafe()的代码中限制了只有启动类加载器（Bootstrap ClassLoader）加载的Class才能访问它），因此，如果不采用反射手段，我们只能通过其他的Java API来间接使用它，如J.U.C包（java.util.concurrent）里面的整数原子类，其中的compareAndSet()和getAndIncrement()等方法都使用了Unsafe类的CAS操作。我们不妨拿一段使用volatile关键字没有解决的问题代码来看看如何使用CAS操作来避免阻塞同步，代码如下面所示。 我们曾经通过这段20个线程自增10000次的代码来证明volatile变量不具备原子性，那么如何才能让它具备原子性呢？把“race++”操作或increase()方法用同步块包裹起来当然是一个办法，但是如果改成如下所示的代码，那效率将会提高许多。12345678910111213141516171819202122232425262728293031import java.util.concurrent.atomic.AtomicInteger;public class AtomicTest &#123; public static AtomicInteger race = new AtomicInteger(0); public static void increase() &#123; race.incrementAndGet(); &#125; private static final int THREADS_COUNT = 20; public static void main(String[] args) throws Exception &#123; Thread[] threads = new Thread[THREADS_COUNT]; for (int i = 0; i &lt; THREADS_COUNT; i++) &#123; threads[i] = new Thread(new Runnable() &#123; @Override public void run() &#123; for (int i = 0; i &lt; 10000; i++) &#123; increase(); &#125; &#125; &#125;); threads[i].start(); &#125; while (Thread.activeCount() &gt; 1) Thread.yield(); System.out.println(race); //200000 &#125;&#125;使用AtomicInteger代替int后，程序输出了正确的结果，一切都要归功于incrementAndGet()方法的原子性。它的实现其实非常简单，如下代码所示：1234567891011/** * Atomically increment by one the current value. */public final int incrementAndGet()&#123; for(;;)&#123; int current=get(); int next=current+1; if(compareAndSet(current,next)) return next; &#125;&#125;incrementAndGet()方法在一个无限循环中，不断尝试将一个比当前值大1的新值赋给自己。 如果失败了，那说明在执行“获取-设置”操作的时候值已经有了修改，于是再次循环进行下一次操作，直到设置成功为止。尽管CAS看起来很美，但显然这种操作无法涵盖互斥同步的所有使用场景，并且CAS从语义上来说并不是完美的，存在这样的一个逻辑漏洞：如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然为A值，那我们就能说它的值没有被其他线程改变过了吗？如果在这段期间它的值曾经被改成了B，后来又被改回为A，那CAS操作就会误认为它从来没有被改变过。这个漏洞称为CAS操作的“ABA”问题。 J.U.C包为了解决这个问题，提供了一个带有标记的原子引用类“AtomicStampedReference”，它可以通过控制变量值的版本来保证CAS的正确性。 不过目前来说这个类比较“鸡肋”，大部分情况下ABA问题不会影响程序并发的正确性，如果需要解决ABA问题，改用传统的互斥同步可能会比原子类更高效。无同步方案要保证线程安全，并不是一定就要进行同步，两者没有因果关系。 同步只是保证共享数据争用时的正确性的手段，如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性，因此会有一些代码天生就是线程安全的，这里简单地介绍其中的两类：可重入代码和线程本地存储。可重入代码(Reentrant Code)这种代码也叫做纯代码(Pure Code)，可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误。 相对线程安全来说，可重入性是更基本的特性，它可以保证线程安全，即所有的可重入的代码都是线程安全的，但是并非所有的线程安全的代码都是可重入的。可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、 用到的状态量都由参数中传入、 不调用非可重入的方法等。 我们可以通过一个简单的原则来判断代码是否具备可重入性：如果一个方法，它的返回结果是可以预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的。线程本地存储(Thread Local Storage)如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行？如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。符合这种特点的应用并不少见，大部分使用消费队列的架构模式（如“生产者-消费者”模式）都会将产品的消费过程尽量在一个线程中消费完，其中最重要的一个应用实例就是经典Web交互模型中的“一个请求对应一个服务器线程”（Thread-per-Request）的处理方式，这种处理方式的广泛应用使得很多Web服务端应用都可以使用线程本地存储来解决线程安全问题。Java语言中，如果一个变量要被多线程访问，可以使用volatile关键字声明它为“易变的”；如果一个变量要被某个线程独享，可以通过java.lang.ThreadLocal类来实现线程本地存储的功能。ThreadLocal用法APIThreadLocal.get: 获取ThreadLocal中当前线程共享变量的值。ThreadLocal.set: 设置ThreadLocal中当前线程共享变量的值。ThreadLocal.remove: 移除ThreadLocal中当前线程共享变量的值。ThreadLocal.initialValue: ThreadLocal没有被当前线程赋值时或当前线程刚调用remove方法后调用get方法，返回此方法值获得ThreadLocal变量123456789ThreadLocal&lt;String&gt; threadLocal = new ThreadLocal&lt;String&gt;();ThreadLocal&lt;String&gt; threadLocal = new ThreadLocal&lt;String&gt;() &#123; @Override protected String initialValue() &#123; System.out.println("调用get方法时，当前线程共享变量没有设置，调用initialValue获取默认值！"); return "initialValue: "; &#125;&#125;;参考深入理解JVM第二版（周志明）https://blog.csdn.net/djokermax/article/details/81296644http://www.cnblogs.com/dolphin0520/p/3920407.html]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[volatile]]></title>
    <url>%2F2019%2Fvolatile%2F</url>
    <content type="text"><![CDATA[提升计算机工作能力在许多情况下，让计算机同时去做几件事情，不仅是因为计算机的运算能力强大了，还有一个很重要的原因是计算机的运算速度与它的存储和通信子系统速度的差距太大， 大量的时间都花费在磁盘I/O、网络通信或者数据库访问上。 如果不希望处理器在大部分时间里都处于等待其他资源的状态，就必须使用一些手段去把处理器的运算能力” 压榨” 出来， 否则就会造成很大的浪费，而计算机同时处理几项任务则是最容易想到、也被证明是非常有效的 “压榨” 手段。除了充分利用计算机处理器的能力外，一个服务端同时对多个客户端提供服务则是另一个更具体的并发应用场景。衡量一个服务性能的高低好坏，每秒事务处理数（Transactions Per Second，TPS）是最重要的指标之一，它代表着一秒内服务端平均能响应的请求总数，而TPS值与程序的并发能力又有非常密切的关系。对于计算量相同的任务，程序线程并发协调得越有条不紊，效率自然就会越高；反之，线程之间频繁阻塞甚至死锁，将会大大降低程序的并发能力。服务端是Java语言最擅长的领域之一，这个领域的应用占了Java应用中最大的一块份额，不过如何写好并发应用程序却又是服务端程序开发的难点之一，处理好并发方面的问题通常需要更多的编码经验来支持。幸好Java语言和虚拟机提供了许多工具，把并发编程的门槛降低了不少。并且各种中间件服务器、各类框架都努力地替程序员处理尽可能多的线程并发细节，使得程序员在编码时能更关注业务逻辑，而不是花费大部分时间去关注此服务会同时被多少人调用、如何协调硬件资源。无论语言、中间件和框架如何先进，开发人员都不能期望它们能独立完成所有并发处理的事情，了解并发的内幕也是成为一个高级程序员不可缺少的课程。真机的内存结构在正式讲解 Java 虚拟机并发相关的知识之前，我们先花费一点时间去了解一下物理计算机中的并发问题，物理机遇到的并发问题与虚拟机中的情况有不少相似之处，物理机对并发的处理方案对于虚拟机的实现也有相当大的参考意义。“让计算机并发执行若干个运算任务” 与 “更充分地利用计算机处理器的效能” 之间的因果关系，看起来顺理成章，实际上它们之间的关系并没有想象中的那么简单，其中一个重要的复杂性来源是绝大多数的运算任务都不可能只靠处理器 “计算” 就能完成，处理器至少要与内存交互，如读取运算数据、存储运算结果等，这个 I/O 操作是很难消除的（无法仅靠寄存器来完成所有运算任务）。由于计算机的存储设备与处理器的运算速度有几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。基于高速缓存的存储交互很好地理解了处理器与内存的速度矛盾，但是也为计算机系统带来了更高的复杂度，因为它引入了一个新的问题：缓存一致性（Cache Coherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（Main Memory），如图所示。当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致，如果真的发生这种情况，那同步回到主内存时以谁的缓存数据为准呢？为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有 MSI、MESI（Illinois Protocol）、MOSI、Synapse、Firefly 及 Dragon Protocol 等。其中最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。在本章中将会多次提到的 “内存模型” 一词，可以理解为在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象。不同架构的物理机器可以拥有不一样的内存模型，而 Java 虚拟机也有自己的内存模型，并且这里介绍的内存访问操作与硬件的缓存访问操作具有很高的可比性。除了增加高速缓存之外，为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序执行的结果充足，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致，因此，如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序并不能靠代码的先后顺序来保证。与处理器的乱序执行优化类型，Java 虚拟机的即时编译器中有有类似的指令重排序（Instruction Reorder）优化。## JVM的内存结构Java 虚拟机规范中试图定义一种 Java 内存模型（Java Memory Model，JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。Java 内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量（Variables）与 Java 编程中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与方法参数，因为后者是线程私有的，不会被共享，自然就不会存在竞争问题。为了获得较好的执行效能，Java 内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存和主内存进行交互，也没有限制即时编译器进行调整代码执行顺序这类优化措施。Java 内存模型规定了所有的变量都存储在主内存（Main Memory）中（此处的主内存与介绍物理硬件时的主内存名字一样，两者也可以互相类比，但此处仅是虚拟机内存的一部分）。每条线程还有自己的工作内存（Working Memory，可与前面讲的处理器高速缓存类比），线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如图所示。内存间交互操作关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步会主内存之类的实现细节，Java 内存模型中定义了以下 8 种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的（对于 double 和 long 类型的变量来说，load、store、read 和 write 操作在某些平台上允许有例外）。lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用。load（载入）：作用于工作内存的变量，它把 read 操作从主内存中得到的变量值放入工作内存的变量副本中。store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的 write 操作使用。write（写入）：作用于主内存的变量，它把 store 操作从工作内存中得到的变量的值放入主内存的变量中。use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。如果要把一个变量从主内存复制到工作内存，那就要顺序地执行 read 和 load 操作，如果要把变量从工作内存同步回主内存，就要顺序地执行 store 和 write 操作。注意，Java 内存模型只要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read 与 load 之间、store 与 write 之间是可插入其他指令的，如对主内存中的变量 a、b 进行访问时，一种可能出现顺序是 read a、read b、load b、load a。除此之外，Java 内存模型还规定了在执行上述 8 种基本操作时必须满足如下规则：不允许 read 和 load、store 和 write 操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。如果一个变量事先没有被 lock 操作锁定，那就不允许对它执行 unlock 操作，也不允许去 unlock 一个被其他线程锁定住的变量。一个变量在同一个时刻只允许一条线程对其进行 lock 操作，但 lock 操作可以被同一条线程重复执行多次，多次执行 lock 后，只有执行相同次数的 unlock 操作，变量才会被解锁。对一个变量执行 unlock 操作之前，必须先把此变量同步回主内存中（执行 store、write 操作）。如果对一个变量执行 lock 操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行 load 或 assign 操纵初始化变量的值。不允许一个线程丢弃它的最近的 assign 操作，即变量在工作内存中改变了之后该变化必然会同步至主内存。不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从线程的工作内存同步回主内存中。一个新的变量只能在主内存中 “诞生”，不允许在工作内存中直接使用一个未被初始化（load 或 assign）的变量。换句话说，就是对一个变量实施 use、store 操作之前，必须先执行过了 assign 和 load 操作。对于 long 和 double 型变量的特殊规则Java 内存模型要求 lock、unlock、read、assign、use、store、write 这 8 个操作都具有原子性，但是对于 64 位的数据类型（long 和 double），在模型中特别定义了一条相对宽松的规定：允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作划分为两次 32 位的操作来进行，即允许虚拟机实现选择可以不保证 64 位数据类型的 load、store、read 和 write 这 4 个操作的原子性，这点就是所谓的 long 和 double 的非原子性协定（Nonatomic Treatment of double and long Variables）。如果有多个线程共享一个并未声明为 volatile 的 long 或 double 类型的变量，并且同时对它们进行读取和修改操作，那么某些线程可能会读取到一个既非原值，也不是其他线程修改的值的代表了 “半个变量” 的数值。不过这种读取到 “半个变量” 的情况非常罕见（在目前商用 Java 虚拟机中不会出现），因为 Java 内存模型虽然允许虚拟机不把 long 和 double 变量的读写实现成原子操作，但允许虚拟机选择把这些操作实现为具有原子性的操作，而且还 “强烈建议” 虚拟机这样实现。在实际开发中，目前各种平台下的商用虚拟机几乎都选择把 64 位的数据的读写操作作为原子操作来对待，因此我们在编写代码时一般不需要把用到的 long 和 double 变量专门声明为 volatile。​volatile关键字 volatile 可以说是 Java 虚拟机提供的最轻量级的同步机制。当一个变量定义为 volatile 之后，它将具备两种特性：保证此变量对所有线程的可见性这里的 “可见性” 是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。而普通变量不能做到这一点，普通变量的值在线程间传递均需要通过主内存来完成，例如，线程 A 修改一个普通变量的值，然后向主内存进行回写，另外一条线程 B 在线程 A 回写完成了之后再从主内存进行读取操作，新变量值才会对线程 B 可见。关于 volatile 变量的可见性，经常会被开发人员误解，认为以下描述成立：“volatile 变量对所有线程是立即可见的，对 volatile 变量所有的写操作都能立刻反应到其他线程之中，换句话说，volatile 变量在各个线程中是一致的，所以基于 volatile 变量的运算在并发下是安全的”。这句话的论据部分并没有错，但是其论据并不能得出 “基于 volatile 变量的运算在并发下是安全的” 这个结论。比如以下代码：1234567891011121314151617181920212223public class Test &#123; public volatile int inc = 0; public void increase() &#123; inc++; &#125; public static void main(String[] args) &#123; final Test test = new Test(); for(int i=0;i&lt;10;i++)&#123; new Thread()&#123; public void run() &#123; for(int j=0;j&lt;1000;j++) test.increase(); &#125;; &#125;.start(); &#125; while(Thread.activeCount()&gt;1) //保证前面的线程都执行完 Thread.yield(); System.out.println(test.inc); &#125;&#125;运行它会发现每次运行结果都不一致，都是一个小于10000的数字。这便是由于volatile 不能保证原子性。同时自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：假如某个时刻变量inc的值为10。线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。那么两个线程分别进行了一次自增操作后，inc只增加了1。禁止指令重排序优化普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致。因为在一个线程的方法执行过程中无法感知到这点，这也就是 Java 内存模型中描述的所谓的 “线程内表现为串行的语义”（Within-Thread As-If-Serial Semantics）。volatile关键字禁止指令重排序有两层意思：当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。可能上面说的比较绕，举个简单的例子：1234567//x、y为非volatile变量//flag为volatile变量x = 2; //语句1y = 0; //语句2flag = true; //语句3x = 4; //语句4y = -1; //语句5`由于 flag 变量为 volatile 变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。并且 volatile 关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。那么我们看一个例子：123456789//线程1:context = loadContext(); //语句1inited = true; //语句2 //线程2:while(!inited )&#123; sleep();&#125;doSomethingwithconfig(context);前在这个例子中，有可能语句2会在语句1之前执行，那么久可能导致context还没被初始化，而线程2中就使用未初始化的context去进行操作，导致程序出错。这里如果用volatile关键字对inited变量进行修饰，就不会出现这种问题了，因为当执行到语句2时，必定能保证context已经初始化完毕。并发编程的三个概念并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。原子性（Atomicity）在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子，请分析以下哪些操作是原子性操作：1234x = 10; //语句1y = x; //语句2x++; //语句3x = x + 1; //语句4乍一看，有些朋友可能会说上面的4个语句中的操作都是原子性操作。其实只有语句1是原子性操作，其他三个语句都不是原子性操作。语句1是直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。语句2实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。同样的，x++和 x = x+1包括3个操作：读取x的值，进行加1操作，写入新的值。所以上面4个语句只有语句1的操作具备原子性。也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。可见性（Visibility）当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。有序性（Ordering）在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。在Java里面，可以通过volatile关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 先行发生原则（happens-before原则）。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。先行发生原则程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始这8条规则中，前4条规则是比较重要的，后4条规则都是显而易见的。下面我们来解释一下前4条规则：对于程序次序规则：一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。锁定规则：也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作。volatile变量规则：如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。传递规则：实际上就是体现happens-before原则具备传递性。volatile关键字的场景所以总结来说，volatile 变量在各个线程的工作内存中不存在一致性问题（在各个线程的工作内存中，volatile 变量也可以存在不一致的情况，但由于每次使用之前都要先刷新，执行引擎看不到不一致的情况，因此可以认为不存在不一致性问题），但是 Java 里面的运算并非原子操作，导致 volatile 变量的运算在并发下一样是不安全的。由于 volatile 变量只能保证可见性，在不符合以下两条规则的运算场景中，我们仍然需要通过加锁（使用 synchronized 或 java.util.concurrent 中的原子类）来保证原子性。通常来说，使用volatile必须具备以下2个条件：对变量的写操作不依赖于当前值该变量没有包含在具有其他变量的不变式中实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。事实上，我的理解就是上面的2个条件需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。下面列举几个Java中使用volatile的几个场景。状态标记量123456789volatile boolean flag = false; while(!flag)&#123; doSomething();&#125; public void setFlag() &#123; flag = true;&#125;12345678910volatile boolean inited = false;//线程1:context = loadContext(); inited = true; //线程2:while(!inited )&#123;sleep()&#125;doSomethingwithconfig(context);double check123456789101112131415class Singleton&#123; private volatile static Singleton instance = null; private Singleton() &#123; &#125; public static Singleton getInstance() &#123; if(instance==null) &#123; synchronized (Singleton.class) &#123; if(instance==null) instance = new Singleton(); &#125; &#125; return instance; &#125;&#125;参考：https://www.cnblogs.com/NaLanZiYi-LinEr/p/7492571.html参考https://blog.51cto.com/13981400/2320809深入理解JVM第二版https://www.cnblogs.com/dolphin0520/p/3920373.html]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程安全分类]]></title>
    <url>%2F2019%2F%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%88%86%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[线程安全定义当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的。这个定义其实很严格，我们通常所说的线程安全都达不到这个要求。Java中各种操作共享的数据分为以下5类：不可变， 绝对线程安全， 相对线程安全，线程兼容，线程对立。不可变可变（Immutable）的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施，只要一个不可变的对象被正确地构建出来（没有发生this引用逃逸的情况），那其外部的可见状态永远也不会改变，永远也不会看到它在多个线程之中处于不一致的状态。例：被final修饰的变量，java.lang.String类的对象。绝对线程安全绝对线程安全就是满足定义中的线程安全要求。但是实际上Java API中标注自己是线程安全的类大多数都没做到绝对线程安全。比如Vector。12345678910111213141516171819202122232425262728293031// 对线程安全的容器 Vector的测试public class VectorTest &#123; private static Vector&lt;Integer&gt; vector = new Vector&lt;&gt;(); public static void main(String[] args) &#123; while(true) &#123; for (int i = 0; i &lt; 100; i++) &#123; vector.add(i); &#125; Thread removeThread = new Thread(new Runnable() &#123; @Override public void run() &#123; for (int i = 0; i &lt; vector.size(); i++) &#123; vector.remove(i); &#125; &#125; &#125;); Thread printThread = new Thread(new Runnable() &#123; @Override public void run() &#123; for (int i = 0; i &lt; vector.size(); i++) &#123; System.out.println(vector.get(i)); &#125; &#125; &#125;); removeThread.start(); printThread.start(); // 不要同时产生过多的线程，否则会导致os 假死 while(Thread.activeCount() &gt; 20); &#125; &#125;&#125;因为如果另一个线程恰好在错误的时间里删除了一个元素，导致序号i 已经不再可用的话，再用i访问数组就会抛出一个ArrayIndexOutOfBoundsException。但是并发问题是有偶然性的，所以需要多测几次才能获得结果。如果要保证这段代码能够正确执行下去，修改后的代码为：12345678910111213141516171819202122232425262728293031323334353637383940// 对线程安全的容器 Vector的测试(修改后的代码)public class ModifiedVectorTest &#123; private static Vector&lt;Integer&gt; vector = new Vector&lt;&gt;(); public static void main(String[] args) &#123; while(true) &#123; for (int i = 0; i &lt; 100; i++) &#123; vector.add(i); &#125; Thread removeThread = new Thread(new Runnable() &#123; @Override public void run() &#123; synchronized (vector) &#123; // 添加同步块，this line for (int i = 0; i &lt; vector.size(); i++) &#123; vector.remove(i); &#125; &#125; &#125; &#125;); Thread printThread = new Thread(new Runnable() &#123; @Override public void run() &#123; synchronized (vector) &#123; // 添加同步块，this line for (int i = 0; i &lt; vector.size(); i++) &#123; System.out.println(vector.get(i)); &#125; &#125; &#125; &#125;); removeThread.start(); printThread.start(); // 不要同时产生过多的线程，否则会导致os 假死 while(Thread.activeCount() &gt; 20); &#125; &#125;&#125;相对线程安全上述 VectorTest.java 和 ModifiedVectorTest.java 就是相对线程安全的案例。实际上Java API标注的线程安全基本都指相对线程安全。线程兼容线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用。线程对立定义指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。由于Java语言天生就具备多线程特性，线程对立这种排斥多线程的代码是很少出现的，而且通常是有害的，应当尽量避免。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新生代内存为什么使用两个Survivor]]></title>
    <url>%2F2019%2F%E6%96%B0%E7%94%9F%E4%BB%A3%E5%86%85%E5%AD%98%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AASurvivor%2F</url>
    <content type="text"><![CDATA[为什么要有Survivor区先不去想为什么有两个Survivor区，第一个问题是，设置Survivor区的意义在哪里？如果没有Survivor，Eden区每进行一次Minor GC，存活的对象就会被送到老年代。老年代很快被填满，触发Major GC（因为Major GC一般伴随着Minor GC，也可以看做触发了Full GC）。老年代的内存空间远大于新生代，进行一次Full GC消耗的时间比Minor GC长得多。你也许会问，执行时间长有什么坏处？频发的Full GC消耗的时间是非常可观的，这一点会影响大型程序的执行和响应速度，更不要说某些连接会因为超时发生连接错误了。Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。为什么要设置两个Survivor区设置两个Survivor区最大的好处就是解决了碎片化。stackoverflow上有一个个人推荐的回答：The reason for the HotSpot JVM’s two survivor spaces is to reduce the need to deal with fragmentation. New objects are allocated in eden space. All well and good. When that’s full, you need a GC, so kill stale objects and move live ones to a survivor space, where they can mature for a while before being promoted to the old generation. Still good so far. The next time we run out of eden space, though, we have a conundrum. The next GC comes along and clears out some space in both eden and our survivor space, but the spaces aren’t contiguous. So is it better to Try to fit the survivors from eden into the holes in the survivor space that were cleared by the GC?Shift all the objects in the survivor space down to eliminate the fragmentation, and then move the survivors into it?Just say “screw it, we’re moving everything around anyway,” and copy all of the survivors from both spaces into a completely separate space–the second survivor space–thus leaving you with a clean eden and survivor space where you can repeat the sequence on the next GC?参考https://blog.csdn.net/antony9118/article/details/51425581https://stackoverflow.com/questions/10695298/java-gc-why-two-survivor-regions]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM中的锁优化]]></title>
    <url>%2F2019%2FJVM%E4%B8%AD%E7%9A%84%E9%94%81%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[Java线程的实现方式OS中线程的实现方式参考：https://isjinhao.github.io/2019/02-%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/计算机操作系统（汤子瀛）Java线程的实现Java线程的实现机制和操作系统本身有关，限于笔者水平，我们下面介绍的Java线程都是基于Linux平台的实现。在Linux平台上，一条Java线程会映射到一个轻量级进程（LWP）之中，而LWP的本质是供程序使用内核线程的接口，每个LWP都会对应一个内核支持线程（KLT），KLT的调度是内核通过操纵调度器（Thread Scheduler）完成，TS的功能就是将KLT的任务映射到各个处理器上。从这可以看出Java线程的创建、撤销、同步等操作都需要进行用户态和内核态的转换，是一种消耗较大的操作。Java线程的状态自旋锁和自适应自旋最常控制同步的手段是互斥，也即synchronized，但是从上面的分析我们可以知道互斥操作对性能最大的影响是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态进行。不过虚拟机的开发团队意识到，共享数据的锁定时间在大多数情况下只会持续很短一段时间，所以对于多处理机的机器来说，我们可以让后请求锁的线程执行一个忙循环而不放弃处理器的执行时间。这就是自旋锁。从上面的分析可知，自旋锁在多处理机的机器上可以减少内核态与用户态之间切换的消耗，但自旋本身是要占用处理机时间的，如果自旋等待的时间太多就会白白消耗处理机资源。所以在JDK6中引入了自适应的自旋锁，自旋的时间由上次在同一个锁上的自旋时间以及锁的拥有者决定。。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋有很大几率成功，允许自旋较长的时间。如果对于某个锁很少自旋成功过，则以后可能会省略掉自旋过程。锁消除锁消除指的是虚拟机即时编译器在运行时，检测到对不可能发生共享的数据进行加锁就会进行锁消除。锁消除的判定依赖来源于逃逸分析的数据支持。这里会有一个问题就是：对象会不会发生逃逸其实是程序员可以感知到的，如果对于一段代码不可能存在竞争自然不会加锁。但是实际上Java中很多的同步不是程序员可以控制的。比如：123public String concatString(String s1, String s2, String s3)&#123; return s1 + s2 + s3;&#125;我们都知道String是一个不可变的对象，对于字符串的连接总是通过生成新的String对象来进行的，比如上面代码的实际操作是：1234567public String concatString(String s1, String s2, String s3)&#123; StringBuffer sb = new StringBuffer(); sb.append(s1); sb.append(s2); sb.append(s3); return sb.toString();&#125;而StringBuffer.append()方法中有一个同步块，锁的就是sb：123456@Overridepublic synchronized StringBuffer append(String str) &#123; toStringCache = null; super.append(str); return this;&#125;虽然这种锁程序员无法控制，但是JVM可以进行锁消除来优化代码。锁粗化原则上，我们在编写并发代码的时候希望同步快范围越小越好，这样是为了使需要同步的操作数量尽可能变小。这种原则在大多数情况下都是合理的，但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁和解锁的操作出现在循环体中，会增加很多不必要的消耗，此时虚拟机会把锁的范围扩大来减少加锁解锁的操作。比如上面代码的append()操作就是如此。轻量级锁对象头HotSpot虚拟机中，对象在内存中存储的布局可以分为三块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。HotSpot虚拟机的对象头(Object Header)包括两部分信息，第一部分用于存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，这部分数据的长度在32位和64位的虚拟机（暂不考虑开启压缩指针的场景）中分别为32个和64个Bits，官方称它为“Mark Word”。但是对象需要存储的运行时数据很多，其实已经超出了32、64位Bitmap结构所能记录的限度，但是对象头信息是与对象自身定义的数据无关的额 外存储成本，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间。例如在32位的HotSpot虚拟机 中对象未被锁定的状态下，Mark Word的32个Bits空间中的25Bits用于存储对象哈希码（HashCode），4Bits用于存储对象分代年龄，2Bits用于存储锁标志 位，1Bit固定为0，在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下对象的存储内容如下表所示。epoch：偏向时间戳对象头的另外一部分是类型指针，即是对象指向它的类的元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说查找对象的元数据信息并不一定要经过对象本身（比如通过句柄访问对象时就可以不通过对象本身获得类型）。另外，如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中无法确定数组的大小。轻量级锁轻量级锁的本质是减少传统的重量级锁使用操作系统互斥量产生的性能消耗。具体过程如下：在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁标志为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word。拷贝对象头中的Mark Word复制到锁记录中。拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock record里的owner指针指向object mark word。如果更新成功，则执行步骤4，否则执行步骤5。如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态。如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。 而当前线程便尝试使用自旋来获取锁，自旋就是为了不让线程阻塞，而采用循环去获取锁的过程。这里我们需要注意两个问题，第一：CAS是对Mark Word进行的CAS。第二就是要考虑一个问题，为什么更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧？在代码进入同步块的时候，同步对象锁状态为无锁状态，把对象头中的Mark Word复制到锁记录中后如果发生了线程调度，可能再调度回来的时候别的线程CAS成功，所以本线程会CAS失败，此时对象的Mark Word指向别的线程的栈帧。但是在这个过程中怎么既能CAS失败，又指向本线程的栈帧呢？笔者没有弄懂。我们可以看到在有竞争的条件下，轻量级锁会膨胀为重量级锁，此时不仅使用到信号量，还会增加多余的CAS操作，所以在有竞争的条件下，轻量级锁的引入会增加线程同步消耗。不过事实证明：“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”，这是轻量级锁存在的必要。偏向锁轻量级锁的目的是在无竞争的情况下使用CAS操作去除同步使用的互斥量。而偏向锁就是在无竞争的情况下把整个同步都去掉，连CAS都不用做了。具体过程：访问Mark Word中偏向锁的标识是否设置成1，锁标志位是否为01，确认为可偏向状态。如果为可偏向状态，则测试线程ID是否指向当前线程，如果是，进入步骤5，否则进入步骤3。如果线程ID并未指向当前线程，则通过CAS操作竞争锁。如果竞争成功，则将Mark Word中线程ID设置为当前线程ID，然后执行5；如果竞争失败，执行4。如果CAS获取偏向锁失败，则表示有竞争。当到达全局安全点（safepoint）（在这个时间点上没有字节码正在执行）时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码。（撤销偏向锁的时候会导致stop the word）执行同步代码。撤销操作：偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动去释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态，撤销偏向锁后恢复到未锁定（标志位为“01”）或轻量级锁（标志位为“00”）的状态。锁膨胀一个对象刚开始实例化的时候，没有任何线程来访问它的时候。它是可偏向的，意味着，它现在认为只可能有一个线程来访问它，当到来第一个线程时，这个线程在修改对象头成为偏向锁的时候使用CAS操作，这时候的CAS是对对象头中的偏向线程ID做，会将偏向线程ID该为本线程的ID，之后再次访问这个对象时，只需要对比ID，不需要再使用CAS在进行操作。一旦有第二个线程访问这个对象（个人理解，即使第一个线程运行结束，它持有的偏向锁不会主动释放，即对象头不会被修改），所以第二个线程可以看到对象时偏向状态，这时表明在这个对象上已经存在竞争了，检查原来持有该对象锁的线程是否依然存活，如果挂了，则可以将对象变为无锁状态，然后重新偏向新的线程，如果原来的线程依然存活，则检查该对象的使用情况，如果仍然需要持有偏向锁，则偏向锁升级为轻量级锁，（偏向锁就是这个时候升级为轻量级锁的）。如果不存在使用了，则可以将对象回复成无锁状态，然后重新偏向。轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。掘金上的巨佬，提出了一些意见：按照图中流程，如果发现锁已经膨胀为重量级锁，就直接使用互斥量mutex阻塞当前线程。然而，自旋锁的一大好处就是减少线程切换的开销。在这里没有必要直接阻塞当前线程，大可以像轻量级锁一样，自旋一会，失败了再阻塞。参考https://blog.csdn.net/choukekai/article/details/63688332https://blog.dreamtobe.cn/2015/11/13/java_synchronized/https://juejin.im/post/5a5c09d051882573282164ae深入理解JVM第二版（周志明）]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JIT和逃逸分析]]></title>
    <url>%2F2019%2FJIT%E5%92%8C%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[JIT全称：Just-In-Time Compilation。在部分商用虚拟机中（如HotSpot），Java程序最初是通过解释器（Interpreter）进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码”。为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为即时编译器（Just In Time Compiler，下文统称JIT编译器）。引入JIT编译器的Java程序运行过程如下图：即时编译器并不是虚拟机必须的部分，Java虚拟机规范并没有规定Java虚拟机内必须要有即时编译器存在，更没有限定或指导即时编译器应该如何去实现。但是，即时编译器编译性能的好坏、代码优化程度的高低却是衡量一款商用虚拟机优秀与否的最关键的指标之一，它也是虚拟机中最核心且最能体现虚拟机技术水平的部分。由于Java虚拟机规范并没有具体的约束规则去限制即使编译器应该如何实现，所以这部分功能完全是与虚拟机具体实现相关的内容，如无特殊说明，我们提到的编译器、即时编译器都是指Hotspot虚拟机内的即时编译器，虚拟机也是特指HotSpot虚拟机。HotSpot虚拟机在JDK8中默认开启了JIT。上图中的mixed mode便是指在硬件上跑程序时，使用解释和JIT编译的混合模式。设定HotSpot工作模式解释模式：-Xint编译模式：-Xcomp混合模式：-Xmixed热点探测如何判断方法或一段代码或是不是热点代码呢？要知道方法或一段代码是不是热点代码，是不是需要触发即时编译，需要进行Hot Spot Detection（热点探测）。目前主要的热点探测方式有以下两种：基于采样的热点探测采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这个方法就是“热点方法”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系（将调用堆栈展开即可），缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。基于计数器的热点探测采用这种方法的虚拟机会为每个方法（甚至是代码块）建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。HotSpot的热点检测方式？在HotSpot虚拟机中使用的是第二种——基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阈值，当计数器超过阈值溢出了，就会触发JIT编译。方法调用计数器顾名思义，这个计数器用于统计方法被调用的次数。当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阈值。如果超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。如果不做任何设置，执行引擎并不会同步等待编译请求完成，而是继续进行解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成。当编译工作完成之后，这个方法的调用入口地址就会系统自动改写成新的，下一次调用该方法时就会使用已编译的版本。回边计数器它的作用就是统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边”。逃逸分析在《深入理解Java虚拟机中》关于Java堆内存有这样一段描述：但是，随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。这里只是简单提了一句，并没有深入分析，笔者在刚到这里由于对JIT、逃逸分析等技术不了解，无法真正理解上面这段话的含义，但现在略有理解。JIT刚才已经介绍过，逃逸分析这部分摘取周志明老师的深入理解JVM第二版。逃逸逃逸分析的基本行为就是分析对象动态作用域：方法逃逸当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他地方中，称为方法逃逸。123456public static StringBuffer craeteStringBuffer(String s1, String s2) &#123; StringBuffer sb = new StringBuffer(); sb.append(s1); sb.append(s2); return sb;&#125;上诉代码中返回了sb，这样这个StringBuffer有可能被其他方法所改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。如果想要StringBuffer sb不逃出方法，可以这样写：123456public static String createStringBuffer(String s1, String s2) &#123; StringBuffer sb = new StringBuffer(); sb.append(s1); sb.append(s2); return sb.toString();&#125;线程逃逸同理，如果一个对象可能被外部线程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，则称为线程逃逸。逃逸分析如果能证明一个对象不会逃逸到方法或线程以外，也就是别的方法或线程无法通过任何途径访问这个对象，则可能为这个变量进行一些高效的优化。如何优化栈上分配Java虚拟机中，在Java堆上分配创建对象的内存空间几乎是Java程序员都清楚的常识了，Java堆中的对象对于各个线程都是共享可见的，只要持有这个对象的引用，就可以访问堆中存储的对象数据。虚拟机的垃圾收集系统可以回收堆中不再使用的对象，但回收动作无论是筛选可回收对象还是回收和整理内存都需要耗费时间。如果确定一个对象不会逃逸出方法之外，那让这个对象在栈上分配内存将会是一个很不错的主意，对象所占用的内存空间就可以随着栈帧的出栈而销毁。在一般应用中，不会逃逸的局部对象所占的比例很大，如果能使用栈上分配，那大量的对象就会随着方法的结束而自动销毁了，垃圾收集系统的压力会小很多。同步消除线程同步本身是一个很耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以消除掉。标量替换标量是指一个数据已经无法再分解成更小的数据来显示了，Java虚拟机中的原始数据类型（ing、long等数值类型以及引用类型）都不能再进一步分解，他们就可以称为标量。相应的，如果一个数据可以继续分解，那么就把它叫做聚合量。对象就是常见的聚合量。如果把一个Java对象拆散，根据程序访问的情况，将其使用到的成员变量恢复原始类型来访问就叫做标量替换。如果逃逸分析证明一个对象不会被外部访问，并且这个对象可以被拆散的话，程序运行的时候就可以不创建这个对象，而改为直接创建若干个标量来代替。逃逸分析开启JDK8中JIT和逃逸分析都是默认开启的， JVM参数如下：-XX:+DoEscapeAnalysis ： 表示开启逃逸分析-XX:-DoEscapeAnalysis ： 表示关闭逃逸分析逃逸分析测试12345678910111213141516171819202122public class Test &#123; public static void main(String[] args) &#123; long a1 = System.currentTimeMillis(); for (int i = 0; i &lt; 1000000; i++) &#123; alloc(); &#125; long a2 = System.currentTimeMillis(); System.out.println("cost " + (a2 - a1) + " ms"); // 为了方便查看堆内存中对象个数，线程sleep try &#123; Thread.sleep(100000); &#125; catch (InterruptedException e1) &#123; e1.printStackTrace(); &#125; &#125; private static void alloc() &#123; User user = new User(); &#125; static class User &#123; &#125;&#125;关闭逃逸分析DOS窗口执行命令1java -Xmx4G -Xms4G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError Test新开一个DOS窗口，输入jps，找到Test进程，使用jmap -histo PID查看。开启逃逸分析DOS窗口执行命令1java -Xmx4G -Xms4G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError Test新开一个DOS窗口，输入jps，找到Test进程，使用jmap -histo PID查看。可以发现开启逃逸分析之后，堆中只创建了11万个对象。不开启就会创建100万个对象。逃逸分析并不成熟关于逃逸分析的论文在1999年就已经发表了，但直到JDK 1.6才有实现，而且这项技术到如今也并不是十分成熟的。其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。虽然这项技术并不十分成熟，但是他也是即时编译器优化技术中一个十分重要的手段。JIT和逃逸分析的联系最开始的时候笔者一直以为，逃逸分析是JIT中的优化技术，为什么呢？因为逃逸分析的代价较大，而JIT是对热点代码进行优化，如果对诸如循环等代码进行逃逸分析，只需要分析一次就可以得到循环中的代码是否满足逃逸的条件，可以淡化逃逸分析的代价。但事实上是笔者的一个错误理解。测试中即使关闭JIT也可以开启逃逸分析。如java -Xint -XX:+DoEscapeAnalysis Test。this引用逃逸提到逃逸，必须引出另外一个名字类似，但意义完全不同的概念，this引用逃逸：在构造器构造还未彻底完成前（即实例初始化阶段还未完成），将自身this引用向外抛出并被其他线程复制（访问）了该引用，可能会问到该还未被初始化的变量，甚至可能会造成更大严重的问题。this引用逃逸是一种错误，而逃逸分析是优化策略。详见：https://www.cnblogs.com/straybirds/p/8640748.html参考https://blog.csdn.net/sunxianghuang/article/details/52094859深入理解JVM第二版，周志明http://ju.outofmemory.cn/entry/354837]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于比较的三种简单排序]]></title>
    <url>%2F2019%2F%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E4%B8%89%E7%A7%8D%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;using namespace std;/* 简单排序： 平均时间复杂度都是O(N方)级别。包括：冒泡排序、插入排序、选择排序 说明： 实现的算法都是升序排序。 */void swap(int &amp;e1, int &amp;e2)&#123; int temp = e1; e1 = e2; e2 = temp;&#125;/* 冒泡排序（稳定）： 重复地走访过要排序的元素列，一次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从 A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说 该元素已经排序完成。这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端 （升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。*/ void bubbleSort(int *arr, int len)&#123; for(int i = 0; i &lt; len - 1; i++) //len - 1 趟就行 &#123; int flag = 0; for(int j = 0; j &lt; len - i - 1; j++) &#123; if(arr[j] &gt; arr[j + 1]) &#123; swap(arr[j], arr[j + 1]); flag = 1; &#125; &#125; if(flag == 0) //某趟排序没有进行交换时，排序结束 break; &#125;&#125;/* 插入排序（稳定）： 从索引为1的元素（设为temp）开始开始，每次把之前的元素调整成有序序列。由于之前的元素都是有序序列， 从后向前若temp小于当前遍历到的元素（arr[j]），此元素后移。否则退出此次遍历。退出后把temp插入当前的arr[j]。 */ void insertSort(int *arr, int len)&#123; for(int i = 1; i &lt; len; i++) &#123; int temp = arr[i], j; for(j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j--) arr[j + 1] = arr[j]; arr[j + 1] = temp; &#125;&#125;/* 选择排序（不稳定）： 每次从待排序的数据元素中选出最小的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。*/void selectSort(int *arr, int len)&#123; for(int i = 0; i &lt; len; i++) &#123; int min = i; for(int j = i; j &lt; len; j++) if(arr[j] &lt; arr[min]) min = j; swap(arr[min], arr[i]); &#125;&#125;int main()&#123; int arr[10]; srand((unsigned)time(NULL)); for(int i = 0; i &lt; 10; i++) arr[i] = rand() % 10; for(int i = 0; i &lt; 10; i++) cout &lt;&lt; arr[i] &lt;&lt; " "; cout &lt;&lt; endl; selectSort(arr, 10); for(int i = 0; i &lt; 10; i++) cout &lt;&lt; arr[i] &lt;&lt; " "; return 0;&#125;]]></content>
      <categories>
        <category>DS</category>
      </categories>
      <tags>
        <tag>DSA</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java的GC]]></title>
    <url>%2F2019%2FJava%E7%9A%84GC%2F</url>
    <content type="text"><![CDATA[概述程序计数器、虚拟机栈、本地方法栈这些区域不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟着回收了。垃圾收集器关注的是堆和方法区中的垃圾。对象已死吗对象判死算法引用计数器给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。但这种计数法无法解决循环引用的问题，即若A对象中有属性B，B对象中有属性A，则A、B永远都有计数。可达性分析算法通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。在Java语言中，可作为GC Roots的对象包括下面几种：虚拟机栈（栈帧中的本地变量表）中引用的对象。方法区中类静态属性引用的对象。方法区中常量引用的对象。本地方法栈中JNI（即一般说的Native方法）引用的对象再谈引用在Java1.2之前，引用的定义是这样的：如果reference类型的数据中存储的数值代表的是另外一块内存中的起始地址，就称这块内存代表着一个引用。我们可以看到，这个引用的定义是非常狭隘的，因为他不能描述一些“鸡肋”对象，即我们最希望的是能描述这样一类对象：当内存空间还足够时，则能保存在内中，如果内存空间在回收后仍然很紧张则可以抛弃这些对象。所以，在Java1.2以后提出了新的引用定义：强引用：在代码中普遍存在的，类似Object obj = new Object();。只要强引用还存在，垃圾回收期就永远不会回收被引用的对象软引用：用来描述一些还有用，但并非必须的对象。这样当系统要发生内存溢出异常之前，就会把软引用列进第二次垃圾回收的计划中。弱引用：比软引用还弱的引用，被弱引用的对象只能存活到下一次垃圾回收之前。虚引用：最弱的一种引用关系了。使用虚引用的唯一目的就是在这个对象回收前收到一个系统回收通知。生存还是死亡即使是不可达对象，也并非是非死不可的，这时候它们暂时处于”缓刑“阶段，真正宣告一个对象死亡，至少要经过两次标记过程：如果对象在进行根搜索后发现跟root不同根，就被标记一次，同时进行筛选，筛选的条件是此对象是否有必要执行finalize()方法，”没有必要执行”的原因如下：当对象没有覆盖finalize()方法，或者finalize()已经被JVM调用过（说明一个对象的finalize()方法只能执行一次）。如果这个对象有必要执行finalize()方法，JVM就会把它放在F-Queue中，稍后JVM会触发一个低优先级的线程去执行。但是去执行并不承诺会等待它运行结束，因为如果一个对象在finalize()方法中执行缓慢，甚至发生了死循环，就会导致F-Queue其他对象永久处于等待状态，更严重的话可能会拖垮整个内存回收系统。finalize()是对象逃脱死亡命运的最后一次机会，稍后GC将会对F-Queue进行第二次小规模的标记，如果在finalize()中将自己和root挂在一个根上（比如把自己赋值给某个类变量或者对象的成员变量），那么在这第二次标记将会被移除出“即将回收的集合”：如果对象还没有逃脱，那么就基本上真的被回收了。不过非常不推荐使用finalize()方法自救对象，因为这是Java刚诞生为了使C/C++程序员更容易接受它作的一个妥协。它的运行带价高昂，不确定性大，无法保证各个对象的调用顺序。有些教材中提到它使用“关闭外部资源”之类的工作，这完全是对这种方法的用途的一种自我安慰。finalize()能做的所有工作，使用try-finally或其他方法都可以做的更好、更及时，Java程序员完全可以忘掉Java有finalize()。finalize()测试：1234567891011121314151617181920212223242526272829303132333435363738public class FinalizeEscapeGC &#123; public static FinalizeEscapeGC SAVE_HOOK = null; public void isAlive() &#123; System.out.println("haha, i'm still alive!"); &#125; @Override protected void finalize() throws Throwable &#123; super.finalize(); System.out.println("finalize method executed!"); FinalizeEscapeGC.SAVE_HOOK = this; &#125; public static void main(String[] args) throws Throwable &#123; SAVE_HOOK = new FinalizeEscapeGC(); //对象第一次拯救自己 SAVE_HOOK = null; System.gc(); Thread.sleep(500); if(SAVE_HOOK != null) &#123; SAVE_HOOK.isAlive(); &#125; else &#123; System.out.println("5555, i'm dead!"); &#125; //对象第二次拯救自己，但是却跪了。因为finalize只能执行一次呀，亲！！ SAVE_HOOK = null; System.gc(); Thread.sleep(500); if(SAVE_HOOK != null) &#123; SAVE_HOOK.isAlive(); &#125; else &#123; System.out.println("5555, i'm dead!"); &#125; &#125;&#125;/*output: finalize method executed! haha, i'm still alive! 5555, i'm dead!*/回收方法区永久代的垃圾收集主要回收两部分内容：废弃常量：以常量池中字面量的回收为例，假如一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做“abc”的，换句话说，就是没有任何String对象引用常量池中的“abc”常量，也没有其他地方引用了这个字面量，如果这时发生内存回收，而且必要的话，这个“abc”常量就会被系统清理出常量池。常量池中的其他类（接口）、方法、字段的符号引用也与此类似。无用的类：判断一个类是无用的类的条件比废弃变量要苛刻的多，要同时满足3个条件才能算是“无用的类”：该类所有的实例都已经被回收，意思是堆上没有该对象的实例了加载该类的ClassLoader已经被回收。该类对象的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法（因为通过反射，就一定要加载该类）在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。垃圾收集算法标记-清除算法首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经介绍过了。有两个问题：一是效率不高，因为当对象数量比较多的时候一一进行标记和清除较复杂；二是会产生内存碎片，当需要大的连续内存空间时，即使碎片内存总和远大于需求，也会触发垃圾回收操作。复制算法将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。实现简单，运行高效，但是空间缩小为原来的一半了。现在的商业JVM采用这种算法来回收新生代，IBM经过调研发现，新生代的对象98%都是朝生夕死的，所有并不需要按照1：1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor还存活着的对象一次性拷贝到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor的空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8：1，也就是每次新生代中可用内存空间为整个内存空间的9/10，只有10%的内存是用来浪费的。当然了，我们无法保证每次回收只有少于10%的对象存活，当存活对象大于10%，就会借用其他内存（这里指老年代）进行分配担保。分配担保的详细介绍在后面。标记整理算法标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。（老年代一般采用这个方法）分代收集算法当前商业虚拟机的垃圾回收都采用分代收集算法，这种算法没有啥特别的，就是根据对象的存活周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据每个代不同的特点采用最适当的回收算法。比如新生代存活对象少，就采用复制算法；老年代存活对象少，复制的话代价太大，就可以采用标记-整理算法。HotSpot 的算法实现枚举根节点可达性分析在逐个检查引用链和GC停顿（保证分析工作的一致性）上浪费时间较多。主流Java虚拟机使用的都是准确式GC，即虚拟机应当有办法直接得知哪些地方存放着对象的引用。HotSpot是通过一个OopMap的数据结构来达到这个目的的。在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。安全点HotSpot没有为每条指令都生成OopMap，那样占用空间太多，前面已经提到，只是在“特定的位置”记录了这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。另一个问题是如何让所有线程都跑到最近的安全点停顿。这里有两种方案可供选择：抢先式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension），其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。安全区域如果线程没有在执行呢，比如线程处于Sleep状态或者Blocked状态，就需要安全区域解决了。安全区域是指在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的。在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。OopMap和安全点辨析OopMap 记录了栈上本地变量到堆上对象的引用关系。其作用是：垃圾收集时，收集线程会对栈上的内存进行扫描，看看哪些位置存储了 Reference 类型。如果发现某个位置确实存的是 Reference 类型，就意味着它所引用的对象这一次不能被回收。但问题是，栈上的本地变量表里面只有一部分数据是 Reference 类型的（它们是我们所需要的），那些非 Reference 类型的数据对我们而言毫无用处，但我们还是不得不对整个栈全部扫描一遍，这是对时间和资源的一种浪费。一个很自然的想法是，能不能用空间换时间，在某个时候把栈上代表引用的位置全部记录下来，这样到真正 gc 的时候就可以直接读取，而不用再一点一点的扫描了。事实上，大部分主流的虚拟机也正是这么做的，比如 HotSpot ，它使用一种叫做 OopMap 的数据结构来记录这类信息。我们知道，一个线程意味着一个栈，一个栈由多个栈帧组成，一个栈帧对应着一个方法，一个方法里面可能有多个安全点。 gc 发生时，程序首先运行到最近的一个安全点停下来，然后更新自己的OopMap，记下栈上哪些位置代表着引用。枚举根节点时，递归遍历每个栈帧的OopMap，通过栈中记录的被引用对象的内存地址，即可找到这些对象（ GC Roots ）。参考：https://dsxwjhf.iteye.com/blog/2201685垃圾收集器Serial收集器最基本，历史最悠久。新生代的，“单线程的”，只会用一个CPU或一个线程工作，并且收集时，必须暂停所有的工作线程，直到收集结束。它依然是虚拟机运行在Client端的默认新生代收集器。简单而高效，因为它不需要考虑线程切换，只专注一次把收集工作搞定，而且在Client端，新生代的内存一般只有几十M或者一两百M的样子，完成一次收集工作完全可以控制在几十毫秒或者一百毫秒左右，不会有很大的停顿感。ParNew收集器这个本质上就是Serial收集器的多线程版本。许多运行在Server模式下的虚拟机中首选的新生代收集器，其中还有一个与性能无关但很重要的原因是：除了Serial收集器外，目前只有它能与CMS收集器配合工作。（原因是Parallel Scavenge收集器和后面的G1收集器都没有使用传统的GC收集器代码框架，而是另外独立实现的，其余几种收集器则共用了框架代码）。ParNew收集器也是使用-XX:+UseConcMarkSweepGC选项后的默认新生代收集器，当然也可以使用-XX:+UseParNewGC选项来显式指定使用单CPU的话一般会考虑用Serial，多CPU的话一般考虑用ParNew，它默认开启的收集器线程数和CPU核数相同，当你想控制的时候，可以使用-XX:ParallelGCThreads参数来限制收集器的线程数。然后提前解释一下并行和并发的概念，因为后面会有几个并发和并行的收集器：并行(Parallel)：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。所以，遇到 Parallel 关键字的话，都是并行。所以当它们工作的时候，用户线程是阻塞的。所以也是 stop the world并发(Concurrent)：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会根据时间片轮转交替进行），用户程序继续运行，而垃圾收集程序运行在另外一个CPU上。所以遇到 concurrent 关键字就是 GC 线程和用户线程在一段时间内交叉运行，不会将用户线程阻塞，不是 stop the worldParallel Scavenge收集器Parallel Scavenge也是一个新生代收集器，它也是使用复制算法的收集器，同时也是并行的多线程收集器。它的目标是达到可控制的CPU吞吐量。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/（运行用户代码时间+垃圾回收时间）。比如虚拟机运行了100分钟，垃圾回收使用了1分钟，那么吞吐量就是99%。这就说说一下应用场景了。停顿时间（垃圾回收时间）： 停顿时间越短越适合于用户交互的程序，良好的响应速度能提升用户体验高吞吐量： 可以最高效率的利用CPU时间，尽快的完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务为了这两个目的，Parallel Scavenge收集器提供了2个参数：-XX:MaxGCPauseMillis：大于0的毫秒数，收集器将尽力保证内存回收时间不超过这个值。不过不要异想天开认为把这个值设的特别小，就能使系统垃圾收集速度更快，GC停顿时间缩短肯定是有代价的，它会牺牲吞吐量和新生代空间来实现。-XX:GCTimeRatio：大于0小于100的整数.假如设为N，那么垃圾收集时间占总时间的比率就是1/(1+N),比如设置为19,占比就是1/(1+19)=5%，默认值是99，即1%。-XX:+UseAdaptiveSizePolicy：这也是一个有用的参数，放在这里说一下。它是一个开关参数，当这个参数打开之后，就不需要手工指定新生代的大小（-Xmn）、Eden、Survivor区的比例（-XX:SurvivorRatio）、晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以一同最合适的停顿时间或最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。自适应调节策略也是Parallel Scavenge收集器和ParNew收集器的一个重要区别Serial Old 收集器Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用”标记-整理“算法。这个收集器的主要意义就是被Client模式下的虚拟机使用。如果在Server模式下，它还有两大用途：在JDK1.5及之前的版本中与Parallel Scavenge收集器搭配使用；另外一个就是CMS的后备预案，在并发收集发生Concurrent Mode Failure的时候使用。Parallel Old收集器Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和标记-整理算法。是在JDK 1.6之后才提供的。前面说过，Parallel Scavenge收集器采用了独立的架构，无法和CMS配合使用。那么，在JDK 1.6以前，Parallel Scavenge只能和Serial Old配合使用。因为Serial Old是单线程的，所以在多CPU情况下无法发挥性能，所以根本实现不了高吞吐量的需求，直到JDK 1.6推出了Parallel Old之后，Parallel Scavenge收集器和Parallel Old搭配，才真正实现了对吞吐量优先的控制。所以，在注重吞吐量及CPU资源敏感的场合，都可以考虑Parallel Scavenge和Parallel Old组合。CMS（Comcurrent Mark Sweep）收集器CMS收集器是以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或者B/S系统上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，给用户最佳的用户体验。而CMS收集器就非常符合这类应用的需求从名字上可以看出，”Mark Sweep“是基于标记-清除算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤：初始标记：初始标记仅仅只是标记一下GC roots能直接关联到的对象，速度很快，需要stop the world。并发标记：并发标记就是进行GC Roots Tracing（可达性算法）的过程。重新标记：重新标记则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变化的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍微长一些，但远比并发标记的时间短，需要stop the world。并发清除：垃圾清除由于整个过程中，并发标记和并发清除时间最长，收集器线程可以和用户线程一起工作，所以从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。CMS收集器的优点在于并发收集、低停顿，但是也不是完美的，主要有3个显著的缺点：CMS收集器对CPU资源非常敏感。默认情况下，CMS的收集线程数=(CPU数目+3)/4，当CPU个数大于4的时候，CMS的收集线程不会超过整个CPU占用率的25%。但是在CPU个数比较小的情况下，CPU占用就会突然增大，这样对于初始标记和并发标记这样”Stop The World”的过程来说，用户就会明显感觉到停顿。CMS收集器无法处理浮动垃圾，可能出现”Concurrent Mode Failure”失败而导致另一次Full GC的产生。由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，它需要预留一部分空间提供并发收集时的线程使用。在JDK1.5默认设置下，CMS收集器在老年代使用了68%的空间会被激活，这是一个偏保守的设置。如果在应用中，老年代增长不是太快，可以适当调高这个参数-XX:CMSInitiatingOccupancyFraction。要是CMS运行期间预留的内存无法满足程序的需要，就会出现”Concurrent Mode Failure”失败，这时候JVM会启动后备方案：临时启动Serial Old收集器来重新进行老年代的垃圾收集，因为是单线程，停顿时间就会更长了。所以如果大量出现”Concurrent Mode Failure”，就可以将这个值调低CMS是基于标记-清除算法实现的收集器，所以会产生内存碎片。空间碎片过多时，将会给大对象分配带来很大的麻烦：老年代还有空间但是没有连续的足够大的空间，于是不得不触发一次Full GC。为了解决这个问题，有一个开关叫做-XX:+UseCMSCompactAtFullCollection，用于在Full GC时开启内存碎片的合并整理过程。当然，这个内存整理没法并发，只有”Stop The World”了。另外，虚拟机还设计了一个参数-XX:CMSFullGCsBeforeCompaction,用于指定在多少次不压缩的Full GC后，跟着来一次带压缩的。G1收集器G1是一款面向服务端应用的垃圾收集器。与其他GC收集器相比，G1具备如下特点。并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。分代收集：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。空间整合：与CMS的“标记—清理”算法不同，G1从整体来看是基于“标记—整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。可预测的停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。G1收集器的运作大致可划分为以下几个步骤：初始标记（Initial Marking）并发标记（Concurrent Marking）最终标记（Final Marking）筛选回收（Live Data Counting and Evacuation）理解GC日志1233.125: [GC [DefNew: 3324K-&gt;152K(3712K), 0.0025925 secs] 3324K-&gt;152K(11904K), 0.0031680 secs]100.667: [Full GC [Tenured: 0K-&gt;210K(10240K), 0.0149142 secs] 4603K-&gt;210K(19456K), [Perm : 2999K-&gt;2999K(21248K)], 0.0150007 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]最前面的数字“33.125：”和“100.667：”代表了GC发生的时间，这个数字的含义是从Java虚拟机启动以来经过的秒数。GC日志开头的“[GC”和“[Full GC”说明了这次垃圾收集的停顿类型，而不是用来区分新生代GC还是老年代GC的。如果有“Full”，说明这次GC是发生了Stop-The-World的，例如下面这段新生代收集器ParNew的日志也会出现“[Full GC”（这一般是因为出现了分配担保失败之类的问题，所以才导致STW）。如果是调用System.gc()方法所触发的收集，那么在这里将显示“[Full GC（System）”。1[Full GC 283.736: [ParNew: 261599k-&gt;261599k(261592k), 0.0000288sec]]接下来的“[DefNew”、“[Tenured”、“[Perm”表示GC发生的区域，这里显示的区域名称与使用的GC收集器是密切相关的。后面方括号内部的“3324K-&gt;152K（3712K）”含义是“GC前该内存区域已使用容量-&gt;GC后该内存区域已使用容量（该内存区域总容量）”。而在方括号之外的“3324K-&gt;152K（11904K）”表示“GC前Java堆已使用容量-&gt;GC后Java堆已使用容量（Java堆总容量）”。再往后，“0.0025925 secs”表示该内存区域GC所占用的时间，单位是秒。有的收集器会给出更具体的时间数据，如“[Times：user=0.01 sys=0.00，real=0.02 secs]”，这里面的user、sys和real与Linux的time命令所输出的时间含义一致。参数总结参数描述UseSerialGC虚拟机运行在Client模式下的默认值，打开此开关后，使用Serial+Serial Old的收集器组合进行内存回收UseParNewGC打开此开关后，使用ParNew+Serial Old的收集器组合进行内存回收UseConcMarkSweepGC打开此开关后，使用ParNew+CMS+Serial Old的收集器组合进行内存回收。Serial Old收集器将作为CMS收集器出现Concurrent Mode Failure失败后的后壁收集器使用UseParallelGC虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge+Serial Old（PS MarkSweep）的收集器组合进行内存回收UseParallelOldGC打开此开关后，使用Parallel Scavenge+Parallel Old的收集器组合进行内存回收SurvivorRatio新生代中Eden区域与Survivor区域的容量比值，默认为8，代表Eden:Survivor=8:1PretenureSizeThreshold直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配MaxTenuringThreshold晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄加1，当超过这个参数值时就进入老年代UseAdaptiveSizePolicy动态调整Java堆中各个区域的大小以及进入老年代的年龄HandlePromotionFailure是否允许分配担保失败，即老年代的剩余空间不足以应对新生代的整个Eden和Survivor区的所有对象都存活的极端情况ParallelGCThreads设置并行GC时进行内存回收的线程数GCTimeRatioGC时间占总时间的比率，默认值为99，即允许1%的GC时间。仅在使用Parallel Scavenge收集器时生效MaxGCPauseMillis设置GC的最大停顿时间。仅在使用Parallel Scavenge收集器时生效CMSinitiatingOccupancyFraction设置CMS收集器在老年代空间被使用多少后出发垃圾收集。默认值为68%，仅在使用CMS收集器时生效UseCMSCompactAtFullCollection设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片整理。仅在使用CMS收集器时生效CMSFullGCsBeforeCompaction设置CMS收集器在进行若干次垃圾收集后再启动一次内存碎片整理。仅在使用CMS收集器时生效内存分配与回收策略Minor GC和Full GCMinor GC：发生在新生代的GC。C触发条件：当Eden区满时。Full GC（也叫Major GC）：发生在老年代的GC，通常会触发MinorGC。Major GC的速度一般会比Minor GC慢10倍以上。触发条件：调用System.gc时，系统建议执行Full GC，但是不必然执行老年代空间不足方法区空间不足通过Minor GC后进入老年代的平均大小大于老年代的可用内存由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小但是这种定义不是很规范，详细参考：http://www.importnew.com/15820.html对象优先在Eden分配大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。大对象直接进入老年代所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组（笔者列出的例子中的byte[]数组就是典型的大对象）。大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来“安置”它们。虚拟机提供了一个-XX:PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配。这样做的目的是避免在Eden区及两个Sur-vivor区之间发生大量的内存复制。注意PretenureSizeThreshold参数只对Serial和ParNew两款收集器有效。长期存活的对象将进入老年代虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次MinorGC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每“熬过”一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX:MaxTenuringThreshold设置。动态对象年龄判定虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。空间分配担保在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于就尝试进程一次Minor GC（尽管此次GC是有风险的），如果小于或者不允许冒险，需要进行一次Full GC。在JDK 6 Update 24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行Full GC。参考深入理解JVM第二版（周志明）http://howiefh.github.io/2015/04/08/jvm-note-2/https://blog.csdn.net/yhyr_ycy/article/details/52566105]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于winpcap的cpp控制台网络协议分析]]></title>
    <url>%2F2019%2F%E5%9F%BA%E4%BA%8Ewinpcap%E7%9A%84cpp%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[环境搭建软件版本winpcap4.1.3vs2015创建项目新建项目-&gt;Visual C++项目-&gt;Win32控制台项目，在Win32应用程序向导窗口中的应用程序设置-&gt;附加选项选中空项目。将WinPcap开发包中的Include和Lib两个文件夹复制到新建项目所在文件夹下。点击项目，右击，然后点击属性C/C++-&gt;常规-&gt;附加包含目录：如 ..\include链接器-&gt;常规-&gt;附加库目录：如 ..\lib链接器-&gt;输入-&gt;附加依赖项：wpcap.lib（winpcap的包），ws2_32.lib（windows的socket）数据结构123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#ifdef _MSC_VER#define _CRT_SECURE_NO_WARNINGS#endif#include "pcap.h"typedef struct eth_address&#123; u_char byte1; u_char byte2; u_char byte3; u_char byte4; u_char byte5; u_char byte6;&#125;eth_address;/* 4 bytes IP address */typedef struct ip_address&#123; u_char byte1; u_char byte2; u_char byte3; u_char byte4;&#125;ip_address;/* IPv4 header */typedef struct ip_header&#123; u_char ver_ihl; // Version (4 bits) + Internet header length (4 bits) u_char tos; // Type of service u_short tlen; // Total length u_short identification; // Identification u_short flags_fo; // Flags (3 bits) + Fragment offset (13 bits) u_char ttl; // Time to live u_char proto; // Protocol u_short crc; // Header checksum ip_address saddr; // Source address ip_address daddr; // Destination address u_int op_pad; // Option + Padding&#125;ip_header;/* UDP header*/typedef struct udp_header&#123; u_short sport; // Source port u_short dport; // Destination port u_short len; // Datagram length u_short crc; // Checksum&#125;udp_header;/* MAC header*/typedef struct eth_header&#123; eth_address daddr; eth_address saddr; u_short type;&#125;eth_header;typedef struct arp_header&#123; u_short hardtype; //硬件类型字段 u_short prototype; //协议类型字段 u_char htlen; //硬件地址的长度,以字节为单位.对于以太网上IP地址的ARP请求或应答来说,它们的值为6 u_char ptlen; //协议地址的长度,以字节为单位.对于以太网上IP地址的ARP请求或应答来说,它们的值为4 u_short op; //操作字段 eth_address arp_esa; //发送端MAC地址 ip_address arp_isa; //发送端IP地址 eth_address arp_eda; //目的端MAC地址 ip_address arp_ida; //目的端IP地址&#125;arp_header;typedef struct icmp_header&#123; u_char type; //ICMP报文类型 u_char code; //代码 u_short checksum; //校验和 u_short identifier; //标识符 u_short sequence_number; //序列号&#125;icmp_header;/* TCP header */typedef struct tcp_header&#123; u_short sport; //源端口 u_short dport; //目的端口 u_long sequence_number; //序号（4字节ntohl） u_long acknowlegement_number; //确认号 u_short hlen_bl_flags; //数据偏移+保留+控制位 u_short window_size; //窗口（发送方自己的接收窗口） u_short checksum; //检验和（首部+数据） u_short urg; //紧急指针 u_long option; //可选+填充&#125;tcp_header;typedef struct dns_packet //报文head+data&#123; u_short id; //每一个占2个字节，共12个字节 u_short flags; //标志第一个为0代表查询报文 u_short ques; u_short answer; u_short author; u_short addition; u_char dns_data; //查询问题部分&#125;dns_packet;运行代码ifdef _MSC_VER#define _CRT_SECURE_NO_WARNINGS#endif#include "pcap.h"#include "headers.c"#define DNSPORT 53//输出基本信息void myPrintBaseInfo(const struct pcap_pkthdr *header)&#123; struct tm *ltime; char timestr[16]; time_t local_tv_sec; local_tv_sec = header-&gt;ts.tv_sec; ltime=localtime(&amp;local_tv_sec); strftime(timestr, sizeof timestr, "%H:%M:%S", ltime); printf("\n\n\n\n监听到Mac帧的时间：%s MAC帧长度:%d Byte(s)\n", timestr, header-&gt;len * 4); /* 以四字节为单位 */&#125;//输出硬件地址void myPrintEthAddress(eth_address eth)&#123; printf("%02X:%02X:%02X:%02X:%02X:%02X", eth.byte1, eth.byte2, eth.byte3, eth.byte4, eth.byte5, eth.byte6 );&#125;//输出IP地址void myPrintIPAddress(ip_address ia)&#123; printf("%d.%d.%d.%d", ia.byte1, ia.byte2, ia.byte3, ia.byte4 );&#125;//输出网络层协议类型void myPrintNetType(u_short type)&#123; printf("网络层协议： "); if(type==0x0800) printf("IP协议"); else if(type==0x0806) printf("ARP协议"); else if(type==0x8035) printf("RARP协议"); else printf("接收到非本程序能处理的网络层协议类型！"); printf("\n");&#125;/* 分析Mac帧： 输出： 网络层协议类型：源MAC -&gt; 目的MAC 返回： 网络层协议类型*/u_short handleMac(eth_header *eth)&#123; u_short type=ntohs(eth-&gt;type); printf("Mac地址： "); myPrintEthAddress(eth-&gt;saddr); printf("-&gt;"); myPrintEthAddress(eth-&gt;daddr); printf("\n\n"); return type;&#125;void handleARPAndRARP(arp_header *ah)&#123; u_short arp_ht; //硬件地址的类型.它的值为1即表示以太网地址 u_short arp_pt; //要映射的协议地址类型.它的值为0x0800，即表示IP地址 u_short arp_op; //四种操作类型,它们是ARP请求(值为1)、ARP应答(值为2)、RARP请求(值为3)和RARP应答(值为4) arp_ht=ntohs(ah-&gt;hardtype); //硬件地址的类型.它的值为1即表示以太网地址 arp_pt=ntohs(ah-&gt;prototype); //要映射的协议地址类型.它的值为0x0800，即表示IP地址 arp_op=ntohs(ah-&gt;op); printf("硬件地址类型为：%d\t\t\t",arp_ht); printf("协议地址类型为：0x%04X\n",arp_pt); printf("硬件地址长度为：%d\t\t\t",ah-&gt;htlen); printf("协议地址长度为：%d\n",ah-&gt;ptlen); if (arp_op == 1)&#123; printf("操作类型为：ARP请求报文。\n本机Mac地址："); myPrintEthAddress(ah-&gt;arp_esa); printf("\t正在请求"); myPrintIPAddress(ah-&gt;arp_ida); printf("的Mac地址\n"); &#125; if (arp_op == 2)&#123; printf("操作类型为：ARP应答报文。\n应答方的Mac地址："); myPrintEthAddress(ah-&gt;arp_eda); printf("\t应答方的IP地址"); myPrintIPAddress(ah-&gt;arp_ida); printf("\n"); &#125; if (arp_op == 3) printf("操作类型为：RARP请求报文\n"); if (arp_op == 4) printf("操作类型为：RARP应答报文\n");&#125;int all_ip_len = 20;u_short handleIP(ip_header *ih)&#123; u_int ip_ver; //版本 u_int ip_len; //首部长度 u_short ip_tlen; //总长度 u_short ip_ident; //标识 u_short ip_flag_fo; //标志和片偏移 u_int ip_flag; //标志（3位，值为2还有分片且允许分片,1不能分片,0没有分片且允许分片） u_int ip_fo; //片偏移 u_short ip_type; //协议 u_short ip_crc; //首部检验和 u_long ip_op_pad; //可选项 /* retireve the position of the ip header *///检索IP首部的位置 ip_ver = (ih-&gt;ver_ihl &gt;&gt; 4); //版本 ip_len = (ih-&gt;ver_ihl &amp; 0xf) * 4; //首部长度，与运算，可以只取ip头部的版本长度字段的后4位 ip_tlen=ntohs(ih-&gt;tlen); //总长度 ip_ident=ntohs(ih-&gt;identification); //标识 ip_flag_fo = ntohs(ih-&gt;flags_fo); //2字节存放，会有字节序问题 ip_flag = (ip_flag_fo &gt;&gt; 13); //标志 ip_fo = (ip_flag_fo &amp; 0x1fff); //片偏移 ip_type = ih-&gt;proto; //上层协议类型 ip_crc = ntohs(ih-&gt;crc); //首部校验和 /*打印IP数据报首部*/ printf("版本：%d\t\t\t",ip_ver); printf("首部长度：%d\n",ip_len); printf("区分服务：%d\t\t", ih-&gt;tos); printf("总长度：%d\n", ip_tlen); printf("标识：%d\t\t", ip_ident); if (ip_flag == 2) printf("标志：DF=1（不能分片），MF=0（没有后续分片）\n"); if (ip_flag == 1) printf("标志：DF=0（允许分片），MF=1（还有后续分片）\n"); if (ip_flag == 0) printf("标志：DF=0（允许分片），MF=0（没有后续分片）\n"); printf("片偏移：%d\t\t",ip_fo*8);//片偏移以8字节为单位 printf("生存时间：%d\n",ih-&gt;ttl); printf("协议：%d\t\t\t",ih-&gt;proto); printf("首部校验和：%d\n",ip_crc); printf("IP地址： "); myPrintIPAddress(ih-&gt;saddr); printf(" -&gt; "); myPrintIPAddress(ih-&gt;daddr); printf("\n"); if (ip_len == 20)//IP首部长度&gt;20时才有 printf("首部长度为20，IP报文首部没有可选字段。\n"); else&#123; ip_op_pad = ntohl(ih-&gt;op_pad); printf("可选自段内容为：%u\n", ip_op_pad); &#125; all_ip_len = ip_len; return ip_type;&#125;void handleICMP(icmp_header *ich)&#123; u_short icmp_checksum; //校验和 u_short icmp_ident; //标识符 u_short icmp_seqnum; //序列号 icmp_checksum = ntohs(ich-&gt;checksum); //校验和 icmp_ident = ntohs(ich-&gt;identifier); //标识符 icmp_seqnum = ntohs(ich-&gt;sequence_number); printf("\n运输层协议： ICMP协议\n"); /*打印ICMP报文首部*/ if (ich-&gt;type == 0) printf("ICMP类型：回显应答\n"); else if (ich-&gt;type == 8) printf("ICMP类型：回显请求\n"); else printf("ICMP类型：其他\n"); printf("代码：%d\t\t",ich-&gt;code); printf("校验和：%d\n",icmp_checksum); printf("标识符：%d\t\t",icmp_ident); printf("序列号：%d\n",icmp_seqnum);&#125;u_int udp_len;bool handleUDP(udp_header *uh)&#123; u_short sport, dport;//端口 u_short uh_len; //长度 u_short uh_crc; //校验和 sport = ntohs( uh-&gt;sport );//源端口 dport = ntohs( uh-&gt;dport );//目的端口 uh_len = ntohs(uh-&gt;len); //长度 uh_crc = ntohs(uh-&gt;crc); //校验和 printf("\n运输层协议： UDP协议\n"); printf("端口号：%d -&gt; %d\n", sport, dport); printf("长度：%d\t\t", uh_len); printf("校验和：%d\n", uh_crc); udp_len = uh_len; if(sport == DNSPORT || dport == DNSPORT) return true; return false;&#125;void handleTCP(tcp_header *th)&#123; u_short tcp_sport; //源端口 u_short tcp_dport; //目的端口 u_long tcp_seqnum; //序号（4字节ntohl） u_long tcp_acknum; //确认号 u_short tcp_hlen_bl_flags; //数据偏移+保留+控制位 u_short tcp_hlen; u_short tcp_bl; u_short tcp_flags_urg; //紧急1有效 u_short tcp_flags_ack; //确认=1时，确认号有效 u_short tcp_flags_psh; //推送1有效，可以不用填满缓存就发报 u_short tcp_flags_rst; //复位1有效，重新建立连接 u_short tcp_flags_syn; //同步syn=1,ack=0时，表明这是一个连接请求报文；syn=1,ack=1,接受连接请求 u_short tcp_flags_fin; //释放连接=1时，表示数据报 u_short tcp_window_size; //窗口（发送方自己的接收窗口） u_short tcp_checksum; //检验和（首部+数据） u_short tcp_urg; //紧急指针 u_long tcp_option; tcp_sport=ntohs(th-&gt;sport); //源端口 tcp_dport=ntohs(th-&gt;dport); //目的端口 tcp_seqnum=ntohl(th-&gt;sequence_number); //序号（4字节ntohl） tcp_acknum=ntohl(th-&gt;acknowlegement_number);//确认号 tcp_hlen_bl_flags=ntohs(th-&gt;hlen_bl_flags); //数据偏移4+保留6+控制位6 tcp_hlen=(tcp_hlen_bl_flags &gt;&gt; 12)*4; //以4字节为单位 tcp_bl=(tcp_hlen_bl_flags &amp; 0x0fc0); //保留 tcp_flags_urg=(tcp_hlen_bl_flags &amp; 0x0020); //紧急1有效 ----- tcp_flags_ack=(tcp_hlen_bl_flags &amp; 0x0010); //确认=1时，确认号有效 tcp_flags_psh=(tcp_hlen_bl_flags &amp; 0x0008); //推送1有效，可以不用填满缓存就发报 tcp_flags_rst=(tcp_hlen_bl_flags &amp; 0x0004); //复位1有效，重新建立连接 tcp_flags_syn=(tcp_hlen_bl_flags &amp; 0x0002); //同步syn=1,ack=0时，表明这是一个连接请求报文；syn=1,ack=1,接受连接请求 tcp_flags_fin=(tcp_hlen_bl_flags &amp; 0x0001); //释放连接=1时，表示数据报 tcp_window_size=ntohs(th-&gt;window_size); //窗口（发送方自己的接收窗口） tcp_checksum=ntohs(th-&gt;checksum); //检验和（首部+数据） tcp_urg=ntohs(th-&gt;urg); printf("\n运输层协议： TCP协议\n"); /*打印TCP数据报首部*/ printf("端口号：%d -&gt; %d\n",tcp_sport,tcp_dport); printf("序号：%u\t",tcp_seqnum); printf("确认号：%u\n",tcp_acknum); printf("数据偏移：%d\t\t",tcp_hlen);//首部长度// printf("保留：%d\n",tcp_bl); /*控制字段,标志位*/ if (tcp_flags_urg == 1) printf("标志：URG\n"); if (tcp_flags_ack == 1) printf("标志：ACK\n"); if (tcp_flags_psh == 1) printf("标志：PSH\n"); if (tcp_flags_rst == 1) printf("标志：RST\n"); if (tcp_flags_syn == 1) printf("标志：SYN\n"); if (tcp_flags_fin == 1) printf("标志：FIN\n"); printf("窗口：%d\t\t",tcp_window_size); printf("检验和：%d\n",tcp_checksum); printf("紧急指针：%d\t\t",tcp_urg);//URG=1时才有用，窗口大小为0也能发送 if(tcp_hlen == 20)//数据偏移(TCP首部长度)&gt;20时才有 printf("首部长度为20字节，没有填充字段。\n"); else &#123; tcp_option = ntohl(th-&gt;option); printf("填充字段:%u\n", tcp_option); &#125;&#125;/* Callback function invoked by libpcap for every incoming packet */void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data) //param 无用&#123; eth_header *eth; u_short macType; myPrintBaseInfo(header); eth=(eth_header *) (pkt_data); //过滤以太网头部 pkt_data += 14; //HandleMac macType=handleMac(eth); myPrintNetType(macType); // 处理ARP 和 RARP if(macType==0x0806 || macType==0x8035) &#123; arp_header *ap; ap = (arp_header *)(pkt_data); handleARPAndRARP(ap); &#125; // 处理IP if(macType==0x0800) &#123; u_short ip_type; ip_header *ih; ih = (ip_header *) (pkt_data); ip_type = handleIP(ih); if (ip_type == 1) &#123; icmp_header *ich; ich = (icmp_header *)((u_char*)ih + all_ip_len); handleICMP(ich); &#125;else if(ip_type == 17)&#123; udp_header *uh; uh = (udp_header *) ((u_char*)ih + all_ip_len); if(handleUDP(uh)) &#123; /* struct dns_packet *pdns; pdns = (struct dns_packet *)(pkt_data + all_ip_len + udp_len); // sport+dport+length+checksum,DNS头指针 u_char *query=&amp;(pdns-&gt;dns_data);//定位到查询部分头部 printf("QueryDomain="); u_char domainname[100]=&#123;0&#125;; u_int i=0; //query++;//把点去了 while(*query) &#123; printf("%d", *query); if(*query &lt; 0x10)//48以后出现数字和英文字母 printf("."); else printf("%c", *query); query++; i++; &#125; printf("\n"); */ &#125; &#125;else if(ip_type == 6)&#123; tcp_header *th; th=(tcp_header *) ((u_char*)ih + all_ip_len); handleTCP(th); &#125; &#125;&#125;int main()&#123; pcap_if_t *alldevs; pcap_if_t *d; int inum; int i=0; pcap_t *adhandle; char errbuf[PCAP_ERRBUF_SIZE]; u_int netmask; char packet_filter[100]; int i; scanf("%d", &amp;i); printf("分析IP数据报输入：\t1\n"); printf("分析ARP数据报输入：\t2\n"); printf("分析TCP数据报输入：\t3\n"); printf("分析UDP数据报输入：\t4\n"); printf("分析ICMP数据报输入：\t5\n"); printf("分析MAC、IP、ARP、TCP、UDP、IMCP输入\t6\n"); if(i == 1) packet_filter = "ip"; else if(i == 2) packet_filter = "arp"; else if(i == 3) packet_filter = "ip and tcp"; else if(i == 4) packet_filter = "ip and udp"; else if(i == 5) packet_filter = "ip and icmp"; else if(i == 6) packet_filter = ""; else&#123; printf("InputError : check the number you input! exit(1)"); exit(1); &#125; struct bpf_program fcode; if(pcap_findalldevs(&amp;alldevs, errbuf) == -1) &#123; fprintf(stderr,"Error in pcap_findalldevs: %s\n", errbuf); exit(1); &#125; for(d=alldevs; d; d=d-&gt;next) &#123; printf("%d. %s", ++i, d-&gt;name); if (d-&gt;description) printf(" (%s)\n", d-&gt;description); else printf(" (No description available)\n"); &#125; if(i==0) &#123; printf("\nNo interfaces found! Make sure WinPcap is installed.\n"); return -1; &#125; printf("Enter the interface number (1-%d):",i); scanf("%d", &amp;inum); /* Check if the user specified a valid adapter */ if(inum &lt; 1 || inum &gt; i) &#123; printf("\nAdapter number out of range.\n"); pcap_freealldevs(alldevs); return -1; &#125; /* Jump to the selected adapter */ for(d=alldevs, i=0; i&lt; inum-1 ;d=d-&gt;next, i++); /* Open the adapter */ if ((adhandle= pcap_open_live(d-&gt;name, // name of the device 65536, // portion of the packet to capture. // 65536 grants that the whole packet will be captured on all the MACs. 1, // promiscuous mode (nonzero means promiscuous) 1000, // read timeout errbuf // error buffer )) == NULL) &#123; fprintf(stderr,"\nUnable to open the adapter. %s is not supported by WinPcap\n"); pcap_freealldevs(alldevs); return -1; &#125; /* Check the link layer. We support only Ethernet for simplicity. */ if(pcap_datalink(adhandle) != DLT_EN10MB) &#123; fprintf(stderr,"\nThis program works only on Ethernet networks.\n"); pcap_freealldevs(alldevs); return -1; &#125; if(d-&gt;addresses != NULL) /* Retrieve the mask of the first address of the interface */ netmask=((struct sockaddr_in *)(d-&gt;addresses-&gt;netmask))-&gt;sin_addr.S_un.S_addr; else /* If the interface is without addresses we suppose to be in a C class network */ netmask=0xffffff; //compile the filter if (pcap_compile(adhandle, &amp;fcode, packet_filter, 1, netmask) &lt;0 ) &#123; fprintf(stderr,"\nUnable to compile the packet filter. Check the syntax.\n"); pcap_freealldevs(alldevs); return -1; &#125; //set the filter if (pcap_setfilter(adhandle, &amp;fcode)&lt;0) &#123; fprintf(stderr,"\nError setting the filter.\n"); pcap_freealldevs(alldevs); return -1; &#125; printf("\nlistening on %s...\n", d-&gt;description); /* At this point, we don't need any more the device list. Free it */ pcap_freealldevs(alldevs); /* start the capture */ pcap_loop(adhandle, 0, packet_handler, NULL); return 0;&#125;分析听到网卡上Mac帧时的回调函数12void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data);输出基本信息：包括监听到帧的时间，帧的长度1void myPrintBaseInfo(const struct pcap_pkthdr *header);输出硬件地址，格式：xx:xx:xx:xx:xx:xx1void myPrintEthAddress(eth_address eth);输出IP地址，格式：xx.xx.xx.xx1void myPrintIPAddress(ip_address ia);输出网络层协议类型，格式：网络层协议：xxxx1void myPrintNetType(u_short type);分析Mac帧：1u_short handleMac(eth_header *eth);分析ARP和RARP帧1void handleARPAndRARP(arp_header *ah);分析IP数据报1u_short handleIP(ip_header *ih);分析ICMP数据报1void handleICMP(icmp_header *ich);分析UDP数据报1bool handleUDP(udp_header *uh);分析TCP数据报1void handleTCP(tcp_header *th);]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>winpcap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11-关系数据库理论]]></title>
    <url>%2F2019%2F11-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[关系 &amp; 关系模式关系模式相当于一张二维表的框架，在这个框架下填入数据，称为关系模式的一个实例，或者叫关系R。关系模式的形式化定义是：$R(U,D,DOM,F)$R：关系名U：组成该关系的属性名集合D：U中属性所来自的域域：一组具有相同数据类型的值的集合DOM：属性向域的映像集合F：属性间数据的依赖关系集合由于D和DOM域与关系模式的设计无关，因此在讨论关系数据库理论时可以把关系模式看做：$R(U,F)$关系的形式化定义：当且仅当$U$上的一个关系$r$满足$F$时，r称为关系模式$R(U,F)$上的一个关系。范式关系模式的设计直接影响着后续增删查改等的操作。如果设计的不合理就会发生各种各样的问题：数据冗余太大更新异常插入异常删除异常比如对于一个描述学校在校生信息数据库：$Student&lt;U,F&gt;$，$U=\lbrace Sno,Sdept,Mname,Cname,Grade\rbrace$会发生的问题：冗余问题：每个系的系主任姓名重复出现，重复次数与该系所有学生的所有课程成绩次数相同更新问题：如果某系的系主任更换后，该数据库该系中所有的元组都要更新插入异常：如果一个系刚成立，尚无学生，则无法把该系的系主任存入数据库删除异常：如果某个系的学生都毕业了，在删除该系学生的同时，该系系主任的信息也会被删除一个好的模式不能发生插入异常、删除异常和更新异常，数据冗余应该尽可能少。定义范式指的是规范化的关系模式，而规范也就是条件，满足不同的条件可以分别解除上述所说的不同问题。问题发生的原因之所以会发生上诉的问题其实就是由于数据依赖。而数据依赖可以分为两种：函数依赖和多值依赖。但这两种依赖关系不是平级，而是递进的关系，所以我们先介绍函数依赖。函数依赖设$R(U)$是一个属性集$U$上的关系模式，$X$和$Y$是$U$的子集。若对于$R(U)$的任意两个可能的关系$r_1$、$r_2$，若$r_1[x]=r_2[x]$，则$r_1[y]=r_2[y]$，则称$X$决定$Y$，或者$Y$依赖$X$。记作$X \rightarrow Y$。对于$X$、$Y$范围的不同，可以再次分为：非平凡函数依赖：如果$X \rightarrow Y$但$Y \nsubseteq X$，则称$X \rightarrow Y$是非平凡函数依赖平凡函数依赖：如果$X \rightarrow Y$但$Y \subseteq X$，则称$X \rightarrow Y$是非平凡函数依赖。例：$(Sno,Sname) \rightarrow Sname$所以，在关系模式中，平凡函数依赖是一定是可以被满足的，所以我们在以后的讨论中不再关注平凡函数依赖，只关注非平凡函数依赖。而我们对于非平凡函数依赖又可以分为以下几类：完全函数依赖：如果$X \rightarrow Y$，并且对于任意的真子集$X_i$，都无法做到$X_i \rightarrow Y$，则称$Y$对$X$是完全函数依赖。部分函数依赖：如果$X \rightarrow Y$，存在真子集$X_i$，可以做到$X_i \rightarrow Y$，则称$Y$对$X$是部分函数依赖。传递函数依赖：如果$X \rightarrow Y$，$Y \rightarrow Z$且$Y \nrightarrow X$，则称$X$对$X$有传递函数依赖。第一范式在关系模型中的每一个具体关系$R$中，如果每个属性都是不可再分的，则称$R$属于第一范式，记作$R \in 1NF$。第二范式$R \in 1NF$且每一个非主属性完全函数依赖于码，则$R \in 2NF$。依赖有直接依赖和传递依赖。第三范式$R \in 2NF$且$R$中的每个非主属性不传递依赖于主码，则关系$R$是第三范式，$R \in 3NF$。模式分解从低级范式到高级范式的方法是模式分解。举例：对于一个关系$R(SNO,SNA,CNO,GRADE,CNA,TNA,TAGE)$（学号、姓名、课号、成绩、课程名称、教师姓名、教师年龄）。现实语义：如果假设一个教师可以交多门课且一门课仅由一个教师讲授，可得R的函数依赖集：$SNO \rightarrow SNM$$(SNO,CNO) \rightarrow GRADE$$CNO \rightarrow CNA$$CNO \rightarrow TNA$$TNA \rightarrow TAGE$函数依赖图如下：分解为第二范式：- $R1&lt;(SNO,SNA),SNO \rightarrow SNA&gt;$- $R2&lt;(SNO,CNO,GRADE), (SNO,CNO) \rightarrow GRADE&gt;$- $R3&lt;(CNO,CNA,TNA,TAGE),CNO \rightarrow CNA, CNO \rightarrow TNA, TNA \rightarrow TAGE&gt;$分解为第三范式：- $R1&lt;(SNO,SNA),SNO \rightarrow SNA&gt;$- $R2&lt;(SNO,CNO,GRADE), (SNO,CNO) \rightarrow GRADE&gt;$- $R3&lt;(CNO,CNA,TNA),CNO \rightarrow CNA, CNO \rightarrow TNA&gt;$- $R3&lt;(CNO,TAGE),CNO \rightarrow TAGE&gt;$### 第三范式的问题仓库保管$WPE(W#,P#,E#,QNT)$，（ 仓库号，器件号，职工号，数量）。一个职工只能管理一个仓库的某类型器件，一个仓库的某类型器件数量是确定的，一个员工管理的某类型器件数量是一定的。函数依赖：1. $(W#, P#) \rightarrow QNT$2. $(E#,P#) \rightarrow QNT$3. $(W#,P#) \rightarrow E#$4. $E# \rightarrow W#$函数依赖图：此时关系模式$WPE$有两个侯选码，$(W#,P#)$ ，$(E#,P#)$，假设确定$(E#,P#)$为主码，那么某新职工分配来仓库，处于学习阶段，但没有独立承但任务，即有$E#$但无$P#$，缺少码的组成部分，无法插入到该关系，即插入异常。这是由于主属性$W#$对另一个侯选码$(E#,P#)$的部分函数依赖。### BC范式BC范式的定义：每个决定因素都包含码，则$R \in BCNF$。而既然每个决定因素都要包含码，则此时意味着必须放弃某些函数依赖，即失去某些现实语义。如例子中若选择$(E#,P#)$，则只能保存函数依赖中的2和4。### 多值依赖设$R(U)$是属性集U上的一个关系模式。$X$，$Y$，$Z$是的$U$的子集，并且$Z=U-X-Y$。关系模式$R(U)$中多值依赖（记做，$X \rightarrow \rightarrow Y$）成立，当且仅当对$R(U)$的任一关系$r$，给定的一对$(x,z)$值有一组$Y$的值，这组值仅仅决定于$x$值而与$z$值无关。若$X \rightarrow \rightarrow Y$，$Z$为空，则称$X \rightarrow \rightarrow Y$为平凡的多值依赖。 所以我们以下只讨论非平凡的函数依赖。#### 例比如对于关系模型$Teaching(C,T,B)$便是存在多值依赖（码为全属性）：第四范式如果对于$R$的每个非平凡多值依赖$X \rightarrow \rightarrow Y$，$X$都含有码，则$R$都含有码。多值依赖的解决依然是分解。如上例中分解为：$R(C,T)$$R(C,B)$]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CPP中的字节序]]></title>
    <url>%2F2019%2FCPP%E4%B8%AD%E7%9A%84%E5%AD%97%E8%8A%82%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[字节序计算机硬件有两种储存数据的方式：大端字节序（big endian）和小端字节序（little endian）。大端字节序：高位字节在前，低位字节在后。小端字节序：低位字节在前，高位字节在后。假如我们要存储0x01234567，大端法和小端法如下：为什么会有小端字节序人类能接受的字节序肯定是大端存储，所以很多人会不理解为什么还要有小端字节序呢？其实计算机处理字节序的时候，不知道什么是高位字节，什么是低位字节。它只知道按顺序读取字节，先读第一个字节，再读第二个字节。如果是大端字节序，先读到的就是高位字节，后读到的就是低位字节。小端字节序正好相反。个人觉得之所以会存在小端字节序是由于计算机电路在计算时先处理低位字节，存储单元里的数据按小端字节序存储方便计算。字节序的处理其实只有读取的时候，才必须区分字节序，其他情况都不用考虑。数据长度大于1字节（8bits）时才需要区分字节序。虽然在计算机中存储和具体的平台相关，但是规定在网络中传输的数据采用大端传输，即如果有一串网络流为：010101000100110101010，实际发送时越左边的越先发送到网络中。C语言中处理字节序1234567891011// 参数为16位主机字节序的值，返回值是16位网络字节序的值uing16_t htons(uint16_t host16bitvalue);// 参数为32位主机字节序的值，返回值是32位网络字节序的值uint32_t htonl(uint32_t host32bitvalue);// 参数为16位网络字节序的值，返回值是16位主机字节序的值uint16_t ntohs(uint16_t net16bitvalue);// 参数为16位网络字节序的值，返回值是16位主机字节序的值uint32_t ntohl(uint32_t net32bitvalue);]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>字节序</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10-索引]]></title>
    <url>%2F2019%2F10-%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[索引基础使用索引是因为索引是查询性能优化最有效的手段。Mysql中的索引分为两种：B+树和Hash表，但是我们在这里只介绍基于B+树的索引。INNODB引擎也只支持B+树索引。Mysql的索引是在存储引擎级别设置的。索引匹配原则假如有如下表：1234567CREATE TABLE People( last_name varchar(50) not null, first_name varchar(50) not null, dob date not null, gender enum('m', 'f') not null, key(last_name, first_name, dob));对应的B+树如下：建立的索引对如下类型的查询有效：### 全值匹配和索引中定义的所有列进行匹配，如查找姓名为Cuba Allen，出生于1996-01-01的人。### 匹配最左前缀前面提到的索引可用于查找所有姓为Allen的人，即只使用索引的第一列。### 匹配列前缀也可以只匹配某一列的值的开头部分，例如前面提到的索引可用于查找所有以J开头的姓的人。这里使用了索引的第一列。### 匹配范围值例如前面提到的索引可用于查找姓在Allen和Barrymore之间的人。这里也只用了索引的第一列。### 精确匹配某一列并范围匹配另外一列前面提到的索引也可用于查找所有姓为Allen，并且名字是K开头的人。## 索引分类和创建### 分类#### 普通索引MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。#### 唯一索引索引列中的值必须是唯一的，但是允许为空值，#### 主键索引是一种特殊的唯一索引，不允许有空值。后面会有介绍，在INNODB中，主键索引是聚簇索引。### 创建#### 建表时创建123456CREATE TABLE table_name ( [col_name data_type], ..., [UNIQUE] [INDEX | KEY] [index_name] (col_name[length], ...) [ASC | DESC]);#### 后期添加12ALTER TABLE table_name ADD [UNIQUE] [INDEX | KEY] [index_name](col_name[length], ...) [ASC | DESC]12CREATE [UNIQUE] [INDEX | KEY] index_name ON table_name(col_name[length], ...) [ASC | DESC]INDEX和KEY具有相同的效果。length是指该列在B+树中的关键字所占的长度。## 聚簇索引和非聚簇索引### 聚簇索引聚簇的意思是键值和数据行紧凑地存储在一起，因为无法把数据行放在两个不同的地方，所以一个表只有一个聚簇索引。而主键会被默认添加上聚簇索引，如果没有主键，INNODB会选择一个非空索引来替代，如果没有这样的索引，INNODB会隐式定义一个主键来作为聚簇索引。### 非聚簇索引非聚簇索引的叶子节点仍然是索引节点，只不过有指向对应数据块的指针。又被称为二级索引。INNODB的二级索引其叶子结点上保存的是KEY+PRIMARY COL。### INNODB索引注意：INNODB中主键索引就是聚簇索引。### MyISAM索引]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[B树]]></title>
    <url>%2F2019%2FB%E6%A0%91%2F</url>
    <content type="text"><![CDATA[磁盘访问时间磁盘构造当磁盘驱动器执行读/写功能时。盘片装在一个主轴上，并绕主轴高速旋转，当磁道在读/写头（又叫磁头）下通过，就可以进行数据的读/写了。一般磁盘分为固定头盘（磁头固定）和活动头盘。固定头盘的每一个磁道上都有独立的磁头，它是固定不动的，专门负责这一磁道上数据的读/写。活动头盘 （如上图）的磁头是可移动的。每一个盘面上只有一个磁头（磁头是双向的，因此正反盘面都能读写）。它可以从该面的一个磁道移动到另一个磁道。所有磁头都装在同一个动臂上，因此不同盘面上的所有磁头都是同时移动的（行动整齐划一）。当盘片绕主轴旋转的时候，磁头与旋转的盘片形成一个圆柱体。各个盘面上半径相同的磁道组成了一个圆柱面，我们称为柱面 。因此，柱面的个数也就是盘面上的磁道数。### 访问时间典型的磁盘访问时间包括以下三个部分：1. 寻道时间$T_s$：$T_s = s$2. 旋转延迟时间$T_τ$：$T_t = \frac{1}{2r}$3. 磁盘访问时间 ：$T_t=\frac{b}{rN}$$s$是指磁头从当前位置定位到开始点的时间，$b$是传输的字节数，$r$是每秒的转数，$N$是一条磁道上的字节数。$总时间 = T_s + \frac{1}{2r} + \frac{b}{rN}$这其中，时间开销最大的是$s$，台式机的旋转速度一般是7200转/分钟（RPM），即旋转一周需要8.33ms，所以式子中的$s$平均为4.165ms，而且磁臂的移动也需要时间，通常磁盘的平均存储时间是$8-11ms$。而硅存储的常见存取时间是50ns，即$s$约为一次存取时间200000倍。通常一页的长度为$2^{11}-2^{14}$，即使磁盘一般是一次读取连续的几个页面，定位到信息的时间也比存取信息的时间多。所以当大量数据存储在外存磁盘中时，需要一种合理高效的数据结构来降低访问外存的时间：B树。需要说一下，B树的英文名是B-tree，所以有时候有人会把B树叫做B-树，这两个名词是同一个意思。B树的典型执行过程中，B树算法的运行时间取决于DISK-READ和DISK-WRITE。1234x = a pointer to some objectDISK-READ(x)operations of xDISK-WRITE(x)通常一个B树的结点和磁盘的一页一样大，这样一次读写操作能获取更多的信息。而每页能存储多少个数据和关键字大小有关。下图中的B树每个结点有1000个数据（B树中结点的度数为结点数据个数+1，见后面的定义），高度为2。所以它可以存储超过十亿个关键字，查找某个关键字至多进行两次磁盘访问。B树的定义B树的定义每个结点有如下属性：$x.n$：表示当前存储在结点$x$中的关键字个数。每个结点中的关键字以非降序方式存放：$x.key_1 \leq x.key_2 \leq \cdots \leq x.key_n$。$x.leaf$：一个布尔值，如果$x$是叶结点，则为$true$，否则为$false$。每个内部结点还包含包含$x.n+1$个指向其孩子的指针：$x.c_1, x.c_2, \cdots , x.c_n $，叶结点的$c_i$属性没有定义。关键字$x.key_i$对存储在各子树中的关键字范围加以分割：如果$k_i$为任意一个存储在以$x.c_i$为根的子树中的关键字，满足：$k_i \leq x.key_1 \leq k_2 \leq x.key_2 \leq \cdots \leq x.key_{x.n} \leq k_{x.n+1}$。每个叶结点具有相同的深度，即树的高度h。每个结点关键字所包含的关键字个数有上界和下界。用一个被称为B树的最小度数的固定整数$t$来表示这些界，$t \geq 2$。除了根结点外的每个结点都至少有$t-1$个关键字，因此，除了根结点以外的每个内部结点至少有$t$个孩子。如果树非空，根结点至少有一个关键字。每个结点至多可包含$2t-1$个关键字，因此一个内部结点至多可有$2t$个孩子，当一个结点恰好有$2t-1$个关键字时，该结点是满的。$t=2$的树是最简单的，每个内部结点有2个、3个或4个孩子。那么为什么最小度数不能取1呢？因为最小度数取1之后，内部结点（设指向其的指针为p）可以包含0个关键字，此时包含0个关键字的结点只有一个孩子（设为c），这个结点就被浪费了，我们其实可以直接让p指向c。B树的高度对任意一棵包含n（$n \geq 1$）个关键字、最小度数为t的B树来说，有：$h \leq log_t{\frac{n+1}{2}}$。证明：假设根所在的层高度为0，则高度为h的B树在高度为1的层至少包含2个结点，在高度为2的层至少包含$2t$个结点，在高度为3的层至少包含$2t^2$个结点…直到高度为h的层至少包含$2t^{h-1}$个结点。可得关于关键字个数n的关键字：$n \geq 1+(t-1)\sum_{i=1}^h2t^i-1 = 1+2(t-1)(\frac{t^h-1}{t-1})=2t^h-1$$\Longrightarrow t^h \leq (n+1)/2$$\Longrightarrow h \leq log_t{\frac{n+1}{2}}$B树的阶我们经常会遇到一个B数的术语：阶，假如树中的结点最多含有m个孩子，此B树的阶为m。当阶为偶数的时候，我们可以把定义中的$t$替换成$m/2$，但是当阶为奇数的时候就要考虑一个问题了，除根结点外的每个内部结点至少含有ceil(m/2)个结点还是floor(m/2)个结点？应该是ceil(m/2)，因为除了根结点每个结点的孩子个数满足：$t \leq keyNum \leq 2t$，如果取floor(m/2)会发现无法满足上式，所以一棵含有n个总关键字数的m阶的B树的最大高度是：$log_{ceil(m/2)}(n+1)/2$。B树的操作以下的操作都遵循两个规定：B树的根结点始终在主存中，这样就不用对根做DISK-READ操作。然而，当根结点被改变后需要对根结点做一次DISK-WRITE操作。任何被当做参数的结点在被传递之前，都要对它们先做一次DISK-READ操作。搜索设$x$是根结点，被搜索的关键字是$k$。需要说明一下，伪代码中$key$和$c$的起始下标都为1。NIL代表空。### 插入插入的时候会遇到两种情况：1. 将新的关键字插在一个已经存在但未满的结点上：直接插入；2. 将新的关键字插在一个已经存在但已满的结点上：分裂后插入；#### 分裂将一个满的结点$y$（有$2t-1$个关键字）按照中间关键字分裂成两个各含有$t-1$个关键字的结点，中间关键字被升到$y$的父结点。如果$y$的父结点也是满的，也需要分裂，最终满结点的分裂会向上传播。如果向上传播时全程都是满结点会把根结点分裂，使B树的高度增1。分裂是使B树增高的唯一办法。但是在实际操作中不是等到找出插入过程中实际要分裂的结点才做分裂，而是在沿着树向下查找时分裂所有遇到的满结点，这样就能保证在插入的时候节点一定非满。$x$是被分裂的结点的父节点，$y$是$x$的第$i$个孩子。#### 非满结点插入$x$是被插入的节点，$k$是插入的键。解释几行代码：- 12行：被操作的节点从磁盘中读入到内存中，然后在内存中进行操作。- 7行+17行：每次插入的都是叶节点。#### 完整插入过程此时对根的分裂需要创建两个节点，而且对根的分裂是B树长高的唯一办法。而且在分裂之后我们会发现根节点必然会有一个关键字，这也对应了定义中的B树的根至少有两个孩子。### 创建分配空节点：分配之后循环调用插入即可。### 删除在删除时需要注意两个部分：1. 除根节点外，被删除关键字的节点在删除后仍然要满足$keyNum \geq t-1$。2. 删除后需要重新安排这个结点的孩子。#### 操作1. 如果关键字$k$在结点$x$中，并且$x$是叶节点，从$x$中删除$k$2. 如果关键字$k$在结点$x$中，但$x$是内部非根节点：上移孩子结点中的某相近元素（“左孩子最右边的节点”或“右孩子最左边的节点”）到父节点中，并且递归被上移的孩子。删除元素，移动相应元素之后，如果某结点中元素数目（即关键字数）小于$ceil(m/2)-1$，则需要看其某相邻兄弟结点是否贫困（结点中元素个数等于$ceil(m/2)-1$）如果非贫困，则父节点下降一个元素来此节点，兄弟结点上升一个元素。如果其相邻兄弟都贫困，则该结点与其相邻的某一兄弟结点进行“合并“成一个结点。#### 举例- 刪除H：直接删除- 删除T：W上升到T的位置，4上升到W的位置- 删除R：删除导致只有1个元素，已经小于最小元素数目$ceil(5/2)-1=2$，由于右相邻兄弟结点不贫困，所以先向父节点借一个元素T下移到该叶子结点中，代替原来S的位置，S前移；然后W上移到父结点中，X、Y、Z依次前移。- 删除E：因为E所在的结点和相邻的兄弟结点的关键字都刚好达标，删除后不能再向父节点借元素，所以需要该节点与某相邻兄弟结点进行合并操作；首先移动父结点中的元素（该元素在两个需要合并的两个结点元素之间）下移到其子结点中，然后将这两个结点进行合并成一个结点。所以在该实例中，咱们首先将父节点中的元素D下移到已经删除E而只有F的结点中，然后将含有D和F的结点与含有A和C的相邻兄弟结点进行合并成一个结点。但是此时还没有结束，此时的情况如下图第一幅，此时父节点只包含一个元素G，没达标。如果这个问题结点的相邻兄弟比较丰满，则可以向父结点借一个元素。假设这时右兄弟结点（含有Q,X）含有的元素个数大于2，咱们可以将M下移到元素很少的子结点中，将Q上移到M的位置，但此时咱们没有办法去借一个元素，只能与兄弟结点进行合并成一个结点，而根结点中的唯一元素M下移到子结点，即树的高度减少一层。B+树在B树中，我们做操作的时候都默认了关键字和其对应的数据都存在一个页面中，但是实际上可以只存储关键字，而且仅存关键字可以让每页能存储更多的数据。基于此点和为了更好的在文件系统中存取数据，诞生了B+树。定义B+树可以被视为每个节点仅包含键（不是键值对），并且链接了各叶节点叶的B树。和B树的区别如下：所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接。 （而B树的叶子节点并没有包括全部需要查找的信息）。所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 （而B树的非终节点也包含需要查找的有效信息）### 为什么数据库使用B+树作为索引- B+树的磁盘读写代价更低。B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。- B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。而B+树只要遍历叶子节点就可以实现整棵树的遍历。- B+树对range-query的支持很强大。比如要查5-10之间的，B+树一把到5这个标记，再一把到10，然后串起来就行了，B树就非常麻烦。### 分裂B+树的分裂和B树没有太大区别，只是分裂后注意叶子结点需要有链接到下个结点的指针。## B*树### 定义B*树是B+树的变体，在B+树的基础上（所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针）:- B*树中非根和非叶子结点再增加指向兄弟的指针；- B*树定义了非叶子结点关键字个数至少为$ceil((2/3) \ast m)$，即块的最低使用率为2/3（代替B+树的1/2）。分裂当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针。总结B树及其变形可以非常好的处理一维空间存储的问题。它的思想就是把一维直线分为若干段线段，当我们查找满足某个要求的点的时候，只要去查找它所属的线段即可。也可以说要查找某一满足条件的点，先去找到满足条件的线段，然后遍历所在线段上的点，即可找到答案。对比B树：有序数组+平衡多叉树；B+树：有序数组链表+平衡多叉树；B*树：一棵丰满的B+树。参考https://blog.csdn.net/v_JULY_v/article/details/6530142https://en.wikipedia.org/wiki/B%2B_tree#Overviewhttps://en.wikipedia.org/wiki/B-tree算法导论]]></content>
      <categories>
        <category>DSA</category>
      </categories>
      <tags>
        <tag>DSA</tag>
        <tag>树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[09-Mysql结构和存储引擎]]></title>
    <url>%2F2019%2F09-Mysql%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%2F</url>
    <content type="text"><![CDATA[MySQL体系结构Mysql大致可以被分为四层：第一层Connectors指的是不同语言中与SQL的交互第二层Management Serveices &amp; Utilities：系统管理和控制工具，例如备份恢复、Mysql复制、集群等Connection Pool: 连接池，管理缓冲用户连接、用户名、密码、权限校验、线程处理等需要缓存的需求SQL Interface: SQL接口，接受用户的SQL命令，并且返回用户需要查询的结果。比如select * from就是调用SQL Interface。Parser: 解析器，SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本， 主要功能：将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的Optimizer：查询优化器，SQL语句在查询之前会使用查询优化器对查询进行优化。他使用的是“选取-投影-联接”策略进行查询。 用一个例子就可以理解：select uid,name from user where gender = 1;先根据where语句进行选取，而不是先将表全部查询出来以后再进行gender过滤再根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤再将这两个查询条件联接起来生成最终查询结果Cache和Buffer（高速缓存区）：查询缓存，如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。 通过LRU算法将数据的冷端溢出，未来得及时刷新到磁盘的数据页，叫脏页。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等。第三级Engine：存储引擎。存储引擎是MySql中具体的与文件打交道的子系统。现在有很多种存储引擎，各个存储引擎的优势各不一样，最常用的MyISAM，InnoDB，BDB。默认下MySql是使用InnoDB引擎。第四级外存中真正存储数据的物理空间。存储引擎Mysql中真正和外存打交道的是存储引擎。一般有两种最常见的引擎：INNODB是缓存层，由一个大的innodb buffer pool和很多个其他小的内存组件组成，用来缓冲数据的，innodb的数据读取写入不是直接操作文件，而是从文件加载到缓存，在缓冲里做操作，再flush到磁盘文件。所以INNODE可以支持事务。是各种后台线程，例如IO线程、日志线程、监控线程等；是各种数据文件层，例如INNODB的数据文件、redo log等；MYISAMMYISAM存储引擎的数据组织形式是一种堆表，和索引组织表相区别（INNODB的数据组织形式是索引组织表）。 例如插入一条数据id=2（d为主键，表里已经存在id=1和id=3数据）。MYISAM存储引擎：如果插入id=2，数据的插入位置和id=1 id=3无关系，也就是无序的； 堆表的插入特性是无序的。INNODB存储引擎：如果插入id=2，会插入到id=1和id=3之间，因为INNODB是索引组织表是有有序的；索引组织表的最大特点是根据主键去查询效率非常快。MYISAM存储引擎不支持事务；INNODB存储引擎的缓存不缓存数据，只缓存索引。数据缓存是交给操作系统的内存来缓存的。这种会有问题：如果查询一个大表，会消耗大量操作系统内存，如果表中碎片很大可能会浪费大量操作系统内存。锁粒度较大：使用的是读写锁（读的时候不允许写，写的时候不允许读，只有读的时候允许读）参考：https://www.cnblogs.com/zhoubaojian/articles/7866231.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08-Mysql的锁]]></title>
    <url>%2F2019%2F08-Mysql%E7%9A%84%E9%94%81%2F</url>
    <content type="text"><![CDATA[数据库的锁按照不同的分类可以分成很多类，常见的分类如下：悲观锁 &amp; 乐观锁悲观锁悲观锁就是在操作数据时，总是认为操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行对相同数据的操作，这点跟java中的synchronized很相似，所以悲观锁需要耗费较多的时间。悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。不用考虑悲观锁，它对于应用程序员是透明的。说到这里，由悲观锁涉及到的另外两个锁概念就出来了，它们就是共享锁与排它锁。共享锁和排它锁是悲观锁的不同的实现，它俩都属于悲观锁的范畴。参考：https://isjinhao.github.io/2019/06-%E4%BA%8B%E5%8A%A1/#more乐观锁首先先说一下，乐观锁不是锁，只是人们都习惯这样叫。对于乐观锁来说在操作数据时，总是认为操作不会出现数据冲突，所以不会上锁。那么如何控制并发问题呢？这其实是在应用程序级完成的功能，一般来说可以用数据版本（Version）记录机制实现。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的version字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加1。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。例数据库表设计，三个字段，分别是id，value，version。每次更新表中的value字段时，为了防止发生冲突，需要这样两步操作：1select id,value,version from TABLE where id=#&#123;id&#125;123update TABLEset value=2,version=version+1where id=#&#123;id&#125; and version=#&#123;version&#125;;按加锁的粒度分表级锁是Mysql中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分ySQL引擎支持。最常使用的MYISAM与INNODB都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。特点是开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。行级锁行级锁是Mysql中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。分为共享锁和排他锁。特点是开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。页级锁表级锁是Mysql中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁。特点是开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。存储引擎参考：https://isjinhao.github.io/2019/09-Mysql%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/#more]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么硬链接不能作用于目录]]></title>
    <url>%2F2019%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8D%E8%83%BD%E4%BD%9C%E7%94%A8%E4%BA%8E%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[笔者最初遇见这个问题的时候是因为知道了在Linux系统中，目录其实也是一种文件，只不过是一种比较特殊的文件，既然都是文件，那为什么不能对它做硬链接呢？想弄明白这个，就需要知道两个知识，目录和文件共享。因为链接的目的就是要实现文件共享。通常可以定义为文件控制块（FCB）的有序集合。但是并不是说目录中的每一个目录项都是一个FCB，只能是每一个目录项都能唯一确定一个FCB。这是由于如果每个目录项都是FCB会引起文件共享问题。比如下图：对于文件F8，D5:p、D6:e、D3:p都保存了F8的物理地址，即从某个盘块开始，总长度多少等。此时如果D6:e对F8进行了删除操作，D5:p和D3:P都无法察觉，仍然会认为在它们存储的位置上有文件，即一个目录项对文件的操作对其他目录项来说是不可见的。为了解决这个问题，引入索引节点。将文件的物理地址和其他的属性放在索引结点中，只在目录项中存放文件名和指向索引结点的指针。任何用户对文件进行操作，引起相应索引结点内容的改变。此种方法即Linux中的硬链接。所以如果我们对文件做硬链接，比如对Test r做硬链接生成thirdHardLink，那么就是thirdHardLink的指针指向索引节点，索引节点的count修改为3。Linux限制了对目录做硬链接，那么假如我们是设计者，想对一个目录做硬链接可以怎么做呢？第一种方法是把对目录生成的硬链接单独作为一种文件类型，如果我们想使用目录中的某个文件时，操作系统的处理步骤是HardLinkDir-&gt;Dir-&gt;指向索引节点的指针指针-&gt;索引节点。可以看出此种方法的代价很大。第二种方法是把目录的每个目录项拷贝一份，但这样不就是拷贝cp了吗，没有必要再实现对目录的硬链接了。第三种方法是把每个目录项的文件名拷贝一份，HardLink的指针指向原目录项的指针位置。但是这种方法也需要把对目录生成的硬链接单独作为一种文件类型，代价很大。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[07-Mysql高级操作]]></title>
    <url>%2F2019%2F07-Mysql%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[数据这个是本人数据库课程设计中的表结构，数据库课程设计写的是学院成绩管理系统，就是可以通过excel把学生的绩点、竞赛情况、大创项目情况导入到系统中，然后学生、班长、辅导员三个级别的用户可以从三个层次看到成绩。表结构：studentinfos：学号、密码、姓名、专业、班级、绩点、级别（学生是第一级）courses：课号、姓名、类型（必修课、公共选修课、专业选修课等）、重要系数（理学院套餐、专业核心课程一般是1.2，选修课等一般是1.0）、学分、年度。scores：唯一标识（没吊用…）、学号、课号、成绩、年度、学期classdamins：班号、密码、班级名称、级别（班长是第二级别）candp：唯一标识、项目或比赛的名称、年度、级别、是否是负责人、学号、状态视图语法1234CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]VIEW view_name [(column_list)]AS SELECT_statement[WITH [CASCADED | LOCAL] CHECK OPTION]把每个班学生的绩点、学分、通过率创建一个视图：classstudentscores12345678910111213141516171819CREATE OR REPLACE VIEW classstudentscores ASSELECT `scores`.`stu_id` AS `id`, `studentinfos`.`name` AS `name`, `studentinfos`.`pwd` AS `pwd`, `studentinfos`.`cclass` AS `cclass`, `studentinfos`.`gpa` AS `gpa`, sum(`courses`.`credit`) AS `allcre`, `getStudentPassRate` (`scores`.`stu_id`) AS `passrate`FROM `studentinfos`, `scores`, `courses`WHERE `studentinfos`.`id` = `scores`.`stu_id` AND `scores`.`cou_id` = `courses`.`id` AND `scores`.`score` &gt; 59GROUP BY `scores`.`stu_id`更新视图视图是可以更新的，对视图的更新最终会反应到基本表上，但是并非所有的视图都是可更新的。如果视图包含下述结构中的任何一种，那么它就是不可更新的：聚合函数（SUM(), MIN(), MAX(), COUNT()等）。DISTINCTGROUP BYHAVINGUNION或UNION ALL位于选择列表中的子查询JoinFROM子句中的不可更新视图WHERE子句中的子查询，引用FROM子句中的表。ALGORITHM = TEMPTABLE（使用临时表总会使视图成为不可更新的）。WITH CHECK OPTIONLOCAL参数表示更新视图时只要满足该视图本身定义的条件即可。CASCADED参数表示更新视图时需要满足所有相关视图和表的条件。没有指明时，该参数为默认值。总结使用with check option之后，通过视图进行的修改，必须也能通过该视图看到修改后的结果。总结如下：视图只操作它可以查询出来的数据，对于它查询不出的数据，即使基表有，也不可以通过视图来操作。对于update，有with check option，要保证update后，数据要被视图查询出来对于delete，有无with check option都一样对于insert，有with check option，要保证insert后，数据要被视图查询出来对于没有where子句的视图，使用with check option是多余的视图创建算法MERGE算法：MySQL首先将输入查询与定义视图的SELECT语句组合成单个查询。 然后MySQL执行组合查询返回结果集。 如果SELECT语句包含集合函数、DISTINCT、GROUP BY、HAVING、LIMIT、UNION、UNION ALL、子查询，则不允许使用MERGE算法。如果SELECT语句无引用表，则也不允许使用MERGE算法。 如果不允许MERGE算法，MySQL将算法更改为UNDEFINED。使用TEMPTABLE算法，MySQL首先根据定义视图的SELECT语句创建一个临时表，然后针对该临时表执行输入查询。因为MySQL必须创建临时表来存储结果集并将数据从基表移动到临时表，所以TEMPTABLE算法的效率比MERGE算法效率低。 另外，使用TEMPTABLE算法的视图是不可更新的。原文链接：https://www.yiibai.com/mysql/create-sql-views-mysql.html存储过程教程链接：https://www.yiibai.com/mysql/stored-procedure.html一定要注意，Mysql的游标只能用于存储过程和函数。例：获得班级的平均绩点123456789101112131415161718192021222324drop procedure IF EXISTS getClassGpa;create procedure getClassGpa(IN `classID` varchar(20), OUT `avgpa` double)BEGIN DECLARE cgpa DOUBLE; DECLARE sum DOUBLE DEFAULT 0.0; DECLARE done int DEFAULT 0; DECLARE num int; DECLARE cur cursor for select gpa from studentinfos where cclass = classID; DECLARE CONTINUE HANDLER for not found set done = TRUE; set sum=0.0; set num=0; open cur; read_loop:LOOP FETCH CUR INTO cgpa; if done then leave read_loop; end if; set sum = sum + cgpa; set num = num+1; end loop; close cur; set avgpa = sum/num; SELECT sum,avgpa;END函数本质上和存储过程没区别。只是函数只能返回一个变量的限制。而存储过程可以返回多个。而且函数是可以嵌入在sql中使用，可以在select中调用，而存储过程不行。通常如果返回值只有一个使用函数，其他情况使用存储过程。12345678910111213141516171819DROP FUNCTION IF EXISTS `getClassNotPassRate`;CREATE FUNCTION `getClassNotPassRate` (`classID` VARCHAR(20)) RETURNS DOUBLEBEGIN DECLARE sum DOUBLE; DECLARE notPassSum DOUBLE; SELECT COUNT(*) INTO sum FROM scores, studentinfos WHERE scores.stu_id = studentinfos.id AND studentinfos.cclass = classID; SELECT COUNT(*) INTO notPassSum FROM scores, studentinfos WHERE scores.stu_id = studentinfos.id AND studentinfos.cclass = classID AND scores.score &lt; 60; IF (sum = 0) THEN RETURN 0; END IF; RETURN notPassSum / sum;END触发器教程：https://www.yiibai.com/mysql/triggers.html例：在录入学生成绩时，触发器根据新录入的学生成绩的系统中已有的学生选课成绩计算出录入之后的学生GPA。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859DROP TRIGGER IF EXISTS `changeGpa`;CREATE TRIGGER `changeGpa` AFTER INSERT ON `scores` FOR EACH ROWBEGIN DECLARE myavg DOUBLE; DECLARE allcre DOUBLE; DECLARE temp DOUBLE; DECLARE sum DOUBLE DEFAULT 0.0; DECLARE t INTEGER; DECLARE t1 DOUBLE; DECLARE t2 DOUBLE; DECLARE done INT DEFAULT FALSE; DECLARE cur cursor for SELECT scores.score, courses.coefficient, courses.credit from studentinfos, scores, courses where studentinfos.id = scores.stu_id and scores.cou_id = courses.id and stu_id = new.stu_id; DECLARE CONTINUE HANDLER for not found set done = TRUE; SELECT SUM(courses.credit) into allcre from studentinfos, scores, courses where studentinfos.id = scores.stu_id and scores.cou_id = courses.id and stu_id = new.stu_id and score&gt;=60; open cur; read_loop:loop FETCH cur into t, t1, t2; IF done THEN LEAVE read_loop; END IF; if(t &lt; 60) THEN set temp = 0.0; end if; if(t &gt;= 60) THEN set temp = 1.0; end if; if(t &gt;= 64) THEN set temp = 1.6; end if; if(t &gt;= 66) THEN set temp = 1.7; end if; if(t &gt;= 68) THEN set temp = 2.0; end if; if(t &gt;= 72) THEN set temp = 2.3; end if; if(t &gt;= 75) THEN set temp = 2.7; end if; if(t &gt;= 78) THEN set temp = 3.0; end if; if(t &gt;= 82) THEN set temp = 3.3; end if; if(t &gt;= 85) THEN set temp = 3.7; end if; if(t &gt;= 90) THEN set temp = 4.0; end if; set sum=temp*t1*t2+sum; end loop; close cur; set myavg = sum/allcre; UPDATE studentinfos SET gpa = myavg where id = new.stu_id;END]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[06-事务]]></title>
    <url>%2F2019%2F06-%E4%BA%8B%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[ACIDA原子性（Atomicity）：事务是数据库的逻辑工作单位事务中包括的诸操作要么都做，要么都不做。C一致性（Consistency）：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。一致性状态：数据库中只包含成功事务提交的结果。不一致状态：数据库中包含失败事务的结果。I隔离性（Isolation）：一个事务内部的操作及使用的数据对其他并发事务是隔离的。也就是说一个事务在执行的时候不知道是否有其他事务和它一起在对相同的数据做操作，事务之间是相对不可见的。D持续性（Durability）：持续性也称永久性。一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。事务的并发问题由于事务的隔离性，不同事务若同时相同的数据做操作，可能会引发问题，即事务的并发问题。按照问题解决的难度由低至高可分为四类。丢失修改一个事务对数据对象的修改被另一个事务的修改所覆盖。分为两类：第一类：事务T1、T2同时读取A为10，T1将A减1后提交，T2将A也减1后提交，此时数据库中数据为9。T1的修改被T2覆盖。第一类：事务T1、T2同时读取A为10，T1将A减1后提交，T2将A也减1后回滚，此时数据库中数据为10。T1的修改被T2覆盖。脏读由于一个事物的回滚，使得另一个事务读到的数据无效。事务T1中读A为100，修改A未300，还未提交时事务T2读C为300，但由于T1因某原因进行事务回滚。A又被重置为100。T2读取到的是脏数据。不可重复读在一个事务的两次“读”同一数据之间，有另一个事务的“updata”发生。如在事务T1中第一次读A为100，读B为200，A+B为300，在事务T2中把A修改为200，事务T2第二次读A为200，读B为200，A+B为400。同一事务两次读取的数据不一致。幻读在一个事务的两次“读”同一数据之间，有另一个事务的“insert”发生。如在事务T1中第一次读count(*)为100，事务T2插入一条数据，事务T1中第二次读count(*)为101，同一事务两次读取的数据不一致。封锁类型加锁是解决事务并发问题的常见手段。数据库中的锁从读写的角度可分为两类：共享锁和排它锁。排它锁（X锁）：只允许当前事务T对数据进行“读”、“写”，其它事务对数据R的任何锁请求被拒绝直到T释放R上的X锁。共享锁（S锁）：允许当前事务T对数据R进行“读”，不允许“写“，而其它事务对R的S申请被允许，X请求拒绝。带来的效果是：X锁：数据对象当前只能由一个事务操作。S锁：多个事务允许同时“读”一个数据。封锁协议在运用X锁和S锁对数据对象加锁时，还需要约定一些规则 ，例如何时申请X锁或S锁、持锁时间、何时释放等。称这些规则为封锁协议。对封锁方式规定不同的规则，就形成了各种不同的封锁协议。一级封锁协议对T要“写”的R加X锁，直到T结束。此时可以解决丢失更新。此时仍然会发生：脏读：事务T2可以绕过X锁读取数据，且读取到的是T1回滚的数据。不可重复读：事务T2的两次读之间可以发生T1的”update“。幻读：事务T2的两次读之间可以发生T1的”insert“。二级封锁协议T发生“写”加X锁，直到T结束；（一级封锁协议）T发生“读”R加S锁，读完即释放。此时可以解决丢失修改和脏读。事务T1先对R进行写（加X锁），则事务T2在读时没法加S锁，直至T1结束。事务T2先对R进行读（加S锁），则事务T1在写时需要等待读结束（T1不一定结束）。此时仍然会发生：不可重复读：事务T1在第一次读之后（释放S锁），事务T2进行了”update”操作，事务T1再读得到的数据和上次不一致。幻读：事务T1在第一次读之后（释放S锁），事务T2进行了”insert”操作，事务T1再读得到的数据和上次不一致。三级封锁协议T发生“写”加X锁，直到T结束。T发生“读”加S锁，直到T结束。此时可以解决任何并发问题，因为无论对数据进行读还是写都要加锁：写：先加X锁，之后任何读写都被禁止。读：先加S锁，之后任何写操作都被被禁止。三级封锁协议仅允许不同的事务同时发生读操作。两段锁协议在对任何数据进行读、写操作之前，事务首先要获得对该数据的封锁。在释放一个封锁之后，事务不再获得任何其他封锁。满足所有遵守两段锁协议的事务，其并行执行的结果一定是正确的：先加X锁：X锁结束前（在两段锁协议中，不一定要事务结束才能释放X锁）任何锁都不能加上去，X锁结束后此事务不能再进行任何读写操作。先加S锁：S锁结束前，只能对其加S锁，即只允许多个事务同时读。一旦释放一个S锁，便任何锁都加不上去，只能完成为完成的读，不能再进行新的读写操作。满足三级封锁协议的一定满足两段锁协议：先加X锁，两种协议下事务结束之前任何读写都会被禁止。先加S锁，在两段锁协议中，若第一个锁的释放之后紧跟的事件就是事务的结束，此时就是三级封锁协议，即三级封锁协议是两段锁协议的一部分。事务的隔离级别读未提交READ UNCOMMITTED。对应一级封锁协议。读已提交READ COMMITTED。对应二级封锁协议。可重复读REPEATABLE READ。二级封锁协议加上不允许事务读取在该事务开始后新提交的数据。即防止了不可重复读的发生。可串行化SERIALIZABLE。对应三级封锁协议。MySql特点MySql默认的事务隔离级别是读已提交MySql的事务是自动提交，即即使未事务，MySql也会把每个SQL语句放在一个事务中运行，这个事务是MySql自动添加上去的。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汤姆猫和超文本传输协议]]></title>
    <url>%2F2019%2F%E6%B1%A4%E5%A7%86%E7%8C%AB%E5%92%8C%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[TomcatTomcat结构bin用来存放Tomcat的可执行文件：startup.bat是windows系统下启动Tomcat的可执行文件；shutdown.bat是windows系统下关闭Tomca的可执行文件。startup.sh是Linux下的启动Tomcat的可执行文件；shutdown.sh是linux下关闭Tomca的可执行文件。conf存放Tomcat服务器全局配置的各种文件。web.xml：给动态Web工程提供相应的配置，比如Session的过期时间，如果在工程的web.xml中覆盖了同种配置，以工程配置优先。server.xml：配置和服务器本身相关的信息，如用什么编码集解析URL，lib存放的是tomcat运行时和项目运行时必须的jar包。如果我们想把某个jar包让所有工程都能使用而不用每个工程都导入，直接将其放入lib文件夹下即可。logs存放的是日志文件webapps存放要发布的Web项目。将Web项目打包成War包，放在此目录下，在Tomcat启动时会将War解压并发布。work用来存放jsp文件文件在运行时产生的java文件和class文件。Dynamic Web项目结构Web项目结构12345678myweb(目录名:项目名) | |---资源文件 html img css js 可以存放到文件夹下 |---WEB-INF(目录:特点,通过浏览器直接访问不到) | | | |---lib(目录:项目运行的jar包) | |---classes(目录:存放的class文件) | |---web.xml(核心配置文件,在web2.5版本中必须有,web3.0版本不是必须的)手动创建一个Web项目并发布http://localhost:8080/test-web/test.htmlhttp://localhost:8080/test-web/WEB-INF/test.htmlHTTP协议请求行请求的方式 请求的资源 协议/版本。请求头key-value类型的数据。Accept：浏览器可接受的mime类型，如：text/html,image/*。Accept-Charset：浏览器解析所用哪个的字符集，如：ISO-8859-1。Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。这个指的是中文、英语这种语言。Host：被访问的主机。If-Modified-Since：在发送HTTP请求时，把浏览器端缓存页面的最后修改时间一起发到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行比较。如果时间一致，那么返回HTTP状态码304（不返回文件内容），客户端接到之后，就直接把本地缓存文件显示到浏览器中。如果时间不一致，就返回HTTP状态码200和新的文件内容，客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示到浏览器中。Referer：告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。User-Agent：浏览器内核。客户端浏览器的信息， 如。Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)Cookie：客户端会话技术。请求体post请求的参数。只有表单提交或异步提交时明确指定method=&quot;post&quot;这时候是post请求，其他的都是get请求。格式：参数名称=值&amp;参数名称=值。响应行版本/协议 响应的状态码 状态码说明。常见的状态码：200：响应成功302：重定向304：读缓存404：用户访问的数据不存在500：服务器内部错误响应头Location：跳转方向，仅配合状态码302使用才有作用，如 https://www.baicu.com。Server：服务器型号Content-Encoding：Servlet应该通过查看Accept-Encoding头（即request.getHeader(&quot;Accept-Encoding&quot;)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。Content-Length：数据长度Content-Type: text/html; charset=GB2312 –数据类型Last-Modified：客户可以通过If-Modified-Since请求头提供一个日期，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。Refresh：表示浏览器应该在多少时间之后刷新文档，以秒计。但只刷新一次。除了刷新当前文档之外，还可以通过setHeader(&quot;Refresh&quot;, &quot;5; URL=http://host/path&quot;)让浏览器读取指定的页面。Content-Disposition：指示浏览器不要解析文档，而是以附加形式下载。如attachment; filename=aaa.zip。Set-Cookie：设置cookie。响应体浏览器解析的内容。]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么分页存储管理页面大小是2的n次幂]]></title>
    <url>%2F2019%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%86%E9%A1%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2%E5%A4%A7%E5%B0%8F%E6%98%AF2%E7%9A%84n%E6%AC%A1%E5%B9%82%2F</url>
    <content type="text"><![CDATA[在分页存储管理方式中，进程中存储的是逻辑地址，通过地址变换机构将逻辑地址转变为物理地址。逻辑地址形式为page: offset。页面大小为什么满足2的n次幂，原因有下：方便计算如果要将（线性）地址转换为page：offset，则需要将地址除以页面大小，并将整数答案作为页面，将余数作为偏移量。 这是使用编程语言中的整数除法和模数运算符完成的。 计算机将地址表示为数字，存储为二进制位。 这是一个示例地址：12是二进制1100。 如果页面大小为3，那么我们需要计算12/3和12%3来查找页面和偏移量（分别为4、0）。 但是，如果页面大小为4（2的幂），则二进制中的4为100，此时使用特殊的“快捷方式”计算整数除法和模数：右移进行除法，按位与进行取模。所以： 12/4 == 12&gt;&gt;2（右移两位） 12%4 == 12&amp;(4-1)（1100和11按位与）。同时页面大小转为2进制可以使用左移，可以减小时间开销。充分利用空间如果页面大小不满足2的n次幂，假如是5，则页内偏移地址，采用2位则每页有一个地址不能使用，采用3位则111、110、101未被使用。怎么做都不能完全利用地址空间。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05-多表DQL]]></title>
    <url>%2F2019%2F05-%E5%A4%9A%E8%A1%A8DQL%2F</url>
    <content type="text"><![CDATA[数据准备12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/*功能：创建 scott 数据库中的 dept 表 */CREATE TABLE dept( deptno INT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '部门编号', dname VARCHAR(15) COMMENT '部门名称', loc VARCHAR(50) COMMENT '部门所在位置')ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT='部门表'; /*功能：创建 scott 数据库中的 emp 表 */CREATE TABLE emp( empno INT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '雇员编号', ename VARCHAR(15) COMMENT '雇员姓名', job VARCHAR(10) COMMENT '雇员职位', mgr INT UNSIGNED COMMENT '雇员对应的领导的编号', hiredate DATE COMMENT '雇员的雇佣日期', sal DECIMAL(7,2) COMMENT '雇员的基本工资', comm DECIMAL(7,2) COMMENT '奖金', deptno INT UNSIGNED COMMENT '所在部门', FOREIGN KEY(deptno) REFERENCES dept(deptno))ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT='雇员表'; /*功能：创建数据库 scott 中的 salgrade 表，工资等级表 */CREATE TABLE salgrade( grade INT UNSIGNED COMMENT '工资等级', losal INT UNSIGNED COMMENT '此等级的最低工资', hisal INT UNSIGNED COMMENT '此等级的最高工资' )ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT='工资等级表'; /*功能：创建数据库 scott 的 bonus 表，工资表 */CREATE TABLE bonus( ename VARCHAR(10) COMMENT '雇员姓名', job VARCHAR(9) COMMENT '雇员职位', sal DECIMAL(7,2) COMMENT '雇员工资', comm DECIMAL(7,2) COMMENT '雇员资金' )ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT='工资表'; /*功能：插入数据库 scott 中表 dept 的初始化数据 */INSERT INTO dept VALUES (10,'ACCOUNTING','NEW YORK');INSERT INTO dept VALUES (20,'RESEARCH','DALLAS');INSERT INTO dept VALUES (30,'SALES','CHICAGO');INSERT INTO dept VALUES (40,'OPERATIONS','BOSTON'); /*功能：插入数据库 scott 中表 emp 的初始数据 */INSERT INTO emp VALUES (7369,'SMITH','CLERK',7902,'1980-12-17',800,NULL,20);INSERT INTO emp VALUES (7499,'ALLEN','SALESMAN',7698,'1981-2-20',1600,300,30);INSERT INTO emp VALUES (7521,'WARD','SALESMAN',7698,'1981-2-22',1250,500,30);INSERT INTO emp VALUES (7566,'JONES','MANAGER',7839,'1981-4-2',2975,NULL,20);INSERT INTO emp VALUES (7654,'MARTIN','SALESMAN',7698,'1981-9-28',1250,1400,30);INSERT INTO emp VALUES (7698,'BLAKE','MANAGER',7839,'1981-5-1',2850,NULL,30);INSERT INTO emp VALUES (7782,'CLARK','MANAGER',7839,'1981-6-9',2450,NULL,10);INSERT INTO emp VALUES (7788,'SCOTT','ANALYST',7566,'87-7-13',3000,NULL,20);INSERT INTO emp VALUES (7839,'KING','PRESIDENT',NULL,'1981-11-7',5000,NULL,10);INSERT INTO emp VALUES (7844,'TURNER','SALESMAN',7698,'1981-9-8',1500,0,30);INSERT INTO emp VALUES (7876,'ADAMS','CLERK',7788,'87-7-13',1100,NULL,20);INSERT INTO emp VALUES (7900,'JAMES','CLERK',7698,'1981-12-3',950,NULL,30);INSERT INTO emp VALUES (7902,'FORD','ANALYST',7566,'1981-12-3',3000,NULL,20);INSERT INTO emp VALUES (7934,'MILLER','CLERK',7782,'1982-1-23',1300,NULL,10); /*功能：插入数据库 scott 中表 salgrade 的初始数据 */INSERT INTO salgrade VALUES (1,700,1200);INSERT INTO salgrade VALUES (2,1201,1400);INSERT INTO salgrade VALUES (3,1401,2000);INSERT INTO salgrade VALUES (4,2001,3000);INSERT INTO salgrade VALUES (5,3001,9999);1234567891011121314151617181920212223242526272829dept( DEPTNO, //部门编号，由两位数字所组成 DNAME, //部门名称，最多由14个字符所组成, LOC //部门所在的位置);emp( EMPNO, //雇员的编号，由四位数字所组成 ENAME, //雇员的姓名，由10位字符所组成 JOB, //雇员的职位 MGR, //雇员对应的经理编号，经理也是雇员 HIREDATE, //雇员的雇佣日期 SAL, //基本工资，其中有两位小数，五倍整数，一共是七位 COMM, //奖金，佣金 DEPTNO //雇员所在的部门编号);salgrade( GRADE, //工资的等级 LOSAL, //此等级的最低工资 HISAL //此等级的最高工资);bonus( ENAME, //雇员姓名 JOB, //雇员职位 SAL, //雇员的工资 COMM //雇员的奖金);自连接自连接就是自己和自己连接，在使用时将一张表看做多张表使用。查询员工编号，员工姓名，经理的编号，经理的姓名KING没有经理，所以查询出来只有13条记录12345678910SELECT e1.empno, e1.ename, e1.mgr, m1.enameFROM emp e1, emp m1WHERE e1.mgr = m1.empno查询员工编号，员工姓名，员工的部门名称，经理的编号，经理的姓名12345678910111213SELECT e1.empno, e1.ename, d1.dname, e1.mgr, m1.enameFROM emp e1, emp m1, dept d1WHERE e1.mgr = m1.empno AND e1.deptno = d1.deptno查询员工编号，员工姓名，员工的部门名称，经理的编号，经理的姓名，经理的部门名称12345678910111213141516SELECT e1.empno, e1.ename, d1.dname, e1.mgr, m1.ename, d2.dnameFROM emp e1, emp m1, dept d1, dept d2WHERE e1.mgr = m1.empno AND e1.deptno = d1.deptno AND m1.deptno = d2.deptno这里有一个难点是为什么需要拓展出两张部门表？这里需要理解刚才说的一句话：在使用时将一张表看做多张表使用，想象一下，如果真实存在一张员工表和一张经理表，员工表.部门=部门.id，经理表.部门=部门.id，不就等于是经理和员工在一个部门才能要求吗？这个题意明显不符。- 查询员工编号，员工姓名，员工的部门名称，员工的工资等级，经理的编号，经理的姓名，经理的部门名称12345678910111213141516171819SELECT e1.empno, e1.ename, d1.dname, s1.grade, e1.mgr, m1.ename, d2.dnameFROM emp e1, emp m1, dept d1, dept d2, salgrade s1WHERE e1.mgr = m1.empno AND e1.deptno = d1.deptno AND m1.deptno = d2.deptno AND e1.sal BETWEEN s1.losal AND s1.hisal- 查询员工编号，员工姓名，员工的部门名称，员工的工资等级，经理的编号，经理的姓名，经理的部门名称，员工所属经理的工资等级12345678910111213141516171819202122SELECT e1.empno, e1.ename, d1.dname, s1.grade, e1.mgr, m1.ename, d2.dname, s2.gradeFROM emp e1, emp m1, dept d1, dept d2, salgrade s1, salgrade s2WHERE e1.mgr = m1.empno AND e1.deptno = d1.deptno AND m1.deptno = d2.deptno AND e1.sal BETWEEN s1.losal AND s1.hisal AND m1.sal BETWEEN s2.losal AND s2.hisal查询员工编号，员工姓名，员工的部门名称，员工的工资等级，经理的编号，经理的姓名，经理的部门名称，经理的工资等级（将工资等级 1,2,3,4 显示成 中文的 一级 二级 三级…）1234567891011121314151617181920212223242526272829303132333435363738394041424344SELECT e1.empno, e1.ename, d1.dname, CASE s1.grade WHEN 1 THEN '一级' WHEN 2 THEN '二级' WHEN 3 THEN '三级' WHEN 4 THEN '四级' ELSE '五级' END "等级", e1.mgr, m1.ename, d2.dname, CASE s2.grade WHEN 1 THEN '一级' WHEN 2 THEN '二级' WHEN 3 THEN '三级' WHEN 4 THEN '四级' ELSE '五级' END "等级"FROM emp e1, emp m1, dept d1, dept d2, salgrade s1, salgrade s2WHERE e1.mgr = m1.empno AND e1.deptno = d1.deptno AND m1.deptno = d2.deptno AND e1.sal BETWEEN s1.losal AND s1.hisal AND m1.sal BETWEEN s2.losal AND s2.hisal外连接数据准备：insert into emp(empno,ename) values(9527,&#39;HUAAN&#39;);左外连接以左表为基准，右表能匹配上左表则匹配，右表没有一条记录匹配上左表，左表显示为空。右连接是以右表为基准，左表能匹配上右表则匹配，左表没有一条记录匹配上右表，右表显示为空。查询员工所在的部门12345SELECT *FROM emp e1LEFT OUTER JOIN dept d1 ON e1.deptno = d1.deptno;查询部门的员工12345SELECT *FROM emp e1 RIGHT OUTER JOIN dept d1 ON e1.deptno = d1.deptno;子查询查询最高工资的员工信息123456SELECT *FROM empWHERE sal = (SELECT max(sal) FROM emp);查询出比雇员7654的工资高,同时和7788从事相同工作的员工信息123456789101112131415161718192021SELECT *FROM empWHERE sal &gt; ( SELECT sal FROM emp WHERE empno = 7654 )AND job = ( SELECT job FROM emp WHERE empno = 7788 );查询每个部门最低工资的员工信息和他所在的部门信息12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 查询每个部门的最低工资,分组统计SELECT deptno, min(sal) minsalFROM empGROUP BY deptno; # 员工工资等于他所处部门的最低工资SELECT *FROM emp e1, ( SELECT deptno, min(sal) minsal FROM emp GROUP BY deptno ) t1WHERE e1.deptno = t1.deptno AND e1.sal = t1.minsal;# 查询部门相关信息SELECT *FROM emp e1, ( SELECT deptno, min(sal) minsal FROM emp GROUP BY deptno ) t1, dept d1WHERE e1.deptno = t1.deptno AND e1.sal = t1.minsal AND e1.deptno = d1.deptno;查询领导信息123456SELECT *FROM empWHERE empno IN (SELECT mgr FROM emp);查询不是领导的信息1234567891011121314151617181920212223242526272829# 错误的写法SELECT *FROM empWHERE empno NOT IN (SELECT mgr FROM emp);# &lt;&gt; ALL 等价于 NOT INSELECT *FROM empWHERE empno &lt;&gt; ALL (SELECT mgr FROM emp); # 正确的写法SELECT *FROM empWHERE empno NOT IN ( SELECT mgr FROM emp WHERE mgr IS NOT NULL );查询出比20号部门所有员工薪资高的员工信息 10 20 301234567891011121314151617181920212223242526272829# 写法1SELECT *FROM empWHERE sal &gt; ( SELECT max(sal) FROM emp WHERE deptno = 20 ); # 写法2SELECT *FROM empWHERE sal &gt; ALL ( SELECT sal FROM emp WHERE deptno = 20 );查询有员工的部门的信息12345678910111213SELECT *FROM dept d1WHERE EXISTS ( SELECT * FROM emp e1 WHERE e1.deptno = d1.deptno );补充EXISTS假设有三张表，学生、课程、选课表。查询选修了全部课程的同学。1234567891011121314151617181920212223242526/* 思路： 从上面的例子可以看到EXITSTS其实是对外部表的某个字段做循环。循环变量带入内部表后判断 从内部表能否查出来信息，能查出来表示真（留下），查不出来表示假（去除）。 所以这个题就是对每个学生做循环，把学生带入内部查询，查询学生是否有未选修的课，如果有 学生去除，否则学生留下，所以选用not exists： select * from student where not exists (学生未选修的课) 假设某次循环的学号是 110，此时需要拿course中的每个课号到sc表中做循环，查询在sc表的 学号为110且course.no = sc.cno的情况下，记录是否存在，记录存在course去除，记录不存 在course留下，所以选用not exists： select * from course where not exists select * from sc where 110 = sc.sno and sc.cno = course.no; 这样，可以查出学号为110的同学未选修的课程。 结果： 把两次分析的合并之后： select * from student where not exists( select * from course where not exists( select * from sc where student.no = sc.sno and sc.cno = course.no; ) )*/现在还是这三张表，我们换个题，查询被所有学生选修的课程信息123456789101112131415161718192021/* 思路： 对课程做循环，把课程带入内部查询，如果有学生未选此课，课程去除，否则课程留下， 所以选用not exists：： select * from course where not exists (未被选的课) 假设某次循环，课号为120，此时拿student中的每个学号到sc表做循环，查询在sc表的课号为 120且student.no = sc.sno的情况下，记录是否存在，记录存在student去除，记录不存在 student留下，所以选用not exists：： select * from student where not exists select * from sc where student.no = sc.sno and 120 = sc.no 结果： 两次分析合并 select * from course where not exists( select * from student where not exists( select * from sc where course.no = sc.cno and sc.sno = student.no ) )*/查询没有一个学生选择的课：123456789101112/* 对course做循环，如果存在学生选此课去除，没有学生选此课保留，选用not exists： 对内部循环，记录存在保留，记录不存在去除，选用exists：*/select * from course where not exists( select * from student where exists( select * from sc where course.no = sc.cno and sc.sno = student.no ))]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis入门]]></title>
    <url>%2F2019%2Fredis%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[环境安装本人使用的是redis-3.0.0和阿里云centos7服务器。上传redis-3.0.0到服务器。安装gcc环境：yum install gcc-g++解压redis-3.0.0：tar -zxvf ...进入解压后的redis文件夹执行：make安装：make PREFIX=/usr/local/redis install拷贝redis文件夹的redis.conf到/usr/local/redis下修改/usr/local/redis下的redis.conf，搜索以daemonize开头的行，将此行修改为daemonize yes。修改后redis以后台进程运行。开放端口：redis默认端口是6379。/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT启动服务器：./xxx/redis-server xxx/redis.conf使用客户端连接服务器：./xxx/redis-cli -h ip地址 -p 6379连接测试：ping显示PONG表名成功关闭客户端：quit关闭服务器：./bin/redis-cli shutdown基础使用存储string设置：set key value取值：get key删除：del username- 数值相加减- 加一：incr key- 减一：decr key- 加x：incrby key x- 减x：decrby key x字符串拼接存储Map赋值：赋多值：取值：删除字段：删除map：判断字段存在：获取全部entry：获取全部key：获取全部value：存储list头部添加：尾部添加：查看列表：头部弹出：尾部弹出：lpushx key value：仅当key存在时才向头部插入rpush key value：仅当key存在时才向尾部插入删除：irem key count value：count&gt;0时从头部开始删除|count|个值为value的元素；count&lt;0时从尾部开始删除|count|个值为value的元素；count=0时删除全部的值为|value|的元素。设置：lset key index value：设置链表中索引值为index的元素，0是链表头，-1是链表尾。索引值不存在抛异常。lindex key index：通过索引获取列表中的元素linsert key before|after pivot value：在列表的元素前或者后插入元素rpoplpush source destination：移除列表的最后一个元素，并将该元素添加到另一个列表并返回存储setSADD key member1 member2...：向集合添加一个或多个成员SREM key member1 member2...：移除集合中一个或多个成员SISMEMBER key member：判断 member 元素是否是集合 key 的成员1：存在0：key不存在或member不存在sdiff key1 key2：返回集合key1-key2的数据sinter key1 key2 ...：返回集合key1,key2,...的交集sunion key1 key2 ...：返回集合key1,key2,...的并集scard key：返回集合的数量srandmember key：随机返回集合中的一个数据集合运算拓展存储sortedset有序集合和集合一样也是string类型元素的集合，且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。ZADD key score1 member1 [score2 member2]：向有序集合添加一个或多个成员，或者更新已存在成员的分数。ZSCORE key member：返回有序集中，成员的分数值。ZREM key member1 member2 ...：移除有序集合中的一个或多个成员ZRANGE key start stop [WITHSCORES]：通过索引区间返回有序集合成指定区间内的成员。withscores表示返回的成员包含分数。ZREVRANGE key start stop [WITHSCORES]：返回有序集中指定区间内的成员，通过索引，分数从高到底。withscores表示返回的成员包含分数。ZREMRANGEBYRANK key start stop：移除有序集合中给定的排名区间的所有成员ZREMRANGEBYSCORE key min max：移除有序集合中给定的分数区间的所有成员keys的通用操作keys pattern：获取所有和pattern匹配的key。del key1, key2, ...：删除指定key。exists key：key是否存在。rename key newkey：为当前的key重命名。expire key：为key设置过期时间，单位：秒。ttl key：获取key所剩的时间，如果没有设置超时，返回-1，key不存在返回-2。type key：以字符串形式返回key的类型。key不存在返回none。Jedisjedis是Java操作redis的一套规范。使用jedis需要有两个包。commons-pool2-2.3.jar和jedis-2.7.0.jar。入门使用12345678910public class Demo1 &#123; public static void main(String[] args) &#123; Jedis jedis = new Jedis("59.110.143.226", 6379); jedis.set("name", "zhangsan"); String string = jedis.get("name"); System.out.println(string); jedis.close(); &#125;&#125;工具类连接1234maxTotal=20maxWaitMillis=7000host=59.110.143.226port=637912345678910111213141516171819202122232425262728public class JedisPoolUtils &#123; private static JedisPoolConfig jc = null; private static int maxTotal = 0; private static long maxWaitMillis = 0; private static String host = null; private static int port=0; private static JedisPool pool=null; static&#123; jc=new JedisPoolConfig(); //获取properties中的配置数据 ResourceBundle re = ResourceBundle.getBundle("jedis"); maxTotal=Integer.parseInt(re.getString("maxTotal")); maxWaitMillis=Long.parseLong(re.getString("maxWaitMillis")); jc.setMaxTotal(maxTotal); jc.setMaxWaitMillis(maxWaitMillis); host = re.getString("host"); port = Integer.parseInt(re.getString("port")); //创建Jedis池 pool=new JedisPool(jc, host, port); &#125; public static Jedis getJedis()&#123; return pool.getResource(); &#125;&#125;123456789public class TestUtils &#123; public static void main(String[] args) &#123; Jedis jedis=JedisPoolUtils.getJedis(); jedis.set("username2", "xiaowang"); String string = jedis.get("username2"); System.out.println(string); jedis.close(); &#125;&#125;多数据库redis的一个实例可以有多个数据库，就像一个mysql可以有多个数据库一样。一个redis实例最多可以提供16个数据库，下标从0到15，默认是0号数据库，连接其他数据库使用select num。移动key到指定数据库消息订阅与发布订阅就是一个客户端在某个频道里发消息，其它订阅到此频道的客户端接收消息。订阅：发布消息：批量订阅：发布消息：redis持久化RDB每隔指定时间自动把内存中数据写入一个文件，下次启动时加载文件，这样内存中就有上次的数据。redis默认的持久化方式。配置在redis.conf的140多行有如下配置是RDB配置。- save 900 1：每900秒至少有1个key发生变化，则备份内存快照。- save 300 10：每300秒至少有10个key发生变化，则备份内存快照。- save 60 10000：每60秒至少有10000个key发生变化，则备份内存快照。位置：AOF把对redis的操作存在一个文件中，下次开机时按照文件的记录再次将数据存在内存中。配置appendonly no改为appendonly yes。appendfsync always：每次有数据修改时，都会写入AOF文件appendfsync everysec：每秒同步一次，写入AOF文件appendfsynv no：从不同步。手动重写aof文件命令：bgrewriteaof。启动多个redis拷贝安装目录下的redis文件夹修改redis.conf文件的端口号启动redis时指定配置文件，保证端口号不同关闭时指定端口号，如：./bin/redis-cli -p 端口号 shutdown]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时钟中断]]></title>
    <url>%2F2019%2F%E6%97%B6%E9%92%9F%E4%B8%AD%E6%96%AD%2F</url>
    <content type="text"><![CDATA[中断的理解说到中断还不得不从现代操作系统的特性说起，无论是桌面PC操作系统还是嵌入式都是多任务的操作系统，而很遗憾，处理器往往是单个的，即使在硬件成本逐渐下降，但处理器的数量依然不可能做到每个任务一个CPU，所以CPU必须作为一种全局的资源让所有任务共享。即什么时候给任务A用，什么时候给任务B用……这就是进程调度，具体的安排就由调度算法决定了。进程如何去调度？现代操作系统一般都是采用基于时间片的优先级调度算法，把CPU的时间划分为很细粒度的时间片，一个任务每次只能时间这么多的时间，时间到了就必须交出使用权，即换其他的任务使用。这种要看操作系统的定时器机制了。那么时间片到之后，系统做了什么呢？这就要用到我们的中断了，时间片到了由定时器触发一个软中断，然后进入相应的处理历程。当然这一点不足以表明中断的重要，计算机操作系统自然离不开外部设备：鼠标、键盘、网卡、磁盘等等。就拿网卡来讲，我计算机并不知道时候数据包会来到，我能保证的就是数据来了我能正常接收就行了。但是我又不可能一直等着接收数据包，要是这样其他任务就死完了。所以合理的办法是，你数据包来到之后，通知我，然后我再对你处理，怎么通知呢？？答：中断！键盘、鼠标亦是如此！中断的定义指处理机处理程序运行中出现的紧急事件的整个过程.程序运行过程中，系统外部、系统内部或者现行程序本身若出现紧急事件，处理机立即中止现行程序的运行，自动转入相应的处理程序（中断服务程序），待处理完后，再返回原来的程序运行，这整个过程称为程序中断。可分为两类：硬中断（Hardware Interrupt）外部中断：一般是指由计算机外设发出的中断请求，如：键盘中断、打印机中断、定时器中断等。外部中断是可屏蔽的。内部中断是指因硬件出错（如突然掉电、奇偶校验错等）,或运算出错（除数为零、运算溢出、单步中断等）所引起的中断，内部中断是不可屏蔽的。软中断（Software Interrupt）软中断是利用硬中断的概念，用软件方式进行模拟，实现宏观上的异步执行效果。很多情况下，软中断和”信号”有些类似，同时，软中断又是和硬中断相对应的，硬中断是外部设备对CPU的中断，软中断通常是硬中断服务程序（模拟硬件发出中断的程序）对内核的中断，信号则是由内核（或其他进程）对某个进程的中断。时钟中断在Linux的0号中断是一个定时器中断。在固定的时间间隔都发生一次中断，也是说每秒发生该中断的频率都是固定的。该频率是常量HZ，该值一般是在100 ~ 1000之间。该中断的作用是为了定时更新系统日期和时间，使系统时间不断地得到跳转。另外该中断的中断处理函数除了更新系统时间外，还需要更新本地CPU统计数。若进程的时间片递减到0，进程则被调度出去而放弃CPU使用权。Linux的OS时钟的物理产生原因是可编程定时/计数器产生的输出脉冲，这个脉冲送入CPU，就可以引发一个中断请求信号，我们就把它叫做时钟中断。时钟中断是特别重要的一个中断，因为整个操作系统的活动都受到它的激励。系统利用时钟中断维持系统时间、促使环境的切换，以保证所有进程共享CPU；利用时钟中断进行记帐、监督系统工作以及确定未来的调度优先级等工作。可以说，时钟中断是整个操作系统的脉搏。参考：https://www.jb51.net/article/133782.htmhttps://blog.csdn.net/wlf_go/article/details/80237491]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c与cpp]]></title>
    <url>%2F2019%2Fc%E4%B8%8Ecpp%2F</url>
    <content type="text"><![CDATA[数据类型绝对值在$10^9$范围以内或者是32位的整数都可以定义成int型。绝对值在$10^{18}$范围以内或者是64位以内的整数可以定义为long long型。如果long long型赋大于$2^{31}-1$的初值，则需要在初值后面加上LL。遇到浮点型数据不要使用float，都应该使用double。小写字母的ASCII值开始于97，大写字母的ASCII值开始于65。小写字母比大写字母大32。\0表示NULL。运算符运算符含义语法效果&lt;&lt;左移a &lt;&lt; x整数a按二进制位左移x位&gt;&gt;右移a &gt;&gt; x整数a按二进制位右移x位&amp;位与a &amp; b整数a和b按二进制对齐，进行按位与运算$\mid$位或$a \mid b$整数a和b按二进制对齐，进行按位或运算^位异或a ^ b整数a和b按二进制对齐，进行按位或运算~位取反~a整数a在二进制下各位取反解释按位与：除了11为1，其他都是0；按位或：除了00为0，其他都是1；按位异或：相同为0，不同为1。无穷大const int INF = (1 &lt;&lt; 30) - 1;const int INF = 0x3fffffff;scanf数据类型格式符举例int%dscanf(&quot;%d&quot;, &amp;n)long long%lldscanf(&quot;%lld&quot;, &amp;ll)float%fscanf(&quot;%f&quot;, &amp;fl)double%lfscanf(&quot;%lf&quot;, &amp;db)char%cscanf(&quot;%d&quot;, &amp;c)字符串（char数组）%sscanf(&quot;%d&quot;, str)scanf双引号之内的字符串其实类似一个匹配模式，我们输入的参数只要能匹配这个模式其实都算对。比如在输入时间时：scanf(&quot;%d:%d:%d&quot;, &amp;hour, &amp;minute, &amp;second)。输入的参数只要是：h:m:d的形式就行。除了字符类型（%c），scanf对于其他类型都是默认以空白符（空格、换行等）判断结束标志的。但是在使用字符类型时可以读入空白符。如对于scanf(&quot;%d%c%s&quot;, &amp;a, %c, str)，我们输入1 a bad，得到的结果是a=1, c= , str=a。printf数据类型格式符举例int%dprintf(&quot;%d&quot;, n)long long%lldprintf(&quot;%lld&quot;, ll)float%fprintf(&quot;%f&quot;, fl)double%fprintf(&quot;%f&quot;, db)char%cptintf(&quot;%d&quot;, c)字符串（char数组）%sptintf(&quot;%d&quot;, str)输出%和\：printf(&quot;%%&quot;)，printf(&quot;\\&quot;)%md &amp; %0md &amp; %.md%md：使不足m位的int型变量以m位且右对齐输出，高位以空格补齐，若变量本身超过m位，则保持原样。%0md：使不足m位的int型变量以m位且右对齐输出，高位以0补齐，若变量本身超过m位，则保持原样。%.mf：让浮点数保留m位小数输出。如果题目要求保留xx位小数，使用这个格式便是正确的。这种格式不是四舍五入：它是四舍六入偶成双。getchar &amp; putchargetchar()输入单个字符，putchar(char c)输出单个字符。如char c = getchar();，getchar()可以读入换行符。typedef给复杂的数据类型定义一个别名。如：typedef long long ll。常用math函数double类型取绝对值：fabs(double x)double类型向上取整：floor(double x)double类型向下取整：ceil(double x)求$r^p$：pow(double r, double p)取double类型的算术平方根：sqrt(double x)得到以自然对数为底的对数：log(double x)得到以a为底b的对数：$log_ab$=log(b)/log(a)四舍五入：round (double x)三角函数：sin(double x)，cos(double x)，tan(double x)：参数是弧度制。asin(double x)，acos(double x)，atan(double x)。memsetmemset(数组名, 值, sizeof(数组名));。memset是按字节赋值，也就是说所有的字节都会被赋值为相同的数值，比如对于int a[10]，使用memset(a, 1, sizeof(a);，则四十个字节上的二进制结果都是00000001。由于0的二进制补码全为0，-1的二进制补码全为1，所以memset一般只用于赋值0和-1。字符数组仅在初始化的时候可以直接赋值字符串，如：char str[4] = &quot;PAT&quot;;gets(str)：读入一行字符串，以换行符作为输入结束。puts(str)：输出一行字符串，即输出字符串+换行符。gets()和scanf()在读入字符串时会自动添加结束符（\0）。string.h头文件strlen()：获得字符数组中第一个\0前的字符个数（不包含\0）。strcmp(str1, str2)：比较两个字符串的大小（字典序）：str1 &lt; str2：返回负整数；str1 == str2：返回0；str1 &gt; str2：返回正整数；strcpy(str1, str2)：把str2复制给str1，包含结束符\0。strcat(str1, str2)：把str2粘贴在str1后面（覆盖str1的\0）。sscanf &amp; sprintf用于处理字符串问题：sscanf(原位置，格式符，目的位置)：把原位置里的数据输入到目的位置中。sprintf(目的位置, 格式符, 原位置)：把原位置里的数据输出到目的位置中。12345678int main()&#123; int n; char str[100] = "123"; sscanf(str, "%d", &amp;n); //字符转int时不是强转为ASCII，是字面值相同。 printf("%d\n", n); //123 return 0;&#125;处理复杂的字符串：12345678910int main()&#123; int n; double db; char str1[100] = "2048:3.14,hello"; char str2[100]; sscanf(str1, "%d:%lf,%s", &amp;n, &amp;db, str2); printf("n=%d, db=%.2f, str2=%s\n", n, db, str2); //n=2048, db=3.14, str2=hello return 0;&#125;12345678910int main()&#123; int n = 12; double db = 3.1415926; char str1[100]; char str2[100] = "good"; sprintf(str1, "%d:%.2lf,%s", n, db, str2); printf("str2=%s\n", str1); //str2=12:3.14,good return 0;&#125;指针指针存储的地址的类型称为基类型。基类型必须和指针变量存储的地址类型相同。进行加减法得到的是其基类型偏移的位数。如，两个int型指针相减，等价于两个指针之间差了几个int。指针作为函数的参数，传递的是地址的拷贝123456789101112void testPointer(int *p1, int * p2)&#123; p1 = p1 + 1; cout &lt;&lt; *p1 &lt;&lt; endl; //3&#125;int main()&#123; int a[6] = &#123;1, 2, 3, 4, 5, 6 &#125;; testPointer(&amp;a[1], &amp;a[5]); cout &lt;&lt; a[1] &lt;&lt; endl; // 2 return 0;&#125;指针在创建的时候赋予初值。否则可能出现问题。如int *temp;，temp会被赋予一个随机空间，可能指向系统功能区，此时程序运行就会问题。结构体结构体限制：结构体内部不能定义本类型，但可以定义本类型的指针。结构体的构造函数：1234567891011121314struct studentInfo&#123; int id; char gender; studentInfo()&#123;&#125; studentInfo(char _gender): gender(_gender) &#123;&#125; studentInfo(int _id, char _gender): id(_id), gender(_gender) &#123;&#125;&#125;;int main()&#123; studentInfo stu = studentInfo(10086, 'M'); cout &lt;&lt; stu.id &lt;&lt; " " &lt;&lt; stu.gender &lt;&lt; endl; return 0;&#125;浮点数的比较计算机采用有限位的二进制代码，因此浮点数在计算机中的存储并不总是精确的，具体参考IEEE754规则。所以我们需要定义一个极小数eps（一般定义为$10^{-8}$）对这种误差进行修正。等于运算大于运算小于运算大于等于运算小于等于运算123456789101112const double eps = 1e-8;const double Pi = acos(-1.0);#define Equ(a, b) ((fabs((a) - (b))) &lt; (eps))#define More(a, b) ((a) &gt; (b + (eps)))#define Less(a, b) ((a) &lt; (b - (eps)))#define MoreEqu(a, b) ((a) &gt; (b - (eps)))#define LessEqu(a, b) ((a) &lt; (b + (eps)))单点测试提交的程序被执行多次，每次执行会输入一组数据，得到输出后和此组数据的结果做比较，如果相同则判断此测试点通过，总成绩等于N次执行的成绩之和。PAT采用的是单点测试的方案。多点测试提交的程序被执行一次，会把所有的测试数据都输入，如果其中一组输出出错，则此题错误。所以此时需要程序能有循环读入多组数据的能力。大多数OJ系统采用这种方案，如codeup。下面介绍三种读入方案：while ... EOF应用于没有给定输入的结束条件，默认读到文件末尾。123while(scanf("%d", &amp;n) != EOF)&#123; ...&#125;while ... break应用于题目要求输入的数据满足某个条件时停止输入12345while(scanf("%d", &amp;n) != EOF)&#123; if(n == 0) break; ...&#125;while(T--)当题目给出测试数据组数时采用这种方案。1234int T = 20；while(T--)&#123; ...&#125;]]></content>
      <categories>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[05-Shell]]></title>
    <url>%2F2019%2F05-Shell%2F</url>
    <content type="text"><![CDATA[简介Shell是一个命令解释器，用户输入命令来获得自己想要的结果，但是终端中输入的命令很难进行高级语言的选择、循环等操作。不过Shell程序可以存放在文件上，称为Shell脚本（虽然Linux文件不以后缀名区分文件类型，但是一般编写Shell脚本时文件名会命名为以.sh结尾）。在脚本中可以较方便的进行类似高级语言的操作。最简单的Shell脚本我们都知道，直接在终端输入echo命令是回显参数，把echo命令放在shell脚本中有相同的效果。设置成可执行文件变量Shell脚本中的变量直接使用=便可创建，使用$解析变量名。{}是分组命令，表示H是一个变量，这里不加也可以。特殊变量$#：除脚本名外，命令行上参数的个数。$*：表示在命令行上实际给出的所有实参。如：exam3.sh A B C D E F G H I J K。$#是11。$*是： A B C D E F G H I J K$n：表示命令行上第n个参数$0表示文件名 $1表示第一个参数 …$@：表示在命令行上实际给出的所有实参。如：exam3.sh A B C D E F G H I J K。$@就是： “A” “B” “C” “D” “E” “F” “G” “H” “I” “J” “K”$$：当前进程的进程号$!：上一个后台命令对应的进程号。$?：上一条前台命令执行后的返回值。算术运算执行算术运算需要使用let，如let c=$a+$b。可以使用c=$(($a+$b))代替。其中算术运算符及优先级等同于C语言。同时多了个**表示幂运算。（运算符前后不要有空格）从命令行读入参数直接使用read，命令行中的参数会读到read后面跟的参数（相当于变量）里。读入时输出提示信息：引号双引号：由双引号引起来的字符（除$、`和`\`）都被当做普通字符对待。$表示变量替换； `表示命令替换；\之后的字符只有是$、 、双引号、`或换行符之一时会成为转义字符。其他情况都是\本身。单引号：单引号引起来的字符都是普通字符。特殊字符也失效。倒引号：被到引号引起来的字符被解释为命令。如上上图中所示。数组变量之间使用空格隔开各个元素。如果元素中有空格，使用双引号引起来。测试条件任何命令都可以作为条件，shell会执行这个命令并检查返回值，如果命令成功（返回值为0），表示真。test &lt;条件&gt;：如test n1 -eq n2[ 条件 ]：如[ n1 -eq n2 ]有关文件方面的测试-r 文件名：真 &lt;==&gt; 文件存在并且是用户可读-w 文件名：真 &lt;==&gt; 文件存在并且是用户可写-x 文件名：真 &lt;==&gt; 文件存在并且用户可执行-f 文件名：真 &lt;==&gt; 文件存在且是普通文件-d 文件名：真 &lt;==&gt; 文件存在且是目录文件-s 文件名：真 &lt;==&gt; 文件存在且长度大于0有关字符串方面的测试-z s1：真 &lt;==&gt; 字符串长度为0-n s1：真 &lt;==&gt; 字符串长度大于0s1：真 &lt;==&gt; 字符串不是空字符串s1 = s2（在“=”前后应有空格）：真 &lt;==&gt; 字符串相等s1 != s2：真 &lt;==&gt; 字符串不等s1 &lt; s2：真 &lt;==&gt; 按字典顺序s1在s2之后s1 &gt; s2：真 &lt;==&gt; 按字典顺序s1在s2之前数值方面的测试n1 -eq n2：真 &lt;==&gt; 数值相等n1 -ne n2：真 &lt;==&gt; 数值不等n1 -lt n2：真 &lt;==&gt; n1小于n2n1 -le n2：真 &lt;==&gt; n1小于或等于n2n1 -gt n2：真 &lt;==&gt; n1大于n2n1 -ge n2：真 &lt;==&gt; n1大于或等于n2逻辑运算符!：逻辑非-a：逻辑与-o：逻辑或(表达式)：圆括号括起来表示为一条语句选择结构循环结构break &amp; continue和C语言一致。shift参数跳转命令：不跟数组默认跳转1位，跟了跳转n位。命令行ex.shABCDEF原位置参数$0$1$2$3$4$5$6移位后参数$0$1$2$3$4$5还可以用于循环结构的done上面，表示每次选择指定参数。参数置换变量格式var1为空var1不空var2=${var1:-str}var2=str。var1不变var2=$var1。var1不变var2=${var1:=str}var2=var1=strvar2=$var1。var1不变var2=${var1:+str}var2为空。var1不变var2=str。var1不变var2=${var1:?str}输出：“shell 脚本名:var1:str”并退出shell。var2不变var2=$var1。var1不变ex1编写ex1.sh，参数为一个大于 20 的正整数。先检查参数是否符合要求。如果不符合要求，请给出提示；如果符合要求，输出这个参数的平方。ex2编写ex2.sh，首先显示当天日期，然后查找给定的用户是否在系统中工作（who 命令）。如果在系统中，就输出一条欢迎语句（例如 hello，xxxx！）；如果不在系统中，就输出一条语句（waiting for xxx！）ex3编写 ex3.sh，该脚本接受一个参数。若改参数不是目录，则给出提示信息；否则使用ll命令列出该目录下的内容，并输出有多少个子目录（d开头），多少个普通文件（-开头）。ex4编写 ex4.sh，将第一个参数指定的内容 copy 到第二个参数指定地点。若第一个参数是目录，自动添加-r选项（即把目录下的所有内容都 copy 过去）；若第一个参数是普通文件，则将其 copy 到指定地点；若第一个参数指定的文件或目录不存在，则报错；若第二个参数指定的文件或目录已经存在，则提示是否替换，若选择 yes，则先删除原来的文件或目录，然后再执行 copy 操作，否则放弃。ex5编写 ex5.sh。检查命令行的第一个参数是否是-b或者-s。如果是-b，则计算由第二个参数指定的文件中以 b 开头的行数。如果是-s，则计算由第二个参数指定的文件中以 s 开头的行数。否则显示选择有错的信息。ex6编写 ex6.sh。该脚本需要输入两个文件的名称，然后由用户选择相应的操作（若两个参数中任何一个不是普通文件，则报错）。cat：输出两个文件的内容statistic：统计两个文件分别有多少行merge：将第 1 个文件的内容合并到第 2 个文件后面copy：将第 1 个文件的内容 copy 到第 2 个文件（覆盖原文件）bye：退出1ex编写 1ex.sh，利用 for 循环将当前目录下的.c 文件移动到指定的目录下，完成后显示指定目录下的文件内容，并按文件从小到大排序。(ll -r -S）2ex编写 2ex.sh，显示 Fibonacci 数列的前 10 项及其总和。3ex编写 ex3.sh，判断给定的参数是否是素数。4ex编写 ex4.sh，将给定的参数转换成二进制表示。5exex5.sh假设存在一个/homework的文件夹，其中包含一个 studentlist.csv的文件，当中存放了若干学生的学号，每个一行。例如：150341101、150341102、150341105、150341106，编写 ex11.sh。查看/homework 文件夹下学生是否提交了作业，假设作业名的格式为：学号_homework.txt。最后输出没提交作业的学号名单。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[04-进程管理]]></title>
    <url>%2F2019%2F04-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[Linux的进程状态psProcess Status。查看进程状态的最常用的命令，它可以提供关于进程的许多信息。直接用ps命令可以列出每个与你的当前Shell有关的进程的基本信息。ps -ef：显示系统中所有进程的全面信息。-e：显示所有进程-f：全格式用户ID、进程ID、父进程ID、CPU占用率、开始时间、开始此进程的终端设备、此进程运行的总时间、命令名。ps aux显示所有终端上所有用户的有关进程的所有信息。终结进程通常来说，终结一个前台进程可以使用Ctrl+C。终结一个后台进程得使用kill命令。kill &lt;进程号&gt;。如果想强制杀掉一个进程需要使用-9：kill -9 &lt;进程号&gt;sleep使进程暂停由时间值所指定的秒数。此命令大多用于shell程序设计中，使两条命令执行之间停顿指定的时间。如：sleep 100; who | grep &#39;root&#39;。waitwait是用来阻塞当前进程的执行，直至指定的子进程执行结束后，才继续执行。wait [进程号 或 作业号]：eg：wait 23 or wait %1如果wait后面不带任何的进程号或作业号，那么wait会阻塞当前进程的执行，直至当前进程的所有子进程都执行结束后，才继续执行。fork()fork()函数会创建一个和原来进程几乎完全相同的进程，也就是两个进程可以做完全相同的事。但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。一个进程调用fork()函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。fork()调用一次，分别向父子进程返回，它可能有三种不同的返回值：在父进程中，fork()返回新创建子进程的进程ID；在子进程中，fork()返回0；如果出现错误，fork()返回一个负值；所以我们可以通过fork返回的值来判断当前进程是子进程还是父进程。同时每个进程都有一个互不相同的进程标识符（process ID），可以通过getpid()函数获得，还有一个记录父进程pid的变量，可以通过getppid()函数获得变量的值。题1源代码运行结果分析程序运行到第7行，创建一个新的进程，克隆一份当前进程。向父进程返回子进程的pid，向子进程返回0。所以执行后父进程进入第3个分支，子进程进入第2个分支。题2源代码结果分析题3源代码结果分析题4题目分析执行第5行之后，向父进程返回真，向子进程返回假，但是没有任何影响，此时创建了一个进程，之后父子进程创建的进程个数相同，所以只分析一个再乘以2即可。第一个子进程分析结果如下图。注意，对于A &amp;&amp; B || C：表达式A为假，B不执行，C执行；表达式A为真，B执行：B为真：C不执行；B为假：C执行。所以答案是1+9*2=19个。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-vim]]></title>
    <url>%2F2019%2F03-vim%2F</url>
    <content type="text"><![CDATA[vi &amp; vim这俩都是文本编辑器。vi是Linux默认的编辑器，类似于windows的记事本。vim是vi的拓展，比vi更强大。可以用于在Linux中编辑文件内容。笔记中使用vim。它有两种模式，命令模式和编辑模式，在命令模式中可以做一些检索、筛选等操作。在编辑模式中可以对文档进行修改。进入 &amp; 退出进入命令模式方法：vim &lt;文件名&gt;。此时进入命令模式，不能对文件内容进行操作。对文档的检索是在这种模式下进行的。### 进入编辑模式：#### i：编辑位置在当前光标位置之前按下i再按_I：在光标所在行的行首插入新增文本按下I再按_a：在该命令之后输入的字符都插到光标之后按下a再按_A：在光标所在行的行尾添加文本按下A再按_o：在光标所在行的下面新开辟一行，随后输入的文本就插入在这一行按下o再按_O：在光标所在行的上面新开辟一行，随后输入的文本就插入在这一行上按下O再按_r：替换光标所在的哪一个字符按下r再按_R：一直替换光标所在的文字，直到按下ESC为止按下R再按三次_再按Esc退出编辑模式在编辑模式下按 Esc 键。退出命令模式需要使用转义字符::q：若未修改文件，此命令可以退出编辑器。:wq：把编辑缓冲区的内容写入文件中，退出编辑器，回到Shell下。:ZZ或:x：仅当作过修改时才将缓冲区内容写到文件上。:q!： 强行退出vi。告诉vi，无条件退出，丢弃缓冲区内容。vim流程图命令模式下的光标跳转方向键和Backspace键的使用和正常情况下相同。移动到上一行，列不变：k移动到上一行行头：-移动到下一行，列不变：j移动到下一行行头：+如果在相应命令的前面加上一个数字n，相应命令执行n次。如2k表示向上移动两行，列不变。移至行首：^或0移至行尾：$移至指定行：行号G。如2G，移动到第二行行首。移至指定列：列号|。如2|，移动到本行第2列。文本删除命令x（小写字母）删除光标所在的字符。命令X（大写字母）删除光标前面的那个字符命令dd删除光标所在的整行命令D从光标位置开始删除到行尾d&lt;光标移动命令&gt;删除从光标位置开始至光标移动命令之间的所有字符。如：d0：从光标位置（不包括光标位）删至行首。d3l：从光标位置（包括光标位）向右删3个字符。d$：从光标位置（包括光标位）删至行尾。与D相同。d5G：将光标所在行至第5行都删除。复原命令u：取消前面刚执行的插入或删除命令的效果，恢复到此前的情况。U：总是把当前行恢复成它被编辑之前的状态。重复命令.：在命令模式下，重复执行前一次插入命令或删除命令补充文本编辑命令方式下d0：删至行首d$：删至行尾ndd：删除当前行及其后的n-1行yy：复制当前行的文本10yy：复制包括当前行及其后面9行文本p：在当前行后面插入一个空行，把缓冲区的内容粘贴过来P：在当前行前面插入一个空行，把缓冲区的内容粘贴过来ex转移方式下:n1,n2 d：将n1行到n2行的内容删除:n1,n2 co n3：将n1行到n2行的内容复制到n3行下:n1,n2 m n3：将n1行到n2行的内容移到n3行下字符串检索向下检索：/模式〈Enter〉。例如：/int向上检索：?模式〈Enter〉。例如：?flout字符串替换:n1,n2s/word1/word2/g：n1和n2为数字。在n1与n2行之间寻找word1这个字符串，并将该字符串替换为word2。例如:100,200s/a/A在100行到200行之间搜索a并替换成A。:1,$s/word1/word2/gc：全局搜索word1，替换成word2。g改成gc表示要用户确认。:%s/$/s2/g：在整个行的末尾添加s2。全局替换命令g：:g/模式/命令表。:g/s1/p：打印文本中有s1的行。p命令表示打印。块选择ctrl+v，然后使用方向键选择块。y：复制反白的地方d：将反白的地方删除掉p：插入复制的内容参考：https://jingyan.baidu.com/article/84b4f565c6b9e560f6da3291.html。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-Linux常用命令]]></title>
    <url>%2F2019%2F02-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[输入终端窗口中的命令以Enter键结束，且Shell命令区分大小写。如果命令太长，一行放不下时，在行尾输入\并按Enter键。这时Shell会返回一个大于号（&gt;）作为提示符，表示该命令行尚未结束，允许继续输入有关信息。echoecho命令把命令行中的参数全部显示到标准输出（终端）中。如果参数用引号引起来，会按原样输出。否则会把各个单词按字符串输出，字符串之间用空格隔开。单引号/双引号的区别请看Shell那一部分。输出重定向Linux的标准输出是屏幕，把结果输出到指定的文件叫做输出重定向。&gt;：目标文件不存在，系统将建立该文件；文件存在，重定向将会删除该文件，并重新建立一个新文件存放结果。&gt;&gt;：目标文件不存在，系统将建立该文件；如果目标文件存在，新的输出结果将会追加到文件末尾。pwd显示出当前所在目录的路径。历史命令history命令可以看到用户所有曾经输入过的命令。!!：执行上一个命令；`!n：执行第n个命令；!-n：执行倒数第n个命令；!xxx：执行以xxx开头的命令，如之前使用过clear，!cle会执行clear。~/.bash_history文件中会存储你近期使用过的命令。查看此文件：cat ~/.bash_historydatedate命令在屏幕上显示或设置系统的日期和时间：date [+格式控制字符串]格式控制字符串常用单引号引起来。年:Y 月:m 日:d 小时:H 分:M 秒:S有且只有超级用户能设置或修改系统时钟，语法如下：date -s “year-month-day hour:minute:second”系统在启动的时候是从CMOS（用来存储计算机某些参数的芯片）中加载时钟，为了保持系统时间与CMOS时间的一致性，Linux每隔一段时间会将系统时间写入CMOS。由于该同步是每隔一段时间进行的，在我们执行date -s后，如果马上重起机器，修改时间就有可能没有被写入CMOS，而hwclock –w强制把系统时间写入CMOS。cal列出日历信息。单独一个cal：列出当前月的日历信息。cal xxxx：列出xxxx年的日历信息。cal yy xxxx：列出xxxx年yy月的日历信息。cal dd yy xxxx：列出xxxx年yy月xx日所在月的日历信息。clearclear命令清除屏幕上的信息，清屏后，提示符移到屏幕左上角。关机 &amp; 重启shutdown -h now：立刻关机shutdown -h 15:30：15:30 关机shutdown -h +30：30 分钟后关机reboot：重启shutdown -k +2 &quot;一会要关机，抓紧保存&quot;：向所有用户输出关机通知，但不做真正操作。+2表示通知的关机时间是现在之后的两分钟。帮助命令如果我们忘记某些命令或其参数如何使用，需要使用帮助命令。whatis &lt;命令&gt;：显示命令的简短描述。&lt;命令&gt; -help：显示使用方法概述和参数列表。man &lt;命令&gt;：为命令提供相关帮助文档，页面分成章节。info &lt;命令&gt;：类似man命令，但是通常比它更详细。切换路径命令cd &lt;位置&gt;：切换到指定位置；cd ~：切换到用户家目录；cd -：切换到上一个所在目录；passwd修改密码。单独的passwd：修改使用该命令的用户的密码。passwd 用户名：root用户可以使用该命令修改其他用户的密码。Linux用户登录Linux系统时，必须通过指定的用户名和密码进行登录。不过所有的用户在Linux眼中都是一个数字，用userid（一个32位的二进制整数）来表示。可以通过id命令，查看自己的userid。userid为0的表示根用户。同时，在系统运行的每个进程、所创建的每个文件都有一个userid，这个userid代表运行这个程序的用户，或者文件的所有者。Linux系统中，用户被保存在/etc/passwd文件中。用户又分成三类：一般用户（userid&gt;=500）、超级用户（userid=0）和系统用户（userid&lt;500）。查看用户Linux是一个多用户系统，即很多个用户同时操作一个设备中的资源，但不同的用户有不同的权限。这些用户中有一个是超级用户（root），它是权限最高的用户。root用户在终端中的输入命令以#开头，其他的用户以$开头。- who：列出正在使用系统的所有用户、所用的终端名和注册到系统的时间。who am i：列出使用该命令的用户、所用的终端名和注册到系统的时间。用户组由于不同的用户有不同的权限。为了给不同的用户赋予相同的权限更加方便，诞生了用户组的概念。即同一个用户组里的人员可以有相同的某些权限。Linux中的用户或文件至少属于一个用户组。添加用户useradd或者adduser。执行后的具体操作（不同发行版有区别）：分配一个新的userid，数值等于之前所有userid中数值最大的加一。在/etc/passwd中添加一行。为用户在/home下建立一个新的目录（用户的家目录），目录名和用户名相同。在/etc/group中为用户建立一个新的个人组。在/var/spool/mail中创建用户的邮件文件。删除用户userdel &lt;用户&gt;。删除用户及部分相关信息，家目录和邮件文件还会存在。-r：包括家目录和邮件池等在内的所有用户信息都会被删除。添加/删除组groupadd &lt;组名&gt;。所有的组都保存在/etc/group文件中。groupdel &lt;组名&gt;。删除组。/etc/passwd &amp; /etc/shadow/etc/passwd有7列：用户名、密码、用户id、主要组id、备注信息、主目录、登录shell。各列之间使用:分割。同时密码一般都是x（被加密了），加密后的密码在/etc/shadow中。/etc/shadow有9列：用户名、加密密码、最近更改密码的日期、密码不可更改的天数、密码需要重新更改的天使、密码更改期限前的警告期限、密码过期的宽限时间、帐号失效日期、保留字段。但这里显示的密码是加密的。查看用户所属的组groups：查看使用此命令的用户所属组；groups &lt;用户&gt;：查看指定用户所属组。用户可多选，使用空格隔开。/etc/group &amp; /etc/gshadow/etc/group：组名、组密码、组id、组中附加用户。- /etc/gshadow：组名、密码、组管理者、组中附加用户。为用户添加备注在创建的时候添加：useradd -c &lt;备注&gt; 用户名。创建后修改：usermod -c &lt;备注&gt; 用户名。（会清除之前的备注信息）。usermod改变用户某些属性的命令。-l：改变用户的名称；-G：改变用户支持的用户组，会退出原来的附属组，配合-a不会删除之前组；-L：不让该用户登录；-e：设定用户失效日期。日期格式：“YYYY-MM-DD”。-s：改变Shell。新创建的用户默认使用bash，此选项修改登录Shell。如：usermod -aG 组名 用户gpasswdgpasswd -d userName groupName：从组中删除用户切换用户超级用户输入su 用户名可以不用输入密码切换到其他用户。普通用户切换到其他所有用户（su 用户名）需要输入密码。文件系统操作系统中负责管理和存储文件信息的软件机构称为文件管理系统，简称文件系统。文件：文件系统中存储数据的一个命名的对象。即使是空文件（不包含用户数据）也会为操作系统提供其他信息。目录：包含文件项目的一类特殊文件。Linux中在应用层上来看目录和文件是被区分开来的。查找文件find &lt;路径&gt; -name &#39;正则表达式&#39;：如find . -name &#39;*.so&#39;，查找当前目录下以.so结尾的文件。catcat &lt;文件&gt;：显示文件的内容。文件可以多选，之间用空格隔开。cat f1 &gt; f2：把f1文件的内容合并到f2文件中。touch文件不存在：则创建一个空的新文件；文件存在：把文件的时间标签更新为系统当前时间。grep命令的意思：global search regular expression and print out the line。部分选项如下：-a：将 binary 文件以 text 文件的方式搜寻数据-c：计算找到 ‘搜寻字符串’ 的次数-i：忽略大小写的不同，所以大小写视为相同-n：顺便输出行号-v：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行！--color=auto：可以将找到的关键词部分加上颜色的显示喔！举例如下：管道命令管道命令是用来过滤信息的，比如我们之前grep -n root /etc/passwd之后显示带有root的行，如果想在结果中再按其他条件过滤就要使用管道命令：“|”。统计文件信息wc：统计指定文件的字节数（-c）、字数（-w）、行数（-l）例子：统计文件a中以b开头的行数：cat a | grep ^b | wc -l创建目录mkdir &lt;文件名&gt;。-p：父目录不存在时也可以创建。删除文件/目录rm -rf &lt;文件名&gt;。-r表示递归删除；-f表示强制删除，不询问。列出文件ls命令列出指定目录的内容。- -l：文件的详细信息。输出的信息分成多列，它们依次是：文件类型与权限、链接数、文件主、文件组、文件大小、建立或最近修改的时间、文件名。total的计算：https://yq.aliyun.com/ziliao/264744。-a：显示所有文件。之前显示的没有隐藏文件（以.开头）。-h：文件大小以人类可读的方式显示。需要配合-l使用。拷贝文件cp &lt;文件&gt; &lt;目录&gt;。剪切文件mv &lt;文件&gt; &lt;目录&gt;。修改文件名mv &lt;文件&gt; &lt;新文件名&gt;。文件结构Linux中所有的文件都由两部分构成。索引结点：包含此文件的信息，如文件权限、文件主、文件大小等。数据：文件的实际内容，有没有数据都可以。链接链接就是把文件名和计算机文件系统使用的节点号链接起来。因此我们可以用多个文件名与同一个文件进行链接，这些文件名可以在同一目录或不同目录。硬链接：硬链接是多一个文件名和inode结点关联。由于它依赖于inode，所以不能在不同的文件系统之间做硬链接。硬链接不能用于目录。用法：ln &lt;被链接的文件&gt; &lt;新的文件名&gt;软连接：软连接是再拓展出一份inode，这个inode指向的区域保存如何找到真正数据的信息。用法：ln -s &lt;被链接的文件&gt; &lt;新的文件名&gt;用户和权限文件主：文件所有者，并赋予唯一的注册名。只有文件主或root才有权利用chown命令改变文件的所有关系（UID）。用户组：通常，组中包含了有相同需求的用户。文件主或超级用户（root）可以利用chgrp命令改变文件的GID。用户存取权限：Linux系统中规定了4种不同类型的用户：文件主、同组用户、其他用户、超级用户。3种访问文件或目录的方式：r（读）、w（写）、 x（可执行或查找）。chmod只有文件主或超级用户root才有权用chmod命令改变文件或目录的存取权限。使用格式：chmod [选项] MODE 文件。MODE可多选，之间用,隔开。MODE：&lt;who&gt;&lt;操作符号&gt;&lt;权限&gt;。who：u——user、g——group、o——others、a——all（可叠加）。操作符号：+ 添加、- 取消、= 赋予；权限：r 读、w 写、x 执行。（可叠加）举例以绝对方式改变权限置为1表示有相应权限，置为0表示没有相应权限。例如：r w x r - x r - -1 1 1 1 0 1 1 0 0转换成十进制是754。chmod 754 aa和chmod u=rwx,g=rx,o=r aa一致。umask官方的解释是掩码，其实就是用户创建文件或目录后它们的默认权限。不过和chomd有区别的是它把有权限设置为0，没权限设置为1，而且umask命令显示的是八进制数字。我的umask显示的是0022，转换成二进制就是000 010 010，转换成权限就是rwx r-x r-x。所以创建的目录的默认权限就是这个。但是Linux不允许新创建的文件有可执行权限，所以创建的文件的默认权限是rw- r-- r--。chown改变某个文件或目录的所有者。chown &lt;用户&gt; &lt;文件&gt;/&lt;目录&gt;chgrp改变文件或目录所属的用户组。chgrp &lt;用户组&gt; &lt;文件&gt;/&lt;目录&gt;文件权限的理解可读（r）：浏览文件中的内容；可写（w）：修改文件中的内容；可执行（x）：将文件作为命令使用。目录权限的理解可读：只能查看到目录下的子目录名和文件名；可执行：可以访问目录中的文件，包括子目录；可写：要在目录下添加删除目录和文件，必须有可执行的权利。压缩 &amp; 打包 &amp; 解压缩tar -zcvf：打包压缩后的文件名 要打包压缩的文件（多个之间用space分开）z：调用gzip压缩命令进行压缩c：create，打包文件v：显示运行过程f：指定文件名tar -xvf xxx.tar.gz -C 位置x：extract，解包v：显示允许过程f：指定文件名别名我们可以使用ll代替ls -l。但是对于ls -a，系统并没有提供la命令，不过我们可以使用alias定义la。取消别名使用unalias 别名## 定时任务cron工具允许用户配置要定期运行的任务，通过配置crontab的文件可以指定要运行哪些作业以及何时运行。配置crontab文件使用命令crontab。命令由6个用空白分隔的字段组成：| 字段 | minute | hour | day of month | month | day of week | command to run || —- | —— | —- | ———— | —– | ———– | —————— || 举例 | 45 | 16 | | | | date&gt;/tmp/date.txt || 范围 | 0-59 | 0-23 | 1-31 | 1-12 | 0-7 | |corntab命令的参数：- -e：编辑crontab的内容（会打开一个文件）；- 设置定期任务（16:45时把当前时间写入/tmp/date.txt文件中）：- 过一段时间之后查看/tmp文件夹：-u：只有root才能执行这个选项，帮助其他用户建立/删除crontab；-l：查看crontab的工作内容:-r：删除crontab的工作内容；成组命令被成组命令约束的命令被认为是一条命令。{ 命令; }：需要有空格和命令隔开，且命令后面需要“;”。不创建子进程。(命令)：不强制需要有空格和命令隔开，不强制需要“;”。创建子进程完成功能。例如下例把两条ls命令的值全部由管道输入给grep。sortsort lines of text files，将文本文件内容加以排序，以行为单位来排序，但不改变文件原始内容。默认排序规则：从第每行一个字符开始，依次按照ASCII码值进行比较。-n：按数字的大小排序，默认情况下把数字看成字符。-r：反转排序效果。uniq文件输出时，删除重复行或列。但如果重复的行不连续则不起作用。文件类型-：普通文件l：符号链接文件d：目录s：套接字文件（socket）b：块设备文件p：命名管道文件（pipe）c：字符设备文件ex1：用户管理在系统中添加三个用户：Blondie、Prince和Madonna他们都希望属于次要组music### Blondie要求在他的条目中添加特殊备注“heart of glass”Prince要求使用/bin/csh作为登录shellMadonna的使用期限为2020-12-1。Blondie决定加入摔跤俱乐部wrestle组。Prince要将他的用户名改为tafkap。Madonna开始对风水感兴趣，加入组fengshui，并要求将她的userid改为888。groupadd fengshuiusermod -a –G fengshui Madonnausermod –u 888 MadonnaPrince又要改名字了，我们觉得太麻烦，干脆锁住他的帐号。usermod –L PrinceBlondie最近表现不好，我们决定将他踢出去。userdel –r Blondie（想把该用户所有信息都一起删除可以使用-r）ex2：文件目录管理Ventura同时属于次要组governor和wrestle。Ventura撰写了自己的摔跤计划plans.txt，并将它放到目录/tmp下。Ventura希望将他的摔跤计划和用户Hogan以及其他摔跤组的成员共享，但他不希望组外的成员访问。用户Hogan想往用户Ventura的计划上添加内容，可以吗？怎么做？用户Hogan对他自己的贡献很满意，他希望将这个计划公开，让所有人都能读到这个文件，可以实现吗？不可以，只有root和文件主能修改文件访问权。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-Linux入门]]></title>
    <url>%2F2019%2F01-Linux%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Linux介绍Linux是一套免费使用和自由传播的操作系统。严格来讲，Linux这个词本身只表示Linux内核，但一般来说使用Linux内核的操作系统都被称为Linux。而不同的厂家使用相同的Linux内核所构建的操作系统叫做Linux发行版。常见的Linux发行版有Ubuntu、Centos、Debian等。这些发行版的使用方法大同小异。但Linux不仅限于使用在PC机上，移动端（安卓系统是由Linux改写而来）、路由器（只保留少许功能的Linux系统）等终端都在使用Linux。Linux安装虚拟机安装：blog.csdn.net/qq_38206090/article/details/82559358双系统：笔者没有安装过，因为怕系统出问题导致文件损失。云服务器：云服务器系统配置Linux版本我认为是最简单的方式，所以以下实例均采用阿里云服务器。连接服务器工具SecureCRT：去 http://59.110.143.226/Sharing-Your-Story/ 搜索。Termius：https://www.microsoft.com/store/productId/9NK1GDVPX09V推荐使用Termius，好看也好用。SecureCRT是破解版，Termius是免费使用。Linux目录结构Linux的目录结构是一个树形结构，树根是一个/。直接子目录包括root、home等。如我的阿里云服务器根目录：ShellShell是指“为使用者提供操作界面”的软件（命令解析器）。Shell翻译过来叫做“壳”，用来区别于“核”，也就是说它把底层的东西封装成命令，使用者键入命令就能得到相应的结果。比如上面的这张图中，我在根目录下输入ll命令，就在终端上给我显示根目录下的文件信息。也就是说Shell解析了我输入的ll命令，返回我想要的信息（根目录文件信息）。Bash命令Shell是命令解释器，自然会有不同的分类，就类比于同是循环结构，Java和Python却有不同的语法。但是Bash（Bourne-Again SHell）是Linux默认的Shell交互类型，也就是说在Linux中打开一个终端，就启动一个Bash进程。Bash命令格式格式：命令名 [选项] [参数1] [参数2] … 有如下特点：命令名必须是小写英文字母。一般格式中，方括号括起来的部分是可选选项。选项是对命令的特别定义，以“-”开始。一个命令可以使用多个选项且多个选项连接起来同样有效（部分发行版不支持）。如：ls -al和ls -a -l效果相同。命令正常执行后返回一个0表示执行成功，返回非0值表示执行过程出错。在终端上很难体现出来，但在shell脚本（后续会介绍）中可作为控制逻辑流程的一部分（用$?查看）。Bash举例查看内核版本号：uname -a:uname是命令名，-a是选项，这个命令没有参数。uname解释]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[opencv实现人脸识别、人脸打框、人脸剪切]]></title>
    <url>%2F2019%2Fopencv%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E3%80%81%E4%BA%BA%E8%84%B8%E6%89%93%E6%A1%86%E3%80%81%E4%BA%BA%E8%84%B8%E5%89%AA%E5%88%87%2F</url>
    <content type="text"><![CDATA[Opencv在各平台上的配置https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html。测试图片人脸识别代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import java.util.Arrays;import java.util.List;import org.opencv.core.Core;import org.opencv.core.Mat;import org.opencv.core.MatOfRect;import org.opencv.core.Rect;import org.opencv.imgcodecs.Imgcodecs;import org.opencv.objdetect.CascadeClassifier;public class GetImgFace &#123; private static String classifier = "D:/opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml"; static &#123; // 必须要加载Opencv的Library System.loadLibrary(Core.NATIVE_LIBRARY_NAME); &#125; public static void main(String[] args) &#123; //图片路径不能有中文... GetImgFace.getImgFace("C:\\Users\\ISJINHAO\\Desktop\\test.jpg"); &#125; public static List&lt;Rect&gt; getImgFace(String imgPath)&#123; /* * 加载分类器，选择已经训练好的opencv分类器，训练器路径：%OPENCV_HOME%/sources/data/haarcascades/ * 分类器包含眼睛，人脸，人体，微笑等等，其中对于仅仅识别人脸来说，最好的训练器是： * haarcascade_frontalface_default.xml * haarcascade_frontalface_alt.xml * haarcascade_frontalface_alt2.xml * */ // 分类器路径不要有中文... CascadeClassifier faceDetector = new CascadeClassifier(classifier); if (faceDetector.empty()) &#123; System.out.println("请选择正确的分类器！"); return null; &#125; // 创建Mat，Mat是用来保存图片信息的类。Imgcodecs是用来读取图片的工具类 Mat image = Imgcodecs.imread(imgPath); // 检测人脸，检测结果存在faceDetections中 MatOfRect faceDetections = new MatOfRect(); faceDetector.detectMultiScale(image, faceDetections); List&lt;Rect&gt; faceList = Arrays.asList(faceDetections.toArray()); System.out.println(faceList); return faceList; &#125; &#125;结果人脸打框代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.io.File;import java.util.Iterator;import java.util.List;import java.util.UUID;import org.opencv.core.Mat;import org.opencv.core.Point;import org.opencv.core.Rect;import org.opencv.core.Scalar;import org.opencv.imgcodecs.Imgcodecs;import org.opencv.imgproc.Imgproc;public class FaceRect &#123; public static void main(String[] args) &#123; String imgPath = "C:\\Users\\ISJINHAO\\Desktop\\test.jpg"; List&lt;Rect&gt; faceRects = GetImgFace.getImgFace(imgPath); //把识别出来的图片分别打框 Iterator&lt;Rect&gt; iterator1 = faceRects.iterator(); while(iterator1.hasNext()) &#123; Rect rect = iterator1.next(); FaceRect.imageMark(imgPath, "D:\\test\\" + UUID.randomUUID() + ".jpg", rect); &#125; //在一张图片中把所有识别出来的人脸都打框 Mat image = Imgcodecs.imread(imgPath); Iterator&lt;Rect&gt; iterator2 = faceRects.iterator(); while(iterator2.hasNext()) &#123; Rect rect = iterator2.next(); Imgproc.rectangle(image, new Point(rect.x, rect.y), // 左上点 new Point(rect.x + rect.width, rect.y + rect.height), // 右下点 new Scalar(0, 255, 0), 2); // 框的颜色和粗细 &#125; Imgcodecs.imwrite("D:\\test\\" + UUID.randomUUID() + ".jpg", image); &#125; public static File imageMark(String imagePath, String outFilePath, Rect rect) &#123; Mat image = Imgcodecs.imread(imagePath); // 原始图片 //Imgproc.rectangle的作用是在修改image中的数据，把相应的位置打上框 Imgproc.rectangle(image, new Point(rect.x, rect.y), // 左上点 new Point(rect.x + rect.width, rect.y + rect.height), // 右下点 new Scalar(0, 255, 0), 2); // 框的颜色和粗细 // 把mat写入图片 Imgcodecs.imwrite(outFilePath, image); return new File(outFilePath); &#125;&#125;结果人脸剪切代码1234567891011121314151617181920212223242526272829303132333435363738394041424344import java.io.File;import java.util.Iterator;import java.util.List;import java.util.UUID;import org.opencv.core.Mat;import org.opencv.core.Rect;import org.opencv.core.Size;import org.opencv.imgcodecs.Imgcodecs;import org.opencv.imgproc.Imgproc;public class FaceCut &#123; public static void main(String[] args) &#123; String imgPath = "C:\\Users\\ISJINHAO\\Desktop\\test.jpg"; List&lt;Rect&gt; faceRects = GetImgFace.getImgFace(imgPath); //把识别出来的图片分别打框 Iterator&lt;Rect&gt; iterator1 = faceRects.iterator(); while(iterator1.hasNext()) &#123; Rect rect = iterator1.next(); FaceCut.imageCut(imgPath, "D:\\test\\" + UUID.randomUUID() + ".jpg", rect); &#125; &#125; public static File imageCut(String imagePath, String outFilePath, Rect rect) &#123; Mat image = Imgcodecs.imread(imagePath); // 按照原始图片中的人脸提取出来 Mat sub = image.submat(rect); Mat mat = new Mat(); Size size = new Size(rect.width, rect.height); // 修改提取出来的人脸信息sub在坐标轴的位置。 Imgproc.resize(sub, mat, size); // 将截图保存 Imgcodecs.imwrite(outFilePath, mat); return new File(outFilePath); &#125;&#125;结果]]></content>
      <categories>
        <category>大学生创新创业项目</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>人脸识别</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仅使用Servlet3实现文件上传下载]]></title>
    <url>%2F2019%2F%E4%BB%85%E4%BD%BF%E7%94%A8Servlet3%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[上传文件的html界面123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h2&gt;单文件上传&lt;/h2&gt; &lt;form action="/servlet3-upload-and-download/uploadone" method="post" enctype="multipart/form-data"&gt; &lt;input type="file" name="file"&gt; &lt;input type="submit" name="upload"&gt; &lt;/form&gt; &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;h2&gt;多文件上传&lt;/h2&gt; &lt;form action="/servlet3-upload-and-download/uploadmany" method="post" enctype="multipart/form-data"&gt; &lt;input type="file" name="file1"&gt; &lt;input type="file" name="file2"&gt; &lt;input type="submit" name="upload"&gt; &lt;/form&gt; &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;h2&gt;文件下载&lt;/h2&gt; &lt;a href="/servlet3-upload-and-download/download"&gt;点击下载&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;下载1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package download;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@WebServlet("/download")public class download extends HttpServlet&#123; private static final long serialVersionUID = 1L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; resp.setContentType("text/html;charset=utf-8"); //filepath String filePath = "D:\\我.jpg"; try( BufferedInputStream bis = new BufferedInputStream(new FileInputStream(filePath)); BufferedOutputStream bos = new BufferedOutputStream(resp.getOutputStream()); ) &#123; long fileLength = new File(filePath).length(); resp.setHeader("Content-disposition", "attachment; filename=" + new String(new File(filePath).getName().getBytes("utf-8"), "ISO8859-1")); resp.setHeader("Content-Length", String.valueOf(fileLength)); byte[] buff = new byte[2048]; int bytesRead; while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) &#123; bos.write(buff, 0, bytesRead); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; doGet(req, resp); &#125; &#125;上传单文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package upload;import java.io.File;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.MultipartConfig;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.Part;@WebServlet("/uploadone")@MultipartConfig //Servlet3中处理multipart/form-data类型请求的注解public class UploadOne extends HttpServlet&#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException&#123; this.doPost(request, response); &#125; protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException&#123; //说明输入的请求信息采用UTF-8编码方式 request.setCharacterEncoding("utf-8"); response.setContentType("text/html; charset=UTF-8"); PrintWriter out = response.getWriter(); //Servlet3.0中新引入的方法，用来处理multipart/form-data类型编码的表单 Part part = request.getPart("file"); //获取HTTP头信息headerInfo=（form-data; name="file" filename="文件名"） String headerInfo = part.getHeader("content-disposition"); System.out.println("headinfo ==&gt; " + headerInfo); //从HTTP头信息中获取文件名fileName=（文件名） String fileName = headerInfo.substring(headerInfo.lastIndexOf("=") + 2, headerInfo.length() - 1); //获得存储上传文件的文件夹路径 String fileSavingFolder = this.getServletContext().getRealPath("/upload"); //获得存储上传文件的完整路径（文件夹路径+文件名） //文件夹位置固定，文件夹采用与上传文件的原始名字相同 String fileSavingPath = fileSavingFolder + File.separator + fileName; System.out.println("filePath ==&gt; " + fileSavingPath); //如果存储上传文件的文件夹不存在，则创建文件夹 File f = new File(fileSavingFolder + File.separator); if(!f.exists())&#123; f.mkdirs(); &#125; //将上传的文件内容写入服务器文件中 part.write(fileSavingPath); //输出上传成功信息 out.println("文件上传成功~！"); &#125;&#125;多文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package upload;import java.io.File;import java.io.IOException;import java.io.PrintWriter;import java.util.Collection;import java.util.Iterator;import javax.servlet.ServletException;import javax.servlet.annotation.MultipartConfig;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.Part;@WebServlet("/uploadmany")@MultipartConfig //Servlet3中处理multipart/form-data类型请求的注解public class UploadMany extends HttpServlet&#123; private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException&#123; this.doPost(request, response); &#125; protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException&#123; //说明输入的请求信息采用UTF-8编码方式 request.setCharacterEncoding("utf-8"); response.setContentType("text/html; charset=UTF-8"); PrintWriter out = response.getWriter(); //Servlet3.0中新引入的方法，用来处理multipart/form-data类型编码的表单 Collection&lt;Part&gt; parts = request.getParts(); Iterator&lt;Part&gt; iterator = parts.iterator(); //获得存储上传文件的文件夹路径 String fileSavingFolder = this.getServletContext().getRealPath("/upload"); while(iterator.hasNext()) &#123; Part next = iterator.next(); //获得文件大小 long size = next.getSize(); System.out.println(size); //获取HTTP头信息headerInfo=（form-data; name="file" filename="文件名"） String headerInfo = next.getHeader("content-disposition"); System.out.println("headinfo ==&gt; " + headerInfo); //从HTTP头信息中获取文件名fileName=（文件名） String fileName = headerInfo.substring(headerInfo.lastIndexOf("=") + 2, headerInfo.length() - 1); //获得存储上传文件的完整路径（文件夹路径+文件名） //文件夹位置固定，文件夹采用与上传文件的原始名字相同 String fileSavingPath = fileSavingFolder + File.separator + fileName; System.out.println("filePath ==&gt; " + fileSavingPath); //如果存储上传文件的文件夹不存在，则创建文件夹 File f = new File(fileSavingFolder + File.separator); if(!f.exists())&#123; f.mkdirs(); &#125; //将上传的文件内容写入服务器文件中 next.write(fileSavingPath); &#125; //输出上传成功信息 out.println("文件上传成功~！"); &#125;&#125;demo下载：https://github.com/isjinhao/servlet3-upload-and-download。]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
        <tag>servlet3</tag>
        <tag>文件上传</tag>
        <tag>文件下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Face++人脸识别系统项目结构]]></title>
    <url>%2F2019%2F%E5%9F%BA%E4%BA%8EFacepp%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[要求AngularJS+Bootstrap3+SSM+Opencv+Face++开发一套人脸签到系统，使用电脑摄像头获取人脸并进行签到。识别方式验证方式：人脸图片+保存人脸至服务器+到场离场时间。到场离场时间：第一次截取到的人脸是到场，最后一次截取到的人脸是离场。人脸图片、保存至服务器：使用Opencv 识别图片中的人脸得到所有的Rect，一个人脸在图片中的位置会储存在一个Rect（x轴、y轴、width、height）对象中。然后循环以下做法：剪切出每个Rect在图片中对应的子图片，调用Face++的接口搜索与子图片最相近的一个人，如果最相近的人置信度 &gt;= 80，认为是同一个人，复制一份原图片，然后把Rect对应的位置画上框，保存在指定文件夹（每个活动有唯一的存储文件夹）下，如果置信度 &lt; 80，处理下一个Rect。上传方式：客户端一秒截一张图上传。实体 &amp; 表结构组织创建活动，学生参与活动。活动分为两种，使用组的和不使用组的。使用组的应用场景是教学班签到，教学班的人数是固定的，不属于教学班的人即使识别成功也不算为签到。不使用组的应用场景是社团活动签到，只要识别成功，就算为签到。组织功能组织注册发布活动查看组信息查看举办的活动信息：查看每场活动用户：录入和导出记录签到用户用户注册###用户查看签到用户查看组管理员]]></content>
      <categories>
        <category>大学生创新创业项目</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Face++</tag>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown数学公式]]></title>
    <url>%2F2019%2Fmarkdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[符号代码符号代码$\sum$\sum$\sum_{i=0}^n$\sum_{i=0}^n$\pm$\pm$\div$\div$\cdot$\cdot$\times$\times$\mid$\mid$\circ$\circ$\ast$\ast$\bigotimes$\bigotimes$\bigoplus$\bigoplus$\leq$\leq$\geq$\geq$\neq$\neq$\approx$\approx$\prod$\prod$\coprod$\coprod$\cdots$\cdots$\int$\int$\iint$\iint$\oint$\oint$\infty$\infty$\nabla$\nabla$\because$\because$\therefore$\therefore$\forall$\forall$\exists$\exists$\not=$\not=$\not&gt;$\not&gt;$\leq$\leq$\geq$\geq$\not\subset$\not\subset$\emptyset$\emptyset$\in$\in$\notin$\notin$\subset$\subset$\subseteq$\subseteq$\bigcup$\bigcup$\bigcap$\bigcap$\bigvee$\bigvee$\bigwedge$\bigwedge$\biguplus$\biguplus$\bigsqcup$\bigsqcup$\hat{y}$\hat{y}$\check{y}$\check{y}$\breve{y}$\breve{y}$\overline{a+b+c+d}$\overline{a+b+c+d}$\underline{a+b+c+d}$\underline{a+b+c+d}$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$\uparrow$\uparrow$\downarrow$\downarrow$\Uparrow$\Uparrow$\Downarrow$\Downarrow$\rightarrow$\rightarrow$\leftarrow$\leftarrow$\Rightarrow$\Rightarrow$\Longleftarrow$\Longleftarrow$\longleftarrow$\longleftarrow$\longrightarrow$\longrightarrow$\Longrightarrow$\Longrightarrow$\alpha$\alpha$\beta$\beta$\gamma$\gamma$\Gamma$\Gamma$\delta$\delta$\Delta$\Delta$\epsilon$\epsilon$\varepsilon$\varepsilon$\zeta$\zeta$\eta$\eta$\theta$\theta$\Theta$\Theta$\vartheta$\vartheta$\iota$\iota$\pi$\pi$\phi$\phi$\Phi$\Phi$\psi$\psi$\Psi$\Psi$\omega$\omega$\Omega$\Omega$\chi$\chi$\rho$\rho$\omicron$\omicron$\sigma$\sigma$\Sigma$\Sigma$\nu$\nu$\xi$\xi$\tau$\tau$\lambda$\lambda$\Lambda$\Lambda$\mu$\mu$\partial$\partial$\lbrace$\lbrace$\rbrace$\rbrace$\overline{a}$\overline{a}$\frac{7x+5}{1+y^2}$\frac{7x+5}{1+y^2}$\int ^2_3 x^2 {\rm d}x$\int ^2_3 x^2 {\rm d}x$\sqrt[n]{3}$\sqrt[n]{3}$\vec{a} \cdot \vec{b}=0$\vec{a} \cdot \vec{b}=0$\iiint$\iiint$\oint$\oint$\lim$\lim$\infty$\infty$\partial$\partial$\ln15$\ln15$\log_2^{10}$\log_2^{10}]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>Latex</tag>
      </tags>
  </entry>
</search>
